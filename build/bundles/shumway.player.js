/**
 * @license
 * Copyright 2014 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Manifest player
console.time("Load Player Dependencies");
console.time("Load Shared Dependencies");
var jsGlobal = (function () {
    return this || (1, eval)('this//# sourceURL=jsGlobal-getter');
})();
var inBrowser = typeof window !== 'undefined' && 'document' in window && 'plugins' in window.document;
var inFirefox = typeof navigator !== 'undefined' && navigator.userAgent.indexOf('Firefox') >= 0;
var release = false;
var profile = false;
function dumpLine(line) {
    if (typeof dump !== "undefined") {
        dump(line + "\n");
    }
}
if (!jsGlobal.performance) {
    jsGlobal.performance = {};
}
if (!jsGlobal.performance.now) {
    jsGlobal.performance.now = typeof dateNow !== 'undefined' ? dateNow : Date.now;
}
var START_TIME = performance.now();
var Shumway;
(function (Shumway) {
    (function (CharacterCodes) {
        CharacterCodes[CharacterCodes["_0"] = 48] = "_0";
        CharacterCodes[CharacterCodes["_1"] = 49] = "_1";
        CharacterCodes[CharacterCodes["_2"] = 50] = "_2";
        CharacterCodes[CharacterCodes["_3"] = 51] = "_3";
        CharacterCodes[CharacterCodes["_4"] = 52] = "_4";
        CharacterCodes[CharacterCodes["_5"] = 53] = "_5";
        CharacterCodes[CharacterCodes["_6"] = 54] = "_6";
        CharacterCodes[CharacterCodes["_7"] = 55] = "_7";
        CharacterCodes[CharacterCodes["_8"] = 56] = "_8";
        CharacterCodes[CharacterCodes["_9"] = 57] = "_9";
    })(Shumway.CharacterCodes || (Shumway.CharacterCodes = {}));
    var CharacterCodes = Shumway.CharacterCodes;
    Shumway.UINT32_CHAR_BUFFER_LENGTH = 10;
    Shumway.UINT32_MAX = 0xFFFFFFFF;
    Shumway.UINT32_MAX_DIV_10 = 0x19999999;
    Shumway.UINT32_MAX_MOD_10 = 0x5;
    function isString(value) {
        return typeof value === "string";
    }
    Shumway.isString = isString;
    function isFunction(value) {
        return typeof value === "function";
    }
    Shumway.isFunction = isFunction;
    function isNumber(value) {
        return typeof value === "number";
    }
    Shumway.isNumber = isNumber;
    function isInteger(value) {
        return (value | 0) === value;
    }
    Shumway.isInteger = isInteger;
    function isArray(value) {
        return value instanceof Array;
    }
    Shumway.isArray = isArray;
    function isNumberOrString(value) {
        return typeof value === "number" || typeof value === "string";
    }
    Shumway.isNumberOrString = isNumberOrString;
    function isObject(value) {
        return typeof value === "object" || typeof value === 'function';
    }
    Shumway.isObject = isObject;
    function toNumber(x) {
        return +x;
    }
    Shumway.toNumber = toNumber;
    function isNumericString(value) {
        return String(Number(value)) === value;
    }
    Shumway.isNumericString = isNumericString;
    function isNumeric(value) {
        if (typeof value === "number") {
            return true;
        }
        if (typeof value === "string") {
            var c = value.charCodeAt(0);
            if ((65 <= c && c <= 90) || (97 <= c && c <= 122) || (c === 36) || (c === 95)) {
                return false;
            }
            return isIndex(value) || isNumericString(value);
        }
        return false;
    }
    Shumway.isNumeric = isNumeric;
    function isIndex(value) {
        var index = 0;
        if (typeof value === "number") {
            index = (value | 0);
            if (value === index && index >= 0) {
                return true;
            }
            return value >>> 0 === value;
        }
        if (typeof value !== "string") {
            return false;
        }
        var length = value.length;
        if (length === 0) {
            return false;
        }
        if (value === "0") {
            return true;
        }
        if (length > Shumway.UINT32_CHAR_BUFFER_LENGTH) {
            return false;
        }
        var i = 0;
        index = value.charCodeAt(i++) - 48 /* _0 */;
        if (index < 1 || index > 9) {
            return false;
        }
        var oldIndex = 0;
        var c = 0;
        while (i < length) {
            c = value.charCodeAt(i++) - 48 /* _0 */;
            if (c < 0 || c > 9) {
                return false;
            }
            oldIndex = index;
            index = 10 * index + c;
        }
        if ((oldIndex < Shumway.UINT32_MAX_DIV_10) || (oldIndex === Shumway.UINT32_MAX_DIV_10 && c <= Shumway.UINT32_MAX_MOD_10)) {
            return true;
        }
        return false;
    }
    Shumway.isIndex = isIndex;
    function isNullOrUndefined(value) {
        return value == undefined;
    }
    Shumway.isNullOrUndefined = isNullOrUndefined;
    var Debug;
    (function (Debug) {
        function error(message) {
            console.error(message);
            throw new Error(message);
        }
        Debug.error = error;
        function assert(condition, message) {
            if (message === void 0) { message = "assertion failed"; }
            if (condition === "") {
                condition = true;
            }
            if (!condition) {
                if (typeof console !== 'undefined' && 'assert' in console) {
                    console.assert(false, message);
                    throw new Error(message);
                }
                else {
                    Debug.error(message.toString());
                }
            }
        }
        Debug.assert = assert;
        function assertUnreachable(msg) {
            var location = new Error().stack.split('\n')[1];
            throw new Error("Reached unreachable location " + location + msg);
        }
        Debug.assertUnreachable = assertUnreachable;
        function assertNotImplemented(condition, message) {
            if (!condition) {
                Debug.error("notImplemented: " + message);
            }
        }
        Debug.assertNotImplemented = assertNotImplemented;
        function warning(message, arg1, arg2) {
            release || console.warn.apply(console, arguments);
        }
        Debug.warning = warning;
        function notUsed(message) {
            release || Debug.assert(false, "Not Used " + message);
        }
        Debug.notUsed = notUsed;
        function notImplemented(message) {
            release || Debug.assert(false, "Not Implemented " + message);
        }
        Debug.notImplemented = notImplemented;
        function dummyConstructor(message) {
            release || Debug.assert(false, "Dummy Constructor: " + message);
        }
        Debug.dummyConstructor = dummyConstructor;
        function abstractMethod(message) {
            release || Debug.assert(false, "Abstract Method " + message);
        }
        Debug.abstractMethod = abstractMethod;
        var somewhatImplementedCache = {};
        function somewhatImplemented(message) {
            if (somewhatImplementedCache[message]) {
                return;
            }
            somewhatImplementedCache[message] = true;
            Debug.warning("somewhatImplemented: " + message);
        }
        Debug.somewhatImplemented = somewhatImplemented;
        function unexpected(message) {
            Debug.assert(false, "Unexpected: " + message);
        }
        Debug.unexpected = unexpected;
        function unexpectedCase(message) {
            Debug.assert(false, "Unexpected Case: " + message);
        }
        Debug.unexpectedCase = unexpectedCase;
    })(Debug = Shumway.Debug || (Shumway.Debug = {}));
    function getTicks() {
        return performance.now();
    }
    Shumway.getTicks = getTicks;
    var ArrayUtilities;
    (function (ArrayUtilities) {
        var assert = Shumway.Debug.assert;
        function popManyInto(src, count, dst) {
            release || assert(src.length >= count);
            for (var i = count - 1; i >= 0; i--) {
                dst[i] = src.pop();
            }
            dst.length = count;
        }
        ArrayUtilities.popManyInto = popManyInto;
        function popMany(array, count) {
            release || assert(array.length >= count);
            var start = array.length - count;
            var result = array.slice(start, this.length);
            array.length = start;
            return result;
        }
        ArrayUtilities.popMany = popMany;
        function popManyIntoVoid(array, count) {
            release || assert(array.length >= count);
            array.length = array.length - count;
        }
        ArrayUtilities.popManyIntoVoid = popManyIntoVoid;
        function pushMany(dst, src) {
            for (var i = 0; i < src.length; i++) {
                dst.push(src[i]);
            }
        }
        ArrayUtilities.pushMany = pushMany;
        function top(array) {
            return array.length && array[array.length - 1];
        }
        ArrayUtilities.top = top;
        function last(array) {
            return array.length && array[array.length - 1];
        }
        ArrayUtilities.last = last;
        function peek(array) {
            release || assert(array.length > 0);
            return array[array.length - 1];
        }
        ArrayUtilities.peek = peek;
        function indexOf(array, value) {
            for (var i = 0, j = array.length; i < j; i++) {
                if (array[i] === value) {
                    return i;
                }
            }
            return -1;
        }
        ArrayUtilities.indexOf = indexOf;
        function equals(a, b) {
            if (a.length !== b.length) {
                return false;
            }
            for (var i = 0; i < a.length; i++) {
                if (a[i] !== b[i]) {
                    return false;
                }
            }
            return true;
        }
        ArrayUtilities.equals = equals;
        function pushUnique(array, value) {
            for (var i = 0, j = array.length; i < j; i++) {
                if (array[i] === value) {
                    return i;
                }
            }
            array.push(value);
            return array.length - 1;
        }
        ArrayUtilities.pushUnique = pushUnique;
        function unique(array) {
            var result = [];
            for (var i = 0; i < array.length; i++) {
                pushUnique(result, array[i]);
            }
            return result;
        }
        ArrayUtilities.unique = unique;
        function copyFrom(dst, src) {
            dst.length = 0;
            ArrayUtilities.pushMany(dst, src);
        }
        ArrayUtilities.copyFrom = copyFrom;
        function ensureTypedArrayCapacity(array, capacity) {
            if (array.length < capacity) {
                var oldArray = array;
                array = new array.constructor(Shumway.IntegerUtilities.nearestPowerOfTwo(capacity));
                array.set(oldArray, 0);
            }
            return array;
        }
        ArrayUtilities.ensureTypedArrayCapacity = ensureTypedArrayCapacity;
        var ArrayWriter = (function () {
            function ArrayWriter(initialCapacity) {
                if (initialCapacity === void 0) { initialCapacity = 16; }
                this._u8 = null;
                this._u16 = null;
                this._i32 = null;
                this._f32 = null;
                this._offset = 0;
                this.ensureCapacity(initialCapacity);
            }
            ArrayWriter.prototype.reset = function () {
                this._offset = 0;
            };
            Object.defineProperty(ArrayWriter.prototype, "offset", {
                get: function () {
                    return this._offset;
                },
                enumerable: true,
                configurable: true
            });
            ArrayWriter.prototype.getIndex = function (size) {
                release || assert(size === 1 || size === 2 || size === 4 || size === 8 || size === 16);
                var index = this._offset / size;
                release || assert((index | 0) === index);
                return index;
            };
            ArrayWriter.prototype.ensureAdditionalCapacity = function (size) {
                this.ensureCapacity(this._offset + size);
            };
            ArrayWriter.prototype.ensureCapacity = function (minCapacity) {
                if (!this._u8) {
                    this._u8 = new Uint8Array(minCapacity);
                }
                else if (this._u8.length > minCapacity) {
                    return;
                }
                var oldCapacity = this._u8.length;
                var newCapacity = oldCapacity * 2;
                if (newCapacity < minCapacity) {
                    newCapacity = minCapacity;
                }
                var u8 = new Uint8Array(newCapacity);
                u8.set(this._u8, 0);
                this._u8 = u8;
                this._u16 = new Uint16Array(u8.buffer);
                this._i32 = new Int32Array(u8.buffer);
                this._f32 = new Float32Array(u8.buffer);
            };
            ArrayWriter.prototype.writeInt = function (v) {
                release || assert((this._offset & 0x3) === 0);
                this.ensureCapacity(this._offset + 4);
                this.writeIntUnsafe(v);
            };
            ArrayWriter.prototype.writeIntAt = function (v, offset) {
                release || assert(offset >= 0 && offset <= this._offset);
                release || assert((offset & 0x3) === 0);
                this.ensureCapacity(offset + 4);
                var index = offset >> 2;
                this._i32[index] = v;
            };
            ArrayWriter.prototype.writeIntUnsafe = function (v) {
                var index = this._offset >> 2;
                this._i32[index] = v;
                this._offset += 4;
            };
            ArrayWriter.prototype.writeFloat = function (v) {
                release || assert((this._offset & 0x3) === 0);
                this.ensureCapacity(this._offset + 4);
                this.writeFloatUnsafe(v);
            };
            ArrayWriter.prototype.writeFloatUnsafe = function (v) {
                var index = this._offset >> 2;
                this._f32[index] = v;
                this._offset += 4;
            };
            ArrayWriter.prototype.write4Floats = function (a, b, c, d) {
                release || assert((this._offset & 0x3) === 0);
                this.ensureCapacity(this._offset + 16);
                this.write4FloatsUnsafe(a, b, c, d);
            };
            ArrayWriter.prototype.write4FloatsUnsafe = function (a, b, c, d) {
                var index = this._offset >> 2;
                this._f32[index + 0] = a;
                this._f32[index + 1] = b;
                this._f32[index + 2] = c;
                this._f32[index + 3] = d;
                this._offset += 16;
            };
            ArrayWriter.prototype.write6Floats = function (a, b, c, d, e, f) {
                release || assert((this._offset & 0x3) === 0);
                this.ensureCapacity(this._offset + 24);
                this.write6FloatsUnsafe(a, b, c, d, e, f);
            };
            ArrayWriter.prototype.write6FloatsUnsafe = function (a, b, c, d, e, f) {
                var index = this._offset >> 2;
                this._f32[index + 0] = a;
                this._f32[index + 1] = b;
                this._f32[index + 2] = c;
                this._f32[index + 3] = d;
                this._f32[index + 4] = e;
                this._f32[index + 5] = f;
                this._offset += 24;
            };
            ArrayWriter.prototype.subF32View = function () {
                return this._f32.subarray(0, this._offset >> 2);
            };
            ArrayWriter.prototype.subI32View = function () {
                return this._i32.subarray(0, this._offset >> 2);
            };
            ArrayWriter.prototype.subU16View = function () {
                return this._u16.subarray(0, this._offset >> 1);
            };
            ArrayWriter.prototype.subU8View = function () {
                return this._u8.subarray(0, this._offset);
            };
            ArrayWriter.prototype.hashWords = function (hash, offset, length) {
                var i32 = this._i32;
                for (var i = 0; i < length; i++) {
                    hash = (((31 * hash) | 0) + i32[i]) | 0;
                }
                return hash;
            };
            ArrayWriter.prototype.reserve = function (size) {
                size = (size + 3) & ~0x3;
                this.ensureCapacity(this._offset + size);
                this._offset += size;
            };
            return ArrayWriter;
        })();
        ArrayUtilities.ArrayWriter = ArrayWriter;
    })(ArrayUtilities = Shumway.ArrayUtilities || (Shumway.ArrayUtilities = {}));
    var ArrayReader = (function () {
        function ArrayReader(buffer) {
            this._u8 = new Uint8Array(buffer);
            this._u16 = new Uint16Array(buffer);
            this._i32 = new Int32Array(buffer);
            this._f32 = new Float32Array(buffer);
            this._offset = 0;
        }
        Object.defineProperty(ArrayReader.prototype, "offset", {
            get: function () {
                return this._offset;
            },
            enumerable: true,
            configurable: true
        });
        ArrayReader.prototype.isEmpty = function () {
            return this._offset === this._u8.length;
        };
        ArrayReader.prototype.readInt = function () {
            release || Debug.assert((this._offset & 0x3) === 0);
            release || Debug.assert(this._offset <= this._u8.length - 4);
            var v = this._i32[this._offset >> 2];
            this._offset += 4;
            return v;
        };
        ArrayReader.prototype.readFloat = function () {
            release || Debug.assert((this._offset & 0x3) === 0);
            release || Debug.assert(this._offset <= this._u8.length - 4);
            var v = this._f32[this._offset >> 2];
            this._offset += 4;
            return v;
        };
        return ArrayReader;
    })();
    Shumway.ArrayReader = ArrayReader;
    var ObjectUtilities;
    (function (ObjectUtilities) {
        function boxValue(value) {
            if (isNullOrUndefined(value) || isObject(value)) {
                return value;
            }
            return Object(value);
        }
        ObjectUtilities.boxValue = boxValue;
        function toKeyValueArray(object) {
            var hasOwnProperty = Object.prototype.hasOwnProperty;
            var array = [];
            for (var k in object) {
                if (hasOwnProperty.call(object, k)) {
                    array.push([k, object[k]]);
                }
            }
            return array;
        }
        ObjectUtilities.toKeyValueArray = toKeyValueArray;
        function isPrototypeWriteable(object) {
            return Object.getOwnPropertyDescriptor(object, "prototype").writable;
        }
        ObjectUtilities.isPrototypeWriteable = isPrototypeWriteable;
        function hasOwnProperty(object, name) {
            return Object.prototype.hasOwnProperty.call(object, name);
        }
        ObjectUtilities.hasOwnProperty = hasOwnProperty;
        function propertyIsEnumerable(object, name) {
            return Object.prototype.propertyIsEnumerable.call(object, name);
        }
        ObjectUtilities.propertyIsEnumerable = propertyIsEnumerable;
        function getOwnPropertyDescriptor(object, name) {
            return Object.getOwnPropertyDescriptor(object, name);
        }
        ObjectUtilities.getOwnPropertyDescriptor = getOwnPropertyDescriptor;
        function hasOwnGetter(object, name) {
            var d = Object.getOwnPropertyDescriptor(object, name);
            return !!(d && d.get);
        }
        ObjectUtilities.hasOwnGetter = hasOwnGetter;
        function getOwnGetter(object, name) {
            var d = Object.getOwnPropertyDescriptor(object, name);
            return d ? d.get : null;
        }
        ObjectUtilities.getOwnGetter = getOwnGetter;
        function hasOwnSetter(object, name) {
            var d = Object.getOwnPropertyDescriptor(object, name);
            return !!(d && !!d.set);
        }
        ObjectUtilities.hasOwnSetter = hasOwnSetter;
        function createMap() {
            return Object.create(null);
        }
        ObjectUtilities.createMap = createMap;
        function createArrayMap() {
            return [];
        }
        ObjectUtilities.createArrayMap = createArrayMap;
        function defineReadOnlyProperty(object, name, value) {
            Object.defineProperty(object, name, {
                value: value,
                writable: false,
                configurable: true,
                enumerable: false
            });
        }
        ObjectUtilities.defineReadOnlyProperty = defineReadOnlyProperty;
        function getOwnPropertyDescriptors(object) {
            var o = ObjectUtilities.createMap();
            var properties = Object.getOwnPropertyNames(object);
            for (var i = 0; i < properties.length; i++) {
                o[properties[i]] = Object.getOwnPropertyDescriptor(object, properties[i]);
            }
            return o;
        }
        ObjectUtilities.getOwnPropertyDescriptors = getOwnPropertyDescriptors;
        function cloneObject(object) {
            var clone = Object.create(Object.getPrototypeOf(object));
            copyOwnProperties(clone, object);
            return clone;
        }
        ObjectUtilities.cloneObject = cloneObject;
        function copyProperties(object, template) {
            for (var property in template) {
                object[property] = template[property];
            }
        }
        ObjectUtilities.copyProperties = copyProperties;
        function copyOwnProperties(object, template) {
            for (var property in template) {
                if (hasOwnProperty(template, property)) {
                    object[property] = template[property];
                }
            }
        }
        ObjectUtilities.copyOwnProperties = copyOwnProperties;
        function copyOwnPropertyDescriptors(object, template, overwrite) {
            if (overwrite === void 0) { overwrite = true; }
            for (var property in template) {
                if (hasOwnProperty(template, property)) {
                    var descriptor = Object.getOwnPropertyDescriptor(template, property);
                    if (!overwrite && hasOwnProperty(object, property)) {
                        continue;
                    }
                    release || Debug.assert(descriptor);
                    try {
                        Object.defineProperty(object, property, descriptor);
                    }
                    catch (e) {
                    }
                }
            }
        }
        ObjectUtilities.copyOwnPropertyDescriptors = copyOwnPropertyDescriptors;
        function getLatestGetterOrSetterPropertyDescriptor(object, name) {
            var descriptor = {};
            while (object) {
                var tmp = Object.getOwnPropertyDescriptor(object, name);
                if (tmp) {
                    descriptor.get = descriptor.get || tmp.get;
                    descriptor.set = descriptor.set || tmp.set;
                }
                if (descriptor.get && descriptor.set) {
                    break;
                }
                object = Object.getPrototypeOf(object);
            }
            return descriptor;
        }
        ObjectUtilities.getLatestGetterOrSetterPropertyDescriptor = getLatestGetterOrSetterPropertyDescriptor;
        function defineNonEnumerableGetterOrSetter(obj, name, value, isGetter) {
            var descriptor = ObjectUtilities.getLatestGetterOrSetterPropertyDescriptor(obj, name);
            descriptor.configurable = true;
            descriptor.enumerable = false;
            if (isGetter) {
                descriptor.get = value;
            }
            else {
                descriptor.set = value;
            }
            Object.defineProperty(obj, name, descriptor);
        }
        ObjectUtilities.defineNonEnumerableGetterOrSetter = defineNonEnumerableGetterOrSetter;
        function defineNonEnumerableGetter(obj, name, getter) {
            Object.defineProperty(obj, name, { get: getter, configurable: true, enumerable: false });
        }
        ObjectUtilities.defineNonEnumerableGetter = defineNonEnumerableGetter;
        function defineNonEnumerableSetter(obj, name, setter) {
            Object.defineProperty(obj, name, { set: setter, configurable: true, enumerable: false });
        }
        ObjectUtilities.defineNonEnumerableSetter = defineNonEnumerableSetter;
        function defineNonEnumerableProperty(obj, name, value) {
            Object.defineProperty(obj, name, { value: value, writable: true, configurable: true, enumerable: false });
        }
        ObjectUtilities.defineNonEnumerableProperty = defineNonEnumerableProperty;
        function defineNonEnumerableForwardingProperty(obj, name, otherName) {
            Object.defineProperty(obj, name, {
                get: FunctionUtilities.makeForwardingGetter(otherName),
                set: FunctionUtilities.makeForwardingSetter(otherName),
                writable: true,
                configurable: true,
                enumerable: false
            });
        }
        ObjectUtilities.defineNonEnumerableForwardingProperty = defineNonEnumerableForwardingProperty;
        function defineNewNonEnumerableProperty(obj, name, value) {
            release || Debug.assert(!Object.prototype.hasOwnProperty.call(obj, name), "Property: " + name + " already exits.");
            ObjectUtilities.defineNonEnumerableProperty(obj, name, value);
        }
        ObjectUtilities.defineNewNonEnumerableProperty = defineNewNonEnumerableProperty;
        function createPublicAliases(obj, names) {
            var prop = {
                value: null,
                writable: true,
                configurable: true,
                enumerable: false
            };
            for (var i = 0; i < names.length; i++) {
                var name = names[i];
                prop.value = obj[name];
                Object.defineProperty(obj, '$Bg' + name, prop);
            }
        }
        ObjectUtilities.createPublicAliases = createPublicAliases;
    })(ObjectUtilities = Shumway.ObjectUtilities || (Shumway.ObjectUtilities = {}));
    var FunctionUtilities;
    (function (FunctionUtilities) {
        function makeForwardingGetter(target) {
            return new Function("return this[\"" + target + "\"]//# sourceURL=fwd-get-" + target + ".as");
        }
        FunctionUtilities.makeForwardingGetter = makeForwardingGetter;
        function makeForwardingSetter(target) {
            return new Function("value", "this[\"" + target + "\"] = value;" + "//# sourceURL=fwd-set-" + target + ".as");
        }
        FunctionUtilities.makeForwardingSetter = makeForwardingSetter;
        function bindSafely(fn, object) {
            release || Debug.assert(!fn.boundTo && object);
            var f = fn.bind(object);
            f.boundTo = object;
            return f;
        }
        FunctionUtilities.bindSafely = bindSafely;
    })(FunctionUtilities = Shumway.FunctionUtilities || (Shumway.FunctionUtilities = {}));
    var StringUtilities;
    (function (StringUtilities) {
        var assert = Shumway.Debug.assert;
        function repeatString(c, n) {
            var s = "";
            for (var i = 0; i < n; i++) {
                s += c;
            }
            return s;
        }
        StringUtilities.repeatString = repeatString;
        function memorySizeToString(value) {
            value |= 0;
            var K = 1024;
            var M = K * K;
            if (value < K) {
                return value + " B";
            }
            else if (value < M) {
                return (value / K).toFixed(2) + "KB";
            }
            else {
                return (value / M).toFixed(2) + "MB";
            }
        }
        StringUtilities.memorySizeToString = memorySizeToString;
        function toSafeString(value) {
            if (typeof value === "string") {
                return "\"" + value + "\"";
            }
            if (typeof value === "number" || typeof value === "boolean") {
                return String(value);
            }
            if (value instanceof Array) {
                return "[] " + value.length;
            }
            return typeof value;
        }
        StringUtilities.toSafeString = toSafeString;
        function toSafeArrayString(array) {
            var str = [];
            for (var i = 0; i < array.length; i++) {
                str.push(toSafeString(array[i]));
            }
            return str.join(", ");
        }
        StringUtilities.toSafeArrayString = toSafeArrayString;
        function utf8decode(str) {
            var bytes = new Uint8Array(str.length * 4);
            var b = 0;
            for (var i = 0, j = str.length; i < j; i++) {
                var code = str.charCodeAt(i);
                if (code <= 0x7f) {
                    bytes[b++] = code;
                    continue;
                }
                if (0xD800 <= code && code <= 0xDBFF) {
                    var codeLow = str.charCodeAt(i + 1);
                    if (0xDC00 <= codeLow && codeLow <= 0xDFFF) {
                        code = ((code & 0x3FF) << 10) + (codeLow & 0x3FF) + 0x10000;
                        ++i;
                    }
                }
                if ((code & 0xFFE00000) !== 0) {
                    bytes[b++] = 0xF8 | ((code >>> 24) & 0x03);
                    bytes[b++] = 0x80 | ((code >>> 18) & 0x3F);
                    bytes[b++] = 0x80 | ((code >>> 12) & 0x3F);
                    bytes[b++] = 0x80 | ((code >>> 6) & 0x3F);
                    bytes[b++] = 0x80 | (code & 0x3F);
                }
                else if ((code & 0xFFFF0000) !== 0) {
                    bytes[b++] = 0xF0 | ((code >>> 18) & 0x07);
                    bytes[b++] = 0x80 | ((code >>> 12) & 0x3F);
                    bytes[b++] = 0x80 | ((code >>> 6) & 0x3F);
                    bytes[b++] = 0x80 | (code & 0x3F);
                }
                else if ((code & 0xFFFFF800) !== 0) {
                    bytes[b++] = 0xE0 | ((code >>> 12) & 0x0F);
                    bytes[b++] = 0x80 | ((code >>> 6) & 0x3F);
                    bytes[b++] = 0x80 | (code & 0x3F);
                }
                else {
                    bytes[b++] = 0xC0 | ((code >>> 6) & 0x1F);
                    bytes[b++] = 0x80 | (code & 0x3F);
                }
            }
            return bytes.subarray(0, b);
        }
        StringUtilities.utf8decode = utf8decode;
        function utf8encode(bytes) {
            var j = 0, str = "";
            while (j < bytes.length) {
                var b1 = bytes[j++] & 0xFF;
                if (b1 <= 0x7F) {
                    str += String.fromCharCode(b1);
                }
                else {
                    var currentPrefix = 0xC0;
                    var validBits = 5;
                    do {
                        var mask = (currentPrefix >> 1) | 0x80;
                        if ((b1 & mask) === currentPrefix)
                            break;
                        currentPrefix = (currentPrefix >> 1) | 0x80;
                        --validBits;
                    } while (validBits >= 0);
                    if (validBits <= 0) {
                        str += String.fromCharCode(b1);
                        continue;
                    }
                    var code = (b1 & ((1 << validBits) - 1));
                    var invalid = false;
                    for (var i = 5; i >= validBits; --i) {
                        var bi = bytes[j++];
                        if ((bi & 0xC0) != 0x80) {
                            invalid = true;
                            break;
                        }
                        code = (code << 6) | (bi & 0x3F);
                    }
                    if (invalid) {
                        for (var k = j - (7 - i); k < j; ++k) {
                            str += String.fromCharCode(bytes[k] & 255);
                        }
                        continue;
                    }
                    if (code >= 0x10000) {
                        str += String.fromCharCode((((code - 0x10000) >> 10) & 0x3FF) | 0xD800, (code & 0x3FF) | 0xDC00);
                    }
                    else {
                        str += String.fromCharCode(code);
                    }
                }
            }
            return str;
        }
        StringUtilities.utf8encode = utf8encode;
        function base64ArrayBuffer(arrayBuffer) {
            var base64 = '';
            var encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
            var bytes = new Uint8Array(arrayBuffer);
            var byteLength = bytes.byteLength;
            var byteRemainder = byteLength % 3;
            var mainLength = byteLength - byteRemainder;
            var a, b, c, d;
            var chunk;
            for (var i = 0; i < mainLength; i = i + 3) {
                chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];
                a = (chunk & 16515072) >> 18;
                b = (chunk & 258048) >> 12;
                c = (chunk & 4032) >> 6;
                d = chunk & 63;
                base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d];
            }
            if (byteRemainder == 1) {
                chunk = bytes[mainLength];
                a = (chunk & 252) >> 2;
                b = (chunk & 3) << 4;
                base64 += encodings[a] + encodings[b] + '==';
            }
            else if (byteRemainder == 2) {
                chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1];
                a = (chunk & 64512) >> 10;
                b = (chunk & 1008) >> 4;
                c = (chunk & 15) << 2;
                base64 += encodings[a] + encodings[b] + encodings[c] + '=';
            }
            return base64;
        }
        StringUtilities.base64ArrayBuffer = base64ArrayBuffer;
        function escapeString(str) {
            if (str !== undefined) {
                str = str.replace(/[^\w$]/gi, "$");
                if (/^\d/.test(str)) {
                    str = '$' + str;
                }
            }
            return str;
        }
        StringUtilities.escapeString = escapeString;
        function fromCharCodeArray(buffer) {
            var str = "", SLICE = 1024 * 16;
            for (var i = 0; i < buffer.length; i += SLICE) {
                var chunk = Math.min(buffer.length - i, SLICE);
                str += String.fromCharCode.apply(null, buffer.subarray(i, i + chunk));
            }
            return str;
        }
        StringUtilities.fromCharCodeArray = fromCharCodeArray;
        var _encoding = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789$_';
        function variableLengthEncodeInt32(n) {
            var e = _encoding;
            var bitCount = (32 - Math.clz32(n));
            release || assert(bitCount <= 32, bitCount);
            var l = Math.ceil(bitCount / 6);
            var s = e[l];
            for (var i = l - 1; i >= 0; i--) {
                var offset = (i * 6);
                s += e[(n >> offset) & 0x3F];
            }
            release || assert(StringUtilities.variableLengthDecodeInt32(s) === n, n + " : " + s + " - " + l + " bits: " + bitCount);
            return s;
        }
        StringUtilities.variableLengthEncodeInt32 = variableLengthEncodeInt32;
        function toEncoding(n) {
            return _encoding[n];
        }
        StringUtilities.toEncoding = toEncoding;
        function fromEncoding(s) {
            var c = s.charCodeAt(0);
            var e = 0;
            if (c >= 65 && c <= 90) {
                return c - 65;
            }
            else if (c >= 97 && c <= 122) {
                return c - 71;
            }
            else if (c >= 48 && c <= 57) {
                return c + 4;
            }
            else if (c === 36) {
                return 62;
            }
            else if (c === 95) {
                return 63;
            }
            release || assert(false, "Invalid Encoding");
        }
        StringUtilities.fromEncoding = fromEncoding;
        function variableLengthDecodeInt32(s) {
            var l = StringUtilities.fromEncoding(s[0]);
            var n = 0;
            for (var i = 0; i < l; i++) {
                var offset = ((l - i - 1) * 6);
                n |= StringUtilities.fromEncoding(s[1 + i]) << offset;
            }
            return n;
        }
        StringUtilities.variableLengthDecodeInt32 = variableLengthDecodeInt32;
        function trimMiddle(s, maxLength) {
            if (s.length <= maxLength) {
                return s;
            }
            var leftHalf = maxLength >> 1;
            var rightHalf = maxLength - leftHalf - 1;
            return s.substr(0, leftHalf) + "\u2026" + s.substr(s.length - rightHalf, rightHalf);
        }
        StringUtilities.trimMiddle = trimMiddle;
        function multiple(s, count) {
            var o = "";
            for (var i = 0; i < count; i++) {
                o += s;
            }
            return o;
        }
        StringUtilities.multiple = multiple;
        function indexOfAny(s, chars, position) {
            var index = s.length;
            for (var i = 0; i < chars.length; i++) {
                var j = s.indexOf(chars[i], position);
                if (j >= 0) {
                    index = Math.min(index, j);
                }
            }
            return index === s.length ? -1 : index;
        }
        StringUtilities.indexOfAny = indexOfAny;
        var _concat3array = new Array(3);
        var _concat4array = new Array(4);
        var _concat5array = new Array(5);
        var _concat6array = new Array(6);
        var _concat7array = new Array(7);
        var _concat8array = new Array(8);
        var _concat9array = new Array(9);
        function concat3(s0, s1, s2) {
            _concat3array[0] = s0;
            _concat3array[1] = s1;
            _concat3array[2] = s2;
            return _concat3array.join('');
        }
        StringUtilities.concat3 = concat3;
        function concat4(s0, s1, s2, s3) {
            _concat4array[0] = s0;
            _concat4array[1] = s1;
            _concat4array[2] = s2;
            _concat4array[3] = s3;
            return _concat4array.join('');
        }
        StringUtilities.concat4 = concat4;
        function concat5(s0, s1, s2, s3, s4) {
            _concat5array[0] = s0;
            _concat5array[1] = s1;
            _concat5array[2] = s2;
            _concat5array[3] = s3;
            _concat5array[4] = s4;
            return _concat5array.join('');
        }
        StringUtilities.concat5 = concat5;
        function concat6(s0, s1, s2, s3, s4, s5) {
            _concat6array[0] = s0;
            _concat6array[1] = s1;
            _concat6array[2] = s2;
            _concat6array[3] = s3;
            _concat6array[4] = s4;
            _concat6array[5] = s5;
            return _concat6array.join('');
        }
        StringUtilities.concat6 = concat6;
        function concat7(s0, s1, s2, s3, s4, s5, s6) {
            _concat7array[0] = s0;
            _concat7array[1] = s1;
            _concat7array[2] = s2;
            _concat7array[3] = s3;
            _concat7array[4] = s4;
            _concat7array[5] = s5;
            _concat7array[6] = s6;
            return _concat7array.join('');
        }
        StringUtilities.concat7 = concat7;
        function concat8(s0, s1, s2, s3, s4, s5, s6, s7) {
            _concat8array[0] = s0;
            _concat8array[1] = s1;
            _concat8array[2] = s2;
            _concat8array[3] = s3;
            _concat8array[4] = s4;
            _concat8array[5] = s5;
            _concat8array[6] = s6;
            _concat8array[7] = s7;
            return _concat8array.join('');
        }
        StringUtilities.concat8 = concat8;
        function concat9(s0, s1, s2, s3, s4, s5, s6, s7, s8) {
            _concat9array[0] = s0;
            _concat9array[1] = s1;
            _concat9array[2] = s2;
            _concat9array[3] = s3;
            _concat9array[4] = s4;
            _concat9array[5] = s5;
            _concat9array[6] = s6;
            _concat9array[7] = s7;
            _concat9array[8] = s8;
            return _concat9array.join('');
        }
        StringUtilities.concat9 = concat9;
    })(StringUtilities = Shumway.StringUtilities || (Shumway.StringUtilities = {}));
    var HashUtilities;
    (function (HashUtilities) {
        var _md5R = new Uint8Array([
            7,
            12,
            17,
            22,
            7,
            12,
            17,
            22,
            7,
            12,
            17,
            22,
            7,
            12,
            17,
            22,
            5,
            9,
            14,
            20,
            5,
            9,
            14,
            20,
            5,
            9,
            14,
            20,
            5,
            9,
            14,
            20,
            4,
            11,
            16,
            23,
            4,
            11,
            16,
            23,
            4,
            11,
            16,
            23,
            4,
            11,
            16,
            23,
            6,
            10,
            15,
            21,
            6,
            10,
            15,
            21,
            6,
            10,
            15,
            21,
            6,
            10,
            15,
            21
        ]);
        var _md5K = new Int32Array([
            -680876936,
            -389564586,
            606105819,
            -1044525330,
            -176418897,
            1200080426,
            -1473231341,
            -45705983,
            1770035416,
            -1958414417,
            -42063,
            -1990404162,
            1804603682,
            -40341101,
            -1502002290,
            1236535329,
            -165796510,
            -1069501632,
            643717713,
            -373897302,
            -701558691,
            38016083,
            -660478335,
            -405537848,
            568446438,
            -1019803690,
            -187363961,
            1163531501,
            -1444681467,
            -51403784,
            1735328473,
            -1926607734,
            -378558,
            -2022574463,
            1839030562,
            -35309556,
            -1530992060,
            1272893353,
            -155497632,
            -1094730640,
            681279174,
            -358537222,
            -722521979,
            76029189,
            -640364487,
            -421815835,
            530742520,
            -995338651,
            -198630844,
            1126891415,
            -1416354905,
            -57434055,
            1700485571,
            -1894986606,
            -1051523,
            -2054922799,
            1873313359,
            -30611744,
            -1560198380,
            1309151649,
            -145523070,
            -1120210379,
            718787259,
            -343485551
        ]);
        function hashBytesTo32BitsMD5(data, offset, length) {
            var r = _md5R;
            var k = _md5K;
            var h0 = 1732584193, h1 = -271733879, h2 = -1732584194, h3 = 271733878;
            var paddedLength = (length + 72) & ~63;
            var padded = new Uint8Array(paddedLength);
            var i, j, n;
            for (i = 0; i < length; ++i) {
                padded[i] = data[offset++];
            }
            padded[i++] = 0x80;
            n = paddedLength - 8;
            while (i < n) {
                padded[i++] = 0;
            }
            padded[i++] = (length << 3) & 0xFF;
            padded[i++] = (length >> 5) & 0xFF;
            padded[i++] = (length >> 13) & 0xFF;
            padded[i++] = (length >> 21) & 0xFF;
            padded[i++] = (length >>> 29) & 0xFF;
            padded[i++] = 0;
            padded[i++] = 0;
            padded[i++] = 0;
            var w = new Int32Array(16);
            for (i = 0; i < paddedLength;) {
                for (j = 0; j < 16; ++j, i += 4) {
                    w[j] = (padded[i] | (padded[i + 1] << 8) | (padded[i + 2] << 16) | (padded[i + 3] << 24));
                }
                var a = h0, b = h1, c = h2, d = h3, f, g;
                for (j = 0; j < 64; ++j) {
                    if (j < 16) {
                        f = (b & c) | ((~b) & d);
                        g = j;
                    }
                    else if (j < 32) {
                        f = (d & b) | ((~d) & c);
                        g = (5 * j + 1) & 15;
                    }
                    else if (j < 48) {
                        f = b ^ c ^ d;
                        g = (3 * j + 5) & 15;
                    }
                    else {
                        f = c ^ (b | (~d));
                        g = (7 * j) & 15;
                    }
                    var tmp = d, rotateArg = (a + f + k[j] + w[g]) | 0, rotate = r[j];
                    d = c;
                    c = b;
                    b = (b + ((rotateArg << rotate) | (rotateArg >>> (32 - rotate)))) | 0;
                    a = tmp;
                }
                h0 = (h0 + a) | 0;
                h1 = (h1 + b) | 0;
                h2 = (h2 + c) | 0;
                h3 = (h3 + d) | 0;
            }
            return h0;
        }
        HashUtilities.hashBytesTo32BitsMD5 = hashBytesTo32BitsMD5;
        function hashBytesTo32BitsAdler(data, offset, length) {
            var a = 1;
            var b = 0;
            var end = offset + length;
            for (var i = offset; i < end; ++i) {
                a = (a + (data[i] & 0xff)) % 65521;
                b = (b + a) % 65521;
            }
            return (b << 16) | a;
        }
        HashUtilities.hashBytesTo32BitsAdler = hashBytesTo32BitsAdler;
    })(HashUtilities = Shumway.HashUtilities || (Shumway.HashUtilities = {}));
    var Random = (function () {
        function Random() {
        }
        Random.seed = function (seed) {
            Random._state[0] = seed;
            Random._state[1] = seed;
        };
        Random.next = function () {
            var s = this._state;
            var r0 = (Math.imul(18273, s[0] & 0xFFFF) + (s[0] >>> 16)) | 0;
            s[0] = r0;
            var r1 = (Math.imul(36969, s[1] & 0xFFFF) + (s[1] >>> 16)) | 0;
            s[1] = r1;
            var x = ((r0 << 16) + (r1 & 0xFFFF)) | 0;
            return (x < 0 ? (x + 0x100000000) : x) * 2.3283064365386962890625e-10;
        };
        Random._state = new Uint32Array([0xDEAD, 0xBEEF]);
        return Random;
    })();
    Shumway.Random = Random;
    Math.random = function random() {
        return Random.next();
    };
    function polyfillWeakMap() {
        if (typeof jsGlobal.WeakMap === 'function') {
            return;
        }
        var id = 0;
        function WeakMap() {
            this.id = '$weakmap' + (id++);
        }
        ;
        WeakMap.prototype = {
            has: function (obj) {
                return obj.hasOwnProperty(this.id);
            },
            get: function (obj, defaultValue) {
                return obj.hasOwnProperty(this.id) ? obj[this.id] : defaultValue;
            },
            set: function (obj, value) {
                Object.defineProperty(obj, this.id, {
                    value: value,
                    enumerable: false,
                    configurable: true
                });
            }
        };
        jsGlobal.WeakMap = WeakMap;
    }
    polyfillWeakMap();
    var useReferenceCounting = true;
    var WeakList = (function () {
        function WeakList() {
            if (typeof netscape !== "undefined" && netscape.security.PrivilegeManager) {
                this._map = new WeakMap();
            }
            else {
                this._list = [];
            }
        }
        WeakList.prototype.clear = function () {
            if (this._map) {
                this._map.clear();
            }
            else {
                this._list.length = 0;
            }
        };
        WeakList.prototype.push = function (value) {
            if (this._map) {
                release || Debug.assert(!this._map.has(value));
                this._map.set(value, null);
            }
            else {
                release || Debug.assert(this._list.indexOf(value) === -1);
                this._list.push(value);
            }
        };
        WeakList.prototype.remove = function (value) {
            if (this._map) {
                release || Debug.assert(this._map.has(value));
                this._map.delete(value);
            }
            else {
                release || Debug.assert(this._list.indexOf(value) > -1);
                this._list[this._list.indexOf(value)] = null;
                release || Debug.assert(this._list.indexOf(value) === -1);
            }
        };
        WeakList.prototype.forEach = function (callback) {
            if (this._map) {
                if (typeof netscape !== "undefined") {
                    netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
                }
                Components.utils.nondeterministicGetWeakMapKeys(this._map).forEach(function (value) {
                    if (value._referenceCount !== 0) {
                        callback(value);
                    }
                });
                return;
            }
            var list = this._list;
            var zeroCount = 0;
            for (var i = 0; i < list.length; i++) {
                var value = list[i];
                if (!value) {
                    continue;
                }
                if (useReferenceCounting && value._referenceCount === 0) {
                    list[i] = null;
                    zeroCount++;
                }
                else {
                    callback(value);
                }
            }
            if (zeroCount > 16 && zeroCount > (list.length >> 2)) {
                var newList = [];
                for (var i = 0; i < list.length; i++) {
                    var value = list[i];
                    if (value && value._referenceCount > 0) {
                        newList.push(value);
                    }
                }
                this._list = newList;
            }
        };
        Object.defineProperty(WeakList.prototype, "length", {
            get: function () {
                if (this._map) {
                    return -1;
                }
                else {
                    return this._list.length;
                }
            },
            enumerable: true,
            configurable: true
        });
        return WeakList;
    })();
    Shumway.WeakList = WeakList;
    var NumberUtilities;
    (function (NumberUtilities) {
        function pow2(exponent) {
            if (exponent === (exponent | 0)) {
                if (exponent < 0) {
                    return 1 / (1 << -exponent);
                }
                return 1 << exponent;
            }
            return Math.pow(2, exponent);
        }
        NumberUtilities.pow2 = pow2;
        function clamp(value, min, max) {
            return Math.max(min, Math.min(max, value));
        }
        NumberUtilities.clamp = clamp;
        function roundHalfEven(value) {
            if (Math.abs(value % 1) === 0.5) {
                var floor = Math.floor(value);
                return floor % 2 === 0 ? floor : Math.ceil(value);
            }
            return Math.round(value);
        }
        NumberUtilities.roundHalfEven = roundHalfEven;
        function epsilonEquals(value, other) {
            return Math.abs(value - other) < 0.0000001;
        }
        NumberUtilities.epsilonEquals = epsilonEquals;
    })(NumberUtilities = Shumway.NumberUtilities || (Shumway.NumberUtilities = {}));
    (function (Numbers) {
        Numbers[Numbers["MaxU16"] = 0xFFFF] = "MaxU16";
        Numbers[Numbers["MaxI16"] = 0x7FFF] = "MaxI16";
        Numbers[Numbers["MinI16"] = -0x8000] = "MinI16";
    })(Shumway.Numbers || (Shumway.Numbers = {}));
    var Numbers = Shumway.Numbers;
    var IntegerUtilities;
    (function (IntegerUtilities) {
        var sharedBuffer = new ArrayBuffer(8);
        IntegerUtilities.i8 = new Int8Array(sharedBuffer);
        IntegerUtilities.u8 = new Uint8Array(sharedBuffer);
        IntegerUtilities.i32 = new Int32Array(sharedBuffer);
        IntegerUtilities.f32 = new Float32Array(sharedBuffer);
        IntegerUtilities.f64 = new Float64Array(sharedBuffer);
        IntegerUtilities.nativeLittleEndian = new Int8Array(new Int32Array([1]).buffer)[0] === 1;
        function floatToInt32(v) {
            IntegerUtilities.f32[0] = v;
            return IntegerUtilities.i32[0];
        }
        IntegerUtilities.floatToInt32 = floatToInt32;
        function int32ToFloat(i) {
            IntegerUtilities.i32[0] = i;
            return IntegerUtilities.f32[0];
        }
        IntegerUtilities.int32ToFloat = int32ToFloat;
        function swap16(i) {
            return ((i & 0xFF) << 8) | ((i >> 8) & 0xFF);
        }
        IntegerUtilities.swap16 = swap16;
        function swap32(i) {
            return ((i & 0xFF) << 24) | ((i & 0xFF00) << 8) | ((i >> 8) & 0xFF00) | ((i >> 24) & 0xFF);
        }
        IntegerUtilities.swap32 = swap32;
        function toS8U8(v) {
            return ((v * 256) << 16) >> 16;
        }
        IntegerUtilities.toS8U8 = toS8U8;
        function fromS8U8(i) {
            return i / 256;
        }
        IntegerUtilities.fromS8U8 = fromS8U8;
        function clampS8U8(v) {
            return fromS8U8(toS8U8(v));
        }
        IntegerUtilities.clampS8U8 = clampS8U8;
        function toS16(v) {
            return (v << 16) >> 16;
        }
        IntegerUtilities.toS16 = toS16;
        function bitCount(i) {
            i = i - ((i >> 1) & 0x55555555);
            i = (i & 0x33333333) + ((i >> 2) & 0x33333333);
            return (((i + (i >> 4)) & 0x0F0F0F0F) * 0x01010101) >> 24;
        }
        IntegerUtilities.bitCount = bitCount;
        function ones(i) {
            i = i - ((i >> 1) & 0x55555555);
            i = (i & 0x33333333) + ((i >> 2) & 0x33333333);
            return ((i + (i >> 4) & 0xF0F0F0F) * 0x1010101) >> 24;
        }
        IntegerUtilities.ones = ones;
        function trailingZeros(i) {
            return IntegerUtilities.ones((i & -i) - 1);
        }
        IntegerUtilities.trailingZeros = trailingZeros;
        function getFlags(i, flags) {
            var str = "";
            for (var i = 0; i < flags.length; i++) {
                if (i & (1 << i)) {
                    str += flags[i] + " ";
                }
            }
            if (str.length === 0) {
                return "";
            }
            return str.trim();
        }
        IntegerUtilities.getFlags = getFlags;
        function isPowerOfTwo(x) {
            return x && ((x & (x - 1)) === 0);
        }
        IntegerUtilities.isPowerOfTwo = isPowerOfTwo;
        function roundToMultipleOfFour(x) {
            return (x + 3) & ~0x3;
        }
        IntegerUtilities.roundToMultipleOfFour = roundToMultipleOfFour;
        function nearestPowerOfTwo(x) {
            x--;
            x |= x >> 1;
            x |= x >> 2;
            x |= x >> 4;
            x |= x >> 8;
            x |= x >> 16;
            x++;
            return x;
        }
        IntegerUtilities.nearestPowerOfTwo = nearestPowerOfTwo;
        function roundToMultipleOfPowerOfTwo(i, powerOfTwo) {
            var x = (1 << powerOfTwo) - 1;
            return (i + x) & ~x;
        }
        IntegerUtilities.roundToMultipleOfPowerOfTwo = roundToMultipleOfPowerOfTwo;
        if (!Math.imul) {
            Math.imul = function imul(a, b) {
                var ah = (a >>> 16) & 0xffff;
                var al = a & 0xffff;
                var bh = (b >>> 16) & 0xffff;
                var bl = b & 0xffff;
                return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) | 0);
            };
        }
        if (!Math.clz32) {
            Math.clz32 = function clz32(i) {
                i |= (i >> 1);
                i |= (i >> 2);
                i |= (i >> 4);
                i |= (i >> 8);
                i |= (i >> 16);
                return 32 - IntegerUtilities.ones(i);
            };
        }
    })(IntegerUtilities = Shumway.IntegerUtilities || (Shumway.IntegerUtilities = {}));
    var GeometricUtilities;
    (function (GeometricUtilities) {
        function pointInPolygon(x, y, polygon) {
            var crosses = 0;
            var n = polygon.length - 2;
            var p = polygon;
            for (var i = 0; i < n; i += 2) {
                var x0 = p[i + 0];
                var y0 = p[i + 1];
                var x1 = p[i + 2];
                var y1 = p[i + 3];
                if (((y0 <= y) && (y1 > y)) || ((y0 > y) && (y1 <= y))) {
                    var t = (y - y0) / (y1 - y0);
                    if (x < x0 + t * (x1 - x0)) {
                        crosses++;
                    }
                }
            }
            return (crosses & 1) === 1;
        }
        GeometricUtilities.pointInPolygon = pointInPolygon;
        function signedArea(x0, y0, x1, y1, x2, y2) {
            return (x1 - x0) * (y2 - y0) - (y1 - y0) * (x2 - x0);
        }
        GeometricUtilities.signedArea = signedArea;
        function counterClockwise(x0, y0, x1, y1, x2, y2) {
            return signedArea(x0, y0, x1, y1, x2, y2) > 0;
        }
        GeometricUtilities.counterClockwise = counterClockwise;
        function clockwise(x0, y0, x1, y1, x2, y2) {
            return signedArea(x0, y0, x1, y1, x2, y2) < 0;
        }
        GeometricUtilities.clockwise = clockwise;
        function pointInPolygonInt32(x, y, polygon) {
            x = x | 0;
            y = y | 0;
            var crosses = 0;
            var n = polygon.length - 2;
            var p = polygon;
            for (var i = 0; i < n; i += 2) {
                var x0 = p[i + 0];
                var y0 = p[i + 1];
                var x1 = p[i + 2];
                var y1 = p[i + 3];
                if (((y0 <= y) && (y1 > y)) || ((y0 > y) && (y1 <= y))) {
                    var t = (y - y0) / (y1 - y0);
                    if (x < x0 + t * (x1 - x0)) {
                        crosses++;
                    }
                }
            }
            return (crosses & 1) === 1;
        }
        GeometricUtilities.pointInPolygonInt32 = pointInPolygonInt32;
    })(GeometricUtilities = Shumway.GeometricUtilities || (Shumway.GeometricUtilities = {}));
    (function (LogLevel) {
        LogLevel[LogLevel["Error"] = 0x1] = "Error";
        LogLevel[LogLevel["Warn"] = 0x2] = "Warn";
        LogLevel[LogLevel["Debug"] = 0x4] = "Debug";
        LogLevel[LogLevel["Log"] = 0x8] = "Log";
        LogLevel[LogLevel["Info"] = 0x10] = "Info";
        LogLevel[LogLevel["All"] = 0x1f] = "All";
    })(Shumway.LogLevel || (Shumway.LogLevel = {}));
    var LogLevel = Shumway.LogLevel;
    var IndentingWriter = (function () {
        function IndentingWriter(suppressOutput, out) {
            if (suppressOutput === void 0) { suppressOutput = false; }
            this._tab = "  ";
            this._padding = "";
            this._suppressOutput = suppressOutput;
            this._out = out || IndentingWriter._consoleOut;
            this._outNoNewline = out || IndentingWriter._consoleOutNoNewline;
        }
        IndentingWriter.prototype.write = function (str, writePadding) {
            if (str === void 0) { str = ""; }
            if (writePadding === void 0) { writePadding = false; }
            if (!this._suppressOutput) {
                this._outNoNewline((writePadding ? this._padding : "") + str);
            }
        };
        IndentingWriter.prototype.writeLn = function (str) {
            if (str === void 0) { str = ""; }
            if (!this._suppressOutput) {
                this._out(this._padding + str);
            }
        };
        IndentingWriter.prototype.writeObject = function (str, object) {
            if (str === void 0) { str = ""; }
            if (!this._suppressOutput) {
                this._out(this._padding + str, object);
            }
        };
        IndentingWriter.prototype.writeTimeLn = function (str) {
            if (str === void 0) { str = ""; }
            if (!this._suppressOutput) {
                this._out(this._padding + performance.now().toFixed(2) + " " + str);
            }
        };
        IndentingWriter.prototype.writeComment = function (str) {
            var lines = str.split("\n");
            if (lines.length === 1) {
                this.writeLn("// " + lines[0]);
            }
            else {
                this.writeLn("/**");
                for (var i = 0; i < lines.length; i++) {
                    this.writeLn(" * " + lines[i]);
                }
                this.writeLn(" */");
            }
        };
        IndentingWriter.prototype.writeLns = function (str) {
            var lines = str.split("\n");
            for (var i = 0; i < lines.length; i++) {
                this.writeLn(lines[i]);
            }
        };
        IndentingWriter.prototype.errorLn = function (str) {
            if (IndentingWriter.logLevel & 1 /* Error */) {
                this.boldRedLn(str);
            }
        };
        IndentingWriter.prototype.warnLn = function (str) {
            if (IndentingWriter.logLevel & 2 /* Warn */) {
                this.yellowLn(str);
            }
        };
        IndentingWriter.prototype.debugLn = function (str) {
            if (IndentingWriter.logLevel & 4 /* Debug */) {
                this.purpleLn(str);
            }
        };
        IndentingWriter.prototype.logLn = function (str) {
            if (IndentingWriter.logLevel & 8 /* Log */) {
                this.writeLn(str);
            }
        };
        IndentingWriter.prototype.infoLn = function (str) {
            if (IndentingWriter.logLevel & 16 /* Info */) {
                this.writeLn(str);
            }
        };
        IndentingWriter.prototype.yellowLn = function (str) {
            this.colorLn(IndentingWriter.YELLOW, str);
        };
        IndentingWriter.prototype.greenLn = function (str) {
            this.colorLn(IndentingWriter.GREEN, str);
        };
        IndentingWriter.prototype.boldRedLn = function (str) {
            this.colorLn(IndentingWriter.BOLD_RED, str);
        };
        IndentingWriter.prototype.redLn = function (str) {
            this.colorLn(IndentingWriter.RED, str);
        };
        IndentingWriter.prototype.purpleLn = function (str) {
            this.colorLn(IndentingWriter.PURPLE, str);
        };
        IndentingWriter.prototype.colorLn = function (color, str) {
            if (!this._suppressOutput) {
                if (!inBrowser) {
                    this._out(this._padding + color + str + IndentingWriter.ENDC);
                }
                else {
                    this._out(this._padding + str);
                }
            }
        };
        IndentingWriter.prototype.redLns = function (str) {
            this.colorLns(IndentingWriter.RED, str);
        };
        IndentingWriter.prototype.colorLns = function (color, str) {
            var lines = str.split("\n");
            for (var i = 0; i < lines.length; i++) {
                this.colorLn(color, lines[i]);
            }
        };
        IndentingWriter.prototype.enter = function (str) {
            if (!this._suppressOutput) {
                this._out(this._padding + str);
            }
            this.indent();
        };
        IndentingWriter.prototype.leaveAndEnter = function (str) {
            this.leave(str);
            this.indent();
        };
        IndentingWriter.prototype.leave = function (str) {
            this.outdent();
            if (!this._suppressOutput) {
                this._out(this._padding + str);
            }
        };
        IndentingWriter.prototype.indent = function () {
            this._padding += this._tab;
        };
        IndentingWriter.prototype.outdent = function () {
            if (this._padding.length > 0) {
                this._padding = this._padding.substring(0, this._padding.length - this._tab.length);
            }
        };
        IndentingWriter.prototype.writeArray = function (arr, detailed, noNumbers) {
            if (detailed === void 0) { detailed = false; }
            if (noNumbers === void 0) { noNumbers = false; }
            detailed = detailed || false;
            for (var i = 0, j = arr.length; i < j; i++) {
                var prefix = "";
                if (detailed) {
                    if (arr[i] === null) {
                        prefix = "null";
                    }
                    else if (arr[i] === undefined) {
                        prefix = "undefined";
                    }
                    else {
                        prefix = arr[i].constructor.name;
                    }
                    prefix += " ";
                }
                var number = noNumbers ? "" : ("" + i).padRight(' ', 4);
                this.writeLn(number + prefix + arr[i]);
            }
        };
        IndentingWriter.PURPLE = '\033[94m';
        IndentingWriter.YELLOW = '\033[93m';
        IndentingWriter.GREEN = '\033[92m';
        IndentingWriter.RED = '\033[91m';
        IndentingWriter.BOLD_RED = '\033[1;91m';
        IndentingWriter.ENDC = '\033[0m';
        IndentingWriter.logLevel = 31 /* All */;
        IndentingWriter._consoleOut = console.info.bind(console);
        IndentingWriter._consoleOutNoNewline = console.info.bind(console);
        return IndentingWriter;
    })();
    Shumway.IndentingWriter = IndentingWriter;
    var SortedListNode = (function () {
        function SortedListNode(value, next) {
            this.value = value;
            this.next = next;
        }
        return SortedListNode;
    })();
    var SortedList = (function () {
        function SortedList(compare) {
            release || Debug.assert(compare);
            this._compare = compare;
            this._head = null;
            this._length = 0;
        }
        SortedList.prototype.push = function (value) {
            release || Debug.assert(value !== undefined);
            this._length++;
            if (!this._head) {
                this._head = new SortedListNode(value, null);
                return;
            }
            var curr = this._head;
            var prev = null;
            var node = new SortedListNode(value, null);
            var compare = this._compare;
            while (curr) {
                if (compare(curr.value, node.value) > 0) {
                    if (prev) {
                        node.next = curr;
                        prev.next = node;
                    }
                    else {
                        node.next = this._head;
                        this._head = node;
                    }
                    return;
                }
                prev = curr;
                curr = curr.next;
            }
            prev.next = node;
        };
        SortedList.prototype.forEach = function (visitor) {
            var curr = this._head;
            var last = null;
            while (curr) {
                var result = visitor(curr.value);
                if (result === SortedList.RETURN) {
                    return;
                }
                else if (result === SortedList.DELETE) {
                    if (!last) {
                        curr = this._head = this._head.next;
                    }
                    else {
                        curr = last.next = curr.next;
                    }
                }
                else {
                    last = curr;
                    curr = curr.next;
                }
            }
        };
        SortedList.prototype.isEmpty = function () {
            return !this._head;
        };
        SortedList.prototype.pop = function () {
            if (!this._head) {
                return undefined;
            }
            this._length--;
            var ret = this._head;
            this._head = this._head.next;
            return ret.value;
        };
        SortedList.prototype.contains = function (value) {
            var curr = this._head;
            while (curr) {
                if (curr.value === value) {
                    return true;
                }
                curr = curr.next;
            }
            return false;
        };
        SortedList.prototype.toString = function () {
            var str = "[";
            var curr = this._head;
            while (curr) {
                str += curr.value.toString();
                curr = curr.next;
                if (curr) {
                    str += ",";
                }
            }
            str += "]";
            return str;
        };
        SortedList.RETURN = 1;
        SortedList.DELETE = 2;
        return SortedList;
    })();
    Shumway.SortedList = SortedList;
    var CircularBuffer = (function () {
        function CircularBuffer(Type, sizeInBits) {
            if (sizeInBits === void 0) { sizeInBits = 12; }
            this.index = 0;
            this.start = 0;
            this._size = 1 << sizeInBits;
            this._mask = this._size - 1;
            this.array = new Type(this._size);
        }
        CircularBuffer.prototype.get = function (i) {
            return this.array[i];
        };
        CircularBuffer.prototype.forEachInReverse = function (visitor) {
            if (this.isEmpty()) {
                return;
            }
            var i = this.index === 0 ? this._size - 1 : this.index - 1;
            var end = (this.start - 1) & this._mask;
            while (i !== end) {
                if (visitor(this.array[i], i)) {
                    break;
                }
                i = i === 0 ? this._size - 1 : i - 1;
            }
        };
        CircularBuffer.prototype.write = function (value) {
            this.array[this.index] = value;
            this.index = (this.index + 1) & this._mask;
            if (this.index === this.start) {
                this.start = (this.start + 1) & this._mask;
            }
        };
        CircularBuffer.prototype.isFull = function () {
            return ((this.index + 1) & this._mask) === this.start;
        };
        CircularBuffer.prototype.isEmpty = function () {
            return this.index === this.start;
        };
        CircularBuffer.prototype.reset = function () {
            this.index = 0;
            this.start = 0;
        };
        return CircularBuffer;
    })();
    Shumway.CircularBuffer = CircularBuffer;
    var BitSets;
    (function (BitSets) {
        var assert = Shumway.Debug.assert;
        BitSets.ADDRESS_BITS_PER_WORD = 5;
        BitSets.BITS_PER_WORD = 1 << BitSets.ADDRESS_BITS_PER_WORD;
        BitSets.BIT_INDEX_MASK = BitSets.BITS_PER_WORD - 1;
        function getSize(length) {
            return ((length + (BitSets.BITS_PER_WORD - 1)) >> BitSets.ADDRESS_BITS_PER_WORD) << BitSets.ADDRESS_BITS_PER_WORD;
        }
        function toBitString(on, off) {
            var self = this;
            on = on || "1";
            off = off || "0";
            var str = "";
            for (var i = 0; i < length; i++) {
                str += self.get(i) ? on : off;
            }
            return str;
        }
        function toString(names) {
            var self = this;
            var set = [];
            for (var i = 0; i < length; i++) {
                if (self.get(i)) {
                    set.push(names ? names[i] : i);
                }
            }
            return set.join(", ");
        }
        var Uint32ArrayBitSet = (function () {
            function Uint32ArrayBitSet(length) {
                this.size = getSize(length);
                this.count = 0;
                this.dirty = 0;
                this.length = length;
                this.bits = new Uint32Array(this.size >> BitSets.ADDRESS_BITS_PER_WORD);
            }
            Uint32ArrayBitSet.prototype.recount = function () {
                if (!this.dirty) {
                    return;
                }
                var bits = this.bits;
                var c = 0;
                for (var i = 0, j = bits.length; i < j; i++) {
                    var v = bits[i];
                    v = v - ((v >> 1) & 0x55555555);
                    v = (v & 0x33333333) + ((v >> 2) & 0x33333333);
                    c += ((v + (v >> 4) & 0xF0F0F0F) * 0x1010101) >> 24;
                }
                this.count = c;
                this.dirty = 0;
            };
            Uint32ArrayBitSet.prototype.set = function (i) {
                var n = i >> BitSets.ADDRESS_BITS_PER_WORD;
                var old = this.bits[n];
                var b = old | (1 << (i & BitSets.BIT_INDEX_MASK));
                this.bits[n] = b;
                this.dirty |= old ^ b;
            };
            Uint32ArrayBitSet.prototype.setAll = function () {
                var bits = this.bits;
                for (var i = 0, j = bits.length; i < j; i++) {
                    bits[i] = 0xFFFFFFFF;
                }
                this.count = this.size;
                this.dirty = 0;
            };
            Uint32ArrayBitSet.prototype.assign = function (set) {
                this.count = set.count;
                this.dirty = set.dirty;
                this.size = set.size;
                for (var i = 0, j = this.bits.length; i < j; i++) {
                    this.bits[i] = set.bits[i];
                }
            };
            Uint32ArrayBitSet.prototype.clear = function (i) {
                var n = i >> BitSets.ADDRESS_BITS_PER_WORD;
                var old = this.bits[n];
                var b = old & ~(1 << (i & BitSets.BIT_INDEX_MASK));
                this.bits[n] = b;
                this.dirty |= old ^ b;
            };
            Uint32ArrayBitSet.prototype.get = function (i) {
                var word = this.bits[i >> BitSets.ADDRESS_BITS_PER_WORD];
                return ((word & 1 << (i & BitSets.BIT_INDEX_MASK))) !== 0;
            };
            Uint32ArrayBitSet.prototype.clearAll = function () {
                var bits = this.bits;
                for (var i = 0, j = bits.length; i < j; i++) {
                    bits[i] = 0;
                }
                this.count = 0;
                this.dirty = 0;
            };
            Uint32ArrayBitSet.prototype._union = function (other) {
                var dirty = this.dirty;
                var bits = this.bits;
                var otherBits = other.bits;
                for (var i = 0, j = bits.length; i < j; i++) {
                    var old = bits[i];
                    var b = old | otherBits[i];
                    bits[i] = b;
                    dirty |= old ^ b;
                }
                this.dirty = dirty;
            };
            Uint32ArrayBitSet.prototype.intersect = function (other) {
                var dirty = this.dirty;
                var bits = this.bits;
                var otherBits = other.bits;
                for (var i = 0, j = bits.length; i < j; i++) {
                    var old = bits[i];
                    var b = old & otherBits[i];
                    bits[i] = b;
                    dirty |= old ^ b;
                }
                this.dirty = dirty;
            };
            Uint32ArrayBitSet.prototype.subtract = function (other) {
                var dirty = this.dirty;
                var bits = this.bits;
                var otherBits = other.bits;
                for (var i = 0, j = bits.length; i < j; i++) {
                    var old = bits[i];
                    var b = old & ~otherBits[i];
                    bits[i] = b;
                    dirty |= old ^ b;
                }
                this.dirty = dirty;
            };
            Uint32ArrayBitSet.prototype.negate = function () {
                var dirty = this.dirty;
                var bits = this.bits;
                for (var i = 0, j = bits.length; i < j; i++) {
                    var old = bits[i];
                    var b = ~old;
                    bits[i] = b;
                    dirty |= old ^ b;
                }
                this.dirty = dirty;
            };
            Uint32ArrayBitSet.prototype.forEach = function (fn) {
                release || assert(fn);
                var bits = this.bits;
                for (var i = 0, j = bits.length; i < j; i++) {
                    var word = bits[i];
                    if (word) {
                        for (var k = 0; k < BitSets.BITS_PER_WORD; k++) {
                            if (word & (1 << k)) {
                                fn(i * BitSets.BITS_PER_WORD + k);
                            }
                        }
                    }
                }
            };
            Uint32ArrayBitSet.prototype.toArray = function () {
                var set = [];
                var bits = this.bits;
                for (var i = 0, j = bits.length; i < j; i++) {
                    var word = bits[i];
                    if (word) {
                        for (var k = 0; k < BitSets.BITS_PER_WORD; k++) {
                            if (word & (1 << k)) {
                                set.push(i * BitSets.BITS_PER_WORD + k);
                            }
                        }
                    }
                }
                return set;
            };
            Uint32ArrayBitSet.prototype.equals = function (other) {
                if (this.size !== other.size) {
                    return false;
                }
                var bits = this.bits;
                var otherBits = other.bits;
                for (var i = 0, j = bits.length; i < j; i++) {
                    if (bits[i] !== otherBits[i]) {
                        return false;
                    }
                }
                return true;
            };
            Uint32ArrayBitSet.prototype.contains = function (other) {
                if (this.size !== other.size) {
                    return false;
                }
                var bits = this.bits;
                var otherBits = other.bits;
                for (var i = 0, j = bits.length; i < j; i++) {
                    if ((bits[i] | otherBits[i]) !== bits[i]) {
                        return false;
                    }
                }
                return true;
            };
            Uint32ArrayBitSet.prototype.isEmpty = function () {
                this.recount();
                return this.count === 0;
            };
            Uint32ArrayBitSet.prototype.clone = function () {
                var set = new Uint32ArrayBitSet(this.length);
                set._union(this);
                return set;
            };
            return Uint32ArrayBitSet;
        })();
        BitSets.Uint32ArrayBitSet = Uint32ArrayBitSet;
        var Uint32BitSet = (function () {
            function Uint32BitSet(length) {
                this.count = 0;
                this.dirty = 0;
                this.size = getSize(length);
                this.bits = 0;
                this.singleWord = true;
                this.length = length;
            }
            Uint32BitSet.prototype.recount = function () {
                if (!this.dirty) {
                    return;
                }
                var c = 0;
                var v = this.bits;
                v = v - ((v >> 1) & 0x55555555);
                v = (v & 0x33333333) + ((v >> 2) & 0x33333333);
                c += ((v + (v >> 4) & 0xF0F0F0F) * 0x1010101) >> 24;
                this.count = c;
                this.dirty = 0;
            };
            Uint32BitSet.prototype.set = function (i) {
                var old = this.bits;
                var b = old | (1 << (i & BitSets.BIT_INDEX_MASK));
                this.bits = b;
                this.dirty |= old ^ b;
            };
            Uint32BitSet.prototype.setAll = function () {
                this.bits = 0xFFFFFFFF;
                this.count = this.size;
                this.dirty = 0;
            };
            Uint32BitSet.prototype.assign = function (set) {
                this.count = set.count;
                this.dirty = set.dirty;
                this.size = set.size;
                this.bits = set.bits;
            };
            Uint32BitSet.prototype.clear = function (i) {
                var old = this.bits;
                var b = old & ~(1 << (i & BitSets.BIT_INDEX_MASK));
                this.bits = b;
                this.dirty |= old ^ b;
            };
            Uint32BitSet.prototype.get = function (i) {
                return ((this.bits & 1 << (i & BitSets.BIT_INDEX_MASK))) !== 0;
            };
            Uint32BitSet.prototype.clearAll = function () {
                this.bits = 0;
                this.count = 0;
                this.dirty = 0;
            };
            Uint32BitSet.prototype._union = function (other) {
                var old = this.bits;
                var b = old | other.bits;
                this.bits = b;
                this.dirty = old ^ b;
            };
            Uint32BitSet.prototype.intersect = function (other) {
                var old = this.bits;
                var b = old & other.bits;
                this.bits = b;
                this.dirty = old ^ b;
            };
            Uint32BitSet.prototype.subtract = function (other) {
                var old = this.bits;
                var b = old & ~other.bits;
                this.bits = b;
                this.dirty = old ^ b;
            };
            Uint32BitSet.prototype.negate = function () {
                var old = this.bits;
                var b = ~old;
                this.bits = b;
                this.dirty = old ^ b;
            };
            Uint32BitSet.prototype.forEach = function (fn) {
                release || assert(fn);
                var word = this.bits;
                if (word) {
                    for (var k = 0; k < BitSets.BITS_PER_WORD; k++) {
                        if (word & (1 << k)) {
                            fn(k);
                        }
                    }
                }
            };
            Uint32BitSet.prototype.toArray = function () {
                var set = [];
                var word = this.bits;
                if (word) {
                    for (var k = 0; k < BitSets.BITS_PER_WORD; k++) {
                        if (word & (1 << k)) {
                            set.push(k);
                        }
                    }
                }
                return set;
            };
            Uint32BitSet.prototype.equals = function (other) {
                return this.bits === other.bits;
            };
            Uint32BitSet.prototype.contains = function (other) {
                var bits = this.bits;
                return (bits | other.bits) === bits;
            };
            Uint32BitSet.prototype.isEmpty = function () {
                this.recount();
                return this.count === 0;
            };
            Uint32BitSet.prototype.clone = function () {
                var set = new Uint32BitSet(this.length);
                set._union(this);
                return set;
            };
            return Uint32BitSet;
        })();
        BitSets.Uint32BitSet = Uint32BitSet;
        Uint32BitSet.prototype.toString = toString;
        Uint32BitSet.prototype.toBitString = toBitString;
        Uint32ArrayBitSet.prototype.toString = toString;
        Uint32ArrayBitSet.prototype.toBitString = toBitString;
        function BitSetFunctor(length) {
            var shouldUseSingleWord = (getSize(length) >> BitSets.ADDRESS_BITS_PER_WORD) === 1;
            var type = (shouldUseSingleWord ? Uint32BitSet : Uint32ArrayBitSet);
            return function () {
                return new type(length);
            };
        }
        BitSets.BitSetFunctor = BitSetFunctor;
    })(BitSets = Shumway.BitSets || (Shumway.BitSets = {}));
    var ColorStyle = (function () {
        function ColorStyle() {
        }
        ColorStyle.randomStyle = function () {
            if (!ColorStyle._randomStyleCache) {
                ColorStyle._randomStyleCache = [
                    "#ff5e3a",
                    "#ff9500",
                    "#ffdb4c",
                    "#87fc70",
                    "#52edc7",
                    "#1ad6fd",
                    "#c644fc",
                    "#ef4db6",
                    "#4a4a4a",
                    "#dbddde",
                    "#ff3b30",
                    "#ff9500",
                    "#ffcc00",
                    "#4cd964",
                    "#34aadc",
                    "#007aff",
                    "#5856d6",
                    "#ff2d55",
                    "#8e8e93",
                    "#c7c7cc",
                    "#5ad427",
                    "#c86edf",
                    "#d1eefc",
                    "#e0f8d8",
                    "#fb2b69",
                    "#f7f7f7",
                    "#1d77ef",
                    "#d6cec3",
                    "#55efcb",
                    "#ff4981",
                    "#ffd3e0",
                    "#f7f7f7",
                    "#ff1300",
                    "#1f1f21",
                    "#bdbec2",
                    "#ff3a2d"
                ];
            }
            return ColorStyle._randomStyleCache[(ColorStyle._nextStyle++) % ColorStyle._randomStyleCache.length];
        };
        ColorStyle.gradientColor = function (value) {
            return ColorStyle._gradient[ColorStyle._gradient.length * NumberUtilities.clamp(value, 0, 1) | 0];
        };
        ColorStyle.contrastStyle = function (rgb) {
            var c = parseInt(rgb.substr(1), 16);
            var yiq = (((c >> 16) * 299) + (((c >> 8) & 0xff) * 587) + ((c & 0xff) * 114)) / 1000;
            return (yiq >= 128) ? '#000000' : '#ffffff';
        };
        ColorStyle.reset = function () {
            ColorStyle._nextStyle = 0;
        };
        ColorStyle.TabToolbar = "#252c33";
        ColorStyle.Toolbars = "#343c45";
        ColorStyle.HighlightBlue = "#1d4f73";
        ColorStyle.LightText = "#f5f7fa";
        ColorStyle.ForegroundText = "#b6babf";
        ColorStyle.Black = "#000000";
        ColorStyle.VeryDark = "#14171a";
        ColorStyle.Dark = "#181d20";
        ColorStyle.Light = "#a9bacb";
        ColorStyle.Grey = "#8fa1b2";
        ColorStyle.DarkGrey = "#5f7387";
        ColorStyle.Blue = "#46afe3";
        ColorStyle.Purple = "#6b7abb";
        ColorStyle.Pink = "#df80ff";
        ColorStyle.Red = "#eb5368";
        ColorStyle.Orange = "#d96629";
        ColorStyle.LightOrange = "#d99b28";
        ColorStyle.Green = "#70bf53";
        ColorStyle.BlueGrey = "#5e88b0";
        ColorStyle._nextStyle = 0;
        ColorStyle._gradient = [
            "#FF0000",
            "#FF1100",
            "#FF2300",
            "#FF3400",
            "#FF4600",
            "#FF5700",
            "#FF6900",
            "#FF7B00",
            "#FF8C00",
            "#FF9E00",
            "#FFAF00",
            "#FFC100",
            "#FFD300",
            "#FFE400",
            "#FFF600",
            "#F7FF00",
            "#E5FF00",
            "#D4FF00",
            "#C2FF00",
            "#B0FF00",
            "#9FFF00",
            "#8DFF00",
            "#7CFF00",
            "#6AFF00",
            "#58FF00",
            "#47FF00",
            "#35FF00",
            "#24FF00",
            "#12FF00",
            "#00FF00"
        ];
        return ColorStyle;
    })();
    Shumway.ColorStyle = ColorStyle;
    var Bounds = (function () {
        function Bounds(xMin, yMin, xMax, yMax) {
            this.xMin = xMin | 0;
            this.yMin = yMin | 0;
            this.xMax = xMax | 0;
            this.yMax = yMax | 0;
        }
        Bounds.FromUntyped = function (source) {
            return new Bounds(source.xMin, source.yMin, source.xMax, source.yMax);
        };
        Bounds.FromRectangle = function (source) {
            return new Bounds(source.x * 20 | 0, source.y * 20 | 0, (source.x + source.width) * 20 | 0, (source.y + source.height) * 20 | 0);
        };
        Bounds.prototype.setElements = function (xMin, yMin, xMax, yMax) {
            this.xMin = xMin;
            this.yMin = yMin;
            this.xMax = xMax;
            this.yMax = yMax;
        };
        Bounds.prototype.copyFrom = function (source) {
            this.setElements(source.xMin, source.yMin, source.xMax, source.yMax);
        };
        Bounds.prototype.contains = function (x, y) {
            return x < this.xMin !== x < this.xMax && y < this.yMin !== y < this.yMax;
        };
        Bounds.prototype.unionInPlace = function (other) {
            if (other.isEmpty()) {
                return;
            }
            this.extendByPoint(other.xMin, other.yMin);
            this.extendByPoint(other.xMax, other.yMax);
        };
        Bounds.prototype.extendByPoint = function (x, y) {
            this.extendByX(x);
            this.extendByY(y);
        };
        Bounds.prototype.extendByX = function (x) {
            if (this.xMin === 0x8000000) {
                this.xMin = this.xMax = x;
                return;
            }
            this.xMin = Math.min(this.xMin, x);
            this.xMax = Math.max(this.xMax, x);
        };
        Bounds.prototype.extendByY = function (y) {
            if (this.yMin === 0x8000000) {
                this.yMin = this.yMax = y;
                return;
            }
            this.yMin = Math.min(this.yMin, y);
            this.yMax = Math.max(this.yMax, y);
        };
        Bounds.prototype.intersects = function (toIntersect) {
            return this.contains(toIntersect.xMin, toIntersect.yMin) || this.contains(toIntersect.xMax, toIntersect.yMax);
        };
        Bounds.prototype.isEmpty = function () {
            return this.xMax <= this.xMin || this.yMax <= this.yMin;
        };
        Object.defineProperty(Bounds.prototype, "width", {
            get: function () {
                return this.xMax - this.xMin;
            },
            set: function (value) {
                this.xMax = this.xMin + value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Bounds.prototype, "height", {
            get: function () {
                return this.yMax - this.yMin;
            },
            set: function (value) {
                this.yMax = this.yMin + value;
            },
            enumerable: true,
            configurable: true
        });
        Bounds.prototype.getBaseWidth = function (angle) {
            var u = Math.abs(Math.cos(angle));
            var v = Math.abs(Math.sin(angle));
            return u * (this.xMax - this.xMin) + v * (this.yMax - this.yMin);
        };
        Bounds.prototype.getBaseHeight = function (angle) {
            var u = Math.abs(Math.cos(angle));
            var v = Math.abs(Math.sin(angle));
            return v * (this.xMax - this.xMin) + u * (this.yMax - this.yMin);
        };
        Bounds.prototype.setEmpty = function () {
            this.xMin = this.yMin = this.xMax = this.yMax = 0;
        };
        Bounds.prototype.setToSentinels = function () {
            this.xMin = this.yMin = this.xMax = this.yMax = 0x8000000;
        };
        Bounds.prototype.clone = function () {
            return new Bounds(this.xMin, this.yMin, this.xMax, this.yMax);
        };
        Bounds.prototype.toString = function () {
            return "{ " + "xMin: " + this.xMin + ", " + "xMin: " + this.yMin + ", " + "xMax: " + this.xMax + ", " + "xMax: " + this.yMax + " }";
        };
        return Bounds;
    })();
    Shumway.Bounds = Bounds;
    var DebugBounds = (function () {
        function DebugBounds(xMin, yMin, xMax, yMax) {
            Debug.assert(isInteger(xMin));
            Debug.assert(isInteger(yMin));
            Debug.assert(isInteger(xMax));
            Debug.assert(isInteger(yMax));
            this._xMin = xMin | 0;
            this._yMin = yMin | 0;
            this._xMax = xMax | 0;
            this._yMax = yMax | 0;
            this.assertValid();
        }
        DebugBounds.FromUntyped = function (source) {
            return new DebugBounds(source.xMin, source.yMin, source.xMax, source.yMax);
        };
        DebugBounds.FromRectangle = function (source) {
            return new DebugBounds(source.x * 20 | 0, source.y * 20 | 0, (source.x + source.width) * 20 | 0, (source.y + source.height) * 20 | 0);
        };
        DebugBounds.prototype.setElements = function (xMin, yMin, xMax, yMax) {
            this.xMin = xMin;
            this.yMin = yMin;
            this.xMax = xMax;
            this.yMax = yMax;
        };
        DebugBounds.prototype.copyFrom = function (source) {
            this.setElements(source.xMin, source.yMin, source.xMax, source.yMax);
        };
        DebugBounds.prototype.contains = function (x, y) {
            return x < this.xMin !== x < this.xMax && y < this.yMin !== y < this.yMax;
        };
        DebugBounds.prototype.unionInPlace = function (other) {
            if (other.isEmpty()) {
                return;
            }
            this.extendByPoint(other.xMin, other.yMin);
            this.extendByPoint(other.xMax, other.yMax);
        };
        DebugBounds.prototype.extendByPoint = function (x, y) {
            this.extendByX(x);
            this.extendByY(y);
        };
        DebugBounds.prototype.extendByX = function (x) {
            if (this.xMin === 0x8000000) {
                this.xMin = this.xMax = x;
                return;
            }
            this.xMin = Math.min(this.xMin, x);
            this.xMax = Math.max(this.xMax, x);
        };
        DebugBounds.prototype.extendByY = function (y) {
            if (this.yMin === 0x8000000) {
                this.yMin = this.yMax = y;
                return;
            }
            this.yMin = Math.min(this.yMin, y);
            this.yMax = Math.max(this.yMax, y);
        };
        DebugBounds.prototype.intersects = function (toIntersect) {
            return this.contains(toIntersect._xMin, toIntersect._yMin) || this.contains(toIntersect._xMax, toIntersect._yMax);
        };
        DebugBounds.prototype.isEmpty = function () {
            return this._xMax <= this._xMin || this._yMax <= this._yMin;
        };
        Object.defineProperty(DebugBounds.prototype, "xMin", {
            get: function () {
                return this._xMin;
            },
            set: function (value) {
                Debug.assert(isInteger(value));
                this._xMin = value;
                this.assertValid();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugBounds.prototype, "yMin", {
            get: function () {
                return this._yMin;
            },
            set: function (value) {
                Debug.assert(isInteger(value));
                this._yMin = value | 0;
                this.assertValid();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugBounds.prototype, "xMax", {
            get: function () {
                return this._xMax;
            },
            set: function (value) {
                Debug.assert(isInteger(value));
                this._xMax = value | 0;
                this.assertValid();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugBounds.prototype, "width", {
            get: function () {
                return this._xMax - this._xMin;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugBounds.prototype, "yMax", {
            get: function () {
                return this._yMax;
            },
            set: function (value) {
                Debug.assert(isInteger(value));
                this._yMax = value | 0;
                this.assertValid();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugBounds.prototype, "height", {
            get: function () {
                return this._yMax - this._yMin;
            },
            enumerable: true,
            configurable: true
        });
        DebugBounds.prototype.getBaseWidth = function (angle) {
            var u = Math.abs(Math.cos(angle));
            var v = Math.abs(Math.sin(angle));
            return u * (this._xMax - this._xMin) + v * (this._yMax - this._yMin);
        };
        DebugBounds.prototype.getBaseHeight = function (angle) {
            var u = Math.abs(Math.cos(angle));
            var v = Math.abs(Math.sin(angle));
            return v * (this._xMax - this._xMin) + u * (this._yMax - this._yMin);
        };
        DebugBounds.prototype.setEmpty = function () {
            this._xMin = this._yMin = this._xMax = this._yMax = 0;
        };
        DebugBounds.prototype.clone = function () {
            return new DebugBounds(this.xMin, this.yMin, this.xMax, this.yMax);
        };
        DebugBounds.prototype.toString = function () {
            return "{ " + "xMin: " + this._xMin + ", " + "xMin: " + this._yMin + ", " + "xMax: " + this._xMax + ", " + "yMax: " + this._yMax + " }";
        };
        DebugBounds.prototype.assertValid = function () {
        };
        return DebugBounds;
    })();
    Shumway.DebugBounds = DebugBounds;
    var Color = (function () {
        function Color(r, g, b, a) {
            this.r = r;
            this.g = g;
            this.b = b;
            this.a = a;
        }
        Color.FromARGB = function (argb) {
            return new Color((argb >> 16 & 0xFF) / 255, (argb >> 8 & 0xFF) / 255, (argb >> 0 & 0xFF) / 255, (argb >> 24 & 0xFF) / 255);
        };
        Color.FromRGBA = function (rgba) {
            return Color.FromARGB(ColorUtilities.RGBAToARGB(rgba));
        };
        Color.prototype.toRGBA = function () {
            return (this.r * 255) << 24 | (this.g * 255) << 16 | (this.b * 255) << 8 | (this.a * 255);
        };
        Color.prototype.toCSSStyle = function () {
            return ColorUtilities.rgbaToCSSStyle(this.toRGBA());
        };
        Color.prototype.set = function (other) {
            this.r = other.r;
            this.g = other.g;
            this.b = other.b;
            this.a = other.a;
        };
        Color.randomColor = function (alpha) {
            if (alpha === void 0) { alpha = 1; }
            return new Color(Math.random(), Math.random(), Math.random(), alpha);
        };
        Color.parseColor = function (color) {
            if (!Color.colorCache) {
                Color.colorCache = Object.create(null);
            }
            if (Color.colorCache[color]) {
                return Color.colorCache[color];
            }
            var span = document.createElement('span');
            document.body.appendChild(span);
            span.style.backgroundColor = color;
            var rgb = getComputedStyle(span).backgroundColor;
            document.body.removeChild(span);
            var m = /^rgb\((\d+), (\d+), (\d+)\)$/.exec(rgb);
            if (!m)
                m = /^rgba\((\d+), (\d+), (\d+), ([\d.]+)\)$/.exec(rgb);
            var result = new Color(0, 0, 0, 0);
            result.r = parseFloat(m[1]) / 255;
            result.g = parseFloat(m[2]) / 255;
            result.b = parseFloat(m[3]) / 255;
            result.a = m[4] ? parseFloat(m[4]) / 255 : 1;
            return Color.colorCache[color] = result;
        };
        Color.Red = new Color(1, 0, 0, 1);
        Color.Green = new Color(0, 1, 0, 1);
        Color.Blue = new Color(0, 0, 1, 1);
        Color.None = new Color(0, 0, 0, 0);
        Color.White = new Color(1, 1, 1, 1);
        Color.Black = new Color(0, 0, 0, 1);
        Color.colorCache = {};
        return Color;
    })();
    Shumway.Color = Color;
    var ColorUtilities;
    (function (ColorUtilities) {
        function RGBAToARGB(rgba) {
            return ((rgba >> 8) & 0x00ffffff) | ((rgba & 0xff) << 24);
        }
        ColorUtilities.RGBAToARGB = RGBAToARGB;
        function ARGBToRGBA(argb) {
            return argb << 8 | ((argb >> 24) & 0xff);
        }
        ColorUtilities.ARGBToRGBA = ARGBToRGBA;
        function rgbaToCSSStyle(color) {
            return Shumway.StringUtilities.concat9('rgba(', color >> 24 & 0xff, ',', color >> 16 & 0xff, ',', color >> 8 & 0xff, ',', (color & 0xff) / 0xff, ')');
        }
        ColorUtilities.rgbaToCSSStyle = rgbaToCSSStyle;
        function cssStyleToRGBA(style) {
            if (style[0] === "#") {
                if (style.length === 7) {
                    var value = parseInt(style.substring(1), 16);
                    return (value << 8) | 0xff;
                }
            }
            else if (style[0] === "r") {
                var values = style.substring(5, style.length - 1).split(",");
                var r = parseInt(values[0]);
                var g = parseInt(values[1]);
                var b = parseInt(values[2]);
                var a = parseFloat(values[3]);
                return (r & 0xff) << 24 | (g & 0xff) << 16 | (b & 0xff) << 8 | ((a * 255) & 0xff);
            }
            return 0xff0000ff;
        }
        ColorUtilities.cssStyleToRGBA = cssStyleToRGBA;
        function hexToRGB(color) {
            return parseInt(color.slice(1), 16);
        }
        ColorUtilities.hexToRGB = hexToRGB;
        function rgbToHex(color) {
            return '#' + ('000000' + (color >>> 0).toString(16)).slice(-6);
        }
        ColorUtilities.rgbToHex = rgbToHex;
        function isValidHexColor(value) {
            return /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(value);
        }
        ColorUtilities.isValidHexColor = isValidHexColor;
        function clampByte(value) {
            return Math.max(0, Math.min(255, value));
        }
        ColorUtilities.clampByte = clampByte;
        function unpremultiplyARGB(pARGB) {
            var b = (pARGB >> 0) & 0xff;
            var g = (pARGB >> 8) & 0xff;
            var r = (pARGB >> 16) & 0xff;
            var a = (pARGB >> 24) & 0xff;
            r = Math.imul(255, r) / a & 0xff;
            g = Math.imul(255, g) / a & 0xff;
            b = Math.imul(255, b) / a & 0xff;
            return a << 24 | r << 16 | g << 8 | b;
        }
        ColorUtilities.unpremultiplyARGB = unpremultiplyARGB;
        function premultiplyARGB(uARGB) {
            var b = (uARGB >> 0) & 0xff;
            var g = (uARGB >> 8) & 0xff;
            var r = (uARGB >> 16) & 0xff;
            var a = (uARGB >> 24) & 0xff;
            r = ((Math.imul(r, a) + 127) / 255) | 0;
            g = ((Math.imul(g, a) + 127) / 255) | 0;
            b = ((Math.imul(b, a) + 127) / 255) | 0;
            return a << 24 | r << 16 | g << 8 | b;
        }
        ColorUtilities.premultiplyARGB = premultiplyARGB;
        var premultiplyTable;
        var unpremultiplyTable;
        function ensureUnpremultiplyTable() {
            if (!unpremultiplyTable) {
                unpremultiplyTable = new Uint8Array(256 * 256);
                for (var c = 0; c < 256; c++) {
                    for (var a = 0; a < 256; a++) {
                        unpremultiplyTable[(a << 8) + c] = Math.imul(255, c) / a;
                    }
                }
            }
        }
        ColorUtilities.ensureUnpremultiplyTable = ensureUnpremultiplyTable;
        function tableLookupUnpremultiplyARGB(pARGB) {
            pARGB = pARGB | 0;
            var a = (pARGB >> 24) & 0xff;
            if (a === 0) {
                return 0;
            }
            else if (a === 0xff) {
                return pARGB;
            }
            var b = (pARGB >> 0) & 0xff;
            var g = (pARGB >> 8) & 0xff;
            var r = (pARGB >> 16) & 0xff;
            var o = a << 8;
            var T = unpremultiplyTable;
            r = T[o + r];
            g = T[o + g];
            b = T[o + b];
            return a << 24 | r << 16 | g << 8 | b;
        }
        ColorUtilities.tableLookupUnpremultiplyARGB = tableLookupUnpremultiplyARGB;
        function blendPremultipliedBGRA(tpBGRA, spBGRA) {
            var sA = spBGRA & 0xff;
            var sGA = spBGRA & 0x00ff00ff;
            var sBR = spBGRA >> 8 & 0x00ff00ff;
            var tGA = tpBGRA & 0x00ff00ff;
            var tBR = tpBGRA >> 8 & 0x00ff00ff;
            var A = 256 - sA;
            tGA = Math.imul(tGA, A) >> 8;
            tBR = Math.imul(tBR, A) >> 8;
            return ((sBR + tBR & 0x00ff00ff) << 8) | (sGA + tGA & 0x00ff00ff);
        }
        ColorUtilities.blendPremultipliedBGRA = blendPremultipliedBGRA;
        var swap32 = IntegerUtilities.swap32;
        function convertImage(sourceFormat, targetFormat, source, target) {
            if (source !== target) {
                release || Debug.assert(source.buffer !== target.buffer, "Can't handle overlapping views.");
            }
            var length = source.length;
            if (sourceFormat === targetFormat) {
                if (source === target) {
                    return;
                }
                for (var i = 0; i < length; i++) {
                    target[i] = source[i];
                }
                return;
            }
            if (sourceFormat === 1 /* PremultipliedAlphaARGB */ && targetFormat === 3 /* StraightAlphaRGBA */) {
                Shumway.ColorUtilities.ensureUnpremultiplyTable();
                for (var i = 0; i < length; i++) {
                    var pBGRA = source[i];
                    var a = pBGRA & 0xff;
                    if (a === 0) {
                        target[i] = 0;
                    }
                    else if (a === 0xff) {
                        target[i] = 0xff000000 | ((pBGRA >> 8) & 0x00ffffff);
                    }
                    else {
                        var b = (pBGRA >> 24) & 0xff;
                        var g = (pBGRA >> 16) & 0xff;
                        var r = (pBGRA >> 8) & 0xff;
                        var o = a << 8;
                        var T = unpremultiplyTable;
                        r = T[o + r];
                        g = T[o + g];
                        b = T[o + b];
                        target[i] = a << 24 | b << 16 | g << 8 | r;
                    }
                }
            }
            else if (sourceFormat === 2 /* StraightAlphaARGB */ && targetFormat === 3 /* StraightAlphaRGBA */) {
                for (var i = 0; i < length; i++) {
                    target[i] = swap32(source[i]);
                }
            }
            else if (sourceFormat === 3 /* StraightAlphaRGBA */ && targetFormat === 1 /* PremultipliedAlphaARGB */) {
                for (var i = 0; i < length; i++) {
                    var uABGR = source[i];
                    var uARGB = (uABGR & 0xFF00FF00) | (uABGR >> 16) & 0xff | (uABGR & 0xff) << 16;
                    target[i] = swap32(premultiplyARGB(uARGB));
                }
            }
            else {
                Debug.somewhatImplemented("Image Format Conversion: " + ImageType[sourceFormat] + " -> " + ImageType[targetFormat]);
                for (var i = 0; i < length; i++) {
                    target[i] = source[i];
                }
            }
        }
        ColorUtilities.convertImage = convertImage;
    })(ColorUtilities = Shumway.ColorUtilities || (Shumway.ColorUtilities = {}));
    var ArrayBufferPool = (function () {
        function ArrayBufferPool(maxSize) {
            if (maxSize === void 0) { maxSize = 32; }
            this._list = [];
            this._maxSize = maxSize;
        }
        ArrayBufferPool.prototype.acquire = function (length) {
            if (ArrayBufferPool._enabled) {
                var list = this._list;
                for (var i = 0; i < list.length; i++) {
                    var buffer = list[i];
                    if (buffer.byteLength >= length) {
                        list.splice(i, 1);
                        return buffer;
                    }
                }
            }
            return new ArrayBuffer(length);
        };
        ArrayBufferPool.prototype.release = function (buffer) {
            if (ArrayBufferPool._enabled) {
                var list = this._list;
                release || Debug.assert(ArrayUtilities.indexOf(list, buffer) < 0);
                if (list.length === this._maxSize) {
                    list.shift();
                }
                list.push(buffer);
            }
        };
        ArrayBufferPool.prototype.ensureUint8ArrayLength = function (array, length) {
            if (array.length >= length) {
                return array;
            }
            var newLength = Math.max(array.length + length, ((array.length * 3) >> 1) + 1);
            var newArray = new Uint8Array(this.acquire(newLength), 0, newLength);
            newArray.set(array);
            this.release(array.buffer);
            return newArray;
        };
        ArrayBufferPool.prototype.ensureFloat64ArrayLength = function (array, length) {
            if (array.length >= length) {
                return array;
            }
            var newLength = Math.max(array.length + length, ((array.length * 3) >> 1) + 1);
            var newArray = new Float64Array(this.acquire(newLength * Float64Array.BYTES_PER_ELEMENT), 0, newLength);
            newArray.set(array);
            this.release(array.buffer);
            return newArray;
        };
        ArrayBufferPool._enabled = true;
        return ArrayBufferPool;
    })();
    Shumway.ArrayBufferPool = ArrayBufferPool;
    var Telemetry;
    (function (Telemetry) {
        (function (Feature) {
            Feature[Feature["EXTERNAL_INTERFACE_FEATURE"] = 1] = "EXTERNAL_INTERFACE_FEATURE";
            Feature[Feature["CLIPBOARD_FEATURE"] = 2] = "CLIPBOARD_FEATURE";
            Feature[Feature["SHAREDOBJECT_FEATURE"] = 3] = "SHAREDOBJECT_FEATURE";
            Feature[Feature["VIDEO_FEATURE"] = 4] = "VIDEO_FEATURE";
            Feature[Feature["SOUND_FEATURE"] = 5] = "SOUND_FEATURE";
            Feature[Feature["NETCONNECTION_FEATURE"] = 6] = "NETCONNECTION_FEATURE";
        })(Telemetry.Feature || (Telemetry.Feature = {}));
        var Feature = Telemetry.Feature;
        (function (ErrorTypes) {
            ErrorTypes[ErrorTypes["AVM1_ERROR"] = 1] = "AVM1_ERROR";
            ErrorTypes[ErrorTypes["AVM2_ERROR"] = 2] = "AVM2_ERROR";
        })(Telemetry.ErrorTypes || (Telemetry.ErrorTypes = {}));
        var ErrorTypes = Telemetry.ErrorTypes;
        Telemetry.instance;
    })(Telemetry = Shumway.Telemetry || (Shumway.Telemetry = {}));
    var FileLoadingService;
    (function (FileLoadingService) {
        FileLoadingService.instance;
    })(FileLoadingService = Shumway.FileLoadingService || (Shumway.FileLoadingService = {}));
    function registerCSSFont(id, buffer, forceFontInit) {
        if (!inBrowser) {
            Debug.warning('Cannot register CSS font outside the browser');
            return;
        }
        var head = document.head;
        head.insertBefore(document.createElement('style'), head.firstChild);
        var style = document.styleSheets[0];
        var rule = '@font-face{font-family:swffont' + id + ';src:url(data:font/opentype;base64,' + Shumway.StringUtilities.base64ArrayBuffer(buffer) + ')' + '}';
        style.insertRule(rule, style.cssRules.length);
        if (forceFontInit) {
            var node = document.createElement('div');
            node.style.fontFamily = 'swffont' + id;
            node.innerHTML = 'hello';
            document.body.appendChild(node);
            var dummyHeight = node.clientHeight;
            document.body.removeChild(node);
        }
    }
    Shumway.registerCSSFont = registerCSSFont;
    var ExternalInterfaceService;
    (function (ExternalInterfaceService) {
        ExternalInterfaceService.instance = {
            enabled: false,
            initJS: function (callback) {
            },
            registerCallback: function (functionName) {
            },
            unregisterCallback: function (functionName) {
            },
            eval: function (expression) {
            },
            call: function (request) {
            },
            getId: function () {
                return null;
            }
        };
    })(ExternalInterfaceService = Shumway.ExternalInterfaceService || (Shumway.ExternalInterfaceService = {}));
    var ClipboardService = (function () {
        function ClipboardService() {
        }
        ClipboardService.prototype.setClipboard = function (data) {
            Debug.abstractMethod("public ClipboardService::setClipboard");
        };
        ClipboardService.instance = null;
        return ClipboardService;
    })();
    Shumway.ClipboardService = ClipboardService;
    var Callback = (function () {
        function Callback() {
            this._queues = {};
        }
        Callback.prototype.register = function (type, callback) {
            Debug.assert(type);
            Debug.assert(callback);
            var queue = this._queues[type];
            if (queue) {
                if (queue.indexOf(callback) > -1) {
                    return;
                }
            }
            else {
                queue = this._queues[type] = [];
            }
            queue.push(callback);
        };
        Callback.prototype.unregister = function (type, callback) {
            Debug.assert(type);
            Debug.assert(callback);
            var queue = this._queues[type];
            if (!queue) {
                return;
            }
            var i = queue.indexOf(callback);
            if (i !== -1) {
                queue.splice(i, 1);
            }
            if (queue.length === 0) {
                this._queues[type] = null;
            }
        };
        Callback.prototype.notify = function (type, args) {
            var queue = this._queues[type];
            if (!queue) {
                return;
            }
            queue = queue.slice();
            var args = Array.prototype.slice.call(arguments, 0);
            for (var i = 0; i < queue.length; i++) {
                var callback = queue[i];
                callback.apply(null, args);
            }
        };
        Callback.prototype.notify1 = function (type, value) {
            var queue = this._queues[type];
            if (!queue) {
                return;
            }
            queue = queue.slice();
            for (var i = 0; i < queue.length; i++) {
                var callback = queue[i];
                callback(type, value);
            }
        };
        return Callback;
    })();
    Shumway.Callback = Callback;
    (function (ImageType) {
        ImageType[ImageType["None"] = 0] = "None";
        ImageType[ImageType["PremultipliedAlphaARGB"] = 1] = "PremultipliedAlphaARGB";
        ImageType[ImageType["StraightAlphaARGB"] = 2] = "StraightAlphaARGB";
        ImageType[ImageType["StraightAlphaRGBA"] = 3] = "StraightAlphaRGBA";
        ImageType[ImageType["JPEG"] = 4] = "JPEG";
        ImageType[ImageType["PNG"] = 5] = "PNG";
        ImageType[ImageType["GIF"] = 6] = "GIF";
    })(Shumway.ImageType || (Shumway.ImageType = {}));
    var ImageType = Shumway.ImageType;
    function getMIMETypeForImageType(type) {
        switch (type) {
            case 4 /* JPEG */:
                return "image/jpeg";
            case 5 /* PNG */:
                return "image/png";
            case 6 /* GIF */:
                return "image/gif";
            default:
                return "text/plain";
        }
    }
    Shumway.getMIMETypeForImageType = getMIMETypeForImageType;
    var UI;
    (function (UI) {
        function toCSSCursor(mouseCursor) {
            switch (mouseCursor) {
                case 0:
                    return 'auto';
                case 2:
                    return 'pointer';
                case 3:
                    return 'grab';
                case 4:
                    return 'text';
                case 1:
                default:
                    return 'default';
            }
        }
        UI.toCSSCursor = toCSSCursor;
    })(UI = Shumway.UI || (Shumway.UI = {}));
    var PromiseWrapper = (function () {
        function PromiseWrapper() {
            this.promise = new Promise(function (resolve, reject) {
                this.resolve = resolve;
                this.reject = reject;
            }.bind(this));
        }
        PromiseWrapper.prototype.then = function (onFulfilled, onRejected) {
            return this.promise.then(onFulfilled, onRejected);
        };
        return PromiseWrapper;
    })();
    Shumway.PromiseWrapper = PromiseWrapper;
})(Shumway || (Shumway = {}));
(function PromiseClosure() {
    var global = Function("return this")();
    if (global.Promise) {
        if (typeof global.Promise.all !== 'function') {
            global.Promise.all = function (iterable) {
                var count = 0, results = [], resolve, reject;
                var promise = new global.Promise(function (resolve_, reject_) {
                    resolve = resolve_;
                    reject = reject_;
                });
                iterable.forEach(function (p, i) {
                    count++;
                    p.then(function (result) {
                        results[i] = result;
                        count--;
                        if (count === 0) {
                            resolve(results);
                        }
                    }, reject);
                });
                if (count === 0) {
                    resolve(results);
                }
                return promise;
            };
        }
        if (typeof global.Promise.resolve !== 'function') {
            global.Promise.resolve = function (x) {
                return new global.Promise(function (resolve) {
                    resolve(x);
                });
            };
        }
        return;
    }
    function getDeferred(C) {
        if (typeof C !== 'function') {
            throw new TypeError('Invalid deferred constructor');
        }
        var resolver = createDeferredConstructionFunctions();
        var promise = new C(resolver);
        var resolve = resolver.resolve;
        if (typeof resolve !== 'function') {
            throw new TypeError('Invalid resolve construction function');
        }
        var reject = resolver.reject;
        if (typeof reject !== 'function') {
            throw new TypeError('Invalid reject construction function');
        }
        return { promise: promise, resolve: resolve, reject: reject };
    }
    function updateDeferredFromPotentialThenable(x, deferred) {
        if (typeof x !== 'object' || x === null) {
            return false;
        }
        try {
            var then = x.then;
            if (typeof then !== 'function') {
                return false;
            }
            var thenCallResult = then.call(x, deferred.resolve, deferred.reject);
        }
        catch (e) {
            var reject = deferred.reject;
            reject(e);
        }
        return true;
    }
    function isPromise(x) {
        return typeof x === 'object' && x !== null && typeof x.promiseStatus !== 'undefined';
    }
    function rejectPromise(promise, reason) {
        if (promise.promiseStatus !== 'unresolved') {
            return;
        }
        var reactions = promise.rejectReactions;
        promise.result = reason;
        promise.resolveReactions = undefined;
        promise.rejectReactions = undefined;
        promise.promiseStatus = 'has-rejection';
        triggerPromiseReactions(reactions, reason);
    }
    function resolvePromise(promise, resolution) {
        if (promise.promiseStatus !== 'unresolved') {
            return;
        }
        var reactions = promise.resolveReactions;
        promise.result = resolution;
        promise.resolveReactions = undefined;
        promise.rejectReactions = undefined;
        promise.promiseStatus = 'has-resolution';
        triggerPromiseReactions(reactions, resolution);
    }
    function triggerPromiseReactions(reactions, argument) {
        for (var i = 0; i < reactions.length; i++) {
            queueMicrotask({ reaction: reactions[i], argument: argument });
        }
    }
    function queueMicrotask(task) {
        if (microtasksQueue.length === 0) {
            setTimeout(handleMicrotasksQueue, 0);
        }
        microtasksQueue.push(task);
    }
    function executePromiseReaction(reaction, argument) {
        var deferred = reaction.deferred;
        var handler = reaction.handler;
        var handlerResult, updateResult;
        try {
            handlerResult = handler(argument);
        }
        catch (e) {
            var reject = deferred.reject;
            return reject(e);
        }
        if (handlerResult === deferred.promise) {
            var reject = deferred.reject;
            return reject(new TypeError('Self resolution'));
        }
        try {
            updateResult = updateDeferredFromPotentialThenable(handlerResult, deferred);
            if (!updateResult) {
                var resolve = deferred.resolve;
                return resolve(handlerResult);
            }
        }
        catch (e) {
            var reject = deferred.reject;
            return reject(e);
        }
    }
    var microtasksQueue = [];
    function handleMicrotasksQueue() {
        while (microtasksQueue.length > 0) {
            var task = microtasksQueue[0];
            try {
                executePromiseReaction(task.reaction, task.argument);
            }
            catch (e) {
                if (typeof Promise.onerror === 'function') {
                    Promise.onerror(e);
                }
            }
            microtasksQueue.shift();
        }
    }
    function throwerFunction(e) {
        throw e;
    }
    function identityFunction(x) {
        return x;
    }
    function createRejectPromiseFunction(promise) {
        return function (reason) {
            rejectPromise(promise, reason);
        };
    }
    function createResolvePromiseFunction(promise) {
        return function (resolution) {
            resolvePromise(promise, resolution);
        };
    }
    function createDeferredConstructionFunctions() {
        var fn = function (resolve, reject) {
            fn.resolve = resolve;
            fn.reject = reject;
        };
        return fn;
    }
    function createPromiseResolutionHandlerFunctions(promise, fulfillmentHandler, rejectionHandler) {
        return function (x) {
            if (x === promise) {
                return rejectionHandler(new TypeError('Self resolution'));
            }
            var cstr = promise.promiseConstructor;
            if (isPromise(x)) {
                var xConstructor = x.promiseConstructor;
                if (xConstructor === cstr) {
                    return x.then(fulfillmentHandler, rejectionHandler);
                }
            }
            var deferred = getDeferred(cstr);
            var updateResult = updateDeferredFromPotentialThenable(x, deferred);
            if (updateResult) {
                var deferredPromise = deferred.promise;
                return deferredPromise.then(fulfillmentHandler, rejectionHandler);
            }
            return fulfillmentHandler(x);
        };
    }
    function createPromiseAllCountdownFunction(index, values, deferred, countdownHolder) {
        return function (x) {
            values[index] = x;
            countdownHolder.countdown--;
            if (countdownHolder.countdown === 0) {
                deferred.resolve(values);
            }
        };
    }
    function Promise(resolver) {
        if (typeof resolver !== 'function') {
            throw new TypeError('resolver is not a function');
        }
        var promise = this;
        if (typeof promise !== 'object') {
            throw new TypeError('Promise to initialize is not an object');
        }
        promise.promiseStatus = 'unresolved';
        promise.resolveReactions = [];
        promise.rejectReactions = [];
        promise.result = undefined;
        var resolve = createResolvePromiseFunction(promise);
        var reject = createRejectPromiseFunction(promise);
        try {
            var result = resolver(resolve, reject);
        }
        catch (e) {
            rejectPromise(promise, e);
        }
        promise.promiseConstructor = Promise;
        return promise;
    }
    Promise.all = function (iterable) {
        var deferred = getDeferred(this);
        var values = [];
        var countdownHolder = { countdown: 0 };
        var index = 0;
        iterable.forEach(function (nextValue) {
            var nextPromise = this.cast(nextValue);
            var fn = createPromiseAllCountdownFunction(index, values, deferred, countdownHolder);
            nextPromise.then(fn, deferred.reject);
            index++;
            countdownHolder.countdown++;
        }, this);
        if (index === 0) {
            deferred.resolve(values);
        }
        return deferred.promise;
    };
    Promise.cast = function (x) {
        if (isPromise(x)) {
            return x;
        }
        var deferred = getDeferred(this);
        deferred.resolve(x);
        return deferred.promise;
    };
    Promise.reject = function (r) {
        var deferred = getDeferred(this);
        var rejectResult = deferred.reject(r);
        return deferred.promise;
    };
    Promise.resolve = function (x) {
        var deferred = getDeferred(this);
        var rejectResult = deferred.resolve(x);
        return deferred.promise;
    };
    Promise.prototype = {
        'catch': function (onRejected) {
            this.then(undefined, onRejected);
        },
        then: function (onFulfilled, onRejected) {
            var promise = this;
            if (!isPromise(promise)) {
                throw new TypeError('this is not a Promises');
            }
            var cstr = promise.promiseConstructor;
            var deferred = getDeferred(cstr);
            var rejectionHandler = typeof onRejected === 'function' ? onRejected : throwerFunction;
            var fulfillmentHandler = typeof onFulfilled === 'function' ? onFulfilled : identityFunction;
            var resolutionHandler = createPromiseResolutionHandlerFunctions(promise, fulfillmentHandler, rejectionHandler);
            var resolveReaction = { deferred: deferred, handler: resolutionHandler };
            var rejectReaction = { deferred: deferred, handler: rejectionHandler };
            switch (promise.promiseStatus) {
                case 'unresolved':
                    promise.resolveReactions.push(resolveReaction);
                    promise.rejectReactions.push(rejectReaction);
                    break;
                case 'has-resolution':
                    var resolution = promise.result;
                    queueMicrotask({ reaction: resolveReaction, argument: resolution });
                    break;
                case 'has-rejection':
                    var rejection = promise.result;
                    queueMicrotask({ reaction: rejectReaction, argument: rejection });
                    break;
            }
            return deferred.promise;
        }
    };
    global.Promise = Promise;
})();
if (typeof exports !== "undefined") {
    exports["Shumway"] = Shumway;
}
(function () {
    function extendBuiltin(prototype, property, value) {
        if (!prototype[property]) {
            Object.defineProperty(prototype, property, { value: value, writable: true, configurable: true, enumerable: false });
        }
    }
    function removeColors(s) {
        return s.replace(/\033\[[0-9]*m/g, "");
    }
    extendBuiltin(String.prototype, "padRight", function (c, n) {
        var str = this;
        var length = removeColors(str).length;
        if (!c || length >= n) {
            return str;
        }
        var max = (n - length) / c.length;
        for (var i = 0; i < max; i++) {
            str += c;
        }
        return str;
    });
    extendBuiltin(String.prototype, "padLeft", function (c, n) {
        var str = this;
        var length = str.length;
        if (!c || length >= n) {
            return str;
        }
        var max = (n - length) / c.length;
        for (var i = 0; i < max; i++) {
            str = c + str;
        }
        return str;
    });
    extendBuiltin(String.prototype, "trim", function () {
        return this.replace(/^\s+|\s+$/g, "");
    });
    extendBuiltin(String.prototype, "endsWith", function (str) {
        return this.indexOf(str, this.length - str.length) !== -1;
    });
    extendBuiltin(Array.prototype, "replace", function (x, y) {
        if (x === y) {
            return 0;
        }
        var count = 0;
        for (var i = 0; i < this.length; i++) {
            if (this[i] === x) {
                this[i] = y;
                count++;
            }
        }
        return count;
    });
})();
var Shumway;
(function (Shumway) {
    var Options;
    (function (Options) {
        var isObject = Shumway.isObject;
        var assert = Shumway.Debug.assert;
        var Argument = (function () {
            function Argument(shortName, longName, type, options) {
                this.shortName = shortName;
                this.longName = longName;
                this.type = type;
                options = options || {};
                this.positional = options.positional;
                this.parseFn = options.parse;
                this.value = options.defaultValue;
            }
            Argument.prototype.parse = function (value) {
                if (this.type === "boolean") {
                    release || assert(typeof value === "boolean");
                    this.value = value;
                }
                else if (this.type === "number") {
                    release || assert(!isNaN(value), value + " is not a number");
                    this.value = parseInt(value, 10);
                }
                else {
                    this.value = value;
                }
                if (this.parseFn) {
                    this.parseFn(this.value);
                }
            };
            return Argument;
        })();
        Options.Argument = Argument;
        var ArgumentParser = (function () {
            function ArgumentParser() {
                this.args = [];
            }
            ArgumentParser.prototype.addArgument = function (shortName, longName, type, options) {
                var argument = new Argument(shortName, longName, type, options);
                this.args.push(argument);
                return argument;
            };
            ArgumentParser.prototype.addBoundOption = function (option) {
                var options = { parse: function (x) {
                    option.value = x;
                } };
                this.args.push(new Argument(option.shortName, option.longName, option.type, options));
            };
            ArgumentParser.prototype.addBoundOptionSet = function (optionSet) {
                var self = this;
                optionSet.options.forEach(function (x) {
                    if (x instanceof OptionSet) {
                        self.addBoundOptionSet(x);
                    }
                    else {
                        release || assert(x instanceof Option);
                        self.addBoundOption(x);
                    }
                });
            };
            ArgumentParser.prototype.getUsage = function () {
                var str = "";
                this.args.forEach(function (x) {
                    if (!x.positional) {
                        str += "[-" + x.shortName + "|--" + x.longName + (x.type === "boolean" ? "" : " " + x.type[0].toUpperCase()) + "]";
                    }
                    else {
                        str += x.longName;
                    }
                    str += " ";
                });
                return str;
            };
            ArgumentParser.prototype.parse = function (args) {
                var nonPositionalArgumentMap = {};
                var positionalArgumentList = [];
                this.args.forEach(function (x) {
                    if (x.positional) {
                        positionalArgumentList.push(x);
                    }
                    else {
                        nonPositionalArgumentMap["-" + x.shortName] = x;
                        nonPositionalArgumentMap["--" + x.longName] = x;
                    }
                });
                var leftoverArguments = [];
                while (args.length) {
                    var argString = args.shift();
                    var argument = null, value = argString;
                    if (argString == '--') {
                        leftoverArguments = leftoverArguments.concat(args);
                        break;
                    }
                    else if (argString.slice(0, 1) == '-' || argString.slice(0, 2) == '--') {
                        argument = nonPositionalArgumentMap[argString];
                        if (!argument) {
                            continue;
                        }
                        if (argument.type !== "boolean") {
                            value = args.shift();
                            release || assert(value !== "-" && value !== "--", "Argument " + argString + " must have a value.");
                        }
                        else {
                            value = true;
                        }
                    }
                    else if (positionalArgumentList.length) {
                        argument = positionalArgumentList.shift();
                    }
                    else {
                        leftoverArguments.push(value);
                    }
                    if (argument) {
                        argument.parse(value);
                    }
                }
                release || assert(positionalArgumentList.length === 0, "Missing positional arguments.");
                return leftoverArguments;
            };
            return ArgumentParser;
        })();
        Options.ArgumentParser = ArgumentParser;
        var OptionSet = (function () {
            function OptionSet(name, settings) {
                if (settings === void 0) { settings = null; }
                this.open = false;
                this.name = name;
                this.settings = settings || {};
                this.options = [];
            }
            OptionSet.prototype.register = function (option) {
                if (option instanceof OptionSet) {
                    for (var i = 0; i < this.options.length; i++) {
                        var optionSet = this.options[i];
                        if (optionSet instanceof OptionSet && optionSet.name === option.name) {
                            return optionSet;
                        }
                    }
                }
                this.options.push(option);
                if (this.settings) {
                    if (option instanceof OptionSet) {
                        var optionSettings = this.settings[option.name];
                        if (isObject(optionSettings)) {
                            option.settings = optionSettings.settings;
                            option.open = optionSettings.open;
                        }
                    }
                    else {
                        if (typeof this.settings[option.longName] !== "undefined") {
                            switch (option.type) {
                                case "boolean":
                                    option.value = !!this.settings[option.longName];
                                    break;
                                case "number":
                                    option.value = +this.settings[option.longName];
                                    break;
                                default:
                                    option.value = this.settings[option.longName];
                                    break;
                            }
                        }
                    }
                }
                return option;
            };
            OptionSet.prototype.trace = function (writer) {
                writer.enter(this.name + " {");
                this.options.forEach(function (option) {
                    option.trace(writer);
                });
                writer.leave("}");
            };
            OptionSet.prototype.getSettings = function () {
                var settings = {};
                this.options.forEach(function (option) {
                    if (option instanceof OptionSet) {
                        settings[option.name] = {
                            settings: option.getSettings(),
                            open: option.open
                        };
                    }
                    else {
                        settings[option.longName] = option.value;
                    }
                });
                return settings;
            };
            OptionSet.prototype.setSettings = function (settings) {
                if (!settings) {
                    return;
                }
                this.options.forEach(function (option) {
                    if (option instanceof OptionSet) {
                        if (option.name in settings) {
                            option.setSettings(settings[option.name].settings);
                        }
                    }
                    else {
                        if (option.longName in settings) {
                            option.value = settings[option.longName];
                        }
                    }
                });
            };
            return OptionSet;
        })();
        Options.OptionSet = OptionSet;
        var Option = (function () {
            function Option(shortName, longName, type, defaultValue, description, config) {
                if (config === void 0) { config = null; }
                this.longName = longName;
                this.shortName = shortName;
                this.type = type;
                this.defaultValue = defaultValue;
                this.value = defaultValue;
                this.description = description;
                this.config = config;
            }
            Option.prototype.parse = function (value) {
                this.value = value;
            };
            Option.prototype.trace = function (writer) {
                writer.writeLn(("-" + this.shortName + "|--" + this.longName).padRight(" ", 30) + " = " + this.type + " " + this.value + " [" + this.defaultValue + "]" + " (" + this.description + ")");
            };
            return Option;
        })();
        Options.Option = Option;
    })(Options = Shumway.Options || (Shumway.Options = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var Settings;
    (function (Settings) {
        Settings.ROOT = "Shumway Options";
        Settings.shumwayOptions = new Shumway.Options.OptionSet(Settings.ROOT, load());
        function isStorageSupported() {
            try {
                return typeof window !== 'undefined' && "localStorage" in window && window["localStorage"] !== null;
            }
            catch (e) {
                return false;
            }
        }
        Settings.isStorageSupported = isStorageSupported;
        function load(key) {
            if (key === void 0) { key = Settings.ROOT; }
            var settings = {};
            if (isStorageSupported()) {
                var lsValue = window.localStorage[key];
                if (lsValue) {
                    try {
                        settings = JSON.parse(lsValue);
                    }
                    catch (e) {
                    }
                }
            }
            return settings;
        }
        Settings.load = load;
        function save(settings, key) {
            if (settings === void 0) { settings = null; }
            if (key === void 0) { key = Settings.ROOT; }
            if (isStorageSupported()) {
                try {
                    window.localStorage[key] = JSON.stringify(settings ? settings : Settings.shumwayOptions.getSettings());
                }
                catch (e) {
                }
            }
        }
        Settings.save = save;
        function setSettings(settings) {
            Settings.shumwayOptions.setSettings(settings);
        }
        Settings.setSettings = setSettings;
        function getSettings(settings) {
            return Settings.shumwayOptions.getSettings();
        }
        Settings.getSettings = getSettings;
    })(Settings = Shumway.Settings || (Shumway.Settings = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var Metrics;
    (function (Metrics) {
        var Timer = (function () {
            function Timer(parent, name) {
                this._parent = parent;
                this._timers = Shumway.ObjectUtilities.createMap();
                this._name = name;
                this._begin = 0;
                this._last = 0;
                this._total = 0;
                this._count = 0;
            }
            Timer.time = function (name, fn) {
                Timer.start(name);
                fn();
                Timer.stop();
            };
            Timer.start = function (name) {
                Timer._top = Timer._top._timers[name] || (Timer._top._timers[name] = new Timer(Timer._top, name));
                Timer._top.start();
                var tmp = Timer._flat._timers[name] || (Timer._flat._timers[name] = new Timer(Timer._flat, name));
                tmp.start();
                Timer._flatStack.push(tmp);
            };
            Timer.stop = function () {
                Timer._top.stop();
                Timer._top = Timer._top._parent;
                Timer._flatStack.pop().stop();
            };
            Timer.stopStart = function (name) {
                Timer.stop();
                Timer.start(name);
            };
            Timer.prototype.start = function () {
                this._begin = Shumway.getTicks();
            };
            Timer.prototype.stop = function () {
                this._last = Shumway.getTicks() - this._begin;
                this._total += this._last;
                this._count += 1;
            };
            Timer.prototype.toJSON = function () {
                return { name: this._name, total: this._total, timers: this._timers };
            };
            Timer.prototype.trace = function (writer) {
                writer.enter(this._name + ": " + this._total.toFixed(2) + " ms" + ", count: " + this._count + ", average: " + (this._total / this._count).toFixed(2) + " ms");
                for (var name in this._timers) {
                    this._timers[name].trace(writer);
                }
                writer.outdent();
            };
            Timer.trace = function (writer) {
                Timer._base.trace(writer);
                Timer._flat.trace(writer);
            };
            Timer._base = new Timer(null, "Total");
            Timer._top = Timer._base;
            Timer._flat = new Timer(null, "Flat");
            Timer._flatStack = [];
            return Timer;
        })();
        Metrics.Timer = Timer;
        var Counter = (function () {
            function Counter(enabled) {
                this._enabled = enabled;
                this.clear();
            }
            Object.defineProperty(Counter.prototype, "counts", {
                get: function () {
                    return this._counts;
                },
                enumerable: true,
                configurable: true
            });
            Counter.prototype.setEnabled = function (enabled) {
                this._enabled = enabled;
            };
            Counter.prototype.clear = function () {
                this._counts = Shumway.ObjectUtilities.createMap();
                this._times = Shumway.ObjectUtilities.createMap();
            };
            Counter.prototype.toJSON = function () {
                return {
                    counts: this._counts,
                    times: this._times
                };
            };
            Counter.prototype.count = function (name, increment, time) {
                if (increment === void 0) { increment = 1; }
                if (time === void 0) { time = 0; }
                if (!this._enabled) {
                    return;
                }
                if (this._counts[name] === undefined) {
                    this._counts[name] = 0;
                    this._times[name] = 0;
                }
                this._counts[name] += increment;
                this._times[name] += time;
                return this._counts[name];
            };
            Counter.prototype.trace = function (writer) {
                for (var name in this._counts) {
                    writer.writeLn(name + ": " + this._counts[name]);
                }
            };
            Counter.prototype._pairToString = function (times, pair) {
                var name = pair[0];
                var count = pair[1];
                var time = times[name];
                var line = name + ": " + count;
                if (time) {
                    line += ", " + time.toFixed(4);
                    if (count > 1) {
                        line += " (" + (time / count).toFixed(4) + ")";
                    }
                }
                return line;
            };
            Counter.prototype.toStringSorted = function () {
                var self = this;
                var times = this._times;
                var pairs = [];
                for (var name in this._counts) {
                    pairs.push([name, this._counts[name]]);
                }
                pairs.sort(function (a, b) {
                    return b[1] - a[1];
                });
                return (pairs.map(function (pair) {
                    return self._pairToString(times, pair);
                }).join(", "));
            };
            Counter.prototype.traceSorted = function (writer, inline) {
                if (inline === void 0) { inline = false; }
                var self = this;
                var times = this._times;
                var pairs = [];
                for (var name in this._counts) {
                    pairs.push([name, this._counts[name]]);
                }
                pairs.sort(function (a, b) {
                    return b[1] - a[1];
                });
                if (inline) {
                    writer.writeLn(pairs.map(function (pair) {
                        return self._pairToString(times, pair);
                    }).join(", "));
                }
                else {
                    pairs.forEach(function (pair) {
                        writer.writeLn(self._pairToString(times, pair));
                    });
                }
            };
            Counter.instance = new Counter(true);
            return Counter;
        })();
        Metrics.Counter = Counter;
        var Average = (function () {
            function Average(max) {
                this._samples = new Float64Array(max);
                this._count = 0;
                this._index = 0;
            }
            Average.prototype.push = function (sample) {
                if (this._count < this._samples.length) {
                    this._count++;
                }
                this._index++;
                this._samples[this._index % this._samples.length] = sample;
            };
            Average.prototype.average = function () {
                var sum = 0;
                for (var i = 0; i < this._count; i++) {
                    sum += this._samples[i];
                }
                return sum / this._count;
            };
            return Average;
        })();
        Metrics.Average = Average;
    })(Metrics = Shumway.Metrics || (Shumway.Metrics = {}));
})(Shumway || (Shumway = {}));
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Shumway;
(function (Shumway) {
    var ArrayUtilities;
    (function (ArrayUtilities) {
        var InflateState;
        (function (InflateState) {
            InflateState[InflateState["INIT"] = 0] = "INIT";
            InflateState[InflateState["BLOCK_0"] = 1] = "BLOCK_0";
            InflateState[InflateState["BLOCK_1"] = 2] = "BLOCK_1";
            InflateState[InflateState["BLOCK_2_PRE"] = 3] = "BLOCK_2_PRE";
            InflateState[InflateState["BLOCK_2"] = 4] = "BLOCK_2";
            InflateState[InflateState["DONE"] = 5] = "DONE";
            InflateState[InflateState["ERROR"] = 6] = "ERROR";
            InflateState[InflateState["VERIFY_HEADER"] = 7] = "VERIFY_HEADER";
        })(InflateState || (InflateState = {}));
        var WINDOW_SIZE = 32768;
        var WINDOW_SHIFT_POSITION = 65536;
        var MAX_WINDOW_SIZE = WINDOW_SHIFT_POSITION + 258;
        var Inflate = (function () {
            function Inflate(verifyHeader) {
                this._error = null;
            }
            Object.defineProperty(Inflate.prototype, "error", {
                get: function () {
                    return this._error;
                },
                enumerable: true,
                configurable: true
            });
            Inflate.prototype.push = function (data) {
                Shumway.Debug.abstractMethod('Inflate.push');
            };
            Inflate.prototype.close = function () {
            };
            Inflate.create = function (verifyHeader) {
                if (typeof SpecialInflate !== 'undefined') {
                    return new SpecialInflateAdapter(verifyHeader);
                }
                return new BasicInflate(verifyHeader);
            };
            Inflate.prototype._processZLibHeader = function (buffer, start, end) {
                var ZLIB_HEADER_SIZE = 2;
                if (start + ZLIB_HEADER_SIZE > end) {
                    return 0;
                }
                var header = (buffer[start] << 8) | buffer[start + 1];
                var error = null;
                if ((header & 0x0f00) !== 0x0800) {
                    error = 'inflate: unknown compression method';
                }
                else if ((header % 31) !== 0) {
                    error = 'inflate: bad FCHECK';
                }
                else if ((header & 0x20) !== 0) {
                    error = 'inflate: FDICT bit set';
                }
                if (error) {
                    this._error = error;
                    return -1;
                }
                else {
                    return ZLIB_HEADER_SIZE;
                }
            };
            Inflate.inflate = function (data, expectedLength, zlibHeader) {
                var output = new Uint8Array(expectedLength);
                var position = 0;
                var inflate = Inflate.create(zlibHeader);
                inflate.onData = function (data) {
                    output.set(data, position);
                    position += data.length;
                };
                inflate.push(data);
                inflate.close();
                return output;
            };
            return Inflate;
        })();
        ArrayUtilities.Inflate = Inflate;
        var BasicInflate = (function (_super) {
            __extends(BasicInflate, _super);
            function BasicInflate(verifyHeader) {
                _super.call(this, verifyHeader);
                this._buffer = null;
                this._bufferSize = 0;
                this._bufferPosition = 0;
                this._bitBuffer = 0;
                this._bitLength = 0;
                this._window = new Uint8Array(MAX_WINDOW_SIZE);
                this._windowPosition = 0;
                this._state = verifyHeader ? 7 /* VERIFY_HEADER */ : 0 /* INIT */;
                this._isFinalBlock = false;
                this._literalTable = null;
                this._distanceTable = null;
                this._block0Read = 0;
                this._block2State = null;
                this._copyState = {
                    state: 0,
                    len: 0,
                    lenBits: 0,
                    dist: 0,
                    distBits: 0
                };
                this._error = undefined;
                if (!areTablesInitialized) {
                    initializeTables();
                    areTablesInitialized = true;
                }
            }
            Object.defineProperty(BasicInflate.prototype, "error", {
                get: function () {
                    return this._error;
                },
                enumerable: true,
                configurable: true
            });
            BasicInflate.prototype.push = function (data) {
                if (!this._buffer || this._buffer.length < this._bufferSize + data.length) {
                    var newBuffer = new Uint8Array(this._bufferSize + data.length);
                    if (this._buffer) {
                        newBuffer.set(this._buffer);
                    }
                    this._buffer = newBuffer;
                }
                this._buffer.set(data, this._bufferSize);
                this._bufferSize += data.length;
                this._bufferPosition = 0;
                var incomplete = false;
                do {
                    var lastPosition = this._windowPosition;
                    if (this._state === 0 /* INIT */) {
                        incomplete = this._decodeInitState();
                        if (incomplete) {
                            break;
                        }
                    }
                    switch (this._state) {
                        case 1 /* BLOCK_0 */:
                            incomplete = this._decodeBlock0();
                            break;
                        case 3 /* BLOCK_2_PRE */:
                            incomplete = this._decodeBlock2Pre();
                            if (incomplete) {
                                break;
                            }
                        case 2 /* BLOCK_1 */:
                        case 4 /* BLOCK_2 */:
                            incomplete = this._decodeBlock();
                            break;
                        case 6 /* ERROR */:
                        case 5 /* DONE */:
                            this._bufferPosition = this._bufferSize;
                            break;
                        case 7 /* VERIFY_HEADER */:
                            var processed = this._processZLibHeader(this._buffer, this._bufferPosition, this._bufferSize);
                            if (processed > 0) {
                                this._bufferPosition += processed;
                                this._state = 0 /* INIT */;
                            }
                            else if (processed === 0) {
                                incomplete = true;
                            }
                            else {
                                this._state = 6 /* ERROR */;
                            }
                            break;
                    }
                    var decoded = this._windowPosition - lastPosition;
                    if (decoded > 0) {
                        this.onData(this._window.subarray(lastPosition, this._windowPosition));
                    }
                    if (this._windowPosition >= WINDOW_SHIFT_POSITION) {
                        if ('copyWithin' in this._buffer) {
                            this._window['copyWithin'](0, this._windowPosition - WINDOW_SIZE, this._windowPosition);
                        }
                        else {
                            this._window.set(this._window.subarray(this._windowPosition - WINDOW_SIZE, this._windowPosition));
                        }
                        this._windowPosition = WINDOW_SIZE;
                    }
                } while (!incomplete && this._bufferPosition < this._bufferSize);
                if (this._bufferPosition < this._bufferSize) {
                    if ('copyWithin' in this._buffer) {
                        this._buffer['copyWithin'](0, this._bufferPosition, this._bufferSize);
                    }
                    else {
                        this._buffer.set(this._buffer.subarray(this._bufferPosition, this._bufferSize));
                    }
                    this._bufferSize -= this._bufferPosition;
                }
                else {
                    this._bufferSize = 0;
                }
            };
            BasicInflate.prototype._decodeInitState = function () {
                if (this._isFinalBlock) {
                    this._state = 5 /* DONE */;
                    return false;
                }
                var buffer = this._buffer, bufferSize = this._bufferSize;
                var bitBuffer = this._bitBuffer, bitLength = this._bitLength;
                var state;
                var position = this._bufferPosition;
                if (((bufferSize - position) << 3) + bitLength < 3) {
                    return true;
                }
                if (bitLength < 3) {
                    bitBuffer |= buffer[position++] << bitLength;
                    bitLength += 8;
                }
                var type = bitBuffer & 7;
                bitBuffer >>= 3;
                bitLength -= 3;
                switch (type >> 1) {
                    case 0:
                        bitBuffer = 0;
                        bitLength = 0;
                        if (bufferSize - position < 4) {
                            return true;
                        }
                        var length = buffer[position] | (buffer[position + 1] << 8);
                        var length2 = buffer[position + 2] | (buffer[position + 3] << 8);
                        position += 4;
                        if ((length ^ length2) !== 0xFFFF) {
                            this._error = 'inflate: invalid block 0 length';
                            state = 6 /* ERROR */;
                            break;
                        }
                        if (length === 0) {
                            state = 0 /* INIT */;
                        }
                        else {
                            this._block0Read = length;
                            state = 1 /* BLOCK_0 */;
                        }
                        break;
                    case 1:
                        state = 2 /* BLOCK_1 */;
                        this._literalTable = fixedLiteralTable;
                        this._distanceTable = fixedDistanceTable;
                        break;
                    case 2:
                        if (((bufferSize - position) << 3) + bitLength < 14 + 3 * 4) {
                            return true;
                        }
                        while (bitLength < 14) {
                            bitBuffer |= buffer[position++] << bitLength;
                            bitLength += 8;
                        }
                        var numLengthCodes = ((bitBuffer >> 10) & 15) + 4;
                        if (((bufferSize - position) << 3) + bitLength < 14 + 3 * numLengthCodes) {
                            return true;
                        }
                        var block2State = {
                            numLiteralCodes: (bitBuffer & 31) + 257,
                            numDistanceCodes: ((bitBuffer >> 5) & 31) + 1,
                            codeLengthTable: undefined,
                            bitLengths: undefined,
                            codesRead: 0,
                            dupBits: 0
                        };
                        bitBuffer >>= 14;
                        bitLength -= 14;
                        var codeLengths = new Uint8Array(19);
                        for (var i = 0; i < numLengthCodes; ++i) {
                            if (bitLength < 3) {
                                bitBuffer |= buffer[position++] << bitLength;
                                bitLength += 8;
                            }
                            codeLengths[codeLengthOrder[i]] = bitBuffer & 7;
                            bitBuffer >>= 3;
                            bitLength -= 3;
                        }
                        for (; i < 19; i++) {
                            codeLengths[codeLengthOrder[i]] = 0;
                        }
                        block2State.bitLengths = new Uint8Array(block2State.numLiteralCodes + block2State.numDistanceCodes);
                        block2State.codeLengthTable = makeHuffmanTable(codeLengths);
                        this._block2State = block2State;
                        state = 3 /* BLOCK_2_PRE */;
                        break;
                    default:
                        this._error = 'inflate: unsupported block type';
                        state = 6 /* ERROR */;
                        return false;
                }
                this._isFinalBlock = !!(type & 1);
                this._state = state;
                this._bufferPosition = position;
                this._bitBuffer = bitBuffer;
                this._bitLength = bitLength;
                return false;
            };
            BasicInflate.prototype._decodeBlock0 = function () {
                var position = this._bufferPosition;
                var windowPosition = this._windowPosition;
                var toRead = this._block0Read;
                var leftInWindow = MAX_WINDOW_SIZE - windowPosition;
                var leftInBuffer = this._bufferSize - position;
                var incomplete = leftInBuffer < toRead;
                var canFit = Math.min(leftInWindow, leftInBuffer, toRead);
                this._window.set(this._buffer.subarray(position, position + canFit), windowPosition);
                this._windowPosition = windowPosition + canFit;
                this._bufferPosition = position + canFit;
                this._block0Read = toRead - canFit;
                if (toRead === canFit) {
                    this._state = 0 /* INIT */;
                    return false;
                }
                return incomplete && leftInWindow < leftInBuffer;
            };
            BasicInflate.prototype._readBits = function (size) {
                var bitBuffer = this._bitBuffer;
                var bitLength = this._bitLength;
                if (size > bitLength) {
                    var pos = this._bufferPosition;
                    var end = this._bufferSize;
                    do {
                        if (pos >= end) {
                            this._bufferPosition = pos;
                            this._bitBuffer = bitBuffer;
                            this._bitLength = bitLength;
                            return -1;
                        }
                        bitBuffer |= this._buffer[pos++] << bitLength;
                        bitLength += 8;
                    } while (size > bitLength);
                    this._bufferPosition = pos;
                }
                this._bitBuffer = bitBuffer >> size;
                this._bitLength = bitLength - size;
                return bitBuffer & ((1 << size) - 1);
            };
            BasicInflate.prototype._readCode = function (codeTable) {
                var bitBuffer = this._bitBuffer;
                var bitLength = this._bitLength;
                var maxBits = codeTable.maxBits;
                if (maxBits > bitLength) {
                    var pos = this._bufferPosition;
                    var end = this._bufferSize;
                    do {
                        if (pos >= end) {
                            this._bufferPosition = pos;
                            this._bitBuffer = bitBuffer;
                            this._bitLength = bitLength;
                            return -1;
                        }
                        bitBuffer |= this._buffer[pos++] << bitLength;
                        bitLength += 8;
                    } while (maxBits > bitLength);
                    this._bufferPosition = pos;
                }
                var code = codeTable.codes[bitBuffer & ((1 << maxBits) - 1)];
                var len = code >> 16;
                if ((code & 0x8000)) {
                    this._error = 'inflate: invalid encoding';
                    this._state = 6 /* ERROR */;
                    return -1;
                }
                this._bitBuffer = bitBuffer >> len;
                this._bitLength = bitLength - len;
                return code & 0xffff;
            };
            BasicInflate.prototype._decodeBlock2Pre = function () {
                var block2State = this._block2State;
                var numCodes = block2State.numLiteralCodes + block2State.numDistanceCodes;
                var bitLengths = block2State.bitLengths;
                var i = block2State.codesRead;
                var prev = i > 0 ? bitLengths[i - 1] : 0;
                var codeLengthTable = block2State.codeLengthTable;
                var j;
                if (block2State.dupBits > 0) {
                    j = this._readBits(block2State.dupBits);
                    if (j < 0) {
                        return true;
                    }
                    while (j--) {
                        bitLengths[i++] = prev;
                    }
                    block2State.dupBits = 0;
                }
                while (i < numCodes) {
                    var sym = this._readCode(codeLengthTable);
                    if (sym < 0) {
                        block2State.codesRead = i;
                        return true;
                    }
                    else if (sym < 16) {
                        bitLengths[i++] = (prev = sym);
                        continue;
                    }
                    var j, dupBits;
                    switch (sym) {
                        case 16:
                            dupBits = 2;
                            j = 3;
                            sym = prev;
                            break;
                        case 17:
                            dupBits = 3;
                            j = 3;
                            sym = 0;
                            break;
                        case 18:
                            dupBits = 7;
                            j = 11;
                            sym = 0;
                            break;
                    }
                    while (j--) {
                        bitLengths[i++] = sym;
                    }
                    j = this._readBits(dupBits);
                    if (j < 0) {
                        block2State.codesRead = i;
                        block2State.dupBits = dupBits;
                        return true;
                    }
                    while (j--) {
                        bitLengths[i++] = sym;
                    }
                    prev = sym;
                }
                this._literalTable = makeHuffmanTable(bitLengths.subarray(0, block2State.numLiteralCodes));
                this._distanceTable = makeHuffmanTable(bitLengths.subarray(block2State.numLiteralCodes));
                this._state = 4 /* BLOCK_2 */;
                this._block2State = null;
                return false;
            };
            BasicInflate.prototype._decodeBlock = function () {
                var literalTable = this._literalTable, distanceTable = this._distanceTable;
                var output = this._window, pos = this._windowPosition;
                var copyState = this._copyState;
                var i, j, sym;
                var len, lenBits, dist, distBits;
                if (copyState.state !== 0) {
                    switch (copyState.state) {
                        case 1:
                            j = 0;
                            if ((j = this._readBits(copyState.lenBits)) < 0) {
                                return true;
                            }
                            copyState.len += j;
                            copyState.state = 2;
                        case 2:
                            if ((sym = this._readCode(distanceTable)) < 0) {
                                return true;
                            }
                            copyState.distBits = distanceExtraBits[sym];
                            copyState.dist = distanceCodes[sym];
                            copyState.state = 3;
                        case 3:
                            j = 0;
                            if (copyState.distBits > 0 && (j = this._readBits(copyState.distBits)) < 0) {
                                return true;
                            }
                            dist = copyState.dist + j;
                            len = copyState.len;
                            i = pos - dist;
                            while (len--) {
                                output[pos++] = output[i++];
                            }
                            copyState.state = 0;
                            if (pos >= WINDOW_SHIFT_POSITION) {
                                this._windowPosition = pos;
                                return false;
                            }
                            break;
                    }
                }
                do {
                    sym = this._readCode(literalTable);
                    if (sym < 0) {
                        this._windowPosition = pos;
                        return true;
                    }
                    else if (sym < 256) {
                        output[pos++] = sym;
                    }
                    else if (sym > 256) {
                        this._windowPosition = pos;
                        sym -= 257;
                        lenBits = lengthExtraBits[sym];
                        len = lengthCodes[sym];
                        j = lenBits === 0 ? 0 : this._readBits(lenBits);
                        if (j < 0) {
                            copyState.state = 1;
                            copyState.len = len;
                            copyState.lenBits = lenBits;
                            return true;
                        }
                        len += j;
                        sym = this._readCode(distanceTable);
                        if (sym < 0) {
                            copyState.state = 2;
                            copyState.len = len;
                            return true;
                        }
                        distBits = distanceExtraBits[sym];
                        dist = distanceCodes[sym];
                        j = distBits === 0 ? 0 : this._readBits(distBits);
                        if (j < 0) {
                            copyState.state = 3;
                            copyState.len = len;
                            copyState.dist = dist;
                            copyState.distBits = distBits;
                            return true;
                        }
                        dist += j;
                        i = pos - dist;
                        while (len--) {
                            output[pos++] = output[i++];
                        }
                    }
                    else {
                        this._state = 0 /* INIT */;
                        break;
                    }
                } while (pos < WINDOW_SHIFT_POSITION);
                this._windowPosition = pos;
                return false;
            };
            return BasicInflate;
        })(Inflate);
        var codeLengthOrder;
        var distanceCodes;
        var distanceExtraBits;
        var fixedDistanceTable;
        var lengthCodes;
        var lengthExtraBits;
        var fixedLiteralTable;
        var areTablesInitialized = false;
        function initializeTables() {
            codeLengthOrder = new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
            distanceCodes = new Uint16Array(30);
            distanceExtraBits = new Uint8Array(30);
            for (var i = 0, j = 0, code = 1; i < 30; ++i) {
                distanceCodes[i] = code;
                code += 1 << (distanceExtraBits[i] = ~~((j += (i > 2 ? 1 : 0)) / 2));
            }
            var bitLengths = new Uint8Array(288);
            for (var i = 0; i < 32; ++i) {
                bitLengths[i] = 5;
            }
            fixedDistanceTable = makeHuffmanTable(bitLengths.subarray(0, 32));
            lengthCodes = new Uint16Array(29);
            lengthExtraBits = new Uint8Array(29);
            for (var i = 0, j = 0, code = 3; i < 29; ++i) {
                lengthCodes[i] = code - (i == 28 ? 1 : 0);
                code += 1 << (lengthExtraBits[i] = ~~(((j += (i > 4 ? 1 : 0)) / 4) % 6));
            }
            for (var i = 0; i < 288; ++i) {
                bitLengths[i] = i < 144 || i > 279 ? 8 : (i < 256 ? 9 : 7);
            }
            fixedLiteralTable = makeHuffmanTable(bitLengths);
        }
        function makeHuffmanTable(bitLengths) {
            var maxBits = Math.max.apply(null, bitLengths);
            var numLengths = bitLengths.length;
            var size = 1 << maxBits;
            var codes = new Uint32Array(size);
            var dummyCode = (maxBits << 16) | 0xFFFF;
            for (var j = 0; j < size; j++) {
                codes[j] = dummyCode;
            }
            for (var code = 0, len = 1, skip = 2; len <= maxBits; code <<= 1, ++len, skip <<= 1) {
                for (var val = 0; val < numLengths; ++val) {
                    if (bitLengths[val] === len) {
                        var lsb = 0;
                        for (var i = 0; i < len; ++i)
                            lsb = (lsb * 2) + ((code >> i) & 1);
                        for (var i = lsb; i < size; i += skip)
                            codes[i] = (len << 16) | val;
                        ++code;
                    }
                }
            }
            return { codes: codes, maxBits: maxBits };
        }
        var SpecialInflateAdapter = (function (_super) {
            __extends(SpecialInflateAdapter, _super);
            function SpecialInflateAdapter(verifyHeader) {
                _super.call(this, verifyHeader);
                this._verifyHeader = verifyHeader;
                this._specialInflate = new SpecialInflate();
                this._specialInflate.onData = function (data) {
                    this.onData(data);
                }.bind(this);
            }
            SpecialInflateAdapter.prototype.push = function (data) {
                if (this._verifyHeader) {
                    var buffer;
                    if (this._buffer) {
                        buffer = new Uint8Array(this._buffer.length + data.length);
                        buffer.set(this._buffer);
                        buffer.set(data, this._buffer.length);
                        this._buffer = null;
                    }
                    else {
                        buffer = new Uint8Array(data);
                    }
                    var processed = this._processZLibHeader(buffer, 0, buffer.length);
                    if (processed === 0) {
                        this._buffer = buffer;
                        return;
                    }
                    this._verifyHeader = true;
                    if (processed > 0) {
                        data = buffer.subarray(processed);
                    }
                }
                if (!this._error) {
                    this._specialInflate.push(data);
                }
            };
            SpecialInflateAdapter.prototype.close = function () {
                if (this._specialInflate) {
                    this._specialInflate.close();
                    this._specialInflate = null;
                }
            };
            return SpecialInflateAdapter;
        })(Inflate);
        var DeflateState;
        (function (DeflateState) {
            DeflateState[DeflateState["WRITE"] = 0] = "WRITE";
            DeflateState[DeflateState["DONE"] = 1] = "DONE";
            DeflateState[DeflateState["ZLIB_HEADER"] = 2] = "ZLIB_HEADER";
        })(DeflateState || (DeflateState = {}));
        var Adler32 = (function () {
            function Adler32() {
                this.a = 1;
                this.b = 0;
            }
            Adler32.prototype.update = function (data, start, end) {
                var a = this.a;
                var b = this.b;
                for (var i = start; i < end; ++i) {
                    a = (a + (data[i] & 0xff)) % 65521;
                    b = (b + a) % 65521;
                }
                this.a = a;
                this.b = b;
            };
            Adler32.prototype.getChecksum = function () {
                return (this.b << 16) | this.a;
            };
            return Adler32;
        })();
        ArrayUtilities.Adler32 = Adler32;
        var Deflate = (function () {
            function Deflate(writeZlibHeader) {
                this._writeZlibHeader = writeZlibHeader;
                this._state = writeZlibHeader ? 2 /* ZLIB_HEADER */ : 0 /* WRITE */;
                this._adler32 = writeZlibHeader ? new Adler32() : null;
            }
            Deflate.prototype.push = function (data) {
                if (this._state === 2 /* ZLIB_HEADER */) {
                    this.onData(new Uint8Array([0x78, 0x9C]));
                    this._state = 0 /* WRITE */;
                }
                var len = data.length;
                var outputSize = len + Math.ceil(len / 0xFFFF) * 5;
                var output = new Uint8Array(outputSize);
                var outputPos = 0;
                var pos = 0;
                while (len > 0xFFFF) {
                    output.set(new Uint8Array([
                        0x00,
                        0xFF,
                        0xFF,
                        0x00,
                        0x00
                    ]), outputPos);
                    outputPos += 5;
                    output.set(data.subarray(pos, pos + 0xFFFF), outputPos);
                    pos += 0xFFFF;
                    outputPos += 0xFFFF;
                    len -= 0xFFFF;
                }
                output.set(new Uint8Array([
                    0x00,
                    (len & 0xff),
                    ((len >> 8) & 0xff),
                    ((~len) & 0xff),
                    (((~len) >> 8) & 0xff)
                ]), outputPos);
                outputPos += 5;
                output.set(data.subarray(pos, len), outputPos);
                this.onData(output);
                if (this._adler32) {
                    this._adler32.update(data, 0, len);
                }
            };
            Deflate.prototype.finish = function () {
                this._state = 1 /* DONE */;
                this.onData(new Uint8Array([
                    0x01,
                    0x00,
                    0x00,
                    0xFF,
                    0xFF
                ]));
                if (this._adler32) {
                    var checksum = this._adler32.getChecksum();
                    this.onData(new Uint8Array([
                        checksum & 0xff,
                        (checksum >> 8) & 0xff,
                        (checksum >> 16) & 0xff,
                        (checksum >>> 24) & 0xff
                    ]));
                }
            };
            return Deflate;
        })();
        ArrayUtilities.Deflate = Deflate;
    })(ArrayUtilities = Shumway.ArrayUtilities || (Shumway.ArrayUtilities = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var ArrayUtilities;
    (function (ArrayUtilities) {
        var notImplemented = Shumway.Debug.notImplemented;
        var utf8decode = Shumway.StringUtilities.utf8decode;
        var utf8encode = Shumway.StringUtilities.utf8encode;
        var clamp = Shumway.NumberUtilities.clamp;
        function checkRange(x, min, max) {
            if (x !== clamp(x, min, max)) {
                throwError('RangeError', Errors.ParamRangeError);
            }
        }
        function asCoerceString(x) {
            if (typeof x === "string") {
                return x;
            }
            else if (x == undefined) {
                return null;
            }
            return x + '';
        }
        var PlainObjectDataBuffer = (function () {
            function PlainObjectDataBuffer(buffer, length, littleEndian) {
                this.buffer = buffer;
                this.length = length;
                this.littleEndian = littleEndian;
            }
            return PlainObjectDataBuffer;
        })();
        ArrayUtilities.PlainObjectDataBuffer = PlainObjectDataBuffer;
        var bitMasks = new Uint32Array(33);
        for (var i = 1, mask = 0; i <= 32; i++) {
            bitMasks[i] = mask = (mask << 1) | 1;
        }
        var TypedArrayViewFlags;
        (function (TypedArrayViewFlags) {
            TypedArrayViewFlags[TypedArrayViewFlags["U8"] = 1] = "U8";
            TypedArrayViewFlags[TypedArrayViewFlags["I32"] = 2] = "I32";
            TypedArrayViewFlags[TypedArrayViewFlags["F32"] = 4] = "F32";
        })(TypedArrayViewFlags || (TypedArrayViewFlags = {}));
        var DataBuffer = (function () {
            function DataBuffer(initialSize) {
                if (initialSize === void 0) { initialSize = DataBuffer.INITIAL_SIZE; }
                if (this._buffer) {
                    return;
                }
                this._buffer = new ArrayBuffer(initialSize);
                this._length = 0;
                this._position = 0;
                this._resetViews();
                this._littleEndian = DataBuffer._nativeLittleEndian;
                this._bitBuffer = 0;
                this._bitLength = 0;
            }
            DataBuffer.FromArrayBuffer = function (buffer, length) {
                if (length === void 0) { length = -1; }
                var dataBuffer = Object.create(DataBuffer.prototype);
                dataBuffer._buffer = buffer;
                dataBuffer._length = length === -1 ? buffer.byteLength : length;
                dataBuffer._position = 0;
                dataBuffer._resetViews();
                dataBuffer._littleEndian = DataBuffer._nativeLittleEndian;
                dataBuffer._bitBuffer = 0;
                dataBuffer._bitLength = 0;
                return dataBuffer;
            };
            DataBuffer.FromPlainObject = function (source) {
                var dataBuffer = DataBuffer.FromArrayBuffer(source.buffer, source.length);
                dataBuffer._littleEndian = source.littleEndian;
                return dataBuffer;
            };
            DataBuffer.prototype.toPlainObject = function () {
                return new PlainObjectDataBuffer(this._buffer, this._length, this._littleEndian);
            };
            DataBuffer.prototype._resetViews = function () {
                this._u8 = new Uint8Array(this._buffer);
                this._i32 = null;
                this._f32 = null;
            };
            DataBuffer.prototype._requestViews = function (flags) {
                if ((this._buffer.byteLength & 0x3) === 0) {
                    if (this._i32 === null && flags & 2 /* I32 */) {
                        this._i32 = new Int32Array(this._buffer);
                    }
                    if (this._f32 === null && flags & 4 /* F32 */) {
                        this._f32 = new Float32Array(this._buffer);
                    }
                }
            };
            DataBuffer.prototype.getBytes = function () {
                return new Uint8Array(this._buffer, 0, this._length);
            };
            DataBuffer.prototype._ensureCapacity = function (length) {
                var currentBuffer = this._buffer;
                if (currentBuffer.byteLength < length) {
                    var newLength = Math.max(currentBuffer.byteLength, 1);
                    while (newLength < length) {
                        newLength *= 2;
                    }
                    var newBuffer = DataBuffer._arrayBufferPool.acquire(newLength);
                    var curentView = this._u8;
                    this._buffer = newBuffer;
                    this._resetViews();
                    this._u8.set(curentView);
                    DataBuffer._arrayBufferPool.release(currentBuffer);
                }
            };
            DataBuffer.prototype.clear = function () {
                this._length = 0;
                this._position = 0;
            };
            DataBuffer.prototype.readBoolean = function () {
                return this.readUnsignedByte() !== 0;
            };
            DataBuffer.prototype.readByte = function () {
                return this.readUnsignedByte() << 24 >> 24;
            };
            DataBuffer.prototype.readUnsignedByte = function () {
                if (this._position + 1 > this._length) {
                    throwError('EOFError', Errors.EOFError);
                }
                return this._u8[this._position++];
            };
            DataBuffer.prototype.readBytes = function (bytes, offset, length) {
                if (offset === void 0) { offset = 0; }
                if (length === void 0) { length = 0; }
                var position = this._position;
                if (!offset) {
                    offset = 0;
                }
                if (!length) {
                    length = this._length - position;
                }
                if (position + length > this._length) {
                    throwError('EOFError', Errors.EOFError);
                }
                if (bytes.length < offset + length) {
                    bytes._ensureCapacity(offset + length);
                    bytes.length = offset + length;
                }
                bytes._u8.set(new Uint8Array(this._buffer, position, length), offset);
                this._position += length;
            };
            DataBuffer.prototype.readShort = function () {
                return this.readUnsignedShort() << 16 >> 16;
            };
            DataBuffer.prototype.readUnsignedShort = function () {
                var u8 = this._u8;
                var position = this._position;
                if (position + 2 > this._length) {
                    throwError('EOFError', Errors.EOFError);
                }
                var a = u8[position + 0];
                var b = u8[position + 1];
                this._position = position + 2;
                return this._littleEndian ? (b << 8) | a : (a << 8) | b;
            };
            DataBuffer.prototype.readInt = function () {
                var u8 = this._u8;
                var position = this._position;
                if (position + 4 > this._length) {
                    throwError('EOFError', Errors.EOFError);
                }
                var a = u8[position + 0];
                var b = u8[position + 1];
                var c = u8[position + 2];
                var d = u8[position + 3];
                this._position = position + 4;
                return this._littleEndian ? (d << 24) | (c << 16) | (b << 8) | a : (a << 24) | (b << 16) | (c << 8) | d;
            };
            DataBuffer.prototype.readUnsignedInt = function () {
                return this.readInt() >>> 0;
            };
            DataBuffer.prototype.readFloat = function () {
                var position = this._position;
                if (position + 4 > this._length) {
                    throwError('EOFError', Errors.EOFError);
                }
                this._position = position + 4;
                this._requestViews(4 /* F32 */);
                if (this._littleEndian && (position & 0x3) === 0 && this._f32) {
                    return this._f32[position >> 2];
                }
                else {
                    var u8 = this._u8;
                    var t8 = Shumway.IntegerUtilities.u8;
                    if (this._littleEndian) {
                        t8[0] = u8[position + 0];
                        t8[1] = u8[position + 1];
                        t8[2] = u8[position + 2];
                        t8[3] = u8[position + 3];
                    }
                    else {
                        t8[3] = u8[position + 0];
                        t8[2] = u8[position + 1];
                        t8[1] = u8[position + 2];
                        t8[0] = u8[position + 3];
                    }
                    return Shumway.IntegerUtilities.f32[0];
                }
            };
            DataBuffer.prototype.readDouble = function () {
                var u8 = this._u8;
                var position = this._position;
                if (position + 8 > this._length) {
                    throwError('EOFError', Errors.EOFError);
                }
                var t8 = Shumway.IntegerUtilities.u8;
                if (this._littleEndian) {
                    t8[0] = u8[position + 0];
                    t8[1] = u8[position + 1];
                    t8[2] = u8[position + 2];
                    t8[3] = u8[position + 3];
                    t8[4] = u8[position + 4];
                    t8[5] = u8[position + 5];
                    t8[6] = u8[position + 6];
                    t8[7] = u8[position + 7];
                }
                else {
                    t8[0] = u8[position + 7];
                    t8[1] = u8[position + 6];
                    t8[2] = u8[position + 5];
                    t8[3] = u8[position + 4];
                    t8[4] = u8[position + 3];
                    t8[5] = u8[position + 2];
                    t8[6] = u8[position + 1];
                    t8[7] = u8[position + 0];
                }
                this._position = position + 8;
                return Shumway.IntegerUtilities.f64[0];
            };
            DataBuffer.prototype.writeBoolean = function (value) {
                this.writeByte(!!value ? 1 : 0);
            };
            DataBuffer.prototype.writeByte = function (value) {
                var length = this._position + 1;
                this._ensureCapacity(length);
                this._u8[this._position++] = value;
                if (length > this._length) {
                    this._length = length;
                }
            };
            DataBuffer.prototype.writeUnsignedByte = function (value) {
                var length = this._position + 1;
                this._ensureCapacity(length);
                this._u8[this._position++] = value;
                if (length > this._length) {
                    this._length = length;
                }
            };
            DataBuffer.prototype.writeRawBytes = function (bytes) {
                var length = this._position + bytes.length;
                this._ensureCapacity(length);
                this._u8.set(bytes, this._position);
                this._position = length;
                if (length > this._length) {
                    this._length = length;
                }
            };
            DataBuffer.prototype.writeBytes = function (bytes, offset, length) {
                if (offset === void 0) { offset = 0; }
                if (length === void 0) { length = 0; }
                if (Shumway.isNullOrUndefined(bytes)) {
                    throwError('TypeError', Errors.NullPointerError, 'bytes');
                }
                if (arguments.length < 2) {
                    offset = 0;
                }
                if (arguments.length < 3) {
                    length = 0;
                }
                checkRange(offset, 0, bytes.length);
                checkRange(offset + length, 0, bytes.length);
                if (length === 0) {
                    length = bytes.length - offset;
                }
                this.writeRawBytes(new Int8Array(bytes._buffer, offset, length));
            };
            DataBuffer.prototype.writeShort = function (value) {
                this.writeUnsignedShort(value);
            };
            DataBuffer.prototype.writeUnsignedShort = function (value) {
                var position = this._position;
                this._ensureCapacity(position + 2);
                var u8 = this._u8;
                if (this._littleEndian) {
                    u8[position + 0] = value;
                    u8[position + 1] = value >> 8;
                }
                else {
                    u8[position + 0] = value >> 8;
                    u8[position + 1] = value;
                }
                position += 2;
                this._position = position;
                if (position > this._length) {
                    this._length = position;
                }
            };
            DataBuffer.prototype.writeInt = function (value) {
                this.writeUnsignedInt(value);
            };
            DataBuffer.prototype.write2Ints = function (a, b) {
                this.write2UnsignedInts(a, b);
            };
            DataBuffer.prototype.write4Ints = function (a, b, c, d) {
                this.write4UnsignedInts(a, b, c, d);
            };
            DataBuffer.prototype.writeUnsignedInt = function (value) {
                var position = this._position;
                this._ensureCapacity(position + 4);
                this._requestViews(2 /* I32 */);
                if (this._littleEndian === DataBuffer._nativeLittleEndian && (position & 0x3) === 0 && this._i32) {
                    this._i32[position >> 2] = value;
                }
                else {
                    var u8 = this._u8;
                    if (this._littleEndian) {
                        u8[position + 0] = value;
                        u8[position + 1] = value >> 8;
                        u8[position + 2] = value >> 16;
                        u8[position + 3] = value >> 24;
                    }
                    else {
                        u8[position + 0] = value >> 24;
                        u8[position + 1] = value >> 16;
                        u8[position + 2] = value >> 8;
                        u8[position + 3] = value;
                    }
                }
                position += 4;
                this._position = position;
                if (position > this._length) {
                    this._length = position;
                }
            };
            DataBuffer.prototype.write2UnsignedInts = function (a, b) {
                var position = this._position;
                this._ensureCapacity(position + 8);
                this._requestViews(2 /* I32 */);
                if (this._littleEndian === DataBuffer._nativeLittleEndian && (position & 0x3) === 0 && this._i32) {
                    this._i32[(position >> 2) + 0] = a;
                    this._i32[(position >> 2) + 1] = b;
                    position += 8;
                    this._position = position;
                    if (position > this._length) {
                        this._length = position;
                    }
                }
                else {
                    this.writeUnsignedInt(a);
                    this.writeUnsignedInt(b);
                }
            };
            DataBuffer.prototype.write4UnsignedInts = function (a, b, c, d) {
                var position = this._position;
                this._ensureCapacity(position + 16);
                this._requestViews(2 /* I32 */);
                if (this._littleEndian === DataBuffer._nativeLittleEndian && (position & 0x3) === 0 && this._i32) {
                    this._i32[(position >> 2) + 0] = a;
                    this._i32[(position >> 2) + 1] = b;
                    this._i32[(position >> 2) + 2] = c;
                    this._i32[(position >> 2) + 3] = d;
                    position += 16;
                    this._position = position;
                    if (position > this._length) {
                        this._length = position;
                    }
                }
                else {
                    this.writeUnsignedInt(a);
                    this.writeUnsignedInt(b);
                    this.writeUnsignedInt(c);
                    this.writeUnsignedInt(d);
                }
            };
            DataBuffer.prototype.writeFloat = function (value) {
                var position = this._position;
                this._ensureCapacity(position + 4);
                this._requestViews(4 /* F32 */);
                if (this._littleEndian === DataBuffer._nativeLittleEndian && (position & 0x3) === 0 && this._f32) {
                    this._f32[position >> 2] = value;
                }
                else {
                    var u8 = this._u8;
                    Shumway.IntegerUtilities.f32[0] = value;
                    var t8 = Shumway.IntegerUtilities.u8;
                    if (this._littleEndian) {
                        u8[position + 0] = t8[0];
                        u8[position + 1] = t8[1];
                        u8[position + 2] = t8[2];
                        u8[position + 3] = t8[3];
                    }
                    else {
                        u8[position + 0] = t8[3];
                        u8[position + 1] = t8[2];
                        u8[position + 2] = t8[1];
                        u8[position + 3] = t8[0];
                    }
                }
                position += 4;
                this._position = position;
                if (position > this._length) {
                    this._length = position;
                }
            };
            DataBuffer.prototype.write6Floats = function (a, b, c, d, e, f) {
                var position = this._position;
                this._ensureCapacity(position + 24);
                this._requestViews(4 /* F32 */);
                if (this._littleEndian === DataBuffer._nativeLittleEndian && (position & 0x3) === 0 && this._f32) {
                    this._f32[(position >> 2) + 0] = a;
                    this._f32[(position >> 2) + 1] = b;
                    this._f32[(position >> 2) + 2] = c;
                    this._f32[(position >> 2) + 3] = d;
                    this._f32[(position >> 2) + 4] = e;
                    this._f32[(position >> 2) + 5] = f;
                    position += 24;
                    this._position = position;
                    if (position > this._length) {
                        this._length = position;
                    }
                }
                else {
                    this.writeFloat(a);
                    this.writeFloat(b);
                    this.writeFloat(c);
                    this.writeFloat(d);
                    this.writeFloat(e);
                    this.writeFloat(f);
                }
            };
            DataBuffer.prototype.writeDouble = function (value) {
                var position = this._position;
                this._ensureCapacity(position + 8);
                var u8 = this._u8;
                Shumway.IntegerUtilities.f64[0] = value;
                var t8 = Shumway.IntegerUtilities.u8;
                if (this._littleEndian) {
                    u8[position + 0] = t8[0];
                    u8[position + 1] = t8[1];
                    u8[position + 2] = t8[2];
                    u8[position + 3] = t8[3];
                    u8[position + 4] = t8[4];
                    u8[position + 5] = t8[5];
                    u8[position + 6] = t8[6];
                    u8[position + 7] = t8[7];
                }
                else {
                    u8[position + 0] = t8[7];
                    u8[position + 1] = t8[6];
                    u8[position + 2] = t8[5];
                    u8[position + 3] = t8[4];
                    u8[position + 4] = t8[3];
                    u8[position + 5] = t8[2];
                    u8[position + 6] = t8[1];
                    u8[position + 7] = t8[0];
                }
                position += 8;
                this._position = position;
                if (position > this._length) {
                    this._length = position;
                }
            };
            DataBuffer.prototype.readRawBytes = function () {
                return new Int8Array(this._buffer, 0, this._length);
            };
            DataBuffer.prototype.writeUTF = function (value) {
                value = asCoerceString(value);
                var bytes = utf8decode(value);
                this.writeShort(bytes.length);
                this.writeRawBytes(bytes);
            };
            DataBuffer.prototype.writeUTFBytes = function (value) {
                value = asCoerceString(value);
                var bytes = utf8decode(value);
                this.writeRawBytes(bytes);
            };
            DataBuffer.prototype.readUTF = function () {
                return this.readUTFBytes(this.readShort());
            };
            DataBuffer.prototype.readUTFBytes = function (length) {
                length = length >>> 0;
                var pos = this._position;
                if (pos + length > this._length) {
                    throwError('EOFError', Errors.EOFError);
                }
                this._position += length;
                return utf8encode(new Int8Array(this._buffer, pos, length));
            };
            Object.defineProperty(DataBuffer.prototype, "length", {
                get: function () {
                    return this._length;
                },
                set: function (value) {
                    value = value >>> 0;
                    var capacity = this._buffer.byteLength;
                    if (value > capacity) {
                        this._ensureCapacity(value);
                    }
                    this._length = value;
                    this._position = clamp(this._position, 0, this._length);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataBuffer.prototype, "bytesAvailable", {
                get: function () {
                    return this._length - this._position;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataBuffer.prototype, "position", {
                get: function () {
                    return this._position;
                },
                set: function (position) {
                    this._position = position >>> 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataBuffer.prototype, "buffer", {
                get: function () {
                    return this._buffer;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataBuffer.prototype, "bytes", {
                get: function () {
                    return this._u8;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataBuffer.prototype, "ints", {
                get: function () {
                    this._requestViews(2 /* I32 */);
                    return this._i32;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataBuffer.prototype, "objectEncoding", {
                get: function () {
                    return this._objectEncoding;
                },
                set: function (version) {
                    version = version >>> 0;
                    this._objectEncoding = version;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(DataBuffer.prototype, "endian", {
                get: function () {
                    return this._littleEndian ? "littleEndian" : "bigEndian";
                },
                set: function (type) {
                    type = asCoerceString(type);
                    if (type === "auto") {
                        this._littleEndian = DataBuffer._nativeLittleEndian;
                    }
                    else {
                        this._littleEndian = type === "littleEndian";
                    }
                },
                enumerable: true,
                configurable: true
            });
            DataBuffer.prototype.toString = function () {
                return utf8encode(new Int8Array(this._buffer, 0, this._length));
            };
            DataBuffer.prototype.toBlob = function (type) {
                return new Blob([new Int8Array(this._buffer, this._position, this._length)], { type: type });
            };
            DataBuffer.prototype.writeMultiByte = function (value, charSet) {
                value = asCoerceString(value);
                charSet = asCoerceString(charSet);
                notImplemented("packageInternal flash.utils.ObjectOutput::writeMultiByte");
                return;
            };
            DataBuffer.prototype.readMultiByte = function (length, charSet) {
                length = length >>> 0;
                charSet = asCoerceString(charSet);
                notImplemented("packageInternal flash.utils.ObjectInput::readMultiByte");
                return;
            };
            DataBuffer.prototype.getValue = function (name) {
                name = name | 0;
                if (name >= this._length) {
                    return undefined;
                }
                return this._u8[name];
            };
            DataBuffer.prototype.setValue = function (name, value) {
                name = name | 0;
                var length = name + 1;
                this._ensureCapacity(length);
                this._u8[name] = value;
                if (length > this._length) {
                    this._length = length;
                }
            };
            DataBuffer.prototype.readFixed = function () {
                return this.readInt() / 65536;
            };
            DataBuffer.prototype.readFixed8 = function () {
                return this.readShort() / 256;
            };
            DataBuffer.prototype.readFloat16 = function () {
                var uint16 = this.readUnsignedShort();
                var sign = uint16 >> 15 ? -1 : 1;
                var exponent = (uint16 & 0x7c00) >> 10;
                var fraction = uint16 & 0x03ff;
                if (!exponent) {
                    return sign * Math.pow(2, -14) * (fraction / 1024);
                }
                if (exponent === 0x1f) {
                    return fraction ? NaN : sign * Infinity;
                }
                return sign * Math.pow(2, exponent - 15) * (1 + (fraction / 1024));
            };
            DataBuffer.prototype.readEncodedU32 = function () {
                var value = this.readUnsignedByte();
                if (!(value & 0x080)) {
                    return value;
                }
                value = (value & 0x7f) | this.readUnsignedByte() << 7;
                if (!(value & 0x4000)) {
                    return value;
                }
                value = (value & 0x3fff) | this.readUnsignedByte() << 14;
                if (!(value & 0x200000)) {
                    return value;
                }
                value = (value & 0x1FFFFF) | this.readUnsignedByte() << 21;
                if (!(value & 0x10000000)) {
                    return value;
                }
                return (value & 0xFFFFFFF) | (this.readUnsignedByte() << 28);
            };
            DataBuffer.prototype.readBits = function (size) {
                return (this.readUnsignedBits(size) << (32 - size)) >> (32 - size);
            };
            DataBuffer.prototype.readUnsignedBits = function (size) {
                var buffer = this._bitBuffer;
                var length = this._bitLength;
                while (size > length) {
                    buffer = (buffer << 8) | this.readUnsignedByte();
                    length += 8;
                }
                length -= size;
                var value = (buffer >>> length) & bitMasks[size];
                this._bitBuffer = buffer;
                this._bitLength = length;
                return value;
            };
            DataBuffer.prototype.readFixedBits = function (size) {
                return this.readBits(size) / 65536;
            };
            DataBuffer.prototype.readString = function (length) {
                var position = this._position;
                if (length) {
                    if (position + length > this._length) {
                        throwError('EOFError', Errors.EOFError);
                    }
                    this._position += length;
                }
                else {
                    length = 0;
                    for (var i = position; i < this._length && this._u8[i]; i++) {
                        length++;
                    }
                    this._position += length + 1;
                }
                return utf8encode(new Int8Array(this._buffer, position, length));
            };
            DataBuffer.prototype.align = function () {
                this._bitBuffer = 0;
                this._bitLength = 0;
            };
            DataBuffer.prototype._compress = function (algorithm) {
                algorithm = asCoerceString(algorithm);
                var deflate;
                switch (algorithm) {
                    case 'zlib':
                        deflate = new ArrayUtilities.Deflate(true);
                        break;
                    case 'deflate':
                        deflate = new ArrayUtilities.Deflate(false);
                        break;
                    default:
                        return;
                }
                var output = new DataBuffer();
                deflate.onData = output.writeRawBytes.bind(output);
                deflate.push(this._u8.subarray(0, this._length));
                deflate.finish();
                this._ensureCapacity(output._u8.length);
                this._u8.set(output._u8);
                this.length = output.length;
                this._position = 0;
            };
            DataBuffer.prototype._uncompress = function (algorithm) {
                algorithm = asCoerceString(algorithm);
                var inflate;
                switch (algorithm) {
                    case 'zlib':
                        inflate = ArrayUtilities.Inflate.create(true);
                        break;
                    case 'deflate':
                        inflate = ArrayUtilities.Inflate.create(false);
                        break;
                    default:
                        return;
                }
                var output = new DataBuffer();
                inflate.onData = output.writeRawBytes.bind(output);
                inflate.push(this._u8.subarray(0, this._length));
                if (inflate.error) {
                    throwError('IOError', Errors.CompressedDataError);
                }
                inflate.close();
                this._ensureCapacity(output._u8.length);
                this._u8.set(output._u8);
                this.length = output.length;
                this._position = 0;
            };
            DataBuffer._nativeLittleEndian = new Int8Array(new Int32Array([1]).buffer)[0] === 1;
            DataBuffer.INITIAL_SIZE = 128;
            DataBuffer._arrayBufferPool = new Shumway.ArrayBufferPool();
            return DataBuffer;
        })();
        ArrayUtilities.DataBuffer = DataBuffer;
    })(ArrayUtilities = Shumway.ArrayUtilities || (Shumway.ArrayUtilities = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var DataBuffer = Shumway.ArrayUtilities.DataBuffer;
    var ensureTypedArrayCapacity = Shumway.ArrayUtilities.ensureTypedArrayCapacity;
    var assert = Shumway.Debug.assert;
    (function (PathCommand) {
        PathCommand[PathCommand["BeginSolidFill"] = 1] = "BeginSolidFill";
        PathCommand[PathCommand["BeginGradientFill"] = 2] = "BeginGradientFill";
        PathCommand[PathCommand["BeginBitmapFill"] = 3] = "BeginBitmapFill";
        PathCommand[PathCommand["EndFill"] = 4] = "EndFill";
        PathCommand[PathCommand["LineStyleSolid"] = 5] = "LineStyleSolid";
        PathCommand[PathCommand["LineStyleGradient"] = 6] = "LineStyleGradient";
        PathCommand[PathCommand["LineStyleBitmap"] = 7] = "LineStyleBitmap";
        PathCommand[PathCommand["LineEnd"] = 8] = "LineEnd";
        PathCommand[PathCommand["MoveTo"] = 9] = "MoveTo";
        PathCommand[PathCommand["LineTo"] = 10] = "LineTo";
        PathCommand[PathCommand["CurveTo"] = 11] = "CurveTo";
        PathCommand[PathCommand["CubicCurveTo"] = 12] = "CubicCurveTo";
    })(Shumway.PathCommand || (Shumway.PathCommand = {}));
    var PathCommand = Shumway.PathCommand;
    (function (GradientType) {
        GradientType[GradientType["Linear"] = 0x10] = "Linear";
        GradientType[GradientType["Radial"] = 0x12] = "Radial";
    })(Shumway.GradientType || (Shumway.GradientType = {}));
    var GradientType = Shumway.GradientType;
    (function (GradientSpreadMethod) {
        GradientSpreadMethod[GradientSpreadMethod["Pad"] = 0] = "Pad";
        GradientSpreadMethod[GradientSpreadMethod["Reflect"] = 1] = "Reflect";
        GradientSpreadMethod[GradientSpreadMethod["Repeat"] = 2] = "Repeat";
    })(Shumway.GradientSpreadMethod || (Shumway.GradientSpreadMethod = {}));
    var GradientSpreadMethod = Shumway.GradientSpreadMethod;
    (function (GradientInterpolationMethod) {
        GradientInterpolationMethod[GradientInterpolationMethod["RGB"] = 0] = "RGB";
        GradientInterpolationMethod[GradientInterpolationMethod["LinearRGB"] = 1] = "LinearRGB";
    })(Shumway.GradientInterpolationMethod || (Shumway.GradientInterpolationMethod = {}));
    var GradientInterpolationMethod = Shumway.GradientInterpolationMethod;
    (function (LineScaleMode) {
        LineScaleMode[LineScaleMode["None"] = 0] = "None";
        LineScaleMode[LineScaleMode["Normal"] = 1] = "Normal";
        LineScaleMode[LineScaleMode["Vertical"] = 2] = "Vertical";
        LineScaleMode[LineScaleMode["Horizontal"] = 3] = "Horizontal";
    })(Shumway.LineScaleMode || (Shumway.LineScaleMode = {}));
    var LineScaleMode = Shumway.LineScaleMode;
    var PlainObjectShapeData = (function () {
        function PlainObjectShapeData(commands, commandsPosition, coordinates, morphCoordinates, coordinatesPosition, styles, stylesLength, morphStyles, morphStylesLength, hasFills, hasLines) {
            this.commands = commands;
            this.commandsPosition = commandsPosition;
            this.coordinates = coordinates;
            this.morphCoordinates = morphCoordinates;
            this.coordinatesPosition = coordinatesPosition;
            this.styles = styles;
            this.stylesLength = stylesLength;
            this.morphStyles = morphStyles;
            this.morphStylesLength = morphStylesLength;
            this.hasFills = hasFills;
            this.hasLines = hasLines;
        }
        return PlainObjectShapeData;
    })();
    Shumway.PlainObjectShapeData = PlainObjectShapeData;
    var DefaultSize;
    (function (DefaultSize) {
        DefaultSize[DefaultSize["Commands"] = 32] = "Commands";
        DefaultSize[DefaultSize["Coordinates"] = 128] = "Coordinates";
        DefaultSize[DefaultSize["Styles"] = 16] = "Styles";
    })(DefaultSize || (DefaultSize = {}));
    var ShapeData = (function () {
        function ShapeData(initialize) {
            if (initialize === void 0) { initialize = true; }
            if (initialize) {
                this.clear();
            }
        }
        ShapeData.FromPlainObject = function (source) {
            var data = new ShapeData(false);
            data.commands = source.commands;
            data.coordinates = source.coordinates;
            data.morphCoordinates = source.morphCoordinates;
            data.commandsPosition = source.commandsPosition;
            data.coordinatesPosition = source.coordinatesPosition;
            data.styles = DataBuffer.FromArrayBuffer(source.styles, source.stylesLength);
            data.styles.endian = 'auto';
            if (source.morphStyles) {
                data.morphStyles = DataBuffer.FromArrayBuffer(source.morphStyles, source.morphStylesLength);
                data.morphStyles.endian = 'auto';
            }
            data.hasFills = source.hasFills;
            data.hasLines = source.hasLines;
            return data;
        };
        ShapeData.prototype.moveTo = function (x, y) {
            this.ensurePathCapacities(1, 2);
            this.commands[this.commandsPosition++] = 9 /* MoveTo */;
            this.coordinates[this.coordinatesPosition++] = x;
            this.coordinates[this.coordinatesPosition++] = y;
        };
        ShapeData.prototype.lineTo = function (x, y) {
            this.ensurePathCapacities(1, 2);
            this.commands[this.commandsPosition++] = 10 /* LineTo */;
            this.coordinates[this.coordinatesPosition++] = x;
            this.coordinates[this.coordinatesPosition++] = y;
        };
        ShapeData.prototype.curveTo = function (controlX, controlY, anchorX, anchorY) {
            this.ensurePathCapacities(1, 4);
            this.commands[this.commandsPosition++] = 11 /* CurveTo */;
            this.coordinates[this.coordinatesPosition++] = controlX;
            this.coordinates[this.coordinatesPosition++] = controlY;
            this.coordinates[this.coordinatesPosition++] = anchorX;
            this.coordinates[this.coordinatesPosition++] = anchorY;
        };
        ShapeData.prototype.cubicCurveTo = function (controlX1, controlY1, controlX2, controlY2, anchorX, anchorY) {
            this.ensurePathCapacities(1, 6);
            this.commands[this.commandsPosition++] = 12 /* CubicCurveTo */;
            this.coordinates[this.coordinatesPosition++] = controlX1;
            this.coordinates[this.coordinatesPosition++] = controlY1;
            this.coordinates[this.coordinatesPosition++] = controlX2;
            this.coordinates[this.coordinatesPosition++] = controlY2;
            this.coordinates[this.coordinatesPosition++] = anchorX;
            this.coordinates[this.coordinatesPosition++] = anchorY;
        };
        ShapeData.prototype.beginFill = function (color) {
            this.ensurePathCapacities(1, 0);
            this.commands[this.commandsPosition++] = 1 /* BeginSolidFill */;
            this.styles.writeUnsignedInt(color);
            this.hasFills = true;
        };
        ShapeData.prototype.writeMorphFill = function (color) {
            this.morphStyles.writeUnsignedInt(color);
        };
        ShapeData.prototype.endFill = function () {
            this.ensurePathCapacities(1, 0);
            this.commands[this.commandsPosition++] = 4 /* EndFill */;
        };
        ShapeData.prototype.endLine = function () {
            this.ensurePathCapacities(1, 0);
            this.commands[this.commandsPosition++] = 8 /* LineEnd */;
        };
        ShapeData.prototype.lineStyle = function (thickness, color, pixelHinting, scaleMode, caps, joints, miterLimit) {
            release || assert(thickness === (thickness | 0), thickness >= 0 && thickness <= 0xff * 20);
            this.ensurePathCapacities(2, 0);
            this.commands[this.commandsPosition++] = 5 /* LineStyleSolid */;
            this.coordinates[this.coordinatesPosition++] = thickness;
            var styles = this.styles;
            styles.writeUnsignedInt(color);
            styles.writeBoolean(pixelHinting);
            styles.writeUnsignedByte(scaleMode);
            styles.writeUnsignedByte(caps);
            styles.writeUnsignedByte(joints);
            styles.writeUnsignedByte(miterLimit);
            this.hasLines = true;
        };
        ShapeData.prototype.writeMorphLineStyle = function (thickness, color) {
            this.morphCoordinates[this.coordinatesPosition - 1] = thickness;
            this.morphStyles.writeUnsignedInt(color);
        };
        ShapeData.prototype.beginBitmap = function (pathCommand, bitmapId, matrix, repeat, smooth) {
            release || assert(pathCommand === 3 /* BeginBitmapFill */ || pathCommand === 7 /* LineStyleBitmap */);
            this.ensurePathCapacities(1, 0);
            this.commands[this.commandsPosition++] = pathCommand;
            var styles = this.styles;
            styles.writeUnsignedInt(bitmapId);
            this._writeStyleMatrix(matrix, false);
            styles.writeBoolean(repeat);
            styles.writeBoolean(smooth);
            this.hasFills = true;
        };
        ShapeData.prototype.writeMorphBitmap = function (matrix) {
            this._writeStyleMatrix(matrix, true);
        };
        ShapeData.prototype.beginGradient = function (pathCommand, colors, ratios, gradientType, matrix, spread, interpolation, focalPointRatio) {
            release || assert(pathCommand === 2 /* BeginGradientFill */ || pathCommand === 6 /* LineStyleGradient */);
            this.ensurePathCapacities(1, 0);
            this.commands[this.commandsPosition++] = pathCommand;
            var styles = this.styles;
            styles.writeUnsignedByte(gradientType);
            release || assert(focalPointRatio === (focalPointRatio | 0));
            styles.writeShort(focalPointRatio);
            this._writeStyleMatrix(matrix, false);
            var colorStops = colors.length;
            styles.writeByte(colorStops);
            for (var i = 0; i < colorStops; i++) {
                styles.writeUnsignedByte(ratios[i]);
                styles.writeUnsignedInt(colors[i]);
            }
            styles.writeUnsignedByte(spread);
            styles.writeUnsignedByte(interpolation);
            this.hasFills = true;
        };
        ShapeData.prototype.writeMorphGradient = function (colors, ratios, matrix) {
            this._writeStyleMatrix(matrix, true);
            var styles = this.morphStyles;
            for (var i = 0; i < colors.length; i++) {
                styles.writeUnsignedByte(ratios[i]);
                styles.writeUnsignedInt(colors[i]);
            }
        };
        ShapeData.prototype.writeCommandAndCoordinates = function (command, x, y) {
            this.ensurePathCapacities(1, 2);
            this.commands[this.commandsPosition++] = command;
            this.coordinates[this.coordinatesPosition++] = x;
            this.coordinates[this.coordinatesPosition++] = y;
        };
        ShapeData.prototype.writeCoordinates = function (x, y) {
            this.ensurePathCapacities(0, 2);
            this.coordinates[this.coordinatesPosition++] = x;
            this.coordinates[this.coordinatesPosition++] = y;
        };
        ShapeData.prototype.writeMorphCoordinates = function (x, y) {
            this.morphCoordinates = ensureTypedArrayCapacity(this.morphCoordinates, this.coordinatesPosition);
            this.morphCoordinates[this.coordinatesPosition - 2] = x;
            this.morphCoordinates[this.coordinatesPosition - 1] = y;
        };
        ShapeData.prototype.clear = function () {
            this.commandsPosition = this.coordinatesPosition = 0;
            this.commands = new Uint8Array(32 /* Commands */);
            this.coordinates = new Int32Array(128 /* Coordinates */);
            this.styles = new DataBuffer(16 /* Styles */);
            this.styles.endian = 'auto';
            this.hasFills = this.hasLines = false;
        };
        ShapeData.prototype.isEmpty = function () {
            return this.commandsPosition === 0;
        };
        ShapeData.prototype.clone = function () {
            var copy = new ShapeData(false);
            copy.commands = new Uint8Array(this.commands);
            copy.commandsPosition = this.commandsPosition;
            copy.coordinates = new Int32Array(this.coordinates);
            copy.coordinatesPosition = this.coordinatesPosition;
            copy.styles = new DataBuffer(this.styles.length);
            copy.styles.writeRawBytes(this.styles.bytes);
            if (this.morphStyles) {
                copy.morphStyles = new DataBuffer(this.morphStyles.length);
                copy.morphStyles.writeRawBytes(this.morphStyles.bytes);
            }
            copy.hasFills = this.hasFills;
            copy.hasLines = this.hasLines;
            return copy;
        };
        ShapeData.prototype.toPlainObject = function () {
            return new PlainObjectShapeData(this.commands, this.commandsPosition, this.coordinates, this.morphCoordinates, this.coordinatesPosition, this.styles.buffer, this.styles.length, this.morphStyles && this.morphStyles.buffer, this.morphStyles ? this.morphStyles.length : 0, this.hasFills, this.hasLines);
        };
        Object.defineProperty(ShapeData.prototype, "buffers", {
            get: function () {
                var buffers = [this.commands.buffer, this.coordinates.buffer, this.styles.buffer];
                if (this.morphCoordinates) {
                    buffers.push(this.morphCoordinates.buffer);
                }
                if (this.morphStyles) {
                    buffers.push(this.morphStyles.buffer);
                }
                return buffers;
            },
            enumerable: true,
            configurable: true
        });
        ShapeData.prototype._writeStyleMatrix = function (matrix, isMorph) {
            var styles = isMorph ? this.morphStyles : this.styles;
            styles.write6Floats(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);
        };
        ShapeData.prototype.ensurePathCapacities = function (numCommands, numCoordinates) {
            this.commands = ensureTypedArrayCapacity(this.commands, this.commandsPosition + numCommands);
            this.coordinates = ensureTypedArrayCapacity(this.coordinates, this.coordinatesPosition + numCoordinates);
        };
        return ShapeData;
    })();
    Shumway.ShapeData = ShapeData;
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var SWF;
    (function (SWF) {
        var Parser;
        (function (Parser) {
            (function (SwfTag) {
                SwfTag[SwfTag["CODE_END"] = 0] = "CODE_END";
                SwfTag[SwfTag["CODE_SHOW_FRAME"] = 1] = "CODE_SHOW_FRAME";
                SwfTag[SwfTag["CODE_DEFINE_SHAPE"] = 2] = "CODE_DEFINE_SHAPE";
                SwfTag[SwfTag["CODE_FREE_CHARACTER"] = 3] = "CODE_FREE_CHARACTER";
                SwfTag[SwfTag["CODE_PLACE_OBJECT"] = 4] = "CODE_PLACE_OBJECT";
                SwfTag[SwfTag["CODE_REMOVE_OBJECT"] = 5] = "CODE_REMOVE_OBJECT";
                SwfTag[SwfTag["CODE_DEFINE_BITS"] = 6] = "CODE_DEFINE_BITS";
                SwfTag[SwfTag["CODE_DEFINE_BUTTON"] = 7] = "CODE_DEFINE_BUTTON";
                SwfTag[SwfTag["CODE_JPEG_TABLES"] = 8] = "CODE_JPEG_TABLES";
                SwfTag[SwfTag["CODE_SET_BACKGROUND_COLOR"] = 9] = "CODE_SET_BACKGROUND_COLOR";
                SwfTag[SwfTag["CODE_DEFINE_FONT"] = 10] = "CODE_DEFINE_FONT";
                SwfTag[SwfTag["CODE_DEFINE_TEXT"] = 11] = "CODE_DEFINE_TEXT";
                SwfTag[SwfTag["CODE_DO_ACTION"] = 12] = "CODE_DO_ACTION";
                SwfTag[SwfTag["CODE_DEFINE_FONT_INFO"] = 13] = "CODE_DEFINE_FONT_INFO";
                SwfTag[SwfTag["CODE_DEFINE_SOUND"] = 14] = "CODE_DEFINE_SOUND";
                SwfTag[SwfTag["CODE_START_SOUND"] = 15] = "CODE_START_SOUND";
                SwfTag[SwfTag["CODE_STOP_SOUND"] = 16] = "CODE_STOP_SOUND";
                SwfTag[SwfTag["CODE_DEFINE_BUTTON_SOUND"] = 17] = "CODE_DEFINE_BUTTON_SOUND";
                SwfTag[SwfTag["CODE_SOUND_STREAM_HEAD"] = 18] = "CODE_SOUND_STREAM_HEAD";
                SwfTag[SwfTag["CODE_SOUND_STREAM_BLOCK"] = 19] = "CODE_SOUND_STREAM_BLOCK";
                SwfTag[SwfTag["CODE_DEFINE_BITS_LOSSLESS"] = 20] = "CODE_DEFINE_BITS_LOSSLESS";
                SwfTag[SwfTag["CODE_DEFINE_BITS_JPEG2"] = 21] = "CODE_DEFINE_BITS_JPEG2";
                SwfTag[SwfTag["CODE_DEFINE_SHAPE2"] = 22] = "CODE_DEFINE_SHAPE2";
                SwfTag[SwfTag["CODE_DEFINE_BUTTON_CXFORM"] = 23] = "CODE_DEFINE_BUTTON_CXFORM";
                SwfTag[SwfTag["CODE_PROTECT"] = 24] = "CODE_PROTECT";
                SwfTag[SwfTag["CODE_PATHS_ARE_POSTSCRIPT"] = 25] = "CODE_PATHS_ARE_POSTSCRIPT";
                SwfTag[SwfTag["CODE_PLACE_OBJECT2"] = 26] = "CODE_PLACE_OBJECT2";
                SwfTag[SwfTag["CODE_REMOVE_OBJECT2"] = 28] = "CODE_REMOVE_OBJECT2";
                SwfTag[SwfTag["CODE_SYNC_FRAME"] = 29] = "CODE_SYNC_FRAME";
                SwfTag[SwfTag["CODE_FREE_ALL"] = 31] = "CODE_FREE_ALL";
                SwfTag[SwfTag["CODE_DEFINE_SHAPE3"] = 32] = "CODE_DEFINE_SHAPE3";
                SwfTag[SwfTag["CODE_DEFINE_TEXT2"] = 33] = "CODE_DEFINE_TEXT2";
                SwfTag[SwfTag["CODE_DEFINE_BUTTON2"] = 34] = "CODE_DEFINE_BUTTON2";
                SwfTag[SwfTag["CODE_DEFINE_BITS_JPEG3"] = 35] = "CODE_DEFINE_BITS_JPEG3";
                SwfTag[SwfTag["CODE_DEFINE_BITS_LOSSLESS2"] = 36] = "CODE_DEFINE_BITS_LOSSLESS2";
                SwfTag[SwfTag["CODE_DEFINE_EDIT_TEXT"] = 37] = "CODE_DEFINE_EDIT_TEXT";
                SwfTag[SwfTag["CODE_DEFINE_VIDEO"] = 38] = "CODE_DEFINE_VIDEO";
                SwfTag[SwfTag["CODE_DEFINE_SPRITE"] = 39] = "CODE_DEFINE_SPRITE";
                SwfTag[SwfTag["CODE_NAME_CHARACTER"] = 40] = "CODE_NAME_CHARACTER";
                SwfTag[SwfTag["CODE_PRODUCT_INFO"] = 41] = "CODE_PRODUCT_INFO";
                SwfTag[SwfTag["CODE_DEFINE_TEXT_FORMAT"] = 42] = "CODE_DEFINE_TEXT_FORMAT";
                SwfTag[SwfTag["CODE_FRAME_LABEL"] = 43] = "CODE_FRAME_LABEL";
                SwfTag[SwfTag["CODE_DEFINE_BEHAVIOUR"] = 44] = "CODE_DEFINE_BEHAVIOUR";
                SwfTag[SwfTag["CODE_SOUND_STREAM_HEAD2"] = 45] = "CODE_SOUND_STREAM_HEAD2";
                SwfTag[SwfTag["CODE_DEFINE_MORPH_SHAPE"] = 46] = "CODE_DEFINE_MORPH_SHAPE";
                SwfTag[SwfTag["CODE_GENERATE_FRAME"] = 47] = "CODE_GENERATE_FRAME";
                SwfTag[SwfTag["CODE_DEFINE_FONT2"] = 48] = "CODE_DEFINE_FONT2";
                SwfTag[SwfTag["CODE_GEN_COMMAND"] = 49] = "CODE_GEN_COMMAND";
                SwfTag[SwfTag["CODE_DEFINE_COMMAND_OBJECT"] = 50] = "CODE_DEFINE_COMMAND_OBJECT";
                SwfTag[SwfTag["CODE_CHARACTER_SET"] = 51] = "CODE_CHARACTER_SET";
                SwfTag[SwfTag["CODE_EXTERNAL_FONT"] = 52] = "CODE_EXTERNAL_FONT";
                SwfTag[SwfTag["CODE_DEFINE_FUNCTION"] = 53] = "CODE_DEFINE_FUNCTION";
                SwfTag[SwfTag["CODE_PLACE_FUNCTION"] = 54] = "CODE_PLACE_FUNCTION";
                SwfTag[SwfTag["CODE_GEN_TAG_OBJECTS"] = 55] = "CODE_GEN_TAG_OBJECTS";
                SwfTag[SwfTag["CODE_EXPORT_ASSETS"] = 56] = "CODE_EXPORT_ASSETS";
                SwfTag[SwfTag["CODE_IMPORT_ASSETS"] = 57] = "CODE_IMPORT_ASSETS";
                SwfTag[SwfTag["CODE_ENABLE_DEBUGGER"] = 58] = "CODE_ENABLE_DEBUGGER";
                SwfTag[SwfTag["CODE_DO_INIT_ACTION"] = 59] = "CODE_DO_INIT_ACTION";
                SwfTag[SwfTag["CODE_DEFINE_VIDEO_STREAM"] = 60] = "CODE_DEFINE_VIDEO_STREAM";
                SwfTag[SwfTag["CODE_VIDEO_FRAME"] = 61] = "CODE_VIDEO_FRAME";
                SwfTag[SwfTag["CODE_DEFINE_FONT_INFO2"] = 62] = "CODE_DEFINE_FONT_INFO2";
                SwfTag[SwfTag["CODE_DEBUG_ID"] = 63] = "CODE_DEBUG_ID";
                SwfTag[SwfTag["CODE_ENABLE_DEBUGGER2"] = 64] = "CODE_ENABLE_DEBUGGER2";
                SwfTag[SwfTag["CODE_SCRIPT_LIMITS"] = 65] = "CODE_SCRIPT_LIMITS";
                SwfTag[SwfTag["CODE_SET_TAB_INDEX"] = 66] = "CODE_SET_TAB_INDEX";
                SwfTag[SwfTag["CODE_FILE_ATTRIBUTES"] = 69] = "CODE_FILE_ATTRIBUTES";
                SwfTag[SwfTag["CODE_PLACE_OBJECT3"] = 70] = "CODE_PLACE_OBJECT3";
                SwfTag[SwfTag["CODE_IMPORT_ASSETS2"] = 71] = "CODE_IMPORT_ASSETS2";
                SwfTag[SwfTag["CODE_DO_ABC_DEFINE"] = 72] = "CODE_DO_ABC_DEFINE";
                SwfTag[SwfTag["CODE_DEFINE_FONT_ALIGN_ZONES"] = 73] = "CODE_DEFINE_FONT_ALIGN_ZONES";
                SwfTag[SwfTag["CODE_CSM_TEXT_SETTINGS"] = 74] = "CODE_CSM_TEXT_SETTINGS";
                SwfTag[SwfTag["CODE_DEFINE_FONT3"] = 75] = "CODE_DEFINE_FONT3";
                SwfTag[SwfTag["CODE_SYMBOL_CLASS"] = 76] = "CODE_SYMBOL_CLASS";
                SwfTag[SwfTag["CODE_METADATA"] = 77] = "CODE_METADATA";
                SwfTag[SwfTag["CODE_DEFINE_SCALING_GRID"] = 78] = "CODE_DEFINE_SCALING_GRID";
                SwfTag[SwfTag["CODE_DO_ABC"] = 82] = "CODE_DO_ABC";
                SwfTag[SwfTag["CODE_DEFINE_SHAPE4"] = 83] = "CODE_DEFINE_SHAPE4";
                SwfTag[SwfTag["CODE_DEFINE_MORPH_SHAPE2"] = 84] = "CODE_DEFINE_MORPH_SHAPE2";
                SwfTag[SwfTag["CODE_DEFINE_SCENE_AND_FRAME_LABEL_DATA"] = 86] = "CODE_DEFINE_SCENE_AND_FRAME_LABEL_DATA";
                SwfTag[SwfTag["CODE_DEFINE_BINARY_DATA"] = 87] = "CODE_DEFINE_BINARY_DATA";
                SwfTag[SwfTag["CODE_DEFINE_FONT_NAME"] = 88] = "CODE_DEFINE_FONT_NAME";
                SwfTag[SwfTag["CODE_START_SOUND2"] = 89] = "CODE_START_SOUND2";
                SwfTag[SwfTag["CODE_DEFINE_BITS_JPEG4"] = 90] = "CODE_DEFINE_BITS_JPEG4";
                SwfTag[SwfTag["CODE_DEFINE_FONT4"] = 91] = "CODE_DEFINE_FONT4";
            })(Parser.SwfTag || (Parser.SwfTag = {}));
            var SwfTag = Parser.SwfTag;
            (function (DefinitionTags) {
                DefinitionTags[DefinitionTags["CODE_DEFINE_SHAPE"] = 2] = "CODE_DEFINE_SHAPE";
                DefinitionTags[DefinitionTags["CODE_DEFINE_BITS"] = 6] = "CODE_DEFINE_BITS";
                DefinitionTags[DefinitionTags["CODE_DEFINE_BUTTON"] = 7] = "CODE_DEFINE_BUTTON";
                DefinitionTags[DefinitionTags["CODE_DEFINE_FONT"] = 10] = "CODE_DEFINE_FONT";
                DefinitionTags[DefinitionTags["CODE_DEFINE_TEXT"] = 11] = "CODE_DEFINE_TEXT";
                DefinitionTags[DefinitionTags["CODE_DEFINE_SOUND"] = 14] = "CODE_DEFINE_SOUND";
                DefinitionTags[DefinitionTags["CODE_DEFINE_BITS_LOSSLESS"] = 20] = "CODE_DEFINE_BITS_LOSSLESS";
                DefinitionTags[DefinitionTags["CODE_DEFINE_BITS_JPEG2"] = 21] = "CODE_DEFINE_BITS_JPEG2";
                DefinitionTags[DefinitionTags["CODE_DEFINE_SHAPE2"] = 22] = "CODE_DEFINE_SHAPE2";
                DefinitionTags[DefinitionTags["CODE_DEFINE_SHAPE3"] = 32] = "CODE_DEFINE_SHAPE3";
                DefinitionTags[DefinitionTags["CODE_DEFINE_TEXT2"] = 33] = "CODE_DEFINE_TEXT2";
                DefinitionTags[DefinitionTags["CODE_DEFINE_BUTTON2"] = 34] = "CODE_DEFINE_BUTTON2";
                DefinitionTags[DefinitionTags["CODE_DEFINE_BITS_JPEG3"] = 35] = "CODE_DEFINE_BITS_JPEG3";
                DefinitionTags[DefinitionTags["CODE_DEFINE_BITS_LOSSLESS2"] = 36] = "CODE_DEFINE_BITS_LOSSLESS2";
                DefinitionTags[DefinitionTags["CODE_DEFINE_EDIT_TEXT"] = 37] = "CODE_DEFINE_EDIT_TEXT";
                DefinitionTags[DefinitionTags["CODE_DEFINE_SPRITE"] = 39] = "CODE_DEFINE_SPRITE";
                DefinitionTags[DefinitionTags["CODE_DEFINE_MORPH_SHAPE"] = 46] = "CODE_DEFINE_MORPH_SHAPE";
                DefinitionTags[DefinitionTags["CODE_DEFINE_FONT2"] = 48] = "CODE_DEFINE_FONT2";
                DefinitionTags[DefinitionTags["CODE_DEFINE_VIDEO_STREAM"] = 60] = "CODE_DEFINE_VIDEO_STREAM";
                DefinitionTags[DefinitionTags["CODE_DEFINE_FONT3"] = 75] = "CODE_DEFINE_FONT3";
                DefinitionTags[DefinitionTags["CODE_DEFINE_SHAPE4"] = 83] = "CODE_DEFINE_SHAPE4";
                DefinitionTags[DefinitionTags["CODE_DEFINE_MORPH_SHAPE2"] = 84] = "CODE_DEFINE_MORPH_SHAPE2";
                DefinitionTags[DefinitionTags["CODE_DEFINE_BINARY_DATA"] = 87] = "CODE_DEFINE_BINARY_DATA";
                DefinitionTags[DefinitionTags["CODE_DEFINE_BITS_JPEG4"] = 90] = "CODE_DEFINE_BITS_JPEG4";
                DefinitionTags[DefinitionTags["CODE_DEFINE_FONT4"] = 91] = "CODE_DEFINE_FONT4";
            })(Parser.DefinitionTags || (Parser.DefinitionTags = {}));
            var DefinitionTags = Parser.DefinitionTags;
            (function (ImageDefinitionTags) {
                ImageDefinitionTags[ImageDefinitionTags["CODE_DEFINE_BITS"] = 6] = "CODE_DEFINE_BITS";
                ImageDefinitionTags[ImageDefinitionTags["CODE_DEFINE_BITS_JPEG2"] = 21] = "CODE_DEFINE_BITS_JPEG2";
                ImageDefinitionTags[ImageDefinitionTags["CODE_DEFINE_BITS_JPEG3"] = 35] = "CODE_DEFINE_BITS_JPEG3";
                ImageDefinitionTags[ImageDefinitionTags["CODE_DEFINE_BITS_JPEG4"] = 90] = "CODE_DEFINE_BITS_JPEG4";
            })(Parser.ImageDefinitionTags || (Parser.ImageDefinitionTags = {}));
            var ImageDefinitionTags = Parser.ImageDefinitionTags;
            (function (FontDefinitionTags) {
                FontDefinitionTags[FontDefinitionTags["CODE_DEFINE_FONT"] = 10] = "CODE_DEFINE_FONT";
                FontDefinitionTags[FontDefinitionTags["CODE_DEFINE_FONT2"] = 48] = "CODE_DEFINE_FONT2";
                FontDefinitionTags[FontDefinitionTags["CODE_DEFINE_FONT3"] = 75] = "CODE_DEFINE_FONT3";
                FontDefinitionTags[FontDefinitionTags["CODE_DEFINE_FONT4"] = 91] = "CODE_DEFINE_FONT4";
            })(Parser.FontDefinitionTags || (Parser.FontDefinitionTags = {}));
            var FontDefinitionTags = Parser.FontDefinitionTags;
            (function (ControlTags) {
                ControlTags[ControlTags["CODE_PLACE_OBJECT"] = 4] = "CODE_PLACE_OBJECT";
                ControlTags[ControlTags["CODE_PLACE_OBJECT2"] = 26] = "CODE_PLACE_OBJECT2";
                ControlTags[ControlTags["CODE_PLACE_OBJECT3"] = 70] = "CODE_PLACE_OBJECT3";
                ControlTags[ControlTags["CODE_REMOVE_OBJECT"] = 5] = "CODE_REMOVE_OBJECT";
                ControlTags[ControlTags["CODE_REMOVE_OBJECT2"] = 28] = "CODE_REMOVE_OBJECT2";
                ControlTags[ControlTags["CODE_START_SOUND"] = 15] = "CODE_START_SOUND";
                ControlTags[ControlTags["CODE_START_SOUND2"] = 89] = "CODE_START_SOUND2";
                ControlTags[ControlTags["CODE_VIDEO_FRAME"] = 61] = "CODE_VIDEO_FRAME";
            })(Parser.ControlTags || (Parser.ControlTags = {}));
            var ControlTags = Parser.ControlTags;
            (function (PlaceObjectFlags) {
                PlaceObjectFlags[PlaceObjectFlags["Move"] = 0x0001] = "Move";
                PlaceObjectFlags[PlaceObjectFlags["HasCharacter"] = 0x0002] = "HasCharacter";
                PlaceObjectFlags[PlaceObjectFlags["HasMatrix"] = 0x0004] = "HasMatrix";
                PlaceObjectFlags[PlaceObjectFlags["HasColorTransform"] = 0x0008] = "HasColorTransform";
                PlaceObjectFlags[PlaceObjectFlags["HasRatio"] = 0x0010] = "HasRatio";
                PlaceObjectFlags[PlaceObjectFlags["HasName"] = 0x0020] = "HasName";
                PlaceObjectFlags[PlaceObjectFlags["HasClipDepth"] = 0x0040] = "HasClipDepth";
                PlaceObjectFlags[PlaceObjectFlags["HasClipActions"] = 0x0080] = "HasClipActions";
                PlaceObjectFlags[PlaceObjectFlags["HasFilterList"] = 0x0100] = "HasFilterList";
                PlaceObjectFlags[PlaceObjectFlags["HasBlendMode"] = 0x0200] = "HasBlendMode";
                PlaceObjectFlags[PlaceObjectFlags["HasCacheAsBitmap"] = 0x0400] = "HasCacheAsBitmap";
                PlaceObjectFlags[PlaceObjectFlags["HasClassName"] = 0x0800] = "HasClassName";
                PlaceObjectFlags[PlaceObjectFlags["HasImage"] = 0x1000] = "HasImage";
                PlaceObjectFlags[PlaceObjectFlags["HasVisible"] = 0x2000] = "HasVisible";
                PlaceObjectFlags[PlaceObjectFlags["OpaqueBackground"] = 0x4000] = "OpaqueBackground";
                PlaceObjectFlags[PlaceObjectFlags["Reserved"] = 0x8000] = "Reserved";
            })(Parser.PlaceObjectFlags || (Parser.PlaceObjectFlags = {}));
            var PlaceObjectFlags = Parser.PlaceObjectFlags;
            (function (AVM1ClipEvents) {
                AVM1ClipEvents[AVM1ClipEvents["Load"] = 0x00001] = "Load";
                AVM1ClipEvents[AVM1ClipEvents["EnterFrame"] = 0x00002] = "EnterFrame";
                AVM1ClipEvents[AVM1ClipEvents["Unload"] = 0x00004] = "Unload";
                AVM1ClipEvents[AVM1ClipEvents["MouseMove"] = 0x00008] = "MouseMove";
                AVM1ClipEvents[AVM1ClipEvents["MouseDown"] = 0x00010] = "MouseDown";
                AVM1ClipEvents[AVM1ClipEvents["MouseUp"] = 0x00020] = "MouseUp";
                AVM1ClipEvents[AVM1ClipEvents["KeyDown"] = 0x00040] = "KeyDown";
                AVM1ClipEvents[AVM1ClipEvents["KeyUp"] = 0x00080] = "KeyUp";
                AVM1ClipEvents[AVM1ClipEvents["Data"] = 0x00100] = "Data";
                AVM1ClipEvents[AVM1ClipEvents["Initialize"] = 0x00200] = "Initialize";
                AVM1ClipEvents[AVM1ClipEvents["Press"] = 0x00400] = "Press";
                AVM1ClipEvents[AVM1ClipEvents["Release"] = 0x00800] = "Release";
                AVM1ClipEvents[AVM1ClipEvents["ReleaseOutside"] = 0x01000] = "ReleaseOutside";
                AVM1ClipEvents[AVM1ClipEvents["RollOver"] = 0x02000] = "RollOver";
                AVM1ClipEvents[AVM1ClipEvents["RollOut"] = 0x04000] = "RollOut";
                AVM1ClipEvents[AVM1ClipEvents["DragOver"] = 0x08000] = "DragOver";
                AVM1ClipEvents[AVM1ClipEvents["DragOut"] = 0x10000] = "DragOut";
                AVM1ClipEvents[AVM1ClipEvents["KeyPress"] = 0x20000] = "KeyPress";
                AVM1ClipEvents[AVM1ClipEvents["Construct"] = 0x40000] = "Construct";
            })(Parser.AVM1ClipEvents || (Parser.AVM1ClipEvents = {}));
            var AVM1ClipEvents = Parser.AVM1ClipEvents;
        })(Parser = SWF.Parser || (SWF.Parser = {}));
    })(SWF = Shumway.SWF || (Shumway.SWF = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var unexpected = Shumway.Debug.unexpected;
    var BinaryFileReader = (function () {
        function BinaryFileReader(url, method, mimeType, data) {
            this.url = url;
            this.method = method;
            this.mimeType = mimeType;
            this.data = data;
        }
        BinaryFileReader.prototype.readAll = function (progress, complete) {
            var url = this.url;
            var xhr = new XMLHttpRequest({ mozSystem: true });
            var async = true;
            xhr.open(this.method || "GET", this.url, async);
            xhr.responseType = "arraybuffer";
            if (progress) {
                xhr.onprogress = function (event) {
                    progress(xhr.response, event.loaded, event.total);
                };
            }
            xhr.onreadystatechange = function (event) {
                if (xhr.readyState === 4) {
                    if (xhr.status !== 200 && xhr.status !== 0 || xhr.response === null) {
                        unexpected("Path: " + url + " not found.");
                        complete(null, xhr.statusText);
                        return;
                    }
                    complete(xhr.response);
                }
            };
            if (this.mimeType) {
                xhr.setRequestHeader("Content-Type", this.mimeType);
            }
            xhr.send(this.data || null);
        };
        BinaryFileReader.prototype.readChunked = function (chunkSize, ondata, onerror, onopen, oncomplete, onhttpstatus) {
            if (chunkSize <= 0) {
                this.readAsync(ondata, onerror, onopen, oncomplete, onhttpstatus);
                return;
            }
            var position = 0;
            var buffer = new Uint8Array(chunkSize);
            var read = 0, total;
            this.readAsync(function (data, progress) {
                total = progress.total;
                var left = data.length, offset = 0;
                while (position + left >= chunkSize) {
                    var tailSize = chunkSize - position;
                    buffer.set(data.subarray(offset, offset + tailSize), position);
                    offset += tailSize;
                    left -= tailSize;
                    read += chunkSize;
                    ondata(buffer, { loaded: read, total: total });
                    position = 0;
                }
                buffer.set(data.subarray(offset), position);
                position += left;
            }, onerror, onopen, function () {
                if (position > 0) {
                    read += position;
                    ondata(buffer.subarray(0, position), { loaded: read, total: total });
                    position = 0;
                }
                oncomplete && oncomplete();
            }, onhttpstatus);
        };
        BinaryFileReader.prototype.readAsync = function (ondata, onerror, onopen, oncomplete, onhttpstatus) {
            var xhr = new XMLHttpRequest({ mozSystem: true });
            var url = this.url;
            var loaded = 0;
            var total = 0;
            xhr.open(this.method || "GET", url, true);
            xhr.responseType = 'moz-chunked-arraybuffer';
            var isNotProgressive = xhr.responseType !== 'moz-chunked-arraybuffer';
            if (isNotProgressive) {
                xhr.responseType = 'arraybuffer';
            }
            xhr.onprogress = function (e) {
                if (isNotProgressive)
                    return;
                loaded = e.loaded;
                total = e.total;
                ondata(new Uint8Array(xhr.response), { loaded: loaded, total: total });
            };
            xhr.onreadystatechange = function (event) {
                if (xhr.readyState === 2 && onhttpstatus) {
                    onhttpstatus(url, xhr.status, xhr.getAllResponseHeaders());
                }
                if (xhr.readyState === 4) {
                    if (xhr.status !== 200 && xhr.status !== 0 || xhr.response === null && (total === 0 || loaded !== total)) {
                        onerror(xhr.statusText);
                        return;
                    }
                    if (isNotProgressive) {
                        var buffer = xhr.response;
                        ondata(new Uint8Array(buffer), { loaded: 0, total: buffer.byteLength });
                    }
                    if (oncomplete) {
                        oncomplete();
                    }
                }
            };
            if (this.mimeType) {
                xhr.setRequestHeader("Content-Type", this.mimeType);
            }
            xhr.send(this.data || null);
            if (onopen) {
                onopen();
            }
        };
        return BinaryFileReader;
    })();
    Shumway.BinaryFileReader = BinaryFileReader;
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var Remoting;
    (function (Remoting) {
        (function (RemotingPhase) {
            RemotingPhase[RemotingPhase["Objects"] = 0] = "Objects";
            RemotingPhase[RemotingPhase["References"] = 1] = "References";
        })(Remoting.RemotingPhase || (Remoting.RemotingPhase = {}));
        var RemotingPhase = Remoting.RemotingPhase;
        (function (MessageBits) {
            MessageBits[MessageBits["HasMatrix"] = 0x0001] = "HasMatrix";
            MessageBits[MessageBits["HasBounds"] = 0x0002] = "HasBounds";
            MessageBits[MessageBits["HasChildren"] = 0x0004] = "HasChildren";
            MessageBits[MessageBits["HasColorTransform"] = 0x0008] = "HasColorTransform";
            MessageBits[MessageBits["HasClipRect"] = 0x0010] = "HasClipRect";
            MessageBits[MessageBits["HasMiscellaneousProperties"] = 0x0020] = "HasMiscellaneousProperties";
            MessageBits[MessageBits["HasMask"] = 0x0040] = "HasMask";
            MessageBits[MessageBits["HasClip"] = 0x0080] = "HasClip";
        })(Remoting.MessageBits || (Remoting.MessageBits = {}));
        var MessageBits = Remoting.MessageBits;
        (function (IDMask) {
            IDMask[IDMask["None"] = 0x00000000] = "None";
            IDMask[IDMask["Asset"] = 0x08000000] = "Asset";
        })(Remoting.IDMask || (Remoting.IDMask = {}));
        var IDMask = Remoting.IDMask;
        (function (MessageTag) {
            MessageTag[MessageTag["EOF"] = 0] = "EOF";
            MessageTag[MessageTag["UpdateFrame"] = 100] = "UpdateFrame";
            MessageTag[MessageTag["UpdateGraphics"] = 101] = "UpdateGraphics";
            MessageTag[MessageTag["UpdateBitmapData"] = 102] = "UpdateBitmapData";
            MessageTag[MessageTag["UpdateTextContent"] = 103] = "UpdateTextContent";
            MessageTag[MessageTag["UpdateStage"] = 104] = "UpdateStage";
            MessageTag[MessageTag["UpdateNetStream"] = 105] = "UpdateNetStream";
            MessageTag[MessageTag["RequestBitmapData"] = 106] = "RequestBitmapData";
            MessageTag[MessageTag["DrawToBitmap"] = 200] = "DrawToBitmap";
            MessageTag[MessageTag["MouseEvent"] = 300] = "MouseEvent";
            MessageTag[MessageTag["KeyboardEvent"] = 301] = "KeyboardEvent";
            MessageTag[MessageTag["FocusEvent"] = 302] = "FocusEvent";
        })(Remoting.MessageTag || (Remoting.MessageTag = {}));
        var MessageTag = Remoting.MessageTag;
        (function (FilterType) {
            FilterType[FilterType["Blur"] = 0] = "Blur";
            FilterType[FilterType["DropShadow"] = 1] = "DropShadow";
        })(Remoting.FilterType || (Remoting.FilterType = {}));
        var FilterType = Remoting.FilterType;
        (function (ColorTransformEncoding) {
            ColorTransformEncoding[ColorTransformEncoding["Identity"] = 0] = "Identity";
            ColorTransformEncoding[ColorTransformEncoding["AlphaMultiplierOnly"] = 1] = "AlphaMultiplierOnly";
            ColorTransformEncoding[ColorTransformEncoding["All"] = 2] = "All";
        })(Remoting.ColorTransformEncoding || (Remoting.ColorTransformEncoding = {}));
        var ColorTransformEncoding = Remoting.ColorTransformEncoding;
        (function (VideoPlaybackEvent) {
            VideoPlaybackEvent[VideoPlaybackEvent["Initialized"] = 0] = "Initialized";
            VideoPlaybackEvent[VideoPlaybackEvent["PlayStart"] = 1] = "PlayStart";
            VideoPlaybackEvent[VideoPlaybackEvent["PlayStop"] = 2] = "PlayStop";
            VideoPlaybackEvent[VideoPlaybackEvent["BufferFull"] = 3] = "BufferFull";
            VideoPlaybackEvent[VideoPlaybackEvent["Progress"] = 4] = "Progress";
            VideoPlaybackEvent[VideoPlaybackEvent["BufferEmpty"] = 5] = "BufferEmpty";
            VideoPlaybackEvent[VideoPlaybackEvent["Error"] = 6] = "Error";
            VideoPlaybackEvent[VideoPlaybackEvent["Metadata"] = 7] = "Metadata";
            VideoPlaybackEvent[VideoPlaybackEvent["Seeking"] = 8] = "Seeking";
        })(Remoting.VideoPlaybackEvent || (Remoting.VideoPlaybackEvent = {}));
        var VideoPlaybackEvent = Remoting.VideoPlaybackEvent;
        (function (VideoControlEvent) {
            VideoControlEvent[VideoControlEvent["Init"] = 1] = "Init";
            VideoControlEvent[VideoControlEvent["Pause"] = 2] = "Pause";
            VideoControlEvent[VideoControlEvent["Seek"] = 3] = "Seek";
            VideoControlEvent[VideoControlEvent["GetTime"] = 4] = "GetTime";
            VideoControlEvent[VideoControlEvent["GetBufferLength"] = 5] = "GetBufferLength";
            VideoControlEvent[VideoControlEvent["SetSoundLevels"] = 6] = "SetSoundLevels";
            VideoControlEvent[VideoControlEvent["GetBytesLoaded"] = 7] = "GetBytesLoaded";
            VideoControlEvent[VideoControlEvent["GetBytesTotal"] = 8] = "GetBytesTotal";
        })(Remoting.VideoControlEvent || (Remoting.VideoControlEvent = {}));
        var VideoControlEvent = Remoting.VideoControlEvent;
        (function (StageScaleMode) {
            StageScaleMode[StageScaleMode["ShowAll"] = 0] = "ShowAll";
            StageScaleMode[StageScaleMode["ExactFit"] = 1] = "ExactFit";
            StageScaleMode[StageScaleMode["NoBorder"] = 2] = "NoBorder";
            StageScaleMode[StageScaleMode["NoScale"] = 4] = "NoScale";
        })(Remoting.StageScaleMode || (Remoting.StageScaleMode = {}));
        var StageScaleMode = Remoting.StageScaleMode;
        (function (StageAlignFlags) {
            StageAlignFlags[StageAlignFlags["None"] = 0] = "None";
            StageAlignFlags[StageAlignFlags["Top"] = 1] = "Top";
            StageAlignFlags[StageAlignFlags["Bottom"] = 2] = "Bottom";
            StageAlignFlags[StageAlignFlags["Left"] = 4] = "Left";
            StageAlignFlags[StageAlignFlags["Right"] = 8] = "Right";
            StageAlignFlags[StageAlignFlags["TopLeft"] = StageAlignFlags.Top | StageAlignFlags.Left] = "TopLeft";
            StageAlignFlags[StageAlignFlags["BottomLeft"] = StageAlignFlags.Bottom | StageAlignFlags.Left] = "BottomLeft";
            StageAlignFlags[StageAlignFlags["BottomRight"] = StageAlignFlags.Bottom | StageAlignFlags.Right] = "BottomRight";
            StageAlignFlags[StageAlignFlags["TopRight"] = StageAlignFlags.Top | StageAlignFlags.Right] = "TopRight";
        })(Remoting.StageAlignFlags || (Remoting.StageAlignFlags = {}));
        var StageAlignFlags = Remoting.StageAlignFlags;
        Remoting.MouseEventNames = [
            'click',
            'dblclick',
            'mousedown',
            'mousemove',
            'mouseup',
            'mouseover',
            'mouseout'
        ];
        Remoting.KeyboardEventNames = [
            'keydown',
            'keypress',
            'keyup'
        ];
        (function (KeyboardEventFlags) {
            KeyboardEventFlags[KeyboardEventFlags["CtrlKey"] = 0x0001] = "CtrlKey";
            KeyboardEventFlags[KeyboardEventFlags["AltKey"] = 0x0002] = "AltKey";
            KeyboardEventFlags[KeyboardEventFlags["ShiftKey"] = 0x0004] = "ShiftKey";
        })(Remoting.KeyboardEventFlags || (Remoting.KeyboardEventFlags = {}));
        var KeyboardEventFlags = Remoting.KeyboardEventFlags;
        (function (FocusEventType) {
            FocusEventType[FocusEventType["DocumentHidden"] = 0] = "DocumentHidden";
            FocusEventType[FocusEventType["DocumentVisible"] = 1] = "DocumentVisible";
            FocusEventType[FocusEventType["WindowBlur"] = 2] = "WindowBlur";
            FocusEventType[FocusEventType["WindowFocus"] = 3] = "WindowFocus";
        })(Remoting.FocusEventType || (Remoting.FocusEventType = {}));
        var FocusEventType = Remoting.FocusEventType;
    })(Remoting = Shumway.Remoting || (Shumway.Remoting = {}));
})(Shumway || (Shumway = {}));
var throwError;
var Errors;
//# sourceMappingURL=base.js.map
var Shumway;
(function (Shumway) {
    var Tools;
    (function (Tools) {
        var Theme;
        (function (Theme) {
            var UI = (function () {
                function UI() {
                }
                UI.toRGBA = function (r, g, b, a) {
                    if (a === void 0) { a = 1; }
                    return "rgba(" + r + "," + g + "," + b + "," + a + ")";
                };
                return UI;
            })();
            Theme.UI = UI;
            var UIThemeDark = (function () {
                function UIThemeDark() {
                }
                UIThemeDark.prototype.tabToolbar = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(37, 44, 51, a);
                };
                UIThemeDark.prototype.toolbars = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(52, 60, 69, a);
                };
                UIThemeDark.prototype.selectionBackground = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(29, 79, 115, a);
                };
                UIThemeDark.prototype.selectionText = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(245, 247, 250, a);
                };
                UIThemeDark.prototype.splitters = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(0, 0, 0, a);
                };
                UIThemeDark.prototype.bodyBackground = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(17, 19, 21, a);
                };
                UIThemeDark.prototype.sidebarBackground = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(24, 29, 32, a);
                };
                UIThemeDark.prototype.attentionBackground = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(161, 134, 80, a);
                };
                UIThemeDark.prototype.bodyText = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(143, 161, 178, a);
                };
                UIThemeDark.prototype.foregroundTextGrey = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(182, 186, 191, a);
                };
                UIThemeDark.prototype.contentTextHighContrast = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(169, 186, 203, a);
                };
                UIThemeDark.prototype.contentTextGrey = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(143, 161, 178, a);
                };
                UIThemeDark.prototype.contentTextDarkGrey = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(95, 115, 135, a);
                };
                UIThemeDark.prototype.blueHighlight = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(70, 175, 227, a);
                };
                UIThemeDark.prototype.purpleHighlight = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(107, 122, 187, a);
                };
                UIThemeDark.prototype.pinkHighlight = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(223, 128, 255, a);
                };
                UIThemeDark.prototype.redHighlight = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(235, 83, 104, a);
                };
                UIThemeDark.prototype.orangeHighlight = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(217, 102, 41, a);
                };
                UIThemeDark.prototype.lightOrangeHighlight = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(217, 155, 40, a);
                };
                UIThemeDark.prototype.greenHighlight = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(112, 191, 83, a);
                };
                UIThemeDark.prototype.blueGreyHighlight = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(94, 136, 176, a);
                };
                return UIThemeDark;
            })();
            Theme.UIThemeDark = UIThemeDark;
            var UIThemeLight = (function () {
                function UIThemeLight() {
                }
                UIThemeLight.prototype.tabToolbar = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(235, 236, 237, a);
                };
                UIThemeLight.prototype.toolbars = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(240, 241, 242, a);
                };
                UIThemeLight.prototype.selectionBackground = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(76, 158, 217, a);
                };
                UIThemeLight.prototype.selectionText = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(245, 247, 250, a);
                };
                UIThemeLight.prototype.splitters = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(170, 170, 170, a);
                };
                UIThemeLight.prototype.bodyBackground = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(252, 252, 252, a);
                };
                UIThemeLight.prototype.sidebarBackground = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(247, 247, 247, a);
                };
                UIThemeLight.prototype.attentionBackground = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(161, 134, 80, a);
                };
                UIThemeLight.prototype.bodyText = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(24, 25, 26, a);
                };
                UIThemeLight.prototype.foregroundTextGrey = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(88, 89, 89, a);
                };
                UIThemeLight.prototype.contentTextHighContrast = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(41, 46, 51, a);
                };
                UIThemeLight.prototype.contentTextGrey = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(143, 161, 178, a);
                };
                UIThemeLight.prototype.contentTextDarkGrey = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(102, 115, 128, a);
                };
                UIThemeLight.prototype.blueHighlight = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(0, 136, 204, a);
                };
                UIThemeLight.prototype.purpleHighlight = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(91, 95, 255, a);
                };
                UIThemeLight.prototype.pinkHighlight = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(184, 46, 229, a);
                };
                UIThemeLight.prototype.redHighlight = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(237, 38, 85, a);
                };
                UIThemeLight.prototype.orangeHighlight = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(241, 60, 0, a);
                };
                UIThemeLight.prototype.lightOrangeHighlight = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(217, 126, 0, a);
                };
                UIThemeLight.prototype.greenHighlight = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(44, 187, 15, a);
                };
                UIThemeLight.prototype.blueGreyHighlight = function (a) {
                    if (a === void 0) { a = 1; }
                    return UI.toRGBA(95, 136, 176, a);
                };
                return UIThemeLight;
            })();
            Theme.UIThemeLight = UIThemeLight;
        })(Theme = Tools.Theme || (Tools.Theme = {}));
    })(Tools = Shumway.Tools || (Shumway.Tools = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var Tools;
    (function (Tools) {
        var Profiler;
        (function (Profiler) {
            var Profile = (function () {
                function Profile(buffers) {
                    this._buffers = buffers || [];
                    this._snapshots = [];
                    this._maxDepth = 0;
                }
                Profile.prototype.addBuffer = function (buffer) {
                    this._buffers.push(buffer);
                };
                Profile.prototype.getSnapshotAt = function (index) {
                    return this._snapshots[index];
                };
                Object.defineProperty(Profile.prototype, "hasSnapshots", {
                    get: function () {
                        return (this.snapshotCount > 0);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Profile.prototype, "snapshotCount", {
                    get: function () {
                        return this._snapshots.length;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Profile.prototype, "startTime", {
                    get: function () {
                        return this._startTime;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Profile.prototype, "endTime", {
                    get: function () {
                        return this._endTime;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Profile.prototype, "totalTime", {
                    get: function () {
                        return this.endTime - this.startTime;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Profile.prototype, "windowStart", {
                    get: function () {
                        return this._windowStart;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Profile.prototype, "windowEnd", {
                    get: function () {
                        return this._windowEnd;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Profile.prototype, "windowLength", {
                    get: function () {
                        return this.windowEnd - this.windowStart;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Profile.prototype, "maxDepth", {
                    get: function () {
                        return this._maxDepth;
                    },
                    enumerable: true,
                    configurable: true
                });
                Profile.prototype.forEachSnapshot = function (visitor) {
                    for (var i = 0, n = this.snapshotCount; i < n; i++) {
                        visitor(this._snapshots[i], i);
                    }
                };
                Profile.prototype.createSnapshots = function () {
                    var startTime = Number.MAX_VALUE;
                    var endTime = Number.MIN_VALUE;
                    var maxDepth = 0;
                    this._snapshots = [];
                    while (this._buffers.length > 0) {
                        var buffer = this._buffers.shift();
                        var snapshot = buffer.createSnapshot();
                        if (snapshot) {
                            if (startTime > snapshot.startTime) {
                                startTime = snapshot.startTime;
                            }
                            if (endTime < snapshot.endTime) {
                                endTime = snapshot.endTime;
                            }
                            if (maxDepth < snapshot.maxDepth) {
                                maxDepth = snapshot.maxDepth;
                            }
                            this._snapshots.push(snapshot);
                        }
                    }
                    this._startTime = startTime;
                    this._endTime = endTime;
                    this._windowStart = startTime;
                    this._windowEnd = endTime;
                    this._maxDepth = maxDepth;
                };
                Profile.prototype.setWindow = function (start, end) {
                    if (start > end) {
                        var tmp = start;
                        start = end;
                        end = tmp;
                    }
                    var length = Math.min(end - start, this.totalTime);
                    if (start < this._startTime) {
                        start = this._startTime;
                        end = this._startTime + length;
                    }
                    else if (end > this._endTime) {
                        start = this._endTime - length;
                        end = this._endTime;
                    }
                    this._windowStart = start;
                    this._windowEnd = end;
                };
                Profile.prototype.moveWindowTo = function (time) {
                    this.setWindow(time - this.windowLength / 2, time + this.windowLength / 2);
                };
                return Profile;
            })();
            Profiler.Profile = Profile;
        })(Profiler = Tools.Profiler || (Tools.Profiler = {}));
    })(Tools = Shumway.Tools || (Shumway.Tools = {}));
})(Shumway || (Shumway = {}));
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Shumway;
(function (Shumway) {
    var Tools;
    (function (Tools) {
        var Profiler;
        (function (Profiler) {
            var TimelineFrameStatistics = (function () {
                function TimelineFrameStatistics(kind) {
                    this.kind = kind;
                    this.count = 0;
                    this.selfTime = 0;
                    this.totalTime = 0;
                }
                return TimelineFrameStatistics;
            })();
            Profiler.TimelineFrameStatistics = TimelineFrameStatistics;
            var TimelineFrame = (function () {
                function TimelineFrame(parent, kind, startData, endData, startTime, endTime) {
                    this.parent = parent;
                    this.kind = kind;
                    this.startData = startData;
                    this.endData = endData;
                    this.startTime = startTime;
                    this.endTime = endTime;
                    this.maxDepth = 0;
                }
                Object.defineProperty(TimelineFrame.prototype, "totalTime", {
                    get: function () {
                        return this.endTime - this.startTime;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(TimelineFrame.prototype, "selfTime", {
                    get: function () {
                        var selfTime = this.totalTime;
                        if (this.children) {
                            for (var i = 0, n = this.children.length; i < n; i++) {
                                var child = this.children[i];
                                selfTime -= (child.endTime - child.startTime);
                            }
                        }
                        return selfTime;
                    },
                    enumerable: true,
                    configurable: true
                });
                TimelineFrame.prototype.getChildIndex = function (time) {
                    var children = this.children;
                    for (var i = 0; i < children.length; i++) {
                        var child = children[i];
                        if (child.endTime > time) {
                            return i;
                        }
                    }
                    return 0;
                };
                TimelineFrame.prototype.getChildRange = function (startTime, endTime) {
                    if (this.children && startTime <= this.endTime && endTime >= this.startTime && endTime >= startTime) {
                        var startIdx = this._getNearestChild(startTime);
                        var endIdx = this._getNearestChildReverse(endTime);
                        if (startIdx <= endIdx) {
                            var startTime = this.children[startIdx].startTime;
                            var endTime = this.children[endIdx].endTime;
                            return {
                                startIndex: startIdx,
                                endIndex: endIdx,
                                startTime: startTime,
                                endTime: endTime,
                                totalTime: endTime - startTime
                            };
                        }
                    }
                    return null;
                };
                TimelineFrame.prototype._getNearestChild = function (time) {
                    var children = this.children;
                    if (children && children.length) {
                        if (time <= children[0].endTime) {
                            return 0;
                        }
                        var imid;
                        var imin = 0;
                        var imax = children.length - 1;
                        while (imax > imin) {
                            imid = ((imin + imax) / 2) | 0;
                            var child = children[imid];
                            if (time >= child.startTime && time <= child.endTime) {
                                return imid;
                            }
                            else if (time > child.endTime) {
                                imin = imid + 1;
                            }
                            else {
                                imax = imid;
                            }
                        }
                        return Math.ceil((imin + imax) / 2);
                    }
                    else {
                        return 0;
                    }
                };
                TimelineFrame.prototype._getNearestChildReverse = function (time) {
                    var children = this.children;
                    if (children && children.length) {
                        var imax = children.length - 1;
                        if (time >= children[imax].startTime) {
                            return imax;
                        }
                        var imid;
                        var imin = 0;
                        while (imax > imin) {
                            imid = Math.ceil((imin + imax) / 2);
                            var child = children[imid];
                            if (time >= child.startTime && time <= child.endTime) {
                                return imid;
                            }
                            else if (time > child.endTime) {
                                imin = imid;
                            }
                            else {
                                imax = imid - 1;
                            }
                        }
                        return ((imin + imax) / 2) | 0;
                    }
                    else {
                        return 0;
                    }
                };
                TimelineFrame.prototype.query = function (time) {
                    if (time < this.startTime || time > this.endTime) {
                        return null;
                    }
                    var children = this.children;
                    if (children && children.length > 0) {
                        var child;
                        var imin = 0;
                        var imax = children.length - 1;
                        while (imax > imin) {
                            var imid = ((imin + imax) / 2) | 0;
                            child = children[imid];
                            if (time >= child.startTime && time <= child.endTime) {
                                return child.query(time);
                            }
                            else if (time > child.endTime) {
                                imin = imid + 1;
                            }
                            else {
                                imax = imid;
                            }
                        }
                        child = children[imax];
                        if (time >= child.startTime && time <= child.endTime) {
                            return child.query(time);
                        }
                    }
                    return this;
                };
                TimelineFrame.prototype.queryNext = function (time) {
                    var frame = this;
                    while (time > frame.endTime) {
                        if (frame.parent) {
                            frame = frame.parent;
                        }
                        else {
                            return frame.query(time);
                        }
                    }
                    return frame.query(time);
                };
                TimelineFrame.prototype.getDepth = function () {
                    var depth = 0;
                    var self = this;
                    while (self) {
                        depth++;
                        self = self.parent;
                    }
                    return depth;
                };
                TimelineFrame.prototype.calculateStatistics = function () {
                    var statistics = this.statistics = [];
                    function visit(frame) {
                        if (frame.kind) {
                            var s = statistics[frame.kind.id] || (statistics[frame.kind.id] = new TimelineFrameStatistics(frame.kind));
                            s.count++;
                            s.selfTime += frame.selfTime;
                            s.totalTime += frame.totalTime;
                        }
                        if (frame.children) {
                            frame.children.forEach(visit);
                        }
                    }
                    visit(this);
                };
                TimelineFrame.prototype.trace = function (writer) {
                    var s = (this.kind ? this.kind.name + ": " : "Profile: ") + (this.endTime - this.startTime).toFixed(2);
                    if (this.children && this.children.length) {
                        writer.enter(s);
                        for (var i = 0; i < this.children.length; i++) {
                            this.children[i].trace(writer);
                        }
                        writer.outdent();
                    }
                    else {
                        writer.writeLn(s);
                    }
                };
                return TimelineFrame;
            })();
            Profiler.TimelineFrame = TimelineFrame;
            var TimelineBufferSnapshot = (function (_super) {
                __extends(TimelineBufferSnapshot, _super);
                function TimelineBufferSnapshot(name) {
                    _super.call(this, null, null, null, null, NaN, NaN);
                    this.name = name;
                }
                return TimelineBufferSnapshot;
            })(TimelineFrame);
            Profiler.TimelineBufferSnapshot = TimelineBufferSnapshot;
        })(Profiler = Tools.Profiler || (Tools.Profiler = {}));
    })(Tools = Shumway.Tools || (Shumway.Tools = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var Tools;
    (function (Tools) {
        var Profiler;
        (function (Profiler) {
            var TimelineBuffer = (function () {
                function TimelineBuffer(name, startTime) {
                    if (name === void 0) { name = ""; }
                    this.name = name || "";
                    this._startTime = Shumway.isNullOrUndefined(startTime) ? jsGlobal.START_TIME : startTime;
                }
                TimelineBuffer.prototype.getKind = function (kind) {
                    return this._kinds[kind];
                };
                Object.defineProperty(TimelineBuffer.prototype, "kinds", {
                    get: function () {
                        return this._kinds.concat();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(TimelineBuffer.prototype, "depth", {
                    get: function () {
                        return this._depth;
                    },
                    enumerable: true,
                    configurable: true
                });
                TimelineBuffer.prototype._initialize = function () {
                    this._depth = 0;
                    this._stack = [];
                    this._data = [];
                    this._kinds = [];
                    this._kindNameMap = Object.create(null);
                    this._marks = new Shumway.CircularBuffer(Int32Array, 20);
                    this._times = new Shumway.CircularBuffer(Float64Array, 20);
                };
                TimelineBuffer.prototype._getKindId = function (name) {
                    var kindId = TimelineBuffer.MAX_KINDID;
                    if (this._kindNameMap[name] === undefined) {
                        kindId = this._kinds.length;
                        if (kindId < TimelineBuffer.MAX_KINDID) {
                            var kind = {
                                id: kindId,
                                name: name,
                                visible: true
                            };
                            this._kinds.push(kind);
                            this._kindNameMap[name] = kind;
                        }
                        else {
                            kindId = TimelineBuffer.MAX_KINDID;
                        }
                    }
                    else {
                        kindId = this._kindNameMap[name].id;
                    }
                    return kindId;
                };
                TimelineBuffer.prototype._getMark = function (type, kindId, data) {
                    var dataId = TimelineBuffer.MAX_DATAID;
                    if (!Shumway.isNullOrUndefined(data) && kindId !== TimelineBuffer.MAX_KINDID) {
                        dataId = this._data.length;
                        if (dataId < TimelineBuffer.MAX_DATAID) {
                            this._data.push(data);
                        }
                        else {
                            dataId = TimelineBuffer.MAX_DATAID;
                        }
                    }
                    return type | (dataId << 16) | kindId;
                };
                TimelineBuffer.prototype.enter = function (name, data, time) {
                    time = (Shumway.isNullOrUndefined(time) ? performance.now() : time) - this._startTime;
                    if (!this._marks) {
                        this._initialize();
                    }
                    this._depth++;
                    var kindId = this._getKindId(name);
                    this._marks.write(this._getMark(TimelineBuffer.ENTER, kindId, data));
                    this._times.write(time);
                    this._stack.push(kindId);
                };
                TimelineBuffer.prototype.leave = function (name, data, time) {
                    time = (Shumway.isNullOrUndefined(time) ? performance.now() : time) - this._startTime;
                    var kindId = this._stack.pop();
                    if (name) {
                        kindId = this._getKindId(name);
                    }
                    this._marks.write(this._getMark(TimelineBuffer.LEAVE, kindId, data));
                    this._times.write(time);
                    this._depth--;
                };
                TimelineBuffer.prototype.count = function (name, value, data) {
                };
                TimelineBuffer.prototype.createSnapshot = function (count) {
                    if (count === void 0) { count = Number.MAX_VALUE; }
                    if (!this._marks) {
                        return null;
                    }
                    var times = this._times;
                    var kinds = this._kinds;
                    var datastore = this._data;
                    var snapshot = new Profiler.TimelineBufferSnapshot(this.name);
                    var stack = [snapshot];
                    var topLevelFrameCount = 0;
                    if (!this._marks) {
                        this._initialize();
                    }
                    this._marks.forEachInReverse(function (mark, i) {
                        var dataId = (mark >>> 16) & TimelineBuffer.MAX_DATAID;
                        var data = datastore[dataId];
                        var kindId = mark & TimelineBuffer.MAX_KINDID;
                        var kind = kinds[kindId];
                        if (Shumway.isNullOrUndefined(kind) || kind.visible) {
                            var action = mark & 0x80000000;
                            var time = times.get(i);
                            var stackLength = stack.length;
                            if (action === TimelineBuffer.LEAVE) {
                                if (stackLength === 1) {
                                    topLevelFrameCount++;
                                    if (topLevelFrameCount > count) {
                                        return true;
                                    }
                                }
                                stack.push(new Profiler.TimelineFrame(stack[stackLength - 1], kind, null, data, NaN, time));
                            }
                            else if (action === TimelineBuffer.ENTER) {
                                var node = stack.pop();
                                var top = stack[stack.length - 1];
                                if (top) {
                                    if (!top.children) {
                                        top.children = [node];
                                    }
                                    else {
                                        top.children.unshift(node);
                                    }
                                    var currentDepth = stack.length;
                                    node.depth = currentDepth;
                                    node.startData = data;
                                    node.startTime = time;
                                    while (node) {
                                        if (node.maxDepth < currentDepth) {
                                            node.maxDepth = currentDepth;
                                            node = node.parent;
                                        }
                                        else {
                                            break;
                                        }
                                    }
                                }
                                else {
                                    return true;
                                }
                            }
                        }
                    });
                    if (snapshot.children && snapshot.children.length) {
                        snapshot.startTime = snapshot.children[0].startTime;
                        snapshot.endTime = snapshot.children[snapshot.children.length - 1].endTime;
                    }
                    return snapshot;
                };
                TimelineBuffer.prototype.reset = function (startTime) {
                    this._startTime = Shumway.isNullOrUndefined(startTime) ? performance.now() : startTime;
                    if (!this._marks) {
                        this._initialize();
                        return;
                    }
                    this._depth = 0;
                    this._data = [];
                    this._marks.reset();
                    this._times.reset();
                };
                TimelineBuffer.FromFirefoxProfile = function (profile, name) {
                    var samples = profile.profile.threads[0].samples;
                    var buffer = new TimelineBuffer(name, samples[0].time);
                    var currentStack = [];
                    var sample;
                    for (var i = 0; i < samples.length; i++) {
                        sample = samples[i];
                        var time = sample.time;
                        var stack = sample.frames;
                        var j = 0;
                        var minStackLen = Math.min(stack.length, currentStack.length);
                        while (j < minStackLen && stack[j].location === currentStack[j].location) {
                            j++;
                        }
                        var leaveCount = currentStack.length - j;
                        for (var k = 0; k < leaveCount; k++) {
                            sample = currentStack.pop();
                            buffer.leave(sample.location, null, time);
                        }
                        while (j < stack.length) {
                            sample = stack[j++];
                            buffer.enter(sample.location, null, time);
                        }
                        currentStack = stack;
                    }
                    while (sample = currentStack.pop()) {
                        buffer.leave(sample.location, null, time);
                    }
                    return buffer;
                };
                TimelineBuffer.FromChromeProfile = function (profile, name) {
                    var timestamps = profile.timestamps;
                    var samples = profile.samples;
                    var buffer = new TimelineBuffer(name, timestamps[0] / 1000);
                    var currentStack = [];
                    var idMap = {};
                    var sample;
                    TimelineBuffer._resolveIds(profile.head, idMap);
                    for (var i = 0; i < timestamps.length; i++) {
                        var time = timestamps[i] / 1000;
                        var stack = [];
                        sample = idMap[samples[i]];
                        while (sample) {
                            stack.unshift(sample);
                            sample = sample.parent;
                        }
                        var j = 0;
                        var minStackLen = Math.min(stack.length, currentStack.length);
                        while (j < minStackLen && stack[j] === currentStack[j]) {
                            j++;
                        }
                        var leaveCount = currentStack.length - j;
                        for (var k = 0; k < leaveCount; k++) {
                            sample = currentStack.pop();
                            buffer.leave(sample.functionName, null, time);
                        }
                        while (j < stack.length) {
                            sample = stack[j++];
                            buffer.enter(sample.functionName, null, time);
                        }
                        currentStack = stack;
                    }
                    while (sample = currentStack.pop()) {
                        buffer.leave(sample.functionName, null, time);
                    }
                    return buffer;
                };
                TimelineBuffer._resolveIds = function (parent, idMap) {
                    idMap[parent.id] = parent;
                    if (parent.children) {
                        for (var i = 0; i < parent.children.length; i++) {
                            parent.children[i].parent = parent;
                            TimelineBuffer._resolveIds(parent.children[i], idMap);
                        }
                    }
                };
                TimelineBuffer.ENTER = 0 << 31;
                TimelineBuffer.LEAVE = 1 << 31;
                TimelineBuffer.MAX_KINDID = 0xffff;
                TimelineBuffer.MAX_DATAID = 0x7fff;
                return TimelineBuffer;
            })();
            Profiler.TimelineBuffer = TimelineBuffer;
        })(Profiler = Tools.Profiler || (Tools.Profiler = {}));
    })(Tools = Shumway.Tools || (Shumway.Tools = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var Tools;
    (function (Tools) {
        var Profiler;
        (function (Profiler) {
            (function (UIThemeType) {
                UIThemeType[UIThemeType["DARK"] = 0] = "DARK";
                UIThemeType[UIThemeType["LIGHT"] = 1] = "LIGHT";
            })(Profiler.UIThemeType || (Profiler.UIThemeType = {}));
            var UIThemeType = Profiler.UIThemeType;
            var Controller = (function () {
                function Controller(container, themeType) {
                    if (themeType === void 0) { themeType = 0 /* DARK */; }
                    this._container = container;
                    this._headers = [];
                    this._charts = [];
                    this._profiles = [];
                    this._activeProfile = null;
                    this.themeType = themeType;
                    this._tooltip = this._createTooltip();
                }
                Controller.prototype.createProfile = function (buffers, activate) {
                    if (activate === void 0) { activate = true; }
                    var profile = new Profiler.Profile(buffers);
                    profile.createSnapshots();
                    this._profiles.push(profile);
                    if (activate) {
                        this.activateProfile(profile);
                    }
                    return profile;
                };
                Controller.prototype.activateProfile = function (profile) {
                    this.deactivateProfile();
                    this._activeProfile = profile;
                    this._createViews();
                    this._initializeViews();
                };
                Controller.prototype.activateProfileAt = function (index) {
                    this.activateProfile(this.getProfileAt(index));
                };
                Controller.prototype.deactivateProfile = function () {
                    if (this._activeProfile) {
                        this._destroyViews();
                        this._activeProfile = null;
                    }
                };
                Controller.prototype.resize = function () {
                    this._onResize();
                };
                Controller.prototype.getProfileAt = function (index) {
                    return this._profiles[index];
                };
                Object.defineProperty(Controller.prototype, "activeProfile", {
                    get: function () {
                        return this._activeProfile;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Controller.prototype, "profileCount", {
                    get: function () {
                        return this._profiles.length;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Controller.prototype, "container", {
                    get: function () {
                        return this._container;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Controller.prototype, "themeType", {
                    get: function () {
                        return this._themeType;
                    },
                    set: function (value) {
                        switch (value) {
                            case 0 /* DARK */:
                                this._theme = new Tools.Theme.UIThemeDark();
                                break;
                            case 1 /* LIGHT */:
                                this._theme = new Tools.Theme.UIThemeLight();
                                break;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Controller.prototype, "theme", {
                    get: function () {
                        return this._theme;
                    },
                    enumerable: true,
                    configurable: true
                });
                Controller.prototype.getSnapshotAt = function (index) {
                    return this._activeProfile.getSnapshotAt(index);
                };
                Controller.prototype._createViews = function () {
                    if (this._activeProfile) {
                        var self = this;
                        this._overviewHeader = new Profiler.FlameChartHeader(this, 0 /* OVERVIEW */);
                        this._overview = new Profiler.FlameChartOverview(this, 0 /* OVERLAY */);
                        this._activeProfile.forEachSnapshot(function (snapshot, index) {
                            self._headers.push(new Profiler.FlameChartHeader(self, 1 /* CHART */));
                            self._charts.push(new Profiler.FlameChart(self, snapshot));
                        });
                        window.addEventListener("resize", this._onResize.bind(this));
                    }
                };
                Controller.prototype._destroyViews = function () {
                    if (this._activeProfile) {
                        this._overviewHeader.destroy();
                        this._overview.destroy();
                        while (this._headers.length) {
                            this._headers.pop().destroy();
                        }
                        while (this._charts.length) {
                            this._charts.pop().destroy();
                        }
                        window.removeEventListener("resize", this._onResize.bind(this));
                    }
                };
                Controller.prototype._initializeViews = function () {
                    if (this._activeProfile) {
                        var self = this;
                        var startTime = this._activeProfile.startTime;
                        var endTime = this._activeProfile.endTime;
                        this._overviewHeader.initialize(startTime, endTime);
                        this._overview.initialize(startTime, endTime);
                        this._activeProfile.forEachSnapshot(function (snapshot, index) {
                            self._headers[index].initialize(startTime, endTime);
                            self._charts[index].initialize(startTime, endTime);
                        });
                    }
                };
                Controller.prototype._onResize = function () {
                    if (this._activeProfile) {
                        var self = this;
                        var width = this._container.offsetWidth;
                        this._overviewHeader.setSize(width);
                        this._overview.setSize(width);
                        this._activeProfile.forEachSnapshot(function (snapshot, index) {
                            self._headers[index].setSize(width);
                            self._charts[index].setSize(width);
                        });
                    }
                };
                Controller.prototype._updateViews = function () {
                    if (this._activeProfile) {
                        var self = this;
                        var start = this._activeProfile.windowStart;
                        var end = this._activeProfile.windowEnd;
                        this._overviewHeader.setWindow(start, end);
                        this._overview.setWindow(start, end);
                        this._activeProfile.forEachSnapshot(function (snapshot, index) {
                            self._headers[index].setWindow(start, end);
                            self._charts[index].setWindow(start, end);
                        });
                    }
                };
                Controller.prototype._drawViews = function () {
                };
                Controller.prototype._createTooltip = function () {
                    var el = document.createElement("div");
                    el.classList.add("profiler-tooltip");
                    el.style.display = "none";
                    this._container.insertBefore(el, this._container.firstChild);
                    return el;
                };
                Controller.prototype.setWindow = function (start, end) {
                    this._activeProfile.setWindow(start, end);
                    this._updateViews();
                };
                Controller.prototype.moveWindowTo = function (time) {
                    this._activeProfile.moveWindowTo(time);
                    this._updateViews();
                };
                Controller.prototype.showTooltip = function (chart, frame, x, y) {
                    this.removeTooltipContent();
                    this._tooltip.appendChild(this.createTooltipContent(chart, frame));
                    this._tooltip.style.display = "block";
                    var elContent = this._tooltip.firstChild;
                    var tooltipWidth = elContent.clientWidth;
                    var tooltipHeight = elContent.clientHeight;
                    var totalWidth = chart.canvas.clientWidth;
                    x += (x + tooltipWidth >= totalWidth - 50) ? -(tooltipWidth + 20) : 25;
                    y += chart.canvas.offsetTop - tooltipHeight / 2;
                    this._tooltip.style.left = x + "px";
                    this._tooltip.style.top = y + "px";
                };
                Controller.prototype.hideTooltip = function () {
                    this._tooltip.style.display = "none";
                };
                Controller.prototype.createTooltipContent = function (chart, frame) {
                    var totalTime = Math.round(frame.totalTime * 100000) / 100000;
                    var selfTime = Math.round(frame.selfTime * 100000) / 100000;
                    var selfPercent = Math.round(frame.selfTime * 100 * 100 / frame.totalTime) / 100;
                    var elContent = document.createElement("div");
                    var elName = document.createElement("h1");
                    elName.textContent = frame.kind.name;
                    elContent.appendChild(elName);
                    var elTotalTime = document.createElement("p");
                    elTotalTime.textContent = "Total: " + totalTime + " ms";
                    elContent.appendChild(elTotalTime);
                    var elSelfTime = document.createElement("p");
                    elSelfTime.textContent = "Self: " + selfTime + " ms (" + selfPercent + "%)";
                    elContent.appendChild(elSelfTime);
                    var statistics = chart.getStatistics(frame.kind);
                    if (statistics) {
                        var elAllCount = document.createElement("p");
                        elAllCount.textContent = "Count: " + statistics.count;
                        elContent.appendChild(elAllCount);
                        var allTotalTime = Math.round(statistics.totalTime * 100000) / 100000;
                        var elAllTotalTime = document.createElement("p");
                        elAllTotalTime.textContent = "All Total: " + allTotalTime + " ms";
                        elContent.appendChild(elAllTotalTime);
                        var allSelfTime = Math.round(statistics.selfTime * 100000) / 100000;
                        var elAllSelfTime = document.createElement("p");
                        elAllSelfTime.textContent = "All Self: " + allSelfTime + " ms";
                        elContent.appendChild(elAllSelfTime);
                    }
                    this.appendDataElements(elContent, frame.startData);
                    this.appendDataElements(elContent, frame.endData);
                    return elContent;
                };
                Controller.prototype.appendDataElements = function (el, data) {
                    if (!Shumway.isNullOrUndefined(data)) {
                        el.appendChild(document.createElement("hr"));
                        var elData;
                        if (Shumway.isObject(data)) {
                            for (var key in data) {
                                elData = document.createElement("p");
                                elData.textContent = key + ": " + data[key];
                                el.appendChild(elData);
                            }
                        }
                        else {
                            elData = document.createElement("p");
                            elData.textContent = data.toString();
                            el.appendChild(elData);
                        }
                    }
                };
                Controller.prototype.removeTooltipContent = function () {
                    var el = this._tooltip;
                    while (el.firstChild) {
                        el.removeChild(el.firstChild);
                    }
                };
                return Controller;
            })();
            Profiler.Controller = Controller;
        })(Profiler = Tools.Profiler || (Tools.Profiler = {}));
    })(Tools = Shumway.Tools || (Shumway.Tools = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var Tools;
    (function (Tools) {
        var Profiler;
        (function (Profiler) {
            var clamp = Shumway.NumberUtilities.clamp;
            var MouseCursor = (function () {
                function MouseCursor(value) {
                    this.value = value;
                }
                MouseCursor.prototype.toString = function () {
                    return this.value;
                };
                MouseCursor.AUTO = new MouseCursor("auto");
                MouseCursor.DEFAULT = new MouseCursor("default");
                MouseCursor.NONE = new MouseCursor("none");
                MouseCursor.HELP = new MouseCursor("help");
                MouseCursor.POINTER = new MouseCursor("pointer");
                MouseCursor.PROGRESS = new MouseCursor("progress");
                MouseCursor.WAIT = new MouseCursor("wait");
                MouseCursor.CELL = new MouseCursor("cell");
                MouseCursor.CROSSHAIR = new MouseCursor("crosshair");
                MouseCursor.TEXT = new MouseCursor("text");
                MouseCursor.ALIAS = new MouseCursor("alias");
                MouseCursor.COPY = new MouseCursor("copy");
                MouseCursor.MOVE = new MouseCursor("move");
                MouseCursor.NO_DROP = new MouseCursor("no-drop");
                MouseCursor.NOT_ALLOWED = new MouseCursor("not-allowed");
                MouseCursor.ALL_SCROLL = new MouseCursor("all-scroll");
                MouseCursor.COL_RESIZE = new MouseCursor("col-resize");
                MouseCursor.ROW_RESIZE = new MouseCursor("row-resize");
                MouseCursor.N_RESIZE = new MouseCursor("n-resize");
                MouseCursor.E_RESIZE = new MouseCursor("e-resize");
                MouseCursor.S_RESIZE = new MouseCursor("s-resize");
                MouseCursor.W_RESIZE = new MouseCursor("w-resize");
                MouseCursor.NE_RESIZE = new MouseCursor("ne-resize");
                MouseCursor.NW_RESIZE = new MouseCursor("nw-resize");
                MouseCursor.SE_RESIZE = new MouseCursor("se-resize");
                MouseCursor.SW_RESIZE = new MouseCursor("sw-resize");
                MouseCursor.EW_RESIZE = new MouseCursor("ew-resize");
                MouseCursor.NS_RESIZE = new MouseCursor("ns-resize");
                MouseCursor.NESW_RESIZE = new MouseCursor("nesw-resize");
                MouseCursor.NWSE_RESIZE = new MouseCursor("nwse-resize");
                MouseCursor.ZOOM_IN = new MouseCursor("zoom-in");
                MouseCursor.ZOOM_OUT = new MouseCursor("zoom-out");
                MouseCursor.GRAB = new MouseCursor("grab");
                MouseCursor.GRABBING = new MouseCursor("grabbing");
                return MouseCursor;
            })();
            Profiler.MouseCursor = MouseCursor;
            var MouseController = (function () {
                function MouseController(target, eventTarget) {
                    this._target = target;
                    this._eventTarget = eventTarget;
                    this._wheelDisabled = false;
                    this._boundOnMouseDown = this._onMouseDown.bind(this);
                    this._boundOnMouseUp = this._onMouseUp.bind(this);
                    this._boundOnMouseOver = this._onMouseOver.bind(this);
                    this._boundOnMouseOut = this._onMouseOut.bind(this);
                    this._boundOnMouseMove = this._onMouseMove.bind(this);
                    this._boundOnMouseWheel = this._onMouseWheel.bind(this);
                    this._boundOnDrag = this._onDrag.bind(this);
                    eventTarget.addEventListener("mousedown", this._boundOnMouseDown, false);
                    eventTarget.addEventListener("mouseover", this._boundOnMouseOver, false);
                    eventTarget.addEventListener("mouseout", this._boundOnMouseOut, false);
                    eventTarget.addEventListener(("onwheel" in document ? "wheel" : "mousewheel"), this._boundOnMouseWheel, false);
                }
                MouseController.prototype.destroy = function () {
                    var eventTarget = this._eventTarget;
                    eventTarget.removeEventListener("mousedown", this._boundOnMouseDown);
                    eventTarget.removeEventListener("mouseover", this._boundOnMouseOver);
                    eventTarget.removeEventListener("mouseout", this._boundOnMouseOut);
                    eventTarget.removeEventListener(("onwheel" in document ? "wheel" : "mousewheel"), this._boundOnMouseWheel);
                    window.removeEventListener("mousemove", this._boundOnDrag);
                    window.removeEventListener("mouseup", this._boundOnMouseUp);
                    this._killHoverCheck();
                    this._eventTarget = null;
                    this._target = null;
                };
                MouseController.prototype.updateCursor = function (cursor) {
                    if (!MouseController._cursorOwner || MouseController._cursorOwner === this._target) {
                        var el = this._eventTarget.parentElement;
                        if (MouseController._cursor !== cursor) {
                            MouseController._cursor = cursor;
                            var self = this;
                            ["", "-moz-", "-webkit-"].forEach(function (prefix) {
                                el.style.cursor = prefix + cursor;
                            });
                        }
                        if (MouseController._cursor === MouseCursor.DEFAULT) {
                            MouseController._cursorOwner = null;
                        }
                        else {
                            MouseController._cursorOwner = this._target;
                        }
                    }
                };
                MouseController.prototype._onMouseDown = function (event) {
                    this._killHoverCheck();
                    if (event.button === 0) {
                        var pos = this._getTargetMousePos(event, (event.target));
                        this._dragInfo = {
                            start: pos,
                            current: pos,
                            delta: { x: 0, y: 0 },
                            hasMoved: false,
                            originalTarget: event.target
                        };
                        window.addEventListener("mousemove", this._boundOnDrag, false);
                        window.addEventListener("mouseup", this._boundOnMouseUp, false);
                        this._target.onMouseDown(pos.x, pos.y);
                    }
                };
                MouseController.prototype._onDrag = function (event) {
                    var dragInfo = this._dragInfo;
                    var current = this._getTargetMousePos(event, dragInfo.originalTarget);
                    var delta = {
                        x: current.x - dragInfo.start.x,
                        y: current.y - dragInfo.start.y
                    };
                    dragInfo.current = current;
                    dragInfo.delta = delta;
                    dragInfo.hasMoved = true;
                    this._target.onDrag(dragInfo.start.x, dragInfo.start.y, current.x, current.y, delta.x, delta.y);
                };
                MouseController.prototype._onMouseUp = function (event) {
                    window.removeEventListener("mousemove", this._boundOnDrag);
                    window.removeEventListener("mouseup", this._boundOnMouseUp);
                    var self = this;
                    var dragInfo = this._dragInfo;
                    if (dragInfo.hasMoved) {
                        this._target.onDragEnd(dragInfo.start.x, dragInfo.start.y, dragInfo.current.x, dragInfo.current.y, dragInfo.delta.x, dragInfo.delta.y);
                    }
                    else {
                        this._target.onClick(dragInfo.current.x, dragInfo.current.y);
                    }
                    this._dragInfo = null;
                    this._wheelDisabled = true;
                    setTimeout(function () {
                        self._wheelDisabled = false;
                    }, 500);
                };
                MouseController.prototype._onMouseOver = function (event) {
                    event.target.addEventListener("mousemove", this._boundOnMouseMove, false);
                    if (!this._dragInfo) {
                        var pos = this._getTargetMousePos(event, (event.target));
                        this._target.onMouseOver(pos.x, pos.y);
                        this._startHoverCheck(event);
                    }
                };
                MouseController.prototype._onMouseOut = function (event) {
                    event.target.removeEventListener("mousemove", this._boundOnMouseMove, false);
                    if (!this._dragInfo) {
                        this._target.onMouseOut();
                    }
                    this._killHoverCheck();
                };
                MouseController.prototype._onMouseMove = function (event) {
                    if (!this._dragInfo) {
                        var pos = this._getTargetMousePos(event, (event.target));
                        this._target.onMouseMove(pos.x, pos.y);
                        this._killHoverCheck();
                        this._startHoverCheck(event);
                    }
                };
                MouseController.prototype._onMouseWheel = function (event) {
                    if (!event.altKey && !event.metaKey && !event.ctrlKey && !event.shiftKey) {
                        event.preventDefault();
                        if (!this._dragInfo && !this._wheelDisabled) {
                            var pos = this._getTargetMousePos(event, (event.target));
                            var delta = clamp((typeof event.deltaY !== "undefined") ? event.deltaY / 16 : -event.wheelDelta / 40, -1, 1);
                            var zoom = Math.pow(1.2, delta) - 1;
                            this._target.onMouseWheel(pos.x, pos.y, zoom);
                        }
                    }
                };
                MouseController.prototype._startHoverCheck = function (event) {
                    this._hoverInfo = {
                        isHovering: false,
                        timeoutHandle: setTimeout(this._onMouseMoveIdleHandler.bind(this), MouseController.HOVER_TIMEOUT),
                        pos: this._getTargetMousePos(event, (event.target))
                    };
                };
                MouseController.prototype._killHoverCheck = function () {
                    if (this._hoverInfo) {
                        clearTimeout(this._hoverInfo.timeoutHandle);
                        if (this._hoverInfo.isHovering) {
                            this._target.onHoverEnd();
                        }
                        this._hoverInfo = null;
                    }
                };
                MouseController.prototype._onMouseMoveIdleHandler = function () {
                    var hoverInfo = this._hoverInfo;
                    hoverInfo.isHovering = true;
                    this._target.onHoverStart(hoverInfo.pos.x, hoverInfo.pos.y);
                };
                MouseController.prototype._getTargetMousePos = function (event, target) {
                    var rect = target.getBoundingClientRect();
                    return {
                        x: event.clientX - rect.left,
                        y: event.clientY - rect.top
                    };
                };
                MouseController.HOVER_TIMEOUT = 500;
                MouseController._cursor = MouseCursor.DEFAULT;
                return MouseController;
            })();
            Profiler.MouseController = MouseController;
        })(Profiler = Tools.Profiler || (Tools.Profiler = {}));
    })(Tools = Shumway.Tools || (Shumway.Tools = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var Tools;
    (function (Tools) {
        var Profiler;
        (function (Profiler) {
            (function (FlameChartDragTarget) {
                FlameChartDragTarget[FlameChartDragTarget["NONE"] = 0] = "NONE";
                FlameChartDragTarget[FlameChartDragTarget["WINDOW"] = 1] = "WINDOW";
                FlameChartDragTarget[FlameChartDragTarget["HANDLE_LEFT"] = 2] = "HANDLE_LEFT";
                FlameChartDragTarget[FlameChartDragTarget["HANDLE_RIGHT"] = 3] = "HANDLE_RIGHT";
                FlameChartDragTarget[FlameChartDragTarget["HANDLE_BOTH"] = 4] = "HANDLE_BOTH";
            })(Profiler.FlameChartDragTarget || (Profiler.FlameChartDragTarget = {}));
            var FlameChartDragTarget = Profiler.FlameChartDragTarget;
            var FlameChartBase = (function () {
                function FlameChartBase(controller) {
                    this._controller = controller;
                    this._initialized = false;
                    this._canvas = document.createElement("canvas");
                    this._context = this._canvas.getContext("2d");
                    this._mouseController = new Profiler.MouseController(this, this._canvas);
                    var container = controller.container;
                    container.appendChild(this._canvas);
                    var rect = container.getBoundingClientRect();
                    this.setSize(rect.width);
                }
                Object.defineProperty(FlameChartBase.prototype, "canvas", {
                    get: function () {
                        return this._canvas;
                    },
                    enumerable: true,
                    configurable: true
                });
                FlameChartBase.prototype.setSize = function (width, height) {
                    if (height === void 0) { height = 20; }
                    this._width = width;
                    this._height = height;
                    this._resetCanvas();
                    this.draw();
                };
                FlameChartBase.prototype.initialize = function (rangeStart, rangeEnd) {
                    this._initialized = true;
                    this.setRange(rangeStart, rangeEnd, false);
                    this.setWindow(rangeStart, rangeEnd, false);
                    this.draw();
                };
                FlameChartBase.prototype.setWindow = function (start, end, draw) {
                    if (draw === void 0) { draw = true; }
                    this._windowStart = start;
                    this._windowEnd = end;
                    !draw || this.draw();
                };
                FlameChartBase.prototype.setRange = function (start, end, draw) {
                    if (draw === void 0) { draw = true; }
                    this._rangeStart = start;
                    this._rangeEnd = end;
                    !draw || this.draw();
                };
                FlameChartBase.prototype.destroy = function () {
                    this._mouseController.destroy();
                    this._mouseController = null;
                    this._controller.container.removeChild(this._canvas);
                    this._controller = null;
                };
                FlameChartBase.prototype._resetCanvas = function () {
                    var ratio = window.devicePixelRatio;
                    var canvas = this._canvas;
                    canvas.width = this._width * ratio;
                    canvas.height = this._height * ratio;
                    canvas.style.width = this._width + "px";
                    canvas.style.height = this._height + "px";
                };
                FlameChartBase.prototype.draw = function () {
                };
                FlameChartBase.prototype._almostEq = function (a, b, precision) {
                    if (precision === void 0) { precision = 10; }
                    var pow10 = Math.pow(10, precision);
                    return Math.abs(a - b) < (1 / pow10);
                };
                FlameChartBase.prototype._windowEqRange = function () {
                    return (this._almostEq(this._windowStart, this._rangeStart) && this._almostEq(this._windowEnd, this._rangeEnd));
                };
                FlameChartBase.prototype._decimalPlaces = function (value) {
                    return ((+value).toFixed(10)).replace(/^-?\d*\.?|0+$/g, '').length;
                };
                FlameChartBase.prototype._toPixelsRelative = function (time) {
                    return 0;
                };
                FlameChartBase.prototype._toPixels = function (time) {
                    return 0;
                };
                FlameChartBase.prototype._toTimeRelative = function (px) {
                    return 0;
                };
                FlameChartBase.prototype._toTime = function (px) {
                    return 0;
                };
                FlameChartBase.prototype.onMouseWheel = function (x, y, delta) {
                    var time = this._toTime(x);
                    var windowStart = this._windowStart;
                    var windowEnd = this._windowEnd;
                    var windowLen = windowEnd - windowStart;
                    var maxDelta = Math.max((FlameChartBase.MIN_WINDOW_LEN - windowLen) / windowLen, delta);
                    var start = windowStart + (windowStart - time) * maxDelta;
                    var end = windowEnd + (windowEnd - time) * maxDelta;
                    this._controller.setWindow(start, end);
                    this.onHoverEnd();
                };
                FlameChartBase.prototype.onMouseDown = function (x, y) {
                };
                FlameChartBase.prototype.onMouseMove = function (x, y) {
                };
                FlameChartBase.prototype.onMouseOver = function (x, y) {
                };
                FlameChartBase.prototype.onMouseOut = function () {
                };
                FlameChartBase.prototype.onDrag = function (startX, startY, currentX, currentY, deltaX, deltaY) {
                };
                FlameChartBase.prototype.onDragEnd = function (startX, startY, currentX, currentY, deltaX, deltaY) {
                };
                FlameChartBase.prototype.onClick = function (x, y) {
                };
                FlameChartBase.prototype.onHoverStart = function (x, y) {
                };
                FlameChartBase.prototype.onHoverEnd = function () {
                };
                FlameChartBase.DRAGHANDLE_WIDTH = 4;
                FlameChartBase.MIN_WINDOW_LEN = 0.1;
                return FlameChartBase;
            })();
            Profiler.FlameChartBase = FlameChartBase;
        })(Profiler = Tools.Profiler || (Tools.Profiler = {}));
    })(Tools = Shumway.Tools || (Shumway.Tools = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var Tools;
    (function (Tools) {
        var Profiler;
        (function (Profiler) {
            var trimMiddle = Shumway.StringUtilities.trimMiddle;
            var FlameChart = (function (_super) {
                __extends(FlameChart, _super);
                function FlameChart(controller, snapshot) {
                    _super.call(this, controller);
                    this._textWidth = {};
                    this._minFrameWidthInPixels = 1;
                    this._snapshot = snapshot;
                    this._kindStyle = Object.create(null);
                }
                FlameChart.prototype.setSize = function (width, height) {
                    _super.prototype.setSize.call(this, width, height || this._initialized ? this._maxDepth * 12.5 : 100);
                };
                FlameChart.prototype.initialize = function (rangeStart, rangeEnd) {
                    this._initialized = true;
                    this._maxDepth = this._snapshot.maxDepth;
                    this.setRange(rangeStart, rangeEnd, false);
                    this.setWindow(rangeStart, rangeEnd, false);
                    this.setSize(this._width, this._maxDepth * 12.5);
                };
                FlameChart.prototype.destroy = function () {
                    _super.prototype.destroy.call(this);
                    this._snapshot = null;
                };
                FlameChart.prototype.draw = function () {
                    var context = this._context;
                    var ratio = window.devicePixelRatio;
                    Shumway.ColorStyle.reset();
                    context.save();
                    context.scale(ratio, ratio);
                    context.fillStyle = this._controller.theme.bodyBackground(1);
                    context.fillRect(0, 0, this._width, this._height);
                    if (this._initialized) {
                        this._drawChildren(this._snapshot);
                    }
                    context.restore();
                };
                FlameChart.prototype._drawChildren = function (parent, depth) {
                    if (depth === void 0) { depth = 0; }
                    var range = parent.getChildRange(this._windowStart, this._windowEnd);
                    if (range) {
                        for (var i = range.startIndex; i <= range.endIndex; i++) {
                            var child = parent.children[i];
                            if (this._drawFrame(child, depth)) {
                                this._drawChildren(child, depth + 1);
                            }
                        }
                    }
                };
                FlameChart.prototype._drawFrame = function (frame, depth) {
                    var context = this._context;
                    var frameHPadding = 0.5;
                    var left = this._toPixels(frame.startTime);
                    var right = this._toPixels(frame.endTime);
                    var width = right - left;
                    if (width <= this._minFrameWidthInPixels) {
                        context.fillStyle = this._controller.theme.tabToolbar(1);
                        context.fillRect(left, depth * (12 + frameHPadding), this._minFrameWidthInPixels, 12 + (frame.maxDepth - frame.depth) * 12.5);
                        return false;
                    }
                    if (left < 0) {
                        right = width + left;
                        left = 0;
                    }
                    var adjustedWidth = right - left;
                    var style = this._kindStyle[frame.kind.id];
                    if (!style) {
                        var background = Shumway.ColorStyle.randomStyle();
                        style = this._kindStyle[frame.kind.id] = {
                            bgColor: background,
                            textColor: Shumway.ColorStyle.contrastStyle(background)
                        };
                    }
                    context.save();
                    context.fillStyle = style.bgColor;
                    context.fillRect(left, depth * (12 + frameHPadding), adjustedWidth, 12);
                    if (width > 12) {
                        var label = frame.kind.name;
                        if (label && label.length) {
                            var labelHPadding = 2;
                            label = this._prepareText(context, label, adjustedWidth - labelHPadding * 2);
                            if (label.length) {
                                context.fillStyle = style.textColor;
                                context.textBaseline = "bottom";
                                context.fillText(label, left + labelHPadding, (depth + 1) * (12 + frameHPadding) - 1);
                            }
                        }
                    }
                    context.restore();
                    return true;
                };
                FlameChart.prototype._prepareText = function (context, title, maxSize) {
                    var titleWidth = this._measureWidth(context, title);
                    if (maxSize > titleWidth) {
                        return title;
                    }
                    var l = 3;
                    var r = title.length;
                    while (l < r) {
                        var m = (l + r) >> 1;
                        if (this._measureWidth(context, trimMiddle(title, m)) < maxSize) {
                            l = m + 1;
                        }
                        else {
                            r = m;
                        }
                    }
                    title = trimMiddle(title, r - 1);
                    titleWidth = this._measureWidth(context, title);
                    if (titleWidth <= maxSize) {
                        return title;
                    }
                    return "";
                };
                FlameChart.prototype._measureWidth = function (context, text) {
                    var width = this._textWidth[text];
                    if (!width) {
                        width = context.measureText(text).width;
                        this._textWidth[text] = width;
                    }
                    return width;
                };
                FlameChart.prototype._toPixelsRelative = function (time) {
                    return time * this._width / (this._windowEnd - this._windowStart);
                };
                FlameChart.prototype._toPixels = function (time) {
                    return this._toPixelsRelative(time - this._windowStart);
                };
                FlameChart.prototype._toTimeRelative = function (px) {
                    return px * (this._windowEnd - this._windowStart) / this._width;
                };
                FlameChart.prototype._toTime = function (px) {
                    return this._toTimeRelative(px) + this._windowStart;
                };
                FlameChart.prototype._getFrameAtPosition = function (x, y) {
                    var time = this._toTime(x);
                    var depth = 1 + (y / 12.5) | 0;
                    var frame = this._snapshot.query(time);
                    if (frame && frame.depth >= depth) {
                        while (frame && frame.depth > depth) {
                            frame = frame.parent;
                        }
                        return frame;
                    }
                    return null;
                };
                FlameChart.prototype.onMouseDown = function (x, y) {
                    if (!this._windowEqRange()) {
                        this._mouseController.updateCursor(Profiler.MouseCursor.ALL_SCROLL);
                        this._dragInfo = {
                            windowStartInitial: this._windowStart,
                            windowEndInitial: this._windowEnd,
                            target: 1 /* WINDOW */
                        };
                    }
                };
                FlameChart.prototype.onMouseMove = function (x, y) {
                };
                FlameChart.prototype.onMouseOver = function (x, y) {
                };
                FlameChart.prototype.onMouseOut = function () {
                };
                FlameChart.prototype.onDrag = function (startX, startY, currentX, currentY, deltaX, deltaY) {
                    var dragInfo = this._dragInfo;
                    if (dragInfo) {
                        var delta = this._toTimeRelative(-deltaX);
                        var windowStart = dragInfo.windowStartInitial + delta;
                        var windowEnd = dragInfo.windowEndInitial + delta;
                        this._controller.setWindow(windowStart, windowEnd);
                    }
                };
                FlameChart.prototype.onDragEnd = function (startX, startY, currentX, currentY, deltaX, deltaY) {
                    this._dragInfo = null;
                    this._mouseController.updateCursor(Profiler.MouseCursor.DEFAULT);
                };
                FlameChart.prototype.onClick = function (x, y) {
                    this._dragInfo = null;
                    this._mouseController.updateCursor(Profiler.MouseCursor.DEFAULT);
                };
                FlameChart.prototype.onHoverStart = function (x, y) {
                    var frame = this._getFrameAtPosition(x, y);
                    if (frame) {
                        this._hoveredFrame = frame;
                        this._controller.showTooltip(this, frame, x, y);
                    }
                };
                FlameChart.prototype.onHoverEnd = function () {
                    if (this._hoveredFrame) {
                        this._hoveredFrame = null;
                        this._controller.hideTooltip();
                    }
                };
                FlameChart.prototype.getStatistics = function (kind) {
                    var snapshot = this._snapshot;
                    if (!snapshot.statistics) {
                        snapshot.calculateStatistics();
                    }
                    return snapshot.statistics[kind.id];
                };
                return FlameChart;
            })(Profiler.FlameChartBase);
            Profiler.FlameChart = FlameChart;
        })(Profiler = Tools.Profiler || (Tools.Profiler = {}));
    })(Tools = Shumway.Tools || (Shumway.Tools = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var Tools;
    (function (Tools) {
        var Profiler;
        (function (Profiler) {
            var clamp = Shumway.NumberUtilities.clamp;
            (function (FlameChartOverviewMode) {
                FlameChartOverviewMode[FlameChartOverviewMode["OVERLAY"] = 0] = "OVERLAY";
                FlameChartOverviewMode[FlameChartOverviewMode["STACK"] = 1] = "STACK";
                FlameChartOverviewMode[FlameChartOverviewMode["UNION"] = 2] = "UNION";
            })(Profiler.FlameChartOverviewMode || (Profiler.FlameChartOverviewMode = {}));
            var FlameChartOverviewMode = Profiler.FlameChartOverviewMode;
            var FlameChartOverview = (function (_super) {
                __extends(FlameChartOverview, _super);
                function FlameChartOverview(controller, mode) {
                    if (mode === void 0) { mode = 1 /* STACK */; }
                    this._mode = mode;
                    this._overviewCanvasDirty = true;
                    this._overviewCanvas = document.createElement("canvas");
                    this._overviewContext = this._overviewCanvas.getContext("2d");
                    _super.call(this, controller);
                }
                FlameChartOverview.prototype.setSize = function (width, height) {
                    _super.prototype.setSize.call(this, width, height || 64);
                };
                Object.defineProperty(FlameChartOverview.prototype, "mode", {
                    set: function (value) {
                        this._mode = value;
                        this.draw();
                    },
                    enumerable: true,
                    configurable: true
                });
                FlameChartOverview.prototype._resetCanvas = function () {
                    _super.prototype._resetCanvas.call(this);
                    this._overviewCanvas.width = this._canvas.width;
                    this._overviewCanvas.height = this._canvas.height;
                    this._overviewCanvasDirty = true;
                };
                FlameChartOverview.prototype.draw = function () {
                    var context = this._context;
                    var ratio = window.devicePixelRatio;
                    var width = this._width;
                    var height = this._height;
                    context.save();
                    context.scale(ratio, ratio);
                    context.fillStyle = this._controller.theme.bodyBackground(1);
                    context.fillRect(0, 0, width, height);
                    context.restore();
                    if (this._initialized) {
                        if (this._overviewCanvasDirty) {
                            this._drawChart();
                            this._overviewCanvasDirty = false;
                        }
                        context.drawImage(this._overviewCanvas, 0, 0);
                        this._drawSelection();
                    }
                };
                FlameChartOverview.prototype._drawSelection = function () {
                    var context = this._context;
                    var height = this._height;
                    var ratio = window.devicePixelRatio;
                    var left = this._selection ? this._selection.left : this._toPixels(this._windowStart);
                    var right = this._selection ? this._selection.right : this._toPixels(this._windowEnd);
                    var theme = this._controller.theme;
                    context.save();
                    context.scale(ratio, ratio);
                    if (this._selection) {
                        context.fillStyle = theme.selectionText(0.15);
                        context.fillRect(left, 1, right - left, height - 1);
                        context.fillStyle = "rgba(133, 0, 0, 1)";
                        context.fillRect(left + 0.5, 0, right - left - 1, 4);
                        context.fillRect(left + 0.5, height - 4, right - left - 1, 4);
                    }
                    else {
                        context.fillStyle = theme.bodyBackground(0.4);
                        context.fillRect(0, 1, left, height - 1);
                        context.fillRect(right, 1, this._width, height - 1);
                    }
                    context.beginPath();
                    context.moveTo(left, 0);
                    context.lineTo(left, height);
                    context.moveTo(right, 0);
                    context.lineTo(right, height);
                    context.lineWidth = 0.5;
                    context.strokeStyle = theme.foregroundTextGrey(1);
                    context.stroke();
                    var start = this._selection ? this._toTime(this._selection.left) : this._windowStart;
                    var end = this._selection ? this._toTime(this._selection.right) : this._windowEnd;
                    var time = Math.abs(end - start);
                    context.fillStyle = theme.selectionText(0.5);
                    context.font = '8px sans-serif';
                    context.textBaseline = "alphabetic";
                    context.textAlign = "end";
                    context.fillText(time.toFixed(2), Math.min(left, right) - 4, 10);
                    context.fillText((time / 60).toFixed(2), Math.min(left, right) - 4, 20);
                    context.restore();
                };
                FlameChartOverview.prototype._drawChart = function () {
                    var ratio = window.devicePixelRatio;
                    var width = this._width;
                    var height = this._height;
                    var profile = this._controller.activeProfile;
                    var samplesPerPixel = 4;
                    var samplesCount = width * samplesPerPixel;
                    var sampleTimeInterval = profile.totalTime / samplesCount;
                    var contextOverview = this._overviewContext;
                    var overviewChartColor = this._controller.theme.blueHighlight(1);
                    contextOverview.save();
                    contextOverview.translate(0, ratio * height);
                    var yScale = -ratio * height / (profile.maxDepth - 1);
                    contextOverview.scale(ratio / samplesPerPixel, yScale);
                    contextOverview.clearRect(0, 0, samplesCount, profile.maxDepth - 1);
                    if (this._mode == 1 /* STACK */) {
                        contextOverview.scale(1, 1 / profile.snapshotCount);
                    }
                    for (var i = 0, n = profile.snapshotCount; i < n; i++) {
                        var snapshot = profile.getSnapshotAt(i);
                        if (snapshot) {
                            var deepestFrame = null;
                            var depth = 0;
                            contextOverview.beginPath();
                            contextOverview.moveTo(0, 0);
                            for (var x = 0; x < samplesCount; x++) {
                                var time = profile.startTime + x * sampleTimeInterval;
                                if (!deepestFrame) {
                                    deepestFrame = snapshot.query(time);
                                }
                                else {
                                    deepestFrame = deepestFrame.queryNext(time);
                                }
                                depth = deepestFrame ? deepestFrame.getDepth() - 1 : 0;
                                contextOverview.lineTo(x, depth);
                            }
                            contextOverview.lineTo(x, 0);
                            contextOverview.fillStyle = overviewChartColor;
                            contextOverview.fill();
                            if (this._mode == 1 /* STACK */) {
                                contextOverview.translate(0, -height * ratio / yScale);
                            }
                        }
                    }
                    contextOverview.restore();
                };
                FlameChartOverview.prototype._toPixelsRelative = function (time) {
                    return time * this._width / (this._rangeEnd - this._rangeStart);
                };
                FlameChartOverview.prototype._toPixels = function (time) {
                    return this._toPixelsRelative(time - this._rangeStart);
                };
                FlameChartOverview.prototype._toTimeRelative = function (px) {
                    return px * (this._rangeEnd - this._rangeStart) / this._width;
                };
                FlameChartOverview.prototype._toTime = function (px) {
                    return this._toTimeRelative(px) + this._rangeStart;
                };
                FlameChartOverview.prototype._getDragTargetUnderCursor = function (x, y) {
                    if (y >= 0 && y < this._height) {
                        var left = this._toPixels(this._windowStart);
                        var right = this._toPixels(this._windowEnd);
                        var radius = 2 + (Profiler.FlameChartBase.DRAGHANDLE_WIDTH) / 2;
                        var leftHandle = (x >= left - radius && x <= left + radius);
                        var rightHandle = (x >= right - radius && x <= right + radius);
                        if (leftHandle && rightHandle) {
                            return 4 /* HANDLE_BOTH */;
                        }
                        else if (leftHandle) {
                            return 2 /* HANDLE_LEFT */;
                        }
                        else if (rightHandle) {
                            return 3 /* HANDLE_RIGHT */;
                        }
                        else if (!this._windowEqRange() && x > left + radius && x < right - radius) {
                            return 1 /* WINDOW */;
                        }
                    }
                    return 0 /* NONE */;
                };
                FlameChartOverview.prototype.onMouseDown = function (x, y) {
                    var dragTarget = this._getDragTargetUnderCursor(x, y);
                    if (dragTarget === 0 /* NONE */) {
                        this._selection = { left: x, right: x };
                        this.draw();
                    }
                    else {
                        if (dragTarget === 1 /* WINDOW */) {
                            this._mouseController.updateCursor(Profiler.MouseCursor.GRABBING);
                        }
                        this._dragInfo = {
                            windowStartInitial: this._windowStart,
                            windowEndInitial: this._windowEnd,
                            target: dragTarget
                        };
                    }
                };
                FlameChartOverview.prototype.onMouseMove = function (x, y) {
                    var cursor = Profiler.MouseCursor.DEFAULT;
                    var dragTarget = this._getDragTargetUnderCursor(x, y);
                    if (dragTarget !== 0 /* NONE */ && !this._selection) {
                        cursor = (dragTarget === 1 /* WINDOW */) ? Profiler.MouseCursor.GRAB : Profiler.MouseCursor.EW_RESIZE;
                    }
                    this._mouseController.updateCursor(cursor);
                };
                FlameChartOverview.prototype.onMouseOver = function (x, y) {
                    this.onMouseMove(x, y);
                };
                FlameChartOverview.prototype.onMouseOut = function () {
                    this._mouseController.updateCursor(Profiler.MouseCursor.DEFAULT);
                };
                FlameChartOverview.prototype.onDrag = function (startX, startY, currentX, currentY, deltaX, deltaY) {
                    if (this._selection) {
                        this._selection = { left: startX, right: clamp(currentX, 0, this._width - 1) };
                        this.draw();
                    }
                    else {
                        var dragInfo = this._dragInfo;
                        if (dragInfo.target === 4 /* HANDLE_BOTH */) {
                            if (deltaX !== 0) {
                                dragInfo.target = (deltaX < 0) ? 2 /* HANDLE_LEFT */ : 3 /* HANDLE_RIGHT */;
                            }
                            else {
                                return;
                            }
                        }
                        var windowStart = this._windowStart;
                        var windowEnd = this._windowEnd;
                        var delta = this._toTimeRelative(deltaX);
                        switch (dragInfo.target) {
                            case 1 /* WINDOW */:
                                windowStart = dragInfo.windowStartInitial + delta;
                                windowEnd = dragInfo.windowEndInitial + delta;
                                break;
                            case 2 /* HANDLE_LEFT */:
                                windowStart = clamp(dragInfo.windowStartInitial + delta, this._rangeStart, windowEnd - Profiler.FlameChartBase.MIN_WINDOW_LEN);
                                break;
                            case 3 /* HANDLE_RIGHT */:
                                windowEnd = clamp(dragInfo.windowEndInitial + delta, windowStart + Profiler.FlameChartBase.MIN_WINDOW_LEN, this._rangeEnd);
                                break;
                            default:
                                return;
                        }
                        this._controller.setWindow(windowStart, windowEnd);
                    }
                };
                FlameChartOverview.prototype.onDragEnd = function (startX, startY, currentX, currentY, deltaX, deltaY) {
                    if (this._selection) {
                        this._selection = null;
                        this._controller.setWindow(this._toTime(startX), this._toTime(currentX));
                    }
                    this._dragInfo = null;
                    this.onMouseMove(currentX, currentY);
                };
                FlameChartOverview.prototype.onClick = function (x, y) {
                    this._dragInfo = null;
                    this._selection = null;
                    if (!this._windowEqRange()) {
                        var dragTarget = this._getDragTargetUnderCursor(x, y);
                        if (dragTarget === 0 /* NONE */) {
                            this._controller.moveWindowTo(this._toTime(x));
                        }
                        this.onMouseMove(x, y);
                    }
                    this.draw();
                };
                FlameChartOverview.prototype.onHoverStart = function (x, y) {
                };
                FlameChartOverview.prototype.onHoverEnd = function () {
                };
                return FlameChartOverview;
            })(Profiler.FlameChartBase);
            Profiler.FlameChartOverview = FlameChartOverview;
        })(Profiler = Tools.Profiler || (Tools.Profiler = {}));
    })(Tools = Shumway.Tools || (Shumway.Tools = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var Tools;
    (function (Tools) {
        var Profiler;
        (function (Profiler) {
            var clamp = Shumway.NumberUtilities.clamp;
            (function (FlameChartHeaderType) {
                FlameChartHeaderType[FlameChartHeaderType["OVERVIEW"] = 0] = "OVERVIEW";
                FlameChartHeaderType[FlameChartHeaderType["CHART"] = 1] = "CHART";
            })(Profiler.FlameChartHeaderType || (Profiler.FlameChartHeaderType = {}));
            var FlameChartHeaderType = Profiler.FlameChartHeaderType;
            var FlameChartHeader = (function (_super) {
                __extends(FlameChartHeader, _super);
                function FlameChartHeader(controller, type) {
                    this._type = type;
                    _super.call(this, controller);
                }
                FlameChartHeader.prototype.draw = function () {
                    var context = this._context;
                    var ratio = window.devicePixelRatio;
                    var width = this._width;
                    var height = this._height;
                    context.save();
                    context.scale(ratio, ratio);
                    context.fillStyle = this._controller.theme.tabToolbar(1);
                    context.fillRect(0, 0, width, height);
                    if (this._initialized) {
                        if (this._type == 0 /* OVERVIEW */) {
                            var left = this._toPixels(this._windowStart);
                            var right = this._toPixels(this._windowEnd);
                            context.fillStyle = this._controller.theme.bodyBackground(1);
                            context.fillRect(left, 0, right - left, height);
                            this._drawLabels(this._rangeStart, this._rangeEnd);
                            this._drawDragHandle(left);
                            this._drawDragHandle(right);
                        }
                        else {
                            this._drawLabels(this._windowStart, this._windowEnd);
                        }
                    }
                    context.restore();
                };
                FlameChartHeader.prototype._drawLabels = function (rangeStart, rangeEnd) {
                    var context = this._context;
                    var tickInterval = this._calculateTickInterval(rangeStart, rangeEnd);
                    var tick = Math.ceil(rangeStart / tickInterval) * tickInterval;
                    var showSeconds = (tickInterval >= 500);
                    var divisor = showSeconds ? 1000 : 1;
                    var precision = this._decimalPlaces(tickInterval / divisor);
                    var unit = showSeconds ? "s" : "ms";
                    var x = this._toPixels(tick);
                    var y = this._height / 2;
                    var theme = this._controller.theme;
                    context.lineWidth = 1;
                    context.strokeStyle = theme.contentTextDarkGrey(0.5);
                    context.fillStyle = theme.contentTextDarkGrey(1);
                    context.textAlign = "right";
                    context.textBaseline = "middle";
                    context.font = '11px sans-serif';
                    var maxWidth = this._width + FlameChartHeader.TICK_MAX_WIDTH;
                    while (x < maxWidth) {
                        var tickStr = (tick / divisor).toFixed(precision) + " " + unit;
                        context.fillText(tickStr, x - 7, y + 1);
                        context.beginPath();
                        context.moveTo(x, 0);
                        context.lineTo(x, this._height + 1);
                        context.closePath();
                        context.stroke();
                        tick += tickInterval;
                        x = this._toPixels(tick);
                    }
                };
                FlameChartHeader.prototype._calculateTickInterval = function (rangeStart, rangeEnd) {
                    var tickCount = this._width / FlameChartHeader.TICK_MAX_WIDTH;
                    var range = rangeEnd - rangeStart;
                    var minimum = range / tickCount;
                    var magnitude = Math.pow(10, Math.floor(Math.log(minimum) / Math.LN10));
                    var residual = minimum / magnitude;
                    if (residual > 5) {
                        return 10 * magnitude;
                    }
                    else if (residual > 2) {
                        return 5 * magnitude;
                    }
                    else if (residual > 1) {
                        return 2 * magnitude;
                    }
                    return magnitude;
                };
                FlameChartHeader.prototype._drawDragHandle = function (pos) {
                    var context = this._context;
                    context.lineWidth = 2;
                    context.strokeStyle = this._controller.theme.bodyBackground(1);
                    context.fillStyle = this._controller.theme.foregroundTextGrey(0.7);
                    this._drawRoundedRect(context, pos - Profiler.FlameChartBase.DRAGHANDLE_WIDTH / 2, 1, Profiler.FlameChartBase.DRAGHANDLE_WIDTH, this._height - 2, 2, true);
                };
                FlameChartHeader.prototype._drawRoundedRect = function (context, x, y, width, height, radius, stroke, fill) {
                    if (stroke === void 0) { stroke = true; }
                    if (fill === void 0) { fill = true; }
                    context.beginPath();
                    context.moveTo(x + radius, y);
                    context.lineTo(x + width - radius, y);
                    context.quadraticCurveTo(x + width, y, x + width, y + radius);
                    context.lineTo(x + width, y + height - radius);
                    context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
                    context.lineTo(x + radius, y + height);
                    context.quadraticCurveTo(x, y + height, x, y + height - radius);
                    context.lineTo(x, y + radius);
                    context.quadraticCurveTo(x, y, x + radius, y);
                    context.closePath();
                    if (stroke) {
                        context.stroke();
                    }
                    if (fill) {
                        context.fill();
                    }
                };
                FlameChartHeader.prototype._toPixelsRelative = function (time) {
                    var range = (this._type === 0 /* OVERVIEW */) ? this._rangeEnd - this._rangeStart : this._windowEnd - this._windowStart;
                    return time * this._width / range;
                };
                FlameChartHeader.prototype._toPixels = function (time) {
                    var start = (this._type === 0 /* OVERVIEW */) ? this._rangeStart : this._windowStart;
                    return this._toPixelsRelative(time - start);
                };
                FlameChartHeader.prototype._toTimeRelative = function (px) {
                    var range = (this._type === 0 /* OVERVIEW */) ? this._rangeEnd - this._rangeStart : this._windowEnd - this._windowStart;
                    return px * range / this._width;
                };
                FlameChartHeader.prototype._toTime = function (px) {
                    var start = (this._type === 0 /* OVERVIEW */) ? this._rangeStart : this._windowStart;
                    return this._toTimeRelative(px) + start;
                };
                FlameChartHeader.prototype._getDragTargetUnderCursor = function (x, y) {
                    if (y >= 0 && y < this._height) {
                        if (this._type === 0 /* OVERVIEW */) {
                            var left = this._toPixels(this._windowStart);
                            var right = this._toPixels(this._windowEnd);
                            var radius = 2 + (Profiler.FlameChartBase.DRAGHANDLE_WIDTH) / 2;
                            var leftHandle = (x >= left - radius && x <= left + radius);
                            var rightHandle = (x >= right - radius && x <= right + radius);
                            if (leftHandle && rightHandle) {
                                return 4 /* HANDLE_BOTH */;
                            }
                            else if (leftHandle) {
                                return 2 /* HANDLE_LEFT */;
                            }
                            else if (rightHandle) {
                                return 3 /* HANDLE_RIGHT */;
                            }
                            else if (!this._windowEqRange()) {
                                return 1 /* WINDOW */;
                            }
                        }
                        else if (!this._windowEqRange()) {
                            return 1 /* WINDOW */;
                        }
                    }
                    return 0 /* NONE */;
                };
                FlameChartHeader.prototype.onMouseDown = function (x, y) {
                    var dragTarget = this._getDragTargetUnderCursor(x, y);
                    if (dragTarget === 1 /* WINDOW */) {
                        this._mouseController.updateCursor(Profiler.MouseCursor.GRABBING);
                    }
                    this._dragInfo = {
                        windowStartInitial: this._windowStart,
                        windowEndInitial: this._windowEnd,
                        target: dragTarget
                    };
                };
                FlameChartHeader.prototype.onMouseMove = function (x, y) {
                    var cursor = Profiler.MouseCursor.DEFAULT;
                    var dragTarget = this._getDragTargetUnderCursor(x, y);
                    if (dragTarget !== 0 /* NONE */) {
                        if (dragTarget !== 1 /* WINDOW */) {
                            cursor = Profiler.MouseCursor.EW_RESIZE;
                        }
                        else if (dragTarget === 1 /* WINDOW */ && !this._windowEqRange()) {
                            cursor = Profiler.MouseCursor.GRAB;
                        }
                    }
                    this._mouseController.updateCursor(cursor);
                };
                FlameChartHeader.prototype.onMouseOver = function (x, y) {
                    this.onMouseMove(x, y);
                };
                FlameChartHeader.prototype.onMouseOut = function () {
                    this._mouseController.updateCursor(Profiler.MouseCursor.DEFAULT);
                };
                FlameChartHeader.prototype.onDrag = function (startX, startY, currentX, currentY, deltaX, deltaY) {
                    var dragInfo = this._dragInfo;
                    if (dragInfo.target === 4 /* HANDLE_BOTH */) {
                        if (deltaX !== 0) {
                            dragInfo.target = (deltaX < 0) ? 2 /* HANDLE_LEFT */ : 3 /* HANDLE_RIGHT */;
                        }
                        else {
                            return;
                        }
                    }
                    var windowStart = this._windowStart;
                    var windowEnd = this._windowEnd;
                    var delta = this._toTimeRelative(deltaX);
                    switch (dragInfo.target) {
                        case 1 /* WINDOW */:
                            var mult = (this._type === 0 /* OVERVIEW */) ? 1 : -1;
                            windowStart = dragInfo.windowStartInitial + mult * delta;
                            windowEnd = dragInfo.windowEndInitial + mult * delta;
                            break;
                        case 2 /* HANDLE_LEFT */:
                            windowStart = clamp(dragInfo.windowStartInitial + delta, this._rangeStart, windowEnd - Profiler.FlameChartBase.MIN_WINDOW_LEN);
                            break;
                        case 3 /* HANDLE_RIGHT */:
                            windowEnd = clamp(dragInfo.windowEndInitial + delta, windowStart + Profiler.FlameChartBase.MIN_WINDOW_LEN, this._rangeEnd);
                            break;
                        default:
                            return;
                    }
                    this._controller.setWindow(windowStart, windowEnd);
                };
                FlameChartHeader.prototype.onDragEnd = function (startX, startY, currentX, currentY, deltaX, deltaY) {
                    this._dragInfo = null;
                    this.onMouseMove(currentX, currentY);
                };
                FlameChartHeader.prototype.onClick = function (x, y) {
                    if (this._dragInfo.target === 1 /* WINDOW */) {
                        this._mouseController.updateCursor(Profiler.MouseCursor.GRAB);
                    }
                };
                FlameChartHeader.prototype.onHoverStart = function (x, y) {
                };
                FlameChartHeader.prototype.onHoverEnd = function () {
                };
                FlameChartHeader.TICK_MAX_WIDTH = 75;
                return FlameChartHeader;
            })(Profiler.FlameChartBase);
            Profiler.FlameChartHeader = FlameChartHeader;
        })(Profiler = Tools.Profiler || (Tools.Profiler = {}));
    })(Tools = Shumway.Tools || (Shumway.Tools = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var Tools;
    (function (Tools) {
        var Profiler;
        (function (Profiler) {
            var TraceLogger;
            (function (_TraceLogger) {
                var TraceLoggerProgressInfo = (function () {
                    function TraceLoggerProgressInfo(pageLoaded, threadsTotal, threadsLoaded, threadFilesTotal, threadFilesLoaded) {
                        this.pageLoaded = pageLoaded;
                        this.threadsTotal = threadsTotal;
                        this.threadsLoaded = threadsLoaded;
                        this.threadFilesTotal = threadFilesTotal;
                        this.threadFilesLoaded = threadFilesLoaded;
                    }
                    TraceLoggerProgressInfo.prototype.toString = function () {
                        return "[" + ["pageLoaded", "threadsTotal", "threadsLoaded", "threadFilesTotal", "threadFilesLoaded"].map(function (value, i, arr) {
                            return value + ":" + this[value];
                        }, this).join(", ") + "]";
                    };
                    return TraceLoggerProgressInfo;
                })();
                _TraceLogger.TraceLoggerProgressInfo = TraceLoggerProgressInfo;
                var TraceLogger = (function () {
                    function TraceLogger(baseUrl) {
                        this._baseUrl = baseUrl;
                        this._threads = [];
                        this._progressInfo = null;
                    }
                    TraceLogger.prototype.loadPage = function (url, callback, progress) {
                        this._threads = [];
                        this._pageLoadCallback = callback;
                        this._pageLoadProgressCallback = progress;
                        this._progressInfo = new TraceLoggerProgressInfo(false, 0, 0, 0, 0);
                        this._loadData([url], this._onLoadPage.bind(this));
                    };
                    Object.defineProperty(TraceLogger.prototype, "buffers", {
                        get: function () {
                            var buffers = [];
                            for (var i = 0, n = this._threads.length; i < n; i++) {
                                buffers.push(this._threads[i].buffer);
                            }
                            return buffers;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    TraceLogger.prototype._onProgress = function () {
                        if (this._pageLoadProgressCallback) {
                            this._pageLoadProgressCallback.call(this, this._progressInfo);
                        }
                    };
                    TraceLogger.prototype._onLoadPage = function (result) {
                        if (result && result.length == 1) {
                            var self = this;
                            var count = 0;
                            var threads = result[0];
                            var threadCount = threads.length;
                            this._threads = Array(threadCount);
                            this._progressInfo.pageLoaded = true;
                            this._progressInfo.threadsTotal = threadCount;
                            for (var i = 0; i < threads.length; i++) {
                                var thread = threads[i];
                                var urls = [thread.dict, thread.tree];
                                if (thread.corrections) {
                                    urls.push(thread.corrections);
                                }
                                this._progressInfo.threadFilesTotal += urls.length;
                                this._loadData(urls, (function (index) {
                                    return function (result) {
                                        if (result) {
                                            var thread = new _TraceLogger.Thread(result);
                                            thread.buffer.name = "Thread " + index;
                                            self._threads[index] = thread;
                                        }
                                        count++;
                                        self._progressInfo.threadsLoaded++;
                                        self._onProgress();
                                        if (count === threadCount) {
                                            self._pageLoadCallback.call(self, null, self._threads);
                                        }
                                    };
                                })(i), function (count) {
                                    self._progressInfo.threadFilesLoaded++;
                                    self._onProgress();
                                });
                            }
                            this._onProgress();
                        }
                        else {
                            this._pageLoadCallback.call(this, "Error loading page.", null);
                        }
                    };
                    TraceLogger.prototype._loadData = function (urls, callback, progress) {
                        var count = 0;
                        var errors = 0;
                        var expected = urls.length;
                        var received = [];
                        received.length = expected;
                        for (var i = 0; i < expected; i++) {
                            var url = this._baseUrl + urls[i];
                            var isTL = /\.tl$/i.test(url);
                            var xhr = new XMLHttpRequest();
                            var responseType = isTL ? "arraybuffer" : "json";
                            xhr.open('GET', url, true);
                            xhr.responseType = responseType;
                            xhr.onload = (function (index, type) {
                                return function (event) {
                                    if (type === "json") {
                                        var json = this.response;
                                        if (typeof json === "string") {
                                            try {
                                                json = JSON.parse(json);
                                                received[index] = json;
                                            }
                                            catch (e) {
                                                errors++;
                                            }
                                        }
                                        else {
                                            received[index] = json;
                                        }
                                    }
                                    else {
                                        received[index] = this.response;
                                    }
                                    ++count;
                                    if (progress) {
                                        progress(count);
                                    }
                                    if (count === expected) {
                                        callback(received);
                                    }
                                };
                            })(i, responseType);
                            xhr.send();
                        }
                    };
                    TraceLogger.colors = [
                        "#0044ff",
                        "#8c4b00",
                        "#cc5c33",
                        "#ff80c4",
                        "#ffbfd9",
                        "#ff8800",
                        "#8c5e00",
                        "#adcc33",
                        "#b380ff",
                        "#bfd9ff",
                        "#ffaa00",
                        "#8c0038",
                        "#bf8f30",
                        "#f780ff",
                        "#cc99c9",
                        "#aaff00",
                        "#000073",
                        "#452699",
                        "#cc8166",
                        "#cca799",
                        "#000066",
                        "#992626",
                        "#cc6666",
                        "#ccc299",
                        "#ff6600",
                        "#526600",
                        "#992663",
                        "#cc6681",
                        "#99ccc2",
                        "#ff0066",
                        "#520066",
                        "#269973",
                        "#61994d",
                        "#739699",
                        "#ffcc00",
                        "#006629",
                        "#269199",
                        "#94994d",
                        "#738299",
                        "#ff0000",
                        "#590000",
                        "#234d8c",
                        "#8c6246",
                        "#7d7399",
                        "#ee00ff",
                        "#00474d",
                        "#8c2385",
                        "#8c7546",
                        "#7c8c69",
                        "#eeff00",
                        "#4d003d",
                        "#662e1a",
                        "#62468c",
                        "#8c6969",
                        "#6600ff",
                        "#4c2900",
                        "#1a6657",
                        "#8c464f",
                        "#8c6981",
                        "#44ff00",
                        "#401100",
                        "#1a2466",
                        "#663355",
                        "#567365",
                        "#d90074",
                        "#403300",
                        "#101d40",
                        "#59562d",
                        "#66614d",
                        "#cc0000",
                        "#002b40",
                        "#234010",
                        "#4c2626",
                        "#4d5e66",
                        "#00a3cc",
                        "#400011",
                        "#231040",
                        "#4c3626",
                        "#464359",
                        "#0000bf",
                        "#331b00",
                        "#80e6ff",
                        "#311a33",
                        "#4d3939",
                        "#a69b00",
                        "#003329",
                        "#80ffb2",
                        "#331a20",
                        "#40303d",
                        "#00a658",
                        "#40ffd9",
                        "#ffc480",
                        "#ffe1bf",
                        "#332b26",
                        "#8c2500",
                        "#9933cc",
                        "#80fff6",
                        "#ffbfbf",
                        "#303326",
                        "#005e8c",
                        "#33cc47",
                        "#b2ff80",
                        "#c8bfff",
                        "#263332",
                        "#00708c",
                        "#cc33ad",
                        "#ffe680",
                        "#f2ffbf",
                        "#262a33",
                        "#388c00",
                        "#335ccc",
                        "#8091ff",
                        "#bfffd9"
                    ];
                    return TraceLogger;
                })();
                _TraceLogger.TraceLogger = TraceLogger;
            })(TraceLogger = Profiler.TraceLogger || (Profiler.TraceLogger = {}));
        })(Profiler = Tools.Profiler || (Tools.Profiler = {}));
    })(Tools = Shumway.Tools || (Shumway.Tools = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var Tools;
    (function (Tools) {
        var Profiler;
        (function (Profiler) {
            var TraceLogger;
            (function (TraceLogger) {
                var Offsets;
                (function (Offsets) {
                    Offsets[Offsets["START_HI"] = 0] = "START_HI";
                    Offsets[Offsets["START_LO"] = 4] = "START_LO";
                    Offsets[Offsets["STOP_HI"] = 8] = "STOP_HI";
                    Offsets[Offsets["STOP_LO"] = 12] = "STOP_LO";
                    Offsets[Offsets["TEXTID"] = 16] = "TEXTID";
                    Offsets[Offsets["NEXTID"] = 20] = "NEXTID";
                })(Offsets || (Offsets = {}));
                var Thread = (function () {
                    function Thread(data) {
                        if (data.length >= 2) {
                            this._text = data[0];
                            this._data = new DataView(data[1]);
                            this._buffer = new Profiler.TimelineBuffer();
                            this._walkTree(0);
                        }
                    }
                    Object.defineProperty(Thread.prototype, "buffer", {
                        get: function () {
                            return this._buffer;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Thread.prototype._walkTree = function (id) {
                        var data = this._data;
                        var buffer = this._buffer;
                        do {
                            var index = id * Thread.ITEM_SIZE;
                            var start = data.getUint32(index + 0 /* START_HI */) * 4294967295 + data.getUint32(index + 4 /* START_LO */);
                            var stop = data.getUint32(index + 8 /* STOP_HI */) * 4294967295 + data.getUint32(index + 12 /* STOP_LO */);
                            var textId = data.getUint32(index + 16 /* TEXTID */);
                            var nextId = data.getUint32(index + 20 /* NEXTID */);
                            var hasChildren = ((textId & 1) === 1);
                            textId >>>= 1;
                            var text = this._text[textId];
                            buffer.enter(text, null, start / 1000000);
                            if (hasChildren) {
                                this._walkTree(id + 1);
                            }
                            buffer.leave(text, null, stop / 1000000);
                            id = nextId;
                        } while (id !== 0);
                    };
                    Thread.ITEM_SIZE = 8 + 8 + 4 + 4;
                    return Thread;
                })();
                TraceLogger.Thread = Thread;
            })(TraceLogger = Profiler.TraceLogger || (Profiler.TraceLogger = {}));
        })(Profiler = Tools.Profiler || (Tools.Profiler = {}));
    })(Tools = Shumway.Tools || (Shumway.Tools = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var Tools;
    (function (Tools) {
        var Terminal;
        (function (_Terminal) {
            var clamp = Shumway.NumberUtilities.clamp;
            var Buffer = (function () {
                function Buffer() {
                    this.length = 0;
                    this.lines = [];
                    this.format = [];
                    this.time = [];
                    this.repeat = [];
                    this.length = 0;
                }
                Buffer.prototype.append = function (line, color) {
                    var lines = this.lines;
                    if (lines.length > 0 && lines[lines.length - 1] === line) {
                        this.repeat[lines.length - 1]++;
                        return;
                    }
                    this.lines.push(line);
                    this.repeat.push(1);
                    this.format.push(color ? { backgroundFillStyle: color } : undefined);
                    this.time.push(performance.now());
                    this.length++;
                };
                Buffer.prototype.get = function (i) {
                    return this.lines[i];
                };
                Buffer.prototype.getFormat = function (i) {
                    return this.format[i];
                };
                Buffer.prototype.getTime = function (i) {
                    return this.time[i];
                };
                Buffer.prototype.getRepeat = function (i) {
                    return this.repeat[i];
                };
                return Buffer;
            })();
            _Terminal.Buffer = Buffer;
            var Terminal = (function () {
                function Terminal(canvas) {
                    this.lineColor = "#2A2A2A";
                    this.alternateLineColor = "#262626";
                    this.textColor = "#FFFFFF";
                    this.selectionColor = "#96C9F3";
                    this.selectionTextColor = "#000000";
                    this.ratio = 1;
                    this.showLineNumbers = true;
                    this.showLineTime = false;
                    this.showLineCounter = false;
                    this.canvas = canvas;
                    this.canvas.focus();
                    this.context = canvas.getContext('2d', { original: true });
                    this.context.fillStyle = "#FFFFFF";
                    this.fontSize = 10;
                    this.lineIndex = 0;
                    this.pageIndex = 0;
                    this.columnIndex = 0;
                    this.selection = null;
                    this.lineHeight = 15;
                    this.hasFocus = false;
                    window.addEventListener('resize', this._resizeHandler.bind(this), false);
                    this._resizeHandler();
                    this.textMarginLeft = 4;
                    this.textMarginBottom = 4;
                    this.refreshFrequency = 0;
                    this.buffer = new Buffer();
                    canvas.addEventListener('keydown', onKeyDown.bind(this), false);
                    canvas.addEventListener('focus', onFocusIn.bind(this), false);
                    canvas.addEventListener('blur', onFocusOut.bind(this), false);
                    var PAGE_UP = 33;
                    var PAGE_DOWN = 34;
                    var HOME = 36;
                    var END = 35;
                    var UP = 38;
                    var DOWN = 40;
                    var LEFT = 37;
                    var RIGHT = 39;
                    var KEY_A = 65;
                    var KEY_C = 67;
                    var KEY_F = 70;
                    var ESCAPE = 27;
                    var KEY_N = 78;
                    var KEY_T = 84;
                    function onFocusIn(event) {
                        this.hasFocus = true;
                    }
                    function onFocusOut(event) {
                        this.hasFocus = false;
                    }
                    function onKeyDown(event) {
                        var delta = 0;
                        switch (event.keyCode) {
                            case KEY_N:
                                this.showLineNumbers = !this.showLineNumbers;
                                break;
                            case KEY_T:
                                this.showLineTime = !this.showLineTime;
                                break;
                            case UP:
                                delta = -1;
                                break;
                            case DOWN:
                                delta = +1;
                                break;
                            case PAGE_UP:
                                delta = -this.pageLineCount;
                                break;
                            case PAGE_DOWN:
                                delta = this.pageLineCount;
                                break;
                            case HOME:
                                delta = -this.lineIndex;
                                break;
                            case END:
                                delta = this.buffer.length - this.lineIndex;
                                break;
                            case LEFT:
                                this.columnIndex -= event.metaKey ? 10 : 1;
                                if (this.columnIndex < 0) {
                                    this.columnIndex = 0;
                                }
                                event.preventDefault();
                                break;
                            case RIGHT:
                                this.columnIndex += event.metaKey ? 10 : 1;
                                event.preventDefault();
                                break;
                            case KEY_A:
                                if (event.metaKey) {
                                    this.selection = { start: 0, end: this.buffer.length };
                                    event.preventDefault();
                                }
                                break;
                            case KEY_C:
                                if (event.metaKey) {
                                    var str = "";
                                    if (this.selection) {
                                        for (var i = this.selection.start; i <= this.selection.end; i++) {
                                            str += this.buffer.get(i) + "\n";
                                        }
                                    }
                                    else {
                                        str = this.buffer.get(this.lineIndex);
                                    }
                                    alert(str);
                                }
                                break;
                            default:
                                break;
                        }
                        if (event.metaKey) {
                            delta *= this.pageLineCount;
                        }
                        if (delta) {
                            this.scroll(delta);
                            event.preventDefault();
                        }
                        if (delta && event.shiftKey) {
                            if (!this.selection) {
                                if (delta > 0) {
                                    this.selection = { start: this.lineIndex - delta, end: this.lineIndex };
                                }
                                else if (delta < 0) {
                                    this.selection = { start: this.lineIndex, end: this.lineIndex - delta };
                                }
                            }
                            else {
                                if (this.lineIndex > this.selection.start) {
                                    this.selection.end = this.lineIndex;
                                }
                                else {
                                    this.selection.start = this.lineIndex;
                                }
                            }
                        }
                        else if (delta) {
                            this.selection = null;
                        }
                        this.paint();
                    }
                }
                Terminal.prototype.resize = function () {
                    this._resizeHandler();
                };
                Terminal.prototype._resizeHandler = function () {
                    var parent = this.canvas.parentElement;
                    var cw = parent.clientWidth;
                    var ch = parent.clientHeight - 1;
                    var devicePixelRatio = window.devicePixelRatio || 1;
                    var backingStoreRatio = 1;
                    if (devicePixelRatio !== backingStoreRatio) {
                        this.ratio = devicePixelRatio / backingStoreRatio;
                        this.canvas.width = cw * this.ratio;
                        this.canvas.height = ch * this.ratio;
                        this.canvas.style.width = cw + 'px';
                        this.canvas.style.height = ch + 'px';
                    }
                    else {
                        this.ratio = 1;
                        this.canvas.width = cw;
                        this.canvas.height = ch;
                    }
                    this.pageLineCount = Math.floor(this.canvas.height / this.lineHeight);
                };
                Terminal.prototype.gotoLine = function (index) {
                    this.lineIndex = clamp(index, 0, this.buffer.length - 1);
                };
                Terminal.prototype.scrollIntoView = function () {
                    if (this.lineIndex < this.pageIndex) {
                        this.pageIndex = this.lineIndex;
                    }
                    else if (this.lineIndex >= this.pageIndex + this.pageLineCount) {
                        this.pageIndex = this.lineIndex - this.pageLineCount + 1;
                    }
                };
                Terminal.prototype.scroll = function (delta) {
                    this.gotoLine(this.lineIndex + delta);
                    this.scrollIntoView();
                };
                Terminal.prototype.paint = function () {
                    var lineCount = this.pageLineCount;
                    if (this.pageIndex + lineCount > this.buffer.length) {
                        lineCount = this.buffer.length - this.pageIndex;
                    }
                    var charSize = 5;
                    var lineNumberMargin = this.textMarginLeft;
                    var lineTimeMargin = lineNumberMargin + (this.showLineNumbers ? (String(this.buffer.length).length + 2) * charSize : 0);
                    var lineRepeatMargin = lineTimeMargin + (this.showLineTime ? charSize * 8 : 2 * charSize);
                    var lineMargin = lineRepeatMargin + charSize * 5;
                    this.context.font = this.fontSize + 'px Consolas, "Liberation Mono", Courier, monospace';
                    this.context.setTransform(this.ratio, 0, 0, this.ratio, 0, 0);
                    var w = this.canvas.width;
                    var h = this.lineHeight;
                    for (var i = 0; i < lineCount; i++) {
                        var y = i * this.lineHeight;
                        var lineIndex = this.pageIndex + i;
                        var line = this.buffer.get(lineIndex);
                        var lineFormat = this.buffer.getFormat(lineIndex);
                        var lineRepeat = this.buffer.getRepeat(lineIndex);
                        var lineTimeDelta = lineIndex > 1 ? this.buffer.getTime(lineIndex) - this.buffer.getTime(0) : 0;
                        this.context.fillStyle = lineIndex % 2 ? this.lineColor : this.alternateLineColor;
                        if (lineFormat && lineFormat.backgroundFillStyle) {
                            this.context.fillStyle = lineFormat.backgroundFillStyle;
                        }
                        this.context.fillRect(0, y, w, h);
                        this.context.fillStyle = this.selectionTextColor;
                        this.context.fillStyle = this.textColor;
                        if (this.selection && lineIndex >= this.selection.start && lineIndex <= this.selection.end) {
                            this.context.fillStyle = this.selectionColor;
                            this.context.fillRect(0, y, w, h);
                            this.context.fillStyle = this.selectionTextColor;
                        }
                        if (this.hasFocus && lineIndex === this.lineIndex) {
                            this.context.fillStyle = this.selectionColor;
                            this.context.fillRect(0, y, w, h);
                            this.context.fillStyle = this.selectionTextColor;
                        }
                        if (this.columnIndex > 0) {
                            line = line.substring(this.columnIndex);
                        }
                        var marginTop = (i + 1) * this.lineHeight - this.textMarginBottom;
                        if (this.showLineNumbers) {
                            this.context.fillText(String(lineIndex), lineNumberMargin, marginTop);
                        }
                        if (this.showLineTime) {
                            this.context.fillText(lineTimeDelta.toFixed(1).padLeft(' ', 6), lineTimeMargin, marginTop);
                        }
                        if (lineRepeat > 1) {
                            this.context.fillText(String(lineRepeat).padLeft(' ', 3), lineRepeatMargin, marginTop);
                        }
                        this.context.fillText(line, lineMargin, marginTop);
                    }
                };
                Terminal.prototype.refreshEvery = function (ms) {
                    var that = this;
                    this.refreshFrequency = ms;
                    function refresh() {
                        that.paint();
                        if (that.refreshFrequency) {
                            setTimeout(refresh, that.refreshFrequency);
                        }
                    }
                    if (that.refreshFrequency) {
                        setTimeout(refresh, that.refreshFrequency);
                    }
                };
                Terminal.prototype.isScrolledToBottom = function () {
                    return this.lineIndex === this.buffer.length - 1;
                };
                return Terminal;
            })();
            _Terminal.Terminal = Terminal;
        })(Terminal = Tools.Terminal || (Tools.Terminal = {}));
    })(Tools = Shumway.Tools || (Shumway.Tools = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var Tools;
    (function (Tools) {
        var Mini;
        (function (Mini) {
            var FPS = (function () {
                function FPS(container) {
                    this._index = 0;
                    this._lastTime = 0;
                    this._lastWeightedTime = 0;
                    this._gradient = [
                        "#FF0000",
                        "#FF1100",
                        "#FF2300",
                        "#FF3400",
                        "#FF4600",
                        "#FF5700",
                        "#FF6900",
                        "#FF7B00",
                        "#FF8C00",
                        "#FF9E00",
                        "#FFAF00",
                        "#FFC100",
                        "#FFD300",
                        "#FFE400",
                        "#FFF600",
                        "#F7FF00",
                        "#E5FF00",
                        "#D4FF00",
                        "#C2FF00",
                        "#B0FF00",
                        "#9FFF00",
                        "#8DFF00",
                        "#7CFF00",
                        "#6AFF00",
                        "#58FF00",
                        "#47FF00",
                        "#35FF00",
                        "#24FF00",
                        "#12FF00",
                        "#00FF00"
                    ];
                    this._container = container;
                    this._canvas = document.createElement("canvas");
                    this._container.appendChild(this._canvas);
                    this._context = this._canvas.getContext("2d");
                    this._listenForContainerSizeChanges();
                }
                FPS.prototype._listenForContainerSizeChanges = function () {
                    var pollInterval = 10;
                    var w = this._containerWidth;
                    var h = this._containerHeight;
                    this._onContainerSizeChanged();
                    var self = this;
                    setInterval(function () {
                        if (w !== self._containerWidth || h !== self._containerHeight) {
                            self._onContainerSizeChanged();
                            w = self._containerWidth;
                            h = self._containerHeight;
                        }
                    }, pollInterval);
                };
                FPS.prototype._onContainerSizeChanged = function () {
                    var cw = this._containerWidth;
                    var ch = this._containerHeight;
                    var devicePixelRatio = window.devicePixelRatio || 1;
                    var backingStoreRatio = 1;
                    if (devicePixelRatio !== backingStoreRatio) {
                        this._ratio = devicePixelRatio / backingStoreRatio;
                        this._canvas.width = cw * this._ratio;
                        this._canvas.height = ch * this._ratio;
                        this._canvas.style.width = cw + 'px';
                        this._canvas.style.height = ch + 'px';
                    }
                    else {
                        this._ratio = 1;
                        this._canvas.width = cw;
                        this._canvas.height = ch;
                    }
                };
                Object.defineProperty(FPS.prototype, "_containerWidth", {
                    get: function () {
                        return this._container.clientWidth;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(FPS.prototype, "_containerHeight", {
                    get: function () {
                        return this._container.clientHeight;
                    },
                    enumerable: true,
                    configurable: true
                });
                FPS.prototype.tickAndRender = function (idle, renderTime) {
                    if (idle === void 0) { idle = false; }
                    if (renderTime === void 0) { renderTime = 0; }
                    if (this._lastTime === 0) {
                        this._lastTime = performance.now();
                        return;
                    }
                    var elapsedTime = performance.now() - this._lastTime;
                    var weightRatio = 0;
                    var weightedTime = elapsedTime * (1 - weightRatio) + this._lastWeightedTime * weightRatio;
                    var context = this._context;
                    var w = 2 * this._ratio;
                    var wPadding = 1;
                    var fontSize = 8;
                    var tickOffset = this._ratio * 30;
                    var webkitPerformance = performance;
                    if (webkitPerformance.memory) {
                        tickOffset += this._ratio * 30;
                    }
                    var count = ((this._canvas.width - tickOffset) / (w + wPadding)) | 0;
                    var index = this._index++;
                    if (this._index > count) {
                        this._index = 0;
                    }
                    var canvasHeight = this._canvas.height;
                    context.globalAlpha = 1;
                    context.fillStyle = "black";
                    context.fillRect(tickOffset + index * (w + wPadding), 0, w * 4, this._canvas.height);
                    var r = Math.min((1000 / 60) / weightedTime, 1);
                    context.fillStyle = "#00FF00";
                    context.globalAlpha = idle ? 0.5 : 1;
                    var v = canvasHeight / 2 * r | 0;
                    context.fillRect(tickOffset + index * (w + wPadding), canvasHeight - v, w, v);
                    if (renderTime) {
                        r = Math.min((1000 / 240) / renderTime, 1);
                        context.fillStyle = "#FF6347";
                        var v = canvasHeight / 2 * r | 0;
                        context.fillRect(tickOffset + index * (w + wPadding), (canvasHeight / 2) - v, w, v);
                    }
                    if (index % 16 === 0) {
                        context.globalAlpha = 1;
                        context.fillStyle = "black";
                        context.fillRect(0, 0, tickOffset, this._canvas.height);
                        context.fillStyle = "white";
                        context.font = (this._ratio * fontSize) + "px Arial";
                        context.textBaseline = "middle";
                        var s = (1000 / weightedTime).toFixed(0);
                        if (renderTime) {
                            s += " " + renderTime.toFixed(0);
                        }
                        if (webkitPerformance.memory) {
                            s += " " + (webkitPerformance.memory.usedJSHeapSize / 1024 / 1024).toFixed(2);
                        }
                        context.fillText(s, 2 * this._ratio, this._containerHeight / 2 * this._ratio);
                    }
                    this._lastTime = performance.now();
                    this._lastWeightedTime = weightedTime;
                };
                return FPS;
            })();
            Mini.FPS = FPS;
        })(Mini = Tools.Mini || (Tools.Mini = {}));
    })(Tools = Shumway.Tools || (Shumway.Tools = {}));
})(Shumway || (Shumway = {}));
//# sourceMappingURL=tools.js.map
console.timeEnd("Load Shared Dependencies");
console.time("Load AVM2 Dependencies");
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        AVM2.timelineBuffer = new Shumway.Tools.Profiler.TimelineBuffer("AVM2");
        AVM2.counter = new Shumway.Metrics.Counter(!release);
        function countTimeline(name, value) {
            if (value === void 0) { value = 1; }
            AVM2.timelineBuffer && AVM2.timelineBuffer.count(name, value);
        }
        AVM2.countTimeline = countTimeline;
        function enterTimeline(name, data) {
            profile && AVM2.timelineBuffer && AVM2.timelineBuffer.enter(name, data);
        }
        AVM2.enterTimeline = enterTimeline;
        function leaveTimeline(data) {
            profile && AVM2.timelineBuffer && AVM2.timelineBuffer.leave(null, data);
        }
        AVM2.leaveTimeline = leaveTimeline;
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        AVM2.Errors = {
            CallOfNonFunctionError: { code: 1006, message: "%1 is not a function." },
            ConvertNullToObjectError: { code: 1009, message: "Cannot access a property or method of a null object reference." },
            ConvertUndefinedToObjectError: { code: 1010, message: "A term is undefined and has no properties." },
            ClassNotFoundError: { code: 1014, message: "Class %1 could not be found." },
            CheckTypeFailedError: { code: 1034, message: "Type Coercion failed: cannot convert %1 to %2." },
            WrongArgumentCountError: { code: 1063, message: "Argument count mismatch on %1. Expected %2, got %3." },
            ConstWriteError: { code: 1074, message: "Illegal write to read-only property %1 on %2." },
            XMLOnlyWorksWithOneItemLists: { code: 1086, message: "The %1 method only works on lists containing one item." },
            XMLAssignmentToIndexedXMLNotAllowed: { code: 1087, message: "Assignment to indexed XML is not allowed." },
            XMLMarkupMustBeWellFormed: { code: 1088, message: "The markup in the document following the root element must be well-formed." },
            XMLAssigmentOneItemLists: { code: 1089, message: "Assignment to lists with more than one item is not supported." },
            XMLNamespaceWithPrefixAndNoURI: { code: 1098, message: "Illegal prefix %1 for no namespace." },
            OutOfRangeError: { code: 1125, message: "The index %1 is out of range %2." },
            VectorFixedError: { code: 1126, message: "Cannot change the length of a fixed Vector." },
            InvalidRangeError: { code: 1506, message: "The specified range is invalid." },
            NullArgumentError: { code: 1507, message: "Argument %1 cannot be null." },
            InvalidArgumentError: { code: 1508, message: "The value specified for argument %1 is invalid." },
            InvalidParamError: { code: 2004, message: "One of the parameters is invalid." },
            ParamRangeError: { code: 2006, message: "The supplied index is out of bounds." },
            NullPointerError: { code: 2007, message: "Parameter %1 must be non-null." },
            InvalidEnumError: { code: 2008, message: "Parameter %1 must be one of the accepted values." },
            CantInstantiateError: { code: 2012, message: "%1 class cannot be instantiated." },
            InvalidBitmapData: { code: 2015, message: "Invalid BitmapData." },
            EOFError: { code: 2030, message: "End of file was encountered.", fqn: 'flash.errors.EOFError' },
            CompressedDataError: { code: 2058, message: "There was an error decompressing the data.", fqn: 'flash.errors.IOError' },
            TooFewArgumentsError: { code: 2001, message: "Too few arguments were specified; got %1, %2 expected." },
            SocketConnectError: { code: 2011, message: "Socket connection failed to %1:%2." },
            CantAddSelfError: { code: 2024, message: "An object cannot be added as a child of itself." },
            NotAChildError: { code: 2025, message: "The supplied DisplayObject must be a child of the caller." },
            DelayRangeError: { code: 2066, message: "The Timer delay specified is out of range." },
            ExternalInterfaceNotAvailableError: { code: 2067, message: "The ExternalInterface is not available in this container. ExternalInterface requires Internet Explorer ActiveX, Firefox, Mozilla 1.7.5 and greater, or other browsers that support NPRuntime." },
            InvalidLoaderMethodError: { code: 2069, message: "The Loader class does not implement this method." },
            InvalidStageMethodError: { code: 2071, message: "The Stage class does not implement this property or method." },
            LoadingObjectNotSWFError: { code: 2098, message: "The loading object is not a .swf file, you cannot request SWF properties from it." },
            LoadingObjectNotInitializedError: { code: 2099, message: "The loading object is not sufficiently loaded to provide this information." },
            DecodeParamError: { code: 2101, message: "The String passed to URLVariables.decode() must be a URL-encoded query string containing name/value pairs." },
            SceneNotFoundError: { code: 2108, message: "Scene %1 was not found." },
            FrameLabelNotFoundError: { code: 2109, message: "Frame label %1 not found in scene %2." },
            InvalidLoaderInfoMethodError: { code: 2118, message: "The LoaderInfo class does not implement this method." },
            CantAddParentError: { code: 2150, message: "An object cannot be added as a child to one of it's children (or children's children, etc.)." },
            ObjectWithStringsParamError: { code: 2196, message: "Parameter %1 must be an Object with only String values." },
        };
        function getErrorMessage(index) {
            if (!Shumway.AVM2.Runtime.debuggerMode.value) {
                return "Error #" + index;
            }
            for (var k in AVM2.Errors) {
                if (AVM2.Errors[k].code == index) {
                    return "Error #" + index + ": " + AVM2.Errors[k].message;
                }
            }
            return "Error #" + index + ": (unknown)";
        }
        AVM2.getErrorMessage = getErrorMessage;
        function formatErrorMessage(error) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var message = error.message;
            args.forEach(function (x, i) {
                message = message.replace("%" + (i + 1), x);
            });
            return "Error #" + error.code + ": " + message;
        }
        AVM2.formatErrorMessage = formatErrorMessage;
        function translateErrorMessage(error) {
            if (error.type) {
                switch (error.type) {
                    case "undefined_method":
                        return formatErrorMessage(AVM2.Errors.CallOfNonFunctionError, "value");
                    default:
                        throw Shumway.Debug.notImplemented(error.type);
                }
            }
            else {
                if (error.message.indexOf("is not a function") >= 0) {
                    return formatErrorMessage(AVM2.Errors.CallOfNonFunctionError, "value");
                }
                return error.message;
            }
        }
        AVM2.translateErrorMessage = translateErrorMessage;
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
Errors = Shumway.AVM2.Errors;
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var ABC;
        (function (ABC) {
            var textDecoder = null;
            if (typeof TextDecoder !== "undefined") {
                textDecoder = new TextDecoder();
            }
            var AbcStream = (function () {
                function AbcStream(bytes) {
                    this._bytes = bytes;
                    this._view = new DataView(bytes.buffer, bytes.byteOffset);
                    this._position = 0;
                }
                AbcStream._getResultBuffer = function (length) {
                    if (!AbcStream._resultBuffer || AbcStream._resultBuffer.length < length) {
                        AbcStream._resultBuffer = new Int32Array(length * 2);
                    }
                    return AbcStream._resultBuffer;
                };
                Object.defineProperty(AbcStream.prototype, "position", {
                    get: function () {
                        return this._position;
                    },
                    enumerable: true,
                    configurable: true
                });
                AbcStream.prototype.remaining = function () {
                    return this._bytes.length - this._position;
                };
                AbcStream.prototype.seek = function (position) {
                    this._position = position;
                };
                AbcStream.prototype.readU8 = function () {
                    return this._bytes[this._position++];
                };
                AbcStream.prototype.readU8s = function (count) {
                    var b = new Uint8Array(count);
                    b.set(this._bytes.subarray(this._position, this._position + count), 0);
                    this._position += count;
                    return b;
                };
                AbcStream.prototype.readS8 = function () {
                    return this._bytes[this._position++] << 24 >> 24;
                };
                AbcStream.prototype.readU32 = function () {
                    return this.readS32() >>> 0;
                };
                AbcStream.prototype.readU30 = function () {
                    var result = this.readU32();
                    if (result & 0xc0000000) {
                        return result;
                    }
                    return result;
                };
                AbcStream.prototype.readU30Unsafe = function () {
                    return this.readU32();
                };
                AbcStream.prototype.readS16 = function () {
                    return (this.readU30Unsafe() << 16) >> 16;
                };
                AbcStream.prototype.readS32 = function () {
                    var result = this.readU8();
                    if (result & 0x80) {
                        result = result & 0x7f | this.readU8() << 7;
                        if (result & 0x4000) {
                            result = result & 0x3fff | this.readU8() << 14;
                            if (result & 0x200000) {
                                result = result & 0x1fffff | this.readU8() << 21;
                                if (result & 0x10000000) {
                                    result = result & 0x0fffffff | this.readU8() << 28;
                                    result = result & 0xffffffff;
                                }
                            }
                        }
                    }
                    return result;
                };
                AbcStream.prototype.readWord = function () {
                    var result = this._view.getUint32(this._position, true);
                    this._position += 4;
                    return result;
                };
                AbcStream.prototype.readS24 = function () {
                    var u = this.readU8() | (this.readU8() << 8) | (this.readU8() << 16);
                    return (u << 8) >> 8;
                };
                AbcStream.prototype.readDouble = function () {
                    var result = this._view.getFloat64(this._position, true);
                    this._position += 8;
                    return result;
                };
                AbcStream.prototype.readUTFString = function (length) {
                    if (textDecoder) {
                        var position = this._position;
                        this._position += length;
                        return textDecoder.decode(this._bytes.subarray(position, position + length));
                    }
                    var pos = this._position;
                    var end = pos + length;
                    var bytes = this._bytes;
                    var i = 0;
                    var result = AbcStream._getResultBuffer(length * 2);
                    while (pos < end) {
                        var c = bytes[pos++];
                        if (c <= 0x7f) {
                            result[i++] = c;
                        }
                        else if (c >= 0xc0) {
                            var code = 0;
                            if (c < 0xe0) {
                                code = ((c & 0x1f) << 6) | (bytes[pos++] & 0x3f);
                            }
                            else if (c < 0xf0) {
                                code = ((c & 0x0f) << 12) | ((bytes[pos++] & 0x3f) << 6) | (bytes[pos++] & 0x3f);
                            }
                            else {
                                code = (((c & 0x07) << 18) | ((bytes[pos++] & 0x3f) << 12) | ((bytes[pos++] & 0x3f) << 6) | (bytes[pos++] & 0x3f)) - 0x10000;
                                result[i++] = ((code & 0xffc00) >>> 10) + 0xd800;
                                code = (code & 0x3ff) + 0xdc00;
                            }
                            result[i++] = code;
                        }
                    }
                    this._position = pos;
                    return Shumway.StringUtilities.fromCharCodeArray(result.subarray(0, i));
                };
                AbcStream._resultBuffer = new Int32Array(256);
                return AbcStream;
            })();
            ABC.AbcStream = AbcStream;
        })(ABC = AVM2.ABC || (AVM2.ABC = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var ABC;
        (function (ABC) {
            var isString = Shumway.isString;
            var isNumeric = Shumway.isNumeric;
            var isObject = Shumway.isObject;
            var assert = Shumway.Debug.assert;
            var notImplemented = Shumway.Debug.notImplemented;
            var Parameter = (function () {
                function Parameter(name, type, value, optional) {
                    if (optional === void 0) { optional = false; }
                    this.name = name;
                    this.type = type;
                    this.value = value;
                    this.optional = optional;
                }
                return Parameter;
            })();
            ABC.Parameter = Parameter;
            var Trait = (function () {
                function Trait(abc, stream, holder) {
                    var constantPool = abc.constantPool;
                    var methods = abc.methods;
                    var classes = abc.classes;
                    var metadata = abc.metadata;
                    this.holder = holder;
                    this.name = constantPool.multinames[stream.readU30()];
                    var tag = stream.readU8();
                    this.kind = tag & 0x0F;
                    this.attributes = (tag >> 4) & 0x0F;
                    release || assert(Multiname.isQName(this.name), "Name must be a QName: " + this.name + ", kind: " + this.kind);
                    switch (this.kind) {
                        case 0 /* Slot */:
                        case 6 /* Const */:
                            this.slotId = stream.readU30();
                            this.typeName = constantPool.multinames[stream.readU30()];
                            var valueIndex = stream.readU30();
                            this.value = undefined;
                            if (valueIndex !== 0) {
                                this.hasDefaultValue = true;
                                this.value = constantPool.getValue(stream.readU8(), valueIndex);
                            }
                            break;
                        case 1 /* Method */:
                        case 3 /* Setter */:
                        case 2 /* Getter */:
                            this.dispId = stream.readU30();
                            this.methodInfo = methods[stream.readU30()];
                            this.methodInfo.name = this.name;
                            AbcFile.attachHolder(this.methodInfo, this.holder);
                            this.methodInfo.abc = abc;
                            break;
                        case 4 /* Class */:
                            this.slotId = stream.readU30();
                            release || assert(classes, "Classes should be passed down here, I'm guessing whenever classes are being parsed.");
                            this.classInfo = classes[stream.readU30()];
                            break;
                        case 5 /* Function */:
                            release || assert(false, "Function encountered in the wild, should not happen");
                            break;
                    }
                    if (this.attributes & 4 /* Metadata */) {
                        var traitMetadata;
                        for (var i = 0, j = stream.readU30(); i < j; i++) {
                            var md = metadata[stream.readU30()];
                            if (md.name === "__go_to_definition_help" || md.name === "__go_to_ctor_definition_help") {
                                continue;
                            }
                            if (!traitMetadata) {
                                traitMetadata = {};
                            }
                            traitMetadata[md.name] = md;
                        }
                        if (traitMetadata) {
                            if (this.isClass()) {
                                this.classInfo.metadata = traitMetadata;
                            }
                            this.metadata = traitMetadata;
                        }
                    }
                }
                Trait.prototype.isSlot = function () {
                    return this.kind === 0 /* Slot */;
                };
                Trait.prototype.isConst = function () {
                    return this.kind === 6 /* Const */;
                };
                Trait.prototype.isMethod = function () {
                    return this.kind === 1 /* Method */;
                };
                Trait.prototype.isClass = function () {
                    return this.kind === 4 /* Class */;
                };
                Trait.prototype.isGetter = function () {
                    return this.kind === 2 /* Getter */;
                };
                Trait.prototype.isSetter = function () {
                    return this.kind === 3 /* Setter */;
                };
                Trait.prototype.isAccessor = function () {
                    return this.isGetter() || this.isSetter();
                };
                Trait.prototype.isMethodOrAccessor = function () {
                    return this.isMethod() || this.isGetter() || this.isSetter();
                };
                Trait.prototype.isProtected = function () {
                    release || assert(Multiname.isQName(this.name));
                    return this.name.namespaces[0].isProtected();
                };
                Trait.prototype.kindName = function () {
                    switch (this.kind) {
                        case 0 /* Slot */:
                            return "Slot";
                        case 6 /* Const */:
                            return "Const";
                        case 1 /* Method */:
                            return "Method";
                        case 3 /* Setter */:
                            return "Setter";
                        case 2 /* Getter */:
                            return "Getter";
                        case 4 /* Class */:
                            return "Class";
                        case 5 /* Function */:
                            return "Function";
                    }
                    Shumway.Debug.unexpected();
                };
                Trait.prototype.isOverride = function () {
                    return this.attributes & 2 /* Override */;
                };
                Trait.prototype.isFinal = function () {
                    return this.attributes & 1 /* Final */;
                };
                Trait.prototype.toString = function () {
                    var str = Shumway.IntegerUtilities.getFlags(this.attributes, "final|override|metadata".split("|"));
                    if (str) {
                        str += " ";
                    }
                    str += Multiname.getQualifiedName(this.name);
                    switch (this.kind) {
                        case 0 /* Slot */:
                        case 6 /* Const */:
                            return str + ", typeName: " + this.typeName + ", slotId: " + this.slotId + ", value: " + this.value;
                        case 1 /* Method */:
                        case 3 /* Setter */:
                        case 2 /* Getter */:
                            return str + ", " + this.kindName() + ": " + this.methodInfo.name;
                        case 4 /* Class */:
                            return str + ", slotId: " + this.slotId + ", class: " + this.classInfo;
                        case 5 /* Function */:
                            break;
                    }
                };
                Trait.parseTraits = function (abc, stream, holder) {
                    var count = stream.readU30();
                    var traits = [];
                    for (var i = 0; i < count; i++) {
                        traits.push(new Trait(abc, stream, holder));
                    }
                    return traits;
                };
                return Trait;
            })();
            ABC.Trait = Trait;
            var Info = (function () {
                function Info(abc, index, hash) {
                    this.abc = abc;
                    this.index = index;
                    this.hash = abc.hash & 65535 /* AbcMask */ | hash | (index << 19 /* IndexOffset */);
                }
                return Info;
            })();
            ABC.Info = Info;
            var MethodInfo = (function (_super) {
                __extends(MethodInfo, _super);
                function MethodInfo(abc, index, stream) {
                    _super.call(this, abc, index, 131072 /* MethodInfo */);
                    var constantPool = abc.constantPool;
                    var parameterCount = stream.readU30();
                    this.returnType = constantPool.multinames[stream.readU30()];
                    this.parameters = [];
                    for (var i = 0; i < parameterCount; i++) {
                        this.parameters.push(new Parameter(undefined, constantPool.multinames[stream.readU30()], undefined));
                    }
                    this.debugName = constantPool.strings[stream.readU30()];
                    this.flags = stream.readU8();
                    var optionalCount = 0;
                    if (this.flags & 8 /* HasOptional */) {
                        optionalCount = stream.readU30();
                        release || assert(parameterCount >= optionalCount);
                        for (var i = parameterCount - optionalCount; i < parameterCount; i++) {
                            var valueIndex = stream.readU30();
                            this.parameters[i].value = constantPool.getValue(stream.readU8(), valueIndex);
                            this.parameters[i].optional = true;
                        }
                    }
                    if (this.flags & 128 /* HasParamNames */) {
                        for (var i = 0; i < parameterCount; i++) {
                            if (MethodInfo.parseParameterNames) {
                                this.parameters[i].name = constantPool.strings[stream.readU30()];
                            }
                            else {
                                stream.readU30();
                                this.parameters[i].name = MethodInfo._getParameterName(i);
                            }
                        }
                    }
                    else {
                        for (var i = 0; i < parameterCount; i++) {
                            this.parameters[i].name = MethodInfo._getParameterName(i);
                        }
                    }
                }
                MethodInfo._getParameterName = function (i) {
                    if (i < 26) {
                        return String.fromCharCode("A".charCodeAt(0) + i);
                    }
                    return "P" + (i - 26);
                };
                MethodInfo.prototype.toString = function () {
                    var flags = Shumway.IntegerUtilities.getFlags(this.flags, "NEED_ARGUMENTS|NEED_ACTIVATION|NEED_REST|HAS_OPTIONAL|||SET_DXN|HAS_PARAM_NAMES".split("|"));
                    return (flags ? flags + " " : "") + this.name;
                };
                MethodInfo.prototype.hasOptional = function () {
                    return !!(this.flags & 8 /* HasOptional */);
                };
                MethodInfo.prototype.needsActivation = function () {
                    return !!(this.flags & 2 /* Activation */);
                };
                MethodInfo.prototype.needsRest = function () {
                    return !!(this.flags & 4 /* Needrest */);
                };
                MethodInfo.prototype.needsArguments = function () {
                    return !!(this.flags & 1 /* Arguments */);
                };
                MethodInfo.prototype.isNative = function () {
                    return !!(this.flags & 32 /* Native */);
                };
                MethodInfo.prototype.isClassMember = function () {
                    return this.holder instanceof ClassInfo;
                };
                MethodInfo.prototype.isInstanceMember = function () {
                    return this.holder instanceof InstanceInfo;
                };
                MethodInfo.prototype.isScriptMember = function () {
                    return this.holder instanceof ScriptInfo;
                };
                MethodInfo.prototype.hasSetsDxns = function () {
                    return !!(this.flags & 64 /* Setsdxns */);
                };
                MethodInfo.parseException = function (abc, stream) {
                    var multinames = abc.constantPool.multinames;
                    var ex = {
                        start: stream.readU30(),
                        end: stream.readU30(),
                        target: stream.readU30(),
                        typeName: multinames[stream.readU30()],
                        varName: multinames[stream.readU30()]
                    };
                    release || assert(!ex.typeName || !ex.typeName.isRuntime());
                    release || assert(!ex.varName || ex.varName.isQName());
                    return ex;
                };
                MethodInfo.parseBody = function (abc, stream) {
                    var constantPool = abc.constantPool;
                    var methods = abc.methods;
                    var index = stream.readU30();
                    var mi = methods[index];
                    mi.index = index;
                    mi.hasBody = true;
                    release || assert(!mi.isNative());
                    mi.maxStack = stream.readU30();
                    mi.localCount = stream.readU30();
                    mi.initScopeDepth = stream.readU30();
                    mi.maxScopeDepth = stream.readU30();
                    mi.code = stream.readU8s(stream.readU30());
                    var exceptions = [];
                    var exceptionCount = stream.readU30();
                    for (var i = 0; i < exceptionCount; ++i) {
                        exceptions.push(MethodInfo.parseException(abc, stream));
                    }
                    mi.exceptions = exceptions;
                    mi.traits = Trait.parseTraits(abc, stream, mi);
                };
                MethodInfo.prototype.hasExceptions = function () {
                    return this.exceptions.length > 0;
                };
                MethodInfo.parseParameterNames = false;
                return MethodInfo;
            })(Info);
            ABC.MethodInfo = MethodInfo;
            var InstanceInfo = (function (_super) {
                __extends(InstanceInfo, _super);
                function InstanceInfo(abc, index, stream) {
                    _super.call(this, abc, index, 65536 /* InstanceInfo */);
                    this.runtimeId = InstanceInfo.nextID++;
                    var constantPool = abc.constantPool;
                    var methods = abc.methods;
                    this.name = constantPool.multinames[stream.readU30()];
                    release || assert(Multiname.isQName(this.name));
                    this.superName = constantPool.multinames[stream.readU30()];
                    this.flags = stream.readU8();
                    this.protectedNs = undefined;
                    if (this.flags & 8 /* ClassProtectedNs */) {
                        this.protectedNs = constantPool.namespaces[stream.readU30()];
                    }
                    var interfaceCount = stream.readU30();
                    this.interfaces = [];
                    for (var i = 0; i < interfaceCount; i++) {
                        this.interfaces[i] = constantPool.multinames[stream.readU30()];
                    }
                    this.init = methods[stream.readU30()];
                    this.init.isInstanceInitializer = true;
                    this.init.name = this.name;
                    AbcFile.attachHolder(this.init, this);
                    this.traits = Trait.parseTraits(abc, stream, this);
                }
                InstanceInfo.prototype.toString = function () {
                    var flags = Shumway.IntegerUtilities.getFlags(this.flags & 8, "sealed|final|interface|protected".split("|"));
                    var str = (flags ? flags + " " : "") + this.name;
                    if (this.superName) {
                        str += " extends " + this.superName;
                    }
                    return str;
                };
                InstanceInfo.prototype.isFinal = function () {
                    return !!(this.flags & 2 /* ClassFinal */);
                };
                InstanceInfo.prototype.isSealed = function () {
                    return !!(this.flags & 1 /* ClassSealed */);
                };
                InstanceInfo.prototype.isInterface = function () {
                    return !!(this.flags & 4 /* ClassInterface */);
                };
                InstanceInfo.nextID = 1;
                return InstanceInfo;
            })(Info);
            ABC.InstanceInfo = InstanceInfo;
            (function (Hashes) {
                Hashes[Hashes["AbcMask"] = 0x0000FFFF] = "AbcMask";
                Hashes[Hashes["KindMask"] = 0x00070000] = "KindMask";
                Hashes[Hashes["ClassInfo"] = 0x00000000] = "ClassInfo";
                Hashes[Hashes["InstanceInfo"] = 0x00010000] = "InstanceInfo";
                Hashes[Hashes["MethodInfo"] = 0x00020000] = "MethodInfo";
                Hashes[Hashes["ScriptInfo"] = 0x00030000] = "ScriptInfo";
                Hashes[Hashes["NamespaceSet"] = 0x00040000] = "NamespaceSet";
                Hashes[Hashes["IndexOffset"] = 19] = "IndexOffset";
            })(ABC.Hashes || (ABC.Hashes = {}));
            var Hashes = ABC.Hashes;
            var ClassInfo = (function (_super) {
                __extends(ClassInfo, _super);
                function ClassInfo(abc, index, stream) {
                    _super.call(this, abc, index, 0 /* ClassInfo */);
                    this.runtimeId = ClassInfo.nextID++;
                    this.init = abc.methods[stream.readU30()];
                    this.init.isClassInitializer = true;
                    AbcFile.attachHolder(this.init, this);
                    this.traits = Trait.parseTraits(abc, stream, this);
                    this.instanceInfo = abc.instances[index];
                    this.instanceInfo.classInfo = this;
                    this.defaultValue = ClassInfo._getDefaultValue(this.instanceInfo.name);
                }
                ClassInfo._getDefaultValue = function (qn) {
                    if (Multiname.getQualifiedName(qn) === Multiname.Int || Multiname.getQualifiedName(qn) === Multiname.Uint) {
                        return 0;
                    }
                    else if (Multiname.getQualifiedName(qn) === Multiname.Number) {
                        return NaN;
                    }
                    else if (Multiname.getQualifiedName(qn) === Multiname.Boolean) {
                        return false;
                    }
                    else {
                        return null;
                    }
                };
                ClassInfo.prototype.toString = function () {
                    return this.instanceInfo.name.toString();
                };
                ClassInfo.nextID = 1;
                return ClassInfo;
            })(Info);
            ABC.ClassInfo = ClassInfo;
            var ScriptInfo = (function (_super) {
                __extends(ScriptInfo, _super);
                function ScriptInfo(abc, index, stream) {
                    _super.call(this, abc, index, 196608 /* ScriptInfo */);
                    this.runtimeId = ClassInfo.nextID++;
                    this.name = abc.name + "$script" + index;
                    this.init = abc.methods[stream.readU30()];
                    this.init.isScriptInitializer = true;
                    AbcFile.attachHolder(this.init, this);
                    this.traits = Trait.parseTraits(abc, stream, this);
                }
                Object.defineProperty(ScriptInfo.prototype, "entryPoint", {
                    get: function () {
                        return this.init;
                    },
                    enumerable: true,
                    configurable: true
                });
                ScriptInfo.prototype.toString = function () {
                    return this.name;
                };
                ScriptInfo.nextID = 1;
                return ScriptInfo;
            })(Info);
            ABC.ScriptInfo = ScriptInfo;
            var AbcFile = (function () {
                function AbcFile(bytes, name, hash) {
                    if (hash === void 0) { hash = 0; }
                    AVM2.enterTimeline("Parse ABC");
                    this.name = name;
                    this.env = {};
                    var computedHash;
                    if (!hash || !release) {
                        AVM2.enterTimeline("Adler");
                        computedHash = Shumway.HashUtilities.hashBytesTo32BitsAdler(bytes, 0, bytes.length);
                        AVM2.leaveTimeline();
                    }
                    if (hash) {
                        this.hash = hash;
                        release || assert(hash === computedHash);
                    }
                    else {
                        this.hash = computedHash;
                    }
                    var n, i;
                    var stream = new ABC.AbcStream(bytes);
                    AbcFile._checkMagic(stream);
                    AVM2.enterTimeline("Parse constantPool");
                    this.constantPool = new ConstantPool(stream, this);
                    AVM2.leaveTimeline();
                    AVM2.enterTimeline("Parse Method Infos");
                    this.methods = [];
                    n = stream.readU30();
                    for (i = 0; i < n; ++i) {
                        this.methods.push(new MethodInfo(this, i, stream));
                    }
                    AVM2.leaveTimeline();
                    AVM2.enterTimeline("Parse MetaData Infos");
                    this.metadata = [];
                    n = stream.readU30();
                    for (i = 0; i < n; ++i) {
                        this.metadata.push(new MetaDataInfo(this, stream));
                    }
                    AVM2.leaveTimeline();
                    AVM2.enterTimeline("Parse Instance Infos");
                    this.instances = [];
                    n = stream.readU30();
                    for (i = 0; i < n; ++i) {
                        this.instances.push(new InstanceInfo(this, i, stream));
                    }
                    AVM2.leaveTimeline();
                    AVM2.enterTimeline("Parse Class Infos");
                    this.classes = [];
                    for (i = 0; i < n; ++i) {
                        this.classes.push(new ClassInfo(this, i, stream));
                    }
                    AVM2.leaveTimeline();
                    AVM2.enterTimeline("Parse Script Infos");
                    this.scripts = [];
                    n = stream.readU30();
                    for (i = 0; i < n; ++i) {
                        this.scripts.push(new ScriptInfo(this, i, stream));
                    }
                    AVM2.leaveTimeline();
                    AVM2.enterTimeline("Parse Method Body Info");
                    n = stream.readU30();
                    for (i = 0; i < n; ++i) {
                        MethodInfo.parseBody(this, stream);
                    }
                    AVM2.leaveTimeline();
                    AVM2.leaveTimeline();
                }
                AbcFile._checkMagic = function (stream) {
                    var magic = stream.readWord();
                    var flashPlayerBrannan = 46 << 16 | 15;
                    if (magic < flashPlayerBrannan) {
                        throw new Error("Invalid ABC File (magic = " + Number(magic).toString(16) + ")");
                    }
                };
                Object.defineProperty(AbcFile.prototype, "lastScript", {
                    get: function () {
                        release || assert(this.scripts.length > 0);
                        return this.scripts[this.scripts.length - 1];
                    },
                    enumerable: true,
                    configurable: true
                });
                AbcFile.attachHolder = function (mi, holder) {
                    release || assert(!mi.holder);
                    mi.holder = holder;
                };
                AbcFile.prototype.toString = function () {
                    return this.name;
                };
                AbcFile.prototype.getConstant = function (hash) {
                    release || assert((this.hash & 65535 /* AbcMask */) === (hash & 65535 /* AbcMask */));
                    var index = hash >> 19 /* IndexOffset */;
                    switch (hash & 458752 /* KindMask */) {
                        case 0 /* ClassInfo */:
                            return this.classes[index];
                        case 65536 /* InstanceInfo */:
                            return this.instances[index];
                        case 131072 /* MethodInfo */:
                            return this.methods[index];
                        case 196608 /* ScriptInfo */:
                            return this.scripts[index];
                        case 262144 /* NamespaceSet */:
                            return this.constantPool.namespaceSets[index];
                        default:
                            notImplemented("Kind");
                    }
                };
                return AbcFile;
            })();
            ABC.AbcFile = AbcFile;
            var Namespace = (function () {
                function Namespace(kind, uri, prefix, uniqueURIHash) {
                    if (uri === void 0) { uri = ""; }
                    if (uri === undefined) {
                        uri = "";
                    }
                    this.kind = kind;
                    this.uri = uri;
                    this.prefix = prefix;
                    this.qualifiedName = undefined;
                    this._buildNamespace(uniqueURIHash);
                }
                Namespace.prototype._buildNamespace = function (uniqueURIHash) {
                    if (this.kind === 22 /* PackageNamespace */) {
                        this.kind = 8 /* Namespace */;
                    }
                    if (this.isPublic() && this.uri) {
                        var n = this.uri.length - 1;
                        var mark = this.uri.charCodeAt(n);
                        if (mark > Namespace._MIN_API_MARK) {
                            release || assert(false, "What's this code for?");
                            this.uri = this.uri.substring(0, n - 1);
                        }
                    }
                    else if (this.isUnique()) {
                        release || assert(uniqueURIHash !== undefined);
                        this.uri = "private " + uniqueURIHash;
                    }
                    if (this.kind === 26 /* StaticProtectedNs */) {
                        this.uri = "*";
                    }
                    this.qualifiedName = Namespace._qualifyNamespace(this.kind, this.uri, this.prefix ? this.prefix : "");
                };
                Namespace._hashNamespace = function (kind, uri, prefix) {
                    var index = Namespace._knownURIs.indexOf(uri);
                    if (index >= 0) {
                        return kind << 2 | index;
                    }
                    var data = new Int32Array(1 + uri.length + prefix.length);
                    var j = 0;
                    data[j++] = kind;
                    for (var i = 0; i < uri.length; i++) {
                        data[j++] = uri.charCodeAt(i);
                    }
                    for (var i = 0; i < prefix.length; i++) {
                        data[j++] = prefix.charCodeAt(i);
                    }
                    return Shumway.HashUtilities.hashBytesTo32BitsMD5(data, 0, j);
                };
                Namespace._qualifyNamespace = function (kind, uri, prefix) {
                    var key = kind + uri;
                    var mangledNamespace = Namespace._mangledNamespaceCache[key];
                    if (mangledNamespace) {
                        return mangledNamespace;
                    }
                    mangledNamespace = Shumway.StringUtilities.variableLengthEncodeInt32(Namespace._hashNamespace(kind, uri, prefix));
                    Namespace._mangledNamespaceMap[mangledNamespace] = {
                        kind: kind,
                        uri: uri,
                        prefix: prefix
                    };
                    Namespace._mangledNamespaceCache[key] = mangledNamespace;
                    return mangledNamespace;
                };
                Namespace.fromQualifiedName = function (qn) {
                    var length = Shumway.StringUtilities.fromEncoding(qn[0]);
                    var mangledNamespace = qn.substring(0, length + 1);
                    var ns = Namespace._mangledNamespaceMap[mangledNamespace];
                    return new Namespace(ns.kind, ns.uri, ns.prefix);
                };
                Namespace.kindFromString = function (str) {
                    for (var kind in Namespace._kinds) {
                        if (Namespace._kinds[kind] === str) {
                            return kind;
                        }
                    }
                    release || assert(false, "Cannot find kind " + str);
                    return NaN;
                };
                Namespace.createNamespace = function (uri, prefix) {
                    if (prefix === void 0) { prefix = undefined; }
                    return new Namespace(8 /* Namespace */, uri, prefix);
                };
                Namespace.parse = function (constantPool, stream, hash) {
                    var kind = stream.readU8();
                    var uri = constantPool.strings[stream.readU30()];
                    return new Namespace(kind, uri, undefined, hash);
                };
                Namespace.prototype.isPublic = function () {
                    return this.kind === 8 /* Namespace */ || this.kind === 22 /* PackageNamespace */;
                };
                Namespace.prototype.isProtected = function () {
                    return this.kind === 24 /* ProtectedNamespace */ || this.kind === 26 /* StaticProtectedNs */;
                };
                Namespace.prototype.isPrivate = function () {
                    return this.kind === 5 /* PrivateNs */;
                };
                Namespace.prototype.isPackageInternal = function () {
                    return this.kind === 23 /* PackageInternalNs */;
                };
                Namespace.prototype.isUnique = function () {
                    return this.kind === 5 /* PrivateNs */ && !this.uri;
                };
                Namespace.prototype.isDynamic = function () {
                    return this.isPublic() && !this.uri;
                };
                Namespace.prototype.getURI = function () {
                    return this.uri;
                };
                Namespace.prototype.toString = function () {
                    return Namespace._kinds[this.kind] + (this.uri ? " " + this.uri : "");
                };
                Namespace.prototype.clone = function () {
                    var ns = Object.create(Namespace.prototype);
                    ns.kind = this.kind;
                    ns.uri = this.uri;
                    ns.prefix = this.prefix;
                    ns.qualifiedName = this.qualifiedName;
                    return ns;
                };
                Namespace.prototype.isEqualTo = function (other) {
                    return this.qualifiedName === other.qualifiedName;
                };
                Namespace.prototype.inNamespaceSet = function (set) {
                    for (var i = 0; i < set.length; i++) {
                        if (set[i].qualifiedName === this.qualifiedName) {
                            return true;
                        }
                    }
                    return false;
                };
                Namespace.prototype.getAccessModifier = function () {
                    return Namespace._kinds[this.kind];
                };
                Namespace.prototype.getQualifiedName = function () {
                    return this.qualifiedName;
                };
                Namespace.fromSimpleName = function (simpleName) {
                    if (simpleName in Namespace._simpleNameCache) {
                        return Namespace._simpleNameCache[simpleName];
                    }
                    var namespaceNames;
                    if (simpleName.indexOf("[") === 0) {
                        release || assert(simpleName[simpleName.length - 1] === "]");
                        namespaceNames = simpleName.substring(1, simpleName.length - 1).split(",");
                    }
                    else {
                        namespaceNames = [simpleName];
                    }
                    return Namespace._simpleNameCache[simpleName] = namespaceNames.map(function (name) {
                        name = name.trim();
                        var kindName, uri;
                        if (name.indexOf(" ") > 0) {
                            kindName = name.substring(0, name.indexOf(" ")).trim();
                            uri = name.substring(name.indexOf(" ") + 1).trim();
                        }
                        else {
                            var kinds = Namespace._kinds;
                            if (name === kinds[8 /* Namespace */] || name === kinds[23 /* PackageInternalNs */] || name === kinds[5 /* PrivateNs */] || name === kinds[24 /* ProtectedNamespace */] || name === kinds[25 /* ExplicitNamespace */] || name === kinds[26 /* StaticProtectedNs */]) {
                                kindName = name;
                                uri = "";
                            }
                            else {
                                kindName = Namespace._publicPrefix;
                                uri = name;
                            }
                        }
                        return new Namespace(Namespace.kindFromString(kindName), uri);
                    });
                };
                Namespace._publicPrefix = "public";
                Namespace._kinds = (function () {
                    var map = Shumway.ObjectUtilities.createMap();
                    map[8 /* Namespace */] = Namespace._publicPrefix;
                    map[23 /* PackageInternalNs */] = "packageInternal";
                    map[5 /* PrivateNs */] = "private";
                    map[24 /* ProtectedNamespace */] = "protected";
                    map[25 /* ExplicitNamespace */] = "explicit";
                    map[26 /* StaticProtectedNs */] = "staticProtected";
                    return map;
                })();
                Namespace._MIN_API_MARK = 0xe294;
                Namespace._MAX_API_MARK = 0xf8ff;
                Namespace._knownURIs = [
                    ""
                ];
                Namespace._mangledNamespaceCache = Shumway.ObjectUtilities.createMap();
                Namespace._mangledNamespaceMap = Shumway.ObjectUtilities.createMap();
                Namespace.PUBLIC = new Namespace(8 /* Namespace */);
                Namespace.PROTECTED = new Namespace(24 /* ProtectedNamespace */);
                Namespace.PROXY = new Namespace(8 /* Namespace */, "http://www.adobe.com/2006/actionscript/flash/proxy");
                Namespace.VECTOR = new Namespace(8 /* Namespace */, "__AS3__.vec");
                Namespace.VECTOR_PACKAGE = new Namespace(23 /* PackageInternalNs */, "__AS3__.vec");
                Namespace.BUILTIN = new Namespace(5 /* PrivateNs */, "builtin.as$0");
                Namespace._simpleNameCache = Shumway.ObjectUtilities.createMap();
                return Namespace;
            })();
            ABC.Namespace = Namespace;
            Namespace.prototype = Object.create(Namespace.prototype);
            var Multiname = (function () {
                function Multiname(namespaces, name, flags) {
                    if (!release && name !== undefined) {
                        assert(name === null || isString(name), "Multiname name must be a string. " + name);
                    }
                    this.runtimeId = Multiname._nextID++;
                    this.namespaces = namespaces;
                    this.name = name;
                    this.flags = flags | 0;
                }
                Multiname.parse = function (constantPool, stream, multinames, typeNamePatches, multinameIndex) {
                    var index = 0;
                    var kind = stream.readU8();
                    var name, namespaces = [], flags = 0;
                    switch (kind) {
                        case 7 /* QName */:
                        case 13 /* QNameA */:
                            index = stream.readU30();
                            if (index) {
                                namespaces = [constantPool.namespaces[index]];
                            }
                            else {
                                flags &= ~Multiname.RUNTIME_NAME;
                            }
                            index = stream.readU30();
                            if (index) {
                                name = constantPool.strings[index];
                            }
                            break;
                        case 15 /* RTQName */:
                        case 16 /* RTQNameA */:
                            index = stream.readU30();
                            if (index) {
                                name = constantPool.strings[index];
                            }
                            else {
                                flags &= ~Multiname.RUNTIME_NAME;
                            }
                            flags |= Multiname.RUNTIME_NAMESPACE;
                            break;
                        case 17 /* RTQNameL */:
                        case 18 /* RTQNameLA */:
                            flags |= Multiname.RUNTIME_NAMESPACE;
                            flags |= Multiname.RUNTIME_NAME;
                            break;
                        case 9 /* Multiname */:
                        case 14 /* MultinameA */:
                            index = stream.readU30();
                            if (index) {
                                name = constantPool.strings[index];
                            }
                            else {
                                flags &= ~Multiname.RUNTIME_NAME;
                            }
                            index = stream.readU30();
                            release || assert(index !== 0);
                            namespaces = constantPool.namespaceSets[index];
                            break;
                        case 27 /* MultinameL */:
                        case 28 /* MultinameLA */:
                            flags |= Multiname.RUNTIME_NAME;
                            index = stream.readU30();
                            release || assert(index !== 0);
                            namespaces = constantPool.namespaceSets[index];
                            break;
                        case 29 /* TypeName */:
                            var factoryTypeIndex = stream.readU32();
                            var typeParameterCount = stream.readU32();
                            release || assert(typeParameterCount === 1);
                            var typeParameterIndex = stream.readU32();
                            var mn = undefined;
                            if (multinames[factoryTypeIndex] && multinames[typeParameterIndex]) {
                                mn = new Multiname(multinames[factoryTypeIndex].namespaces, multinames[factoryTypeIndex].name, flags);
                                mn.typeParameter = multinames[typeParameterIndex];
                            }
                            else {
                                typeNamePatches.push({
                                    index: multinameIndex,
                                    factoryTypeIndex: factoryTypeIndex,
                                    typeParameterIndex: typeParameterIndex,
                                    flags: flags
                                });
                            }
                            return mn;
                        default:
                            Shumway.Debug.unexpected();
                            break;
                    }
                    switch (kind) {
                        case 13 /* QNameA */:
                        case 16 /* RTQNameA */:
                        case 18 /* RTQNameLA */:
                        case 14 /* MultinameA */:
                        case 28 /* MultinameLA */:
                            flags |= Multiname.ATTRIBUTE;
                            break;
                    }
                    return new Multiname(namespaces, name, flags);
                };
                Multiname.isMultiname = function (mn) {
                    return typeof mn === "number" || typeof mn === "string" || mn instanceof Multiname || mn instanceof Number;
                };
                Multiname.needsResolution = function (mn) {
                    return mn instanceof Multiname && mn.namespaces.length > 1;
                };
                Multiname.isQName = function (mn) {
                    if (mn instanceof Multiname) {
                        return mn.namespaces && mn.namespaces.length === 1;
                    }
                    return true;
                };
                Multiname.isRuntimeName = function (mn) {
                    return mn instanceof Multiname && mn.isRuntimeName();
                };
                Multiname.isRuntimeNamespace = function (mn) {
                    return mn instanceof Multiname && mn.isRuntimeNamespace();
                };
                Multiname.isRuntime = function (mn) {
                    return mn instanceof Multiname && mn.isRuntimeName() || mn.isRuntimeNamespace();
                };
                Multiname.getQualifiedName = function (mn) {
                    release || assert(Multiname.isQName(mn));
                    if (mn instanceof Multiname) {
                        if (mn.qualifiedName !== undefined) {
                            return mn.qualifiedName;
                        }
                        var name = String(mn.name);
                        if (isNumeric(name) && mn.namespaces[0].isPublic()) {
                            return mn.qualifiedName = name;
                        }
                        mn = mn.qualifiedName = Multiname.qualifyName(mn.namespaces[0], name);
                    }
                    return mn;
                };
                Multiname.qualifyName = function (namespace, name) {
                    return Shumway.StringUtilities.concat3("$", namespace.qualifiedName, name);
                };
                Multiname.stripPublicQualifier = function (qn) {
                    var publicQualifier = "$" + Namespace.PUBLIC.qualifiedName;
                    var index = qn.indexOf(publicQualifier);
                    if (index !== 0) {
                        return undefined;
                    }
                    return qn.substring(publicQualifier.length);
                };
                Multiname.fromQualifiedName = function (qn) {
                    if (qn instanceof Multiname) {
                        return qn;
                    }
                    if (isNumeric(qn)) {
                        return new Multiname([Namespace.PUBLIC], qn, 0);
                    }
                    if (qn[0] !== "$") {
                        return;
                    }
                    var ns = Namespace.fromQualifiedName(qn.substring(1));
                    return new Multiname([ns], qn.substring(1 + ns.qualifiedName.length), 0);
                };
                Multiname.getNameFromPublicQualifiedName = function (qn) {
                    var mn = Multiname.fromQualifiedName(qn);
                    release || assert(mn.getNamespace().isPublic());
                    return mn.name;
                };
                Multiname.getFullQualifiedName = function (mn) {
                    var qn = Multiname.getQualifiedName(mn);
                    if (mn instanceof Multiname && mn.typeParameter) {
                        qn += "$" + Multiname.getFullQualifiedName(mn.typeParameter);
                    }
                    return qn;
                };
                Multiname.getPublicQualifiedName = function (name) {
                    var qname;
                    if (typeof name === "string") {
                        qname = Multiname._publicQualifiedNameCache[name];
                        if (qname) {
                            return qname;
                        }
                    }
                    if (isNumeric(name)) {
                        return Shumway.toNumber(name);
                    }
                    else if (name !== null && isObject(name)) {
                        return name;
                    }
                    qname = Multiname.qualifyName(Namespace.PUBLIC, name);
                    if (typeof name === "string") {
                        Multiname._publicQualifiedNameCache[name] = qname;
                    }
                    return qname;
                };
                Multiname.isPublicQualifiedName = function (qn) {
                    return typeof qn === "number" || isNumeric(qn) || qn.indexOf(Namespace.PUBLIC.qualifiedName) === 1;
                };
                Multiname.getAccessModifier = function (mn) {
                    release || assert(Multiname.isQName(mn));
                    if (typeof mn === "number" || typeof mn === "string" || mn instanceof Number) {
                        return "public";
                    }
                    release || assert(mn instanceof Multiname);
                    return mn.namespaces[0].getAccessModifier();
                };
                Multiname.isNumeric = function (mn) {
                    if (typeof mn === "number") {
                        return true;
                    }
                    else if (typeof mn === "string") {
                        return isNumeric(mn);
                    }
                    return !isNaN(parseInt(Multiname.getName(mn), 10));
                };
                Multiname.getName = function (mn) {
                    release || assert(mn instanceof Multiname);
                    release || assert(!mn.isRuntimeName());
                    return mn.getName();
                };
                Multiname.isAnyName = function (mn) {
                    return typeof mn === "object" && !mn.isRuntimeName() && !mn.name;
                };
                Multiname.fromSimpleName = function (simpleName) {
                    release || assert(simpleName);
                    if (simpleName in Multiname._simpleNameCache) {
                        return Multiname._simpleNameCache[simpleName];
                    }
                    var nameIndex, namespaceIndex, name, namespace;
                    nameIndex = simpleName.lastIndexOf(".");
                    if (nameIndex <= 0) {
                        nameIndex = simpleName.lastIndexOf(" ");
                    }
                    if (nameIndex > 0 && nameIndex < simpleName.length - 1) {
                        name = simpleName.substring(nameIndex + 1).trim();
                        namespace = simpleName.substring(0, nameIndex).trim();
                    }
                    else {
                        name = simpleName;
                        namespace = "";
                    }
                    return Multiname._simpleNameCache[simpleName] = new Multiname(Namespace.fromSimpleName(namespace), name, 0);
                };
                Multiname.prototype.getQName = function (index) {
                    release || assert(index >= 0 && index < this.namespaces.length);
                    if (!this._qualifiedNameCache) {
                        this._qualifiedNameCache = Shumway.ObjectUtilities.createArrayMap();
                    }
                    var name = this._qualifiedNameCache[index];
                    if (!name) {
                        name = this._qualifiedNameCache[index] = new Multiname([this.namespaces[index]], this.name, this.flags);
                    }
                    return name;
                };
                Multiname.prototype.hasQName = function (qn) {
                    release || assert(qn instanceof Multiname);
                    if (this.name !== qn.name) {
                        return false;
                    }
                    for (var i = 0; i < this.namespaces.length; i++) {
                        if (this.namespaces[i].isEqualTo(qn.namespaces[0])) {
                            return true;
                        }
                    }
                    return false;
                };
                Multiname.prototype.isAttribute = function () {
                    return !!(this.flags & Multiname.ATTRIBUTE);
                };
                Multiname.prototype.isAnyName = function () {
                    return Multiname.isAnyName(this);
                };
                Multiname.prototype.isAnyNamespace = function () {
                    return !this.isRuntimeNamespace() && (this.namespaces.length === 0 || (this.isAnyName() && this.namespaces.length !== 1));
                };
                Multiname.prototype.isRuntimeName = function () {
                    return !!(this.flags & Multiname.RUNTIME_NAME);
                };
                Multiname.prototype.isRuntimeNamespace = function () {
                    return !!(this.flags & Multiname.RUNTIME_NAMESPACE);
                };
                Multiname.prototype.isRuntime = function () {
                    return !!(this.flags & (Multiname.RUNTIME_NAME | Multiname.RUNTIME_NAMESPACE));
                };
                Multiname.prototype.isQName = function () {
                    return this.namespaces.length === 1 && !this.isAnyName();
                };
                Multiname.prototype.hasTypeParameter = function () {
                    return !!this.typeParameter;
                };
                Multiname.prototype.getName = function () {
                    return this.name;
                };
                Multiname.prototype.getOriginalName = function () {
                    release || assert(this.isQName());
                    var name = this.namespaces[0].uri;
                    if (name) {
                        name += ".";
                    }
                    return name + this.name;
                };
                Multiname.prototype.getNamespace = function () {
                    release || assert(!this.isRuntimeNamespace());
                    release || assert(this.namespaces.length === 1);
                    return this.namespaces[0];
                };
                Multiname.prototype.nameToString = function () {
                    if (this.isAnyName()) {
                        return "*";
                    }
                    else {
                        var name = this.getName();
                        return this.isRuntimeName() ? "[]" : name;
                    }
                };
                Multiname.prototype.hasObjectName = function () {
                    return typeof this.name === "object";
                };
                Multiname.prototype.toString = function () {
                    var str = this.isAttribute() ? "@" : "";
                    if (this.isAnyNamespace()) {
                        str += "*::" + this.nameToString();
                    }
                    else if (this.isRuntimeNamespace()) {
                        str += "[]::" + this.nameToString();
                    }
                    else if (this.namespaces.length === 1 && this.isQName()) {
                        str += this.namespaces[0].toString() + "::";
                        str += this.nameToString();
                    }
                    else {
                        str += "{";
                        for (var i = 0, count = this.namespaces.length; i < count; i++) {
                            str += this.namespaces[i].toString();
                            if (i + 1 < count) {
                                str += ",";
                            }
                        }
                        str += "}::" + this.nameToString();
                    }
                    if (this.hasTypeParameter()) {
                        str += "<" + this.typeParameter.toString() + ">";
                    }
                    return str;
                };
                Multiname.ATTRIBUTE = 0x01;
                Multiname.RUNTIME_NAMESPACE = 0x02;
                Multiname.RUNTIME_NAME = 0x04;
                Multiname._nextID = 0;
                Multiname._publicQualifiedNameCache = Shumway.ObjectUtilities.createMap();
                Multiname._simpleNameCache = Shumway.ObjectUtilities.createMap();
                Multiname.Int = Multiname.getPublicQualifiedName("int");
                Multiname.Uint = Multiname.getPublicQualifiedName("uint");
                Multiname.Class = Multiname.getPublicQualifiedName("Class");
                Multiname.Array = Multiname.getPublicQualifiedName("Array");
                Multiname.Object = Multiname.getPublicQualifiedName("Object");
                Multiname.String = Multiname.getPublicQualifiedName("String");
                Multiname.Number = Multiname.getPublicQualifiedName("Number");
                Multiname.Boolean = Multiname.getPublicQualifiedName("Boolean");
                Multiname.Function = Multiname.getPublicQualifiedName("Function");
                Multiname.XML = Multiname.getPublicQualifiedName("XML");
                Multiname.XMLList = Multiname.getPublicQualifiedName("XMLList");
                Multiname.TO_STRING = Multiname.getPublicQualifiedName("toString");
                Multiname.VALUE_OF = Multiname.getPublicQualifiedName("valueOf");
                Multiname.TEMPORARY = new Multiname([], "", 0);
                return Multiname;
            })();
            ABC.Multiname = Multiname;
            var MetaDataInfo = (function () {
                function MetaDataInfo(abc, stream) {
                    var strings = abc.constantPool.strings;
                    var name = this.name = strings[stream.readU30()];
                    var itemCount = stream.readU30();
                    var keys = [];
                    var items = [];
                    for (var i = 0; i < itemCount; i++) {
                        keys[i] = strings[stream.readU30()];
                    }
                    for (var i = 0; i < itemCount; i++) {
                        var key = keys[i];
                        items[i] = { key: key, value: strings[stream.readU30()] };
                        if (key && name === "native") {
                            release || assert(!this.hasOwnProperty(key));
                            this[key] = items[i].value;
                        }
                    }
                    this.value = items;
                }
                MetaDataInfo.prototype.toString = function () {
                    return "[" + this.name + "]";
                };
                return MetaDataInfo;
            })();
            ABC.MetaDataInfo = MetaDataInfo;
            (function (CONSTANT) {
                CONSTANT[CONSTANT["Undefined"] = 0x00] = "Undefined";
                CONSTANT[CONSTANT["Utf8"] = 0x01] = "Utf8";
                CONSTANT[CONSTANT["Float"] = 0x02] = "Float";
                CONSTANT[CONSTANT["Int"] = 0x03] = "Int";
                CONSTANT[CONSTANT["UInt"] = 0x04] = "UInt";
                CONSTANT[CONSTANT["PrivateNs"] = 0x05] = "PrivateNs";
                CONSTANT[CONSTANT["Double"] = 0x06] = "Double";
                CONSTANT[CONSTANT["QName"] = 0x07] = "QName";
                CONSTANT[CONSTANT["Namespace"] = 0x08] = "Namespace";
                CONSTANT[CONSTANT["Multiname"] = 0x09] = "Multiname";
                CONSTANT[CONSTANT["False"] = 0x0A] = "False";
                CONSTANT[CONSTANT["True"] = 0x0B] = "True";
                CONSTANT[CONSTANT["Null"] = 0x0C] = "Null";
                CONSTANT[CONSTANT["QNameA"] = 0x0D] = "QNameA";
                CONSTANT[CONSTANT["MultinameA"] = 0x0E] = "MultinameA";
                CONSTANT[CONSTANT["RTQName"] = 0x0F] = "RTQName";
                CONSTANT[CONSTANT["RTQNameA"] = 0x10] = "RTQNameA";
                CONSTANT[CONSTANT["RTQNameL"] = 0x11] = "RTQNameL";
                CONSTANT[CONSTANT["RTQNameLA"] = 0x12] = "RTQNameLA";
                CONSTANT[CONSTANT["NameL"] = 0x13] = "NameL";
                CONSTANT[CONSTANT["NameLA"] = 0x14] = "NameLA";
                CONSTANT[CONSTANT["NamespaceSet"] = 0x15] = "NamespaceSet";
                CONSTANT[CONSTANT["PackageNamespace"] = 0x16] = "PackageNamespace";
                CONSTANT[CONSTANT["PackageInternalNs"] = 0x17] = "PackageInternalNs";
                CONSTANT[CONSTANT["ProtectedNamespace"] = 0x18] = "ProtectedNamespace";
                CONSTANT[CONSTANT["ExplicitNamespace"] = 0x19] = "ExplicitNamespace";
                CONSTANT[CONSTANT["StaticProtectedNs"] = 0x1A] = "StaticProtectedNs";
                CONSTANT[CONSTANT["MultinameL"] = 0x1B] = "MultinameL";
                CONSTANT[CONSTANT["MultinameLA"] = 0x1C] = "MultinameLA";
                CONSTANT[CONSTANT["TypeName"] = 0x1D] = "TypeName";
                CONSTANT[CONSTANT["ClassSealed"] = 0x01] = "ClassSealed";
                CONSTANT[CONSTANT["ClassFinal"] = 0x02] = "ClassFinal";
                CONSTANT[CONSTANT["ClassInterface"] = 0x04] = "ClassInterface";
                CONSTANT[CONSTANT["ClassProtectedNs"] = 0x08] = "ClassProtectedNs";
            })(ABC.CONSTANT || (ABC.CONSTANT = {}));
            var CONSTANT = ABC.CONSTANT;
            (function (METHOD) {
                METHOD[METHOD["Arguments"] = 0x1] = "Arguments";
                METHOD[METHOD["Activation"] = 0x2] = "Activation";
                METHOD[METHOD["Needrest"] = 0x4] = "Needrest";
                METHOD[METHOD["HasOptional"] = 0x8] = "HasOptional";
                METHOD[METHOD["IgnoreRest"] = 0x10] = "IgnoreRest";
                METHOD[METHOD["Native"] = 0x20] = "Native";
                METHOD[METHOD["Setsdxns"] = 0x40] = "Setsdxns";
                METHOD[METHOD["HasParamNames"] = 0x80] = "HasParamNames";
            })(ABC.METHOD || (ABC.METHOD = {}));
            var METHOD = ABC.METHOD;
            (function (TRAIT) {
                TRAIT[TRAIT["Slot"] = 0] = "Slot";
                TRAIT[TRAIT["Method"] = 1] = "Method";
                TRAIT[TRAIT["Getter"] = 2] = "Getter";
                TRAIT[TRAIT["Setter"] = 3] = "Setter";
                TRAIT[TRAIT["Class"] = 4] = "Class";
                TRAIT[TRAIT["Function"] = 5] = "Function";
                TRAIT[TRAIT["Const"] = 6] = "Const";
            })(ABC.TRAIT || (ABC.TRAIT = {}));
            var TRAIT = ABC.TRAIT;
            (function (ATTR) {
                ATTR[ATTR["Final"] = 0x01] = "Final";
                ATTR[ATTR["Override"] = 0x02] = "Override";
                ATTR[ATTR["Metadata"] = 0x04] = "Metadata";
            })(ABC.ATTR || (ABC.ATTR = {}));
            var ATTR = ABC.ATTR;
            (function (SORT) {
                SORT[SORT["CASEINSENSITIVE"] = 0x01] = "CASEINSENSITIVE";
                SORT[SORT["DESCENDING"] = 0x02] = "DESCENDING";
                SORT[SORT["UNIQUESORT"] = 0x04] = "UNIQUESORT";
                SORT[SORT["RETURNINDEXEDARRAY"] = 0x08] = "RETURNINDEXEDARRAY";
                SORT[SORT["NUMERIC"] = 0x10] = "NUMERIC";
            })(ABC.SORT || (ABC.SORT = {}));
            var SORT = ABC.SORT;
            var ConstantPool = (function () {
                function ConstantPool(stream, abc) {
                    var n;
                    var ints = [0];
                    n = stream.readU30();
                    for (var i = 1; i < n; ++i) {
                        ints.push(stream.readS32());
                    }
                    var uints = [0];
                    n = stream.readU30();
                    for (var i = 1; i < n; ++i) {
                        uints.push(stream.readU32());
                    }
                    var doubles = [NaN];
                    n = stream.readU30();
                    for (var i = 1; i < n; ++i) {
                        doubles.push(stream.readDouble());
                    }
                    AVM2.enterTimeline("Parse Strings");
                    var strings = [""];
                    n = stream.readU30();
                    for (var i = 1; i < n; ++i) {
                        strings.push(stream.readUTFString(stream.readU30()));
                    }
                    AVM2.leaveTimeline();
                    this.ints = ints;
                    this.uints = uints;
                    this.doubles = doubles;
                    this.strings = strings;
                    AVM2.enterTimeline("Parse Namespaces");
                    var namespaces = [undefined];
                    n = stream.readU30();
                    for (var i = 1; i < n; ++i) {
                        namespaces.push(Namespace.parse(this, stream, abc.hash + i));
                    }
                    AVM2.leaveTimeline();
                    AVM2.enterTimeline("Parse Namespace Sets");
                    var namespaceSets = [undefined];
                    n = stream.readU30();
                    for (var i = 1; i < n; ++i) {
                        var count = stream.readU30();
                        var namespaceSet = [];
                        namespaceSet.runtimeId = ConstantPool._nextNamespaceSetID++;
                        namespaceSet.hash = abc.hash & 65535 /* AbcMask */ | 262144 /* NamespaceSet */ | (i << 19 /* IndexOffset */);
                        for (var j = 0; j < count; ++j) {
                            namespaceSet.push(namespaces[stream.readU30()]);
                        }
                        namespaceSets.push(namespaceSet);
                    }
                    AVM2.leaveTimeline();
                    this.namespaces = namespaces;
                    this.namespaceSets = namespaceSets;
                    AVM2.enterTimeline("Parse Multinames");
                    var multinames = [undefined];
                    var typeNamePatches = [];
                    n = stream.readU30();
                    for (var i = 1; i < n; ++i) {
                        multinames.push(Multiname.parse(this, stream, multinames, typeNamePatches, i));
                    }
                    for (var i = 0; i < typeNamePatches.length; i++) {
                        var patch = typeNamePatches[i];
                        var factoryType = multinames[patch.factoryTypeIndex];
                        var typeParameter = multinames[patch.typeParameterIndex];
                        release || assert(factoryType && typeParameter);
                        var mn = new Multiname(factoryType.namespaces, factoryType.name, patch.flags);
                        mn.typeParameter = typeParameter;
                        multinames[patch.index] = mn;
                    }
                    AVM2.leaveTimeline();
                    this.multinames = multinames;
                }
                ConstantPool.prototype.getValue = function (kind, index) {
                    switch (kind) {
                        case 3 /* Int */:
                            return this.ints[index];
                        case 4 /* UInt */:
                            return this.uints[index];
                        case 6 /* Double */:
                            return this.doubles[index];
                        case 1 /* Utf8 */:
                            return this.strings[index];
                        case 11 /* True */:
                            return true;
                        case 10 /* False */:
                            return false;
                        case 12 /* Null */:
                            return null;
                        case 0 /* Undefined */:
                            return undefined;
                        case 8 /* Namespace */:
                        case 23 /* PackageInternalNs */:
                            return this.namespaces[index];
                        case 7 /* QName */:
                        case 14 /* MultinameA */:
                        case 15 /* RTQName */:
                        case 16 /* RTQNameA */:
                        case 17 /* RTQNameL */:
                        case 18 /* RTQNameLA */:
                        case 19 /* NameL */:
                        case 20 /* NameLA */:
                            return this.multinames[index];
                        case 2 /* Float */:
                            Shumway.Debug.warning("TODO: CONSTANT.Float may be deprecated?");
                            break;
                        default:
                            release || assert(false, "Not Implemented Kind " + kind);
                    }
                };
                ConstantPool._nextNamespaceSetID = 1;
                return ConstantPool;
            })();
            ABC.ConstantPool = ConstantPool;
        })(ABC = AVM2.ABC || (AVM2.ABC = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var ABC;
        (function (ABC) {
            var assert = Shumway.Debug.assert;
            var notImplemented = Shumway.Debug.notImplemented;
            var filter = new Shumway.Options.Option("f", "filter", "string", "SpciMsmNtu", "[S]ource, constant[p]ool, [c]lasses, [i]nstances, [M]etadata, [s]cripts, [m]ethods, multi[N]ames, S[t]atistics, [u]tf");
            function traceArray(writer, name, array, abc) {
                if (abc === void 0) { abc = null; }
                if (array.length === 0) {
                    return;
                }
                writer.enter(name + " {");
                array.forEach(function (a, idx) {
                    a.trace(writer, abc);
                });
                writer.leave("}");
            }
            ABC.AbcFile.prototype.trace = function trace(writer) {
                if (filter.value.indexOf("p") >= 0) {
                    this.constantPool.trace(writer);
                }
                if (filter.value.indexOf("N") >= 0) {
                    traceMultinamesOnly(this.constantPool, writer);
                }
                if (filter.value.indexOf("c") >= 0) {
                    traceArray(writer, "classes", this.classes);
                }
                if (filter.value.indexOf("i") >= 0) {
                    traceArray(writer, "instances", this.instances);
                }
                if (filter.value.indexOf("M") >= 0) {
                    traceArray(writer, "metadata", this.metadata);
                }
                if (filter.value.indexOf("s") >= 0) {
                    traceArray(writer, "scripts", this.scripts);
                }
                if (filter.value.indexOf("m") >= 0) {
                    traceArray(writer, "methods", this.methods, this);
                }
                if (filter.value.indexOf("S") >= 0) {
                    traceSource(writer, this);
                }
                if (filter.value.indexOf("t") >= 0) {
                    traceStatistics(writer, this);
                }
            };
            ABC.ConstantPool.prototype.trace = function (writer) {
                writer.enter("constantPool {");
                for (var key in this) {
                    if (key === "namespaces") {
                        writer.enter("namespaces {");
                        this.namespaces.forEach(function (ns, i) {
                            writer.writeLn(("" + i).padRight(' ', 3) + (ns ? ns.toString() : "*"));
                        });
                        writer.leave("}");
                    }
                    else if (this[key] instanceof Array) {
                        writer.enter(key + " " + this[key].length + " {");
                        writer.writeArray(this[key]);
                        writer.leave("}");
                    }
                }
                writer.leave("}");
            };
            function traceMultinamesOnly(constantPool, writer) {
                writer.writeArray(constantPool.multinames, null, true);
            }
            ABC.ClassInfo.prototype.trace = function (writer) {
                writer.enter("class " + this + " {");
                traceArray(writer, "traits", this.traits);
                writer.leave("}");
            };
            ABC.MetaDataInfo.prototype.trace = function (writer) {
                writer.enter(this + " {");
                this.value.forEach(function (item) {
                    writer.writeLn((item.key ? item.key + ": " : "") + "\"" + item.value + "\"");
                });
                writer.leave("}");
            };
            ABC.InstanceInfo.prototype.trace = function (writer) {
                writer.enter("instance " + this + " {");
                traceArray(writer, "traits", this.traits);
                writer.leave("}");
            };
            ABC.ScriptInfo.prototype.trace = function (writer) {
                writer.enter("script " + this + " {");
                traceArray(writer, "traits", this.traits);
                writer.leave("}");
            };
            ABC.Trait.prototype.trace = function (writer) {
                if (this.metadata) {
                    for (var key in this.metadata) {
                        if (this.metadata.hasOwnProperty(key)) {
                            this.metadata[key].trace(writer);
                        }
                    }
                }
                writer.writeLn(this);
            };
            function traceAbc(writer, abc) {
                abc.trace(writer);
            }
            function traceOperand(operand, abc, code) {
                var value = 0;
                switch (operand.size) {
                    case "s08":
                        value = code.readS8();
                        break;
                    case "u08":
                        value = code.readU8();
                        break;
                    case "s16":
                        value = code.readS16();
                        break;
                    case "s24":
                        value = code.readS24();
                        break;
                    case "u30":
                        value = code.readU30();
                        break;
                    case "u32":
                        value = code.readU32();
                        break;
                    default:
                        release || assert(false);
                        break;
                }
                var description = "";
                switch (operand.type) {
                    case "":
                        break;
                    case "I":
                        description = abc.constantPool.ints[value];
                        break;
                    case "U":
                        description = abc.constantPool.uints[value];
                        break;
                    case "D":
                        description = abc.constantPool.doubles[value];
                        break;
                    case "S":
                        description = abc.constantPool.strings[value];
                        break;
                    case "N":
                        description = abc.constantPool.namespaces[value];
                        break;
                    case "CI":
                        description = abc.classes[value];
                        break;
                    case "M":
                        return abc.constantPool.multinames[value];
                    default:
                        description = "?";
                        break;
                }
                return operand.name + ":" + value + (description === "" ? "" : " (" + description + ")");
            }
            function traceOperands(opcode, abc, code, rewind) {
                if (rewind === void 0) { rewind = false; }
                var old = code.position;
                var str = "";
                if (opcode.operands === null) {
                    str = "null";
                }
                else {
                    opcode.operands.forEach(function (op, i) {
                        str += traceOperand(op, abc, code);
                        if (i < opcode.operands.length - 1) {
                            str += ", ";
                        }
                    });
                }
                if (rewind) {
                    code.seek(old);
                }
                return str;
            }
            ABC.MethodInfo.prototype.trace = function trace(writer) {
                var abc = this.abc;
                writer.enter("method" + (this.name ? " " + this.name : "") + " {");
                writer.writeLn("flags: " + Shumway.IntegerUtilities.getFlags(this.flags, "NEED_ARGUMENTS|NEED_ACTIVATION|NEED_REST|HAS_OPTIONAL||NATIVE|SET_DXN|HAS_PARAM_NAMES".split("|")));
                writer.writeLn("parameters: " + this.parameters.map(function (x) {
                    return (x.type ? ABC.Multiname.getQualifiedName(x.type) + "::" : "") + x.name;
                }));
                if (!this.code) {
                    writer.leave("}");
                    return;
                }
                var code = new ABC.AbcStream(this.code);
                traceArray(writer, "traits", this.traits);
                writer.enter("code {");
                while (code.remaining() > 0) {
                    var bc = code.readU8();
                    var opcode = Shumway.AVM2.opcodeTable[bc];
                    var str, defaultOffset, offset, count;
                    str = ("" + code.position).padRight(' ', 6);
                    switch (bc) {
                        case 27 /* lookupswitch */:
                            str += opcode.name + ": defaultOffset: " + code.readS24();
                            var caseCount = code.readU30();
                            str += ", caseCount: " + caseCount;
                            for (var i = 0; i < caseCount + 1; i++) {
                                str += " offset: " + code.readS24();
                            }
                            writer.writeLn(str);
                            break;
                        default:
                            if (opcode) {
                                str += opcode.name.padRight(' ', 20);
                                if (!opcode.operands) {
                                    release || assert(false, "Opcode: " + opcode.name + " has undefined operands.");
                                }
                                else {
                                    if (opcode.operands.length > 0) {
                                        str += traceOperands(opcode, abc, code);
                                    }
                                    writer.writeLn(str);
                                }
                            }
                            else {
                                release || assert(false, "Opcode: " + bc + " is not implemented.");
                            }
                            break;
                    }
                }
                writer.leave("}");
                writer.leave("}");
            };
            var SourceTracer = (function () {
                function literal(value) {
                    if (value === undefined) {
                        return "undefined";
                    }
                    else if (value === null) {
                        return "null";
                    }
                    else if (typeof (value) === "string") {
                        return "\"" + value + "\"";
                    }
                    else {
                        return String(value);
                    }
                }
                function getSignature(mi, excludeTypesAndDefaultValues) {
                    if (excludeTypesAndDefaultValues === void 0) { excludeTypesAndDefaultValues = false; }
                    return mi.parameters.map(function (x) {
                        var str = x.name;
                        if (!excludeTypesAndDefaultValues) {
                            if (x.type) {
                                str += ":" + x.type.getName();
                            }
                            if (x.value !== undefined) {
                                str += " = " + literal(x.value);
                            }
                        }
                        return str;
                    }).join(", ");
                }
                function SourceTracer(writer) {
                    this.writer = writer;
                }
                SourceTracer.prototype = {
                    traceTraits: function traceTraits(traits, isStatic, inInterfaceNamespace) {
                        var writer = this.writer;
                        var tracer = this;
                        traits.forEach(function (trait) {
                            var str;
                            var accessModifier = ABC.Multiname.getAccessModifier(trait.name);
                            var namespaceName = trait.name.namespaces[0].uri;
                            if (namespaceName) {
                                if (namespaceName === "http://adobe.com/AS3/2006/builtin") {
                                    namespaceName = "AS3";
                                }
                                if (accessModifier === "public") {
                                    str = inInterfaceNamespace === namespaceName ? "" : namespaceName;
                                }
                                else {
                                    str = accessModifier;
                                }
                            }
                            else {
                                str = accessModifier;
                            }
                            if (isStatic) {
                                str += " static";
                            }
                            if (trait.isSlot() || trait.isConst()) {
                                tracer.traceMetadata(trait.metadata);
                                if (trait.isConst()) {
                                    str += " const";
                                }
                                else {
                                    str += " var";
                                }
                                str += " " + trait.name.getName();
                                if (trait.typeName) {
                                    str += ":" + trait.typeName.getName();
                                }
                                if (trait.value) {
                                    str += " = " + literal(trait.value);
                                }
                                writer.writeLn(str + ";");
                            }
                            else if (trait.isMethod() || trait.isGetter() || trait.isSetter()) {
                                tracer.traceMetadata(trait.metadata);
                                var mi = trait.methodInfo;
                                if (trait.attributes & 2 /* Override */) {
                                    str += " override";
                                }
                                if (mi.isNative()) {
                                    str += " native";
                                }
                                str += " function";
                                str += trait.isGetter() ? " get" : (trait.isSetter() ? " set" : "");
                                str += " " + trait.name.getName();
                                str += "(" + getSignature(mi) + ")";
                                str += mi.returnType ? ":" + mi.returnType.getName() : "";
                                if (true) {
                                    var className;
                                    var prefix = "";
                                    if (trait.holder instanceof ABC.ClassInfo) {
                                        className = trait.holder.instanceInfo.name;
                                        if (className.namespaces[0].uri) {
                                            prefix += className.namespaces[0].uri + "::";
                                        }
                                        prefix += className.getName();
                                        prefix += "$/";
                                    }
                                    else if (trait.holder instanceof ABC.InstanceInfo) {
                                        className = trait.holder.name;
                                        if (className.namespaces[0].uri) {
                                            prefix += className.namespaces[0].uri + "::";
                                        }
                                        prefix += className.getName();
                                        prefix += "/";
                                    }
                                    else {
                                        prefix = "global/";
                                    }
                                    var getSet = trait.isGetter() ? "get " : (trait.isSetter() ? "set " : "");
                                    if (!mi.isNative()) {
                                    }
                                }
                                if (mi.isNative()) {
                                    writer.writeLn(str + ";");
                                }
                                else {
                                    if (inInterfaceNamespace) {
                                        writer.writeLn(str + ";");
                                    }
                                    else {
                                        writer.writeLn(str + " { notImplemented(\"" + trait.name.getName() + "\"); }");
                                    }
                                }
                            }
                            else if (trait.isClass()) {
                                var className = trait.classInfo.instanceInfo.name;
                                writer.enter("package " + className.namespaces[0].uri + " {\n");
                                tracer.traceMetadata(trait.metadata);
                                tracer.traceClass(trait.classInfo);
                                writer.leave("\n}");
                                tracer.traceClassStub(trait);
                            }
                            else {
                                notImplemented(trait);
                            }
                        });
                    },
                    traceClassStub2: function traceClassStub(trait) {
                        var writer = this.writer;
                        var ci = trait.classInfo;
                        var ii = ci.instanceInfo;
                        var name = ii.name.getName();
                        var native = trait.metadata ? trait.metadata.native : null;
                        if (!native) {
                            return false;
                        }
                        writer.writeLn("Cut and paste the following into `native.js' and edit accordingly");
                        writer.writeLn("8< --------------------------------------------------------------");
                        writer.enter("natives." + native.cls + " = function " + native.cls + "(runtime, scope, instanceConstructor, baseClass) {");
                        writer.writeLn("var c = new Class(\"" + name + "\", instanceConstructor, ApplicationDomain.passthroughCallable(instanceConstructor));");
                        writer.writeLn("c.extend(baseClass);\n");
                        function traceTraits(traits, isStatic) {
                            if (isStatic === void 0) { isStatic = false; }
                            var nativeMethodTraits = [];
                            traits.forEach(function (trait, i) {
                                if (trait.isMethod() || trait.isGetter() || trait.isSetter()) {
                                    if (trait.methodInfo.isNative()) {
                                        nativeMethodTraits.push(trait);
                                    }
                                }
                            });
                            nativeMethodTraits.forEach(function (trait, i) {
                                var mi = trait.methodInfo;
                                var traitName = trait.name.getName();
                                writer.writeLn("// " + traitName + " :: " + (mi.parameters.length ? getSignature(mi) : "void") + " -> " + (mi.returnType ? mi.returnType.getName() : "any"));
                                var prop;
                                if (trait.isGetter()) {
                                    prop = "\"get " + traitName + "\"";
                                }
                                else if (trait.isSetter()) {
                                    prop = "\"set " + traitName + "\"";
                                }
                                else {
                                    prop = traitName;
                                }
                                writer.enter(prop + ": function " + traitName + "(" + getSignature(mi, true) + ") {");
                                writer.writeLn("  notImplemented(\"" + name + "." + traitName + "\");");
                                writer.leave("}" + (i === nativeMethodTraits.length - 1 ? "" : ",\n"));
                            });
                        }
                        writer.enter("c.nativeStatics = {");
                        traceTraits(ci.traits, true);
                        writer.leave("};\n");
                        writer.enter("c.nativeMethods = {");
                        traceTraits(ii.traits);
                        writer.leave("};\n");
                        writer.writeLn("return c;");
                        writer.leave("};");
                        writer.writeLn("-------------------------------------------------------------- >8");
                        return true;
                    },
                    traceClassStub: function traceClassStub(trait) {
                        var writer = this.writer;
                        var ci = trait.classInfo;
                        var ii = ci.instanceInfo;
                        var className = ii.name.getName();
                        var native = trait.metadata ? trait.metadata.native : null;
                        writer.writeLn("Cut and paste the following glue and edit accordingly.");
                        writer.writeLn("Class " + ii);
                        writer.writeLn("8< --------------------------------------------------------------");
                        var uri = ii.name.namespaces[0].uri;
                        writer.enter("var " + className + "Definition = (function () {");
                        function maxTraitNameLength(traits) {
                            var length = 0;
                            traits.forEach(function (t) {
                                length = Math.max(t.name.name.length, length);
                            });
                            return length;
                        }
                        function quote(s) {
                            return '\'' + s + '\'';
                        }
                        function filterTraits(traits, isNative) {
                            function isMethod(x) {
                                return x.isMethod() || x.isGetter() || x.isSetter();
                            }
                            return {
                                properties: traits.filter(function (trait) {
                                    return !isNative && !isMethod(trait);
                                }),
                                methods: traits.filter(function (trait) {
                                    return isMethod(trait) && (isNative === trait.methodInfo.isNative());
                                })
                            };
                        }
                        function writeTraits(traits, isNative, isStatic) {
                            if (isStatic === void 0) { isStatic = false; }
                            traits = filterTraits(traits, isNative);
                            var methods = [];
                            var gettersAndSetters = Object.create(null);
                            traits.methods.forEach(function (trait, i) {
                                var traitName = trait.name.getName();
                                if (trait.isGetter() || trait.isSetter()) {
                                    if (!gettersAndSetters[traitName]) {
                                        gettersAndSetters[traitName] = [];
                                    }
                                    gettersAndSetters[traitName].push(trait);
                                }
                                else {
                                    methods.push(trait);
                                }
                            });
                            function writeTrait(trait, writeComma) {
                                var mi = trait.methodInfo;
                                var traitName = trait.name.getName();
                                var signature = "// (" + (mi.parameters.length ? getSignature(mi) : "void") + ") -> " + (mi.returnType ? mi.returnType.getName() : "any");
                                var propertyName = traitName;
                                if (trait.isGetter()) {
                                    propertyName = "get";
                                }
                                else if (trait.isSetter()) {
                                    propertyName = "set";
                                }
                                writer.enter(propertyName + ": function " + traitName + "(" + getSignature(mi, true) + ") { " + signature);
                                writer.writeLn("notImplemented(\"" + className + "." + traitName + "\");");
                                if (!isStatic) {
                                    if (trait.isGetter()) {
                                        writer.writeLn("return this._" + traitName + ";");
                                    }
                                    else if (trait.isSetter()) {
                                        writer.writeLn("this._" + traitName + " = " + mi.parameters[0].name + ";");
                                    }
                                }
                                writer.leave("}" + (writeComma ? "," : ""));
                            }
                            for (var i = 0; i < methods.length; i++) {
                                writeTrait(methods[i], i < methods.length - 1);
                            }
                            var keyValues = Shumway.ObjectUtilities.toKeyValueArray(gettersAndSetters);
                            for (var j = 0; j < keyValues.length; j++) {
                                writer.enter(keyValues[j][0] + ": {");
                                var list = keyValues[j][1];
                                for (var i = 0; i < list.length; i++) {
                                    writeTrait(list[i], i < list.length - 1);
                                }
                                writer.leave("}" + (j < keyValues.length - 1 ? "," : ""));
                            }
                            traits.properties.forEach(function (trait, i) {
                                var traitName = trait.name.getName();
                                var last = i === traits.properties.length - 1;
                                if (trait.name.getNamespace().isPublic()) {
                                    writer.writeLn(traitName + ": " + quote("public " + trait.name.name) + (last ? "" : ","));
                                }
                            });
                        }
                        writer.enter("return {");
                        writer.writeLn("// (" + getSignature(ii.init, false) + ")");
                        writer.writeLn("__class__: \"" + uri + "." + className + "\",");
                        writer.enter("initialize: function () {");
                        writer.leave("},");
                        writer.enter("__glue__: {");
                        writer.enter("native: {");
                        writer.enter("static: {");
                        writeTraits(ci.traits, true, true);
                        writer.leave("},");
                        writer.enter("instance: {");
                        writeTraits(ii.traits, true);
                        writer.leave("}");
                        writer.leave("},");
                        writer.enter("script: {");
                        writer.writeLn("instance: Glue.ALL");
                        writer.leave("}");
                        writer.leave("}");
                        writer.leave("};");
                        writer.leave("}).call(this);");
                        writer.writeLn("-------------------------------------------------------------- >8");
                        return true;
                    },
                    traceClass: function traceClass(ci) {
                        var writer = this.writer;
                        var ii = ci.instanceInfo;
                        var name = ii.name;
                        var str = ABC.Multiname.getAccessModifier(name);
                        if (ii.isFinal()) {
                            str += " final";
                        }
                        if (!ii.isSealed()) {
                            str += " dynamic";
                        }
                        str += ii.isInterface() ? " interface " : " class ";
                        str += name.getName();
                        if (ii.superName && ii.superName.getName() !== "Object") {
                            str += " extends " + ii.superName.getName();
                        }
                        if (ii.interfaces.length) {
                            str += " implements " + ii.interfaces.map(function (x) {
                                return x.getName();
                            }).join(", ");
                        }
                        writer.enter(str + " {");
                        if (!ii.isInterface()) {
                            writer.writeLn("public function " + name.getName() + "(" + getSignature(ii.init) + ") {}");
                        }
                        var interfaceNamespace;
                        if (ii.isInterface()) {
                            interfaceNamespace = name.namespaces[0].uri + ":" + name.name;
                        }
                        this.traceTraits(ci.traits, true, interfaceNamespace);
                        this.traceTraits(ii.traits, false, interfaceNamespace);
                        writer.leave("}");
                    },
                    traceMetadata: function traceMetadata(metadata) {
                        var writer = this.writer;
                        for (var key in metadata) {
                            if (metadata.hasOwnProperty(key)) {
                                if (key.indexOf("__") === 0) {
                                    continue;
                                }
                                writer.writeLn("[" + key + "(" + metadata[key].value.map(function (m) {
                                    var str = m.key ? m.key + "=" : "";
                                    return str + "\"" + m.value + "\"";
                                }).join(", ") + ")]");
                            }
                        }
                    }
                };
                return SourceTracer;
            })();
            function traceSource(writer, abc) {
                var tracer = new SourceTracer(writer);
                abc.scripts.forEach(function (script) {
                    tracer.traceTraits(script.traits);
                });
            }
            function traceStatistics(writer, abc) {
                var libraryClassCounter = new Shumway.Metrics.Counter(true);
                var librarySuperClassCounter = new Shumway.Metrics.Counter(true);
                var libraryMethodCounter = new Shumway.Metrics.Counter(true);
                var libraryProperties = new Shumway.Metrics.Counter(true);
                var definedClasses = {};
                var definedMethods = {};
                var definedProperties = {};
                abc.classes.forEach(function (x) {
                    var className = x.instanceInfo.name.name;
                    definedClasses[className] = true;
                });
                abc.scripts.forEach(function (s) {
                    s.traits.forEach(function (t) {
                        if (t.isClass()) {
                            var superClassName = t.classInfo.instanceInfo.superName ? t.classInfo.instanceInfo.superName.name : "?";
                            if (!(superClassName in definedClasses)) {
                                librarySuperClassCounter.count(superClassName);
                            }
                            t.classInfo.traits.forEach(function (st) {
                                if (st.isMethod()) {
                                    definedMethods[st.name.name] = true;
                                }
                                else {
                                    definedProperties[st.name.name] = true;
                                }
                            });
                            t.classInfo.instanceInfo.traits.forEach(function (it) {
                                if (it.isMethod() && !(it.attributes & 2 /* Override */)) {
                                    definedMethods[it.name.name] = true;
                                }
                                else {
                                    definedProperties[it.name.name] = true;
                                }
                            });
                        }
                    });
                });
                var opCounter = new Shumway.Metrics.Counter(true);
                abc.methods.forEach(function (m) {
                    if (!m.code) {
                        return;
                    }
                    function readOperand(operand) {
                        var value = 0;
                        switch (operand.size) {
                            case "s08":
                                value = code.readS8();
                                break;
                            case "u08":
                                value = code.readU8();
                                break;
                            case "s16":
                                value = code.readS16();
                                break;
                            case "s24":
                                value = code.readS24();
                                break;
                            case "u30":
                                value = code.readU30();
                                break;
                            case "u32":
                                value = code.readU32();
                                break;
                            default:
                                release || assert(false);
                                break;
                        }
                        var description = "";
                        switch (operand.type) {
                            case "":
                                break;
                            case "I":
                                description = abc.constantPool.ints[value];
                                break;
                            case "U":
                                description = abc.constantPool.uints[value];
                                break;
                            case "D":
                                description = abc.constantPool.doubles[value];
                                break;
                            case "S":
                                description = abc.constantPool.strings[value];
                                break;
                            case "N":
                                description = abc.constantPool.namespaces[value];
                                break;
                            case "CI":
                                description = abc.classes[value];
                                break;
                            case "M":
                                description = abc.constantPool.multinames[value];
                                break;
                            default:
                                description = "?";
                                break;
                        }
                        return description;
                    }
                    var code = new ABC.AbcStream(m.code);
                    while (code.remaining() > 0) {
                        var bc = code.readU8();
                        var op = Shumway.AVM2.opcodeTable[bc];
                        var operands = null;
                        if (op) {
                            opCounter.count(op.name);
                            if (op.operands) {
                                operands = op.operands.map(readOperand);
                            }
                            switch (bc) {
                                case 65 /* call */:
                                case 67 /* callmethod */:
                                    continue;
                                case 70 /* callproperty */:
                                case 76 /* callproplex */:
                                case 79 /* callpropvoid */:
                                case 68 /* callstatic */:
                                case 69 /* callsuper */:
                                case 78 /* callsupervoid */:
                                    if (operands[0] && !(operands[0].name in definedMethods)) {
                                        libraryMethodCounter.count(operands[0].name);
                                    }
                                    break;
                                case 74 /* constructprop */:
                                    if (operands[0] && !(operands[0].name in definedClasses)) {
                                        libraryClassCounter.count(operands[0].name);
                                    }
                                    break;
                                case 102 /* getproperty */:
                                case 97 /* setproperty */:
                                    if (operands[0] && !(operands[0].name in definedProperties)) {
                                        libraryProperties.count(operands[0].name);
                                    }
                                    break;
                            }
                        }
                    }
                });
                writer.writeLn(JSON.stringify({
                    definedClasses: definedClasses,
                    definedMethods: definedMethods,
                    definedProperties: definedProperties,
                    libraryClasses: libraryClassCounter.counts,
                    librarySuperClasses: librarySuperClassCounter.counts,
                    libraryMethods: libraryMethodCounter.counts,
                    libraryProperties: libraryProperties.counts,
                    operations: opCounter.counts
                }, null, 2));
            }
        })(ABC = AVM2.ABC || (AVM2.ABC = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var assert = Shumway.Debug.assert;
        var unexpected = Shumway.Debug.unexpected;
        var AbcStream = Shumway.AVM2.ABC.AbcStream;
        var top = Shumway.ArrayUtilities.top;
        var peek = Shumway.ArrayUtilities.peek;
        (function (OP) {
            OP[OP["bkpt"] = 0x01] = "bkpt";
            OP[OP["nop"] = 0x02] = "nop";
            OP[OP["getsuper"] = 0x04] = "getsuper";
            OP[OP["setsuper"] = 0x05] = "setsuper";
            OP[OP["dxns"] = 0x06] = "dxns";
            OP[OP["dxnslate"] = 0x07] = "dxnslate";
            OP[OP["kill"] = 0x08] = "kill";
            OP[OP["label"] = 0x09] = "label";
            OP[OP["lf32x4"] = 0x0A] = "lf32x4";
            OP[OP["sf32x4"] = 0x0B] = "sf32x4";
            OP[OP["ifnlt"] = 0x0C] = "ifnlt";
            OP[OP["ifnle"] = 0x0D] = "ifnle";
            OP[OP["ifngt"] = 0x0E] = "ifngt";
            OP[OP["ifnge"] = 0x0F] = "ifnge";
            OP[OP["jump"] = 0x10] = "jump";
            OP[OP["iftrue"] = 0x11] = "iftrue";
            OP[OP["iffalse"] = 0x12] = "iffalse";
            OP[OP["ifeq"] = 0x13] = "ifeq";
            OP[OP["ifne"] = 0x14] = "ifne";
            OP[OP["iflt"] = 0x15] = "iflt";
            OP[OP["ifle"] = 0x16] = "ifle";
            OP[OP["ifgt"] = 0x17] = "ifgt";
            OP[OP["ifge"] = 0x18] = "ifge";
            OP[OP["ifstricteq"] = 0x19] = "ifstricteq";
            OP[OP["ifstrictne"] = 0x1A] = "ifstrictne";
            OP[OP["lookupswitch"] = 0x1B] = "lookupswitch";
            OP[OP["pushwith"] = 0x1C] = "pushwith";
            OP[OP["popscope"] = 0x1D] = "popscope";
            OP[OP["nextname"] = 0x1E] = "nextname";
            OP[OP["hasnext"] = 0x1F] = "hasnext";
            OP[OP["pushnull"] = 0x20] = "pushnull";
            OP[OP["pushundefined"] = 0x21] = "pushundefined";
            OP[OP["pushfloat"] = 0x22] = "pushfloat";
            OP[OP["nextvalue"] = 0x23] = "nextvalue";
            OP[OP["pushbyte"] = 0x24] = "pushbyte";
            OP[OP["pushshort"] = 0x25] = "pushshort";
            OP[OP["pushtrue"] = 0x26] = "pushtrue";
            OP[OP["pushfalse"] = 0x27] = "pushfalse";
            OP[OP["pushnan"] = 0x28] = "pushnan";
            OP[OP["pop"] = 0x29] = "pop";
            OP[OP["dup"] = 0x2A] = "dup";
            OP[OP["swap"] = 0x2B] = "swap";
            OP[OP["pushstring"] = 0x2C] = "pushstring";
            OP[OP["pushint"] = 0x2D] = "pushint";
            OP[OP["pushuint"] = 0x2E] = "pushuint";
            OP[OP["pushdouble"] = 0x2F] = "pushdouble";
            OP[OP["pushscope"] = 0x30] = "pushscope";
            OP[OP["pushnamespace"] = 0x31] = "pushnamespace";
            OP[OP["hasnext2"] = 0x32] = "hasnext2";
            OP[OP["li8"] = 0x35] = "li8";
            OP[OP["li16"] = 0x36] = "li16";
            OP[OP["li32"] = 0x37] = "li32";
            OP[OP["lf32"] = 0x38] = "lf32";
            OP[OP["lf64"] = 0x39] = "lf64";
            OP[OP["si8"] = 0x3A] = "si8";
            OP[OP["si16"] = 0x3B] = "si16";
            OP[OP["si32"] = 0x3C] = "si32";
            OP[OP["sf32"] = 0x3D] = "sf32";
            OP[OP["sf64"] = 0x3E] = "sf64";
            OP[OP["newfunction"] = 0x40] = "newfunction";
            OP[OP["call"] = 0x41] = "call";
            OP[OP["construct"] = 0x42] = "construct";
            OP[OP["callmethod"] = 0x43] = "callmethod";
            OP[OP["callstatic"] = 0x44] = "callstatic";
            OP[OP["callsuper"] = 0x45] = "callsuper";
            OP[OP["callproperty"] = 0x46] = "callproperty";
            OP[OP["returnvoid"] = 0x47] = "returnvoid";
            OP[OP["returnvalue"] = 0x48] = "returnvalue";
            OP[OP["constructsuper"] = 0x49] = "constructsuper";
            OP[OP["constructprop"] = 0x4A] = "constructprop";
            OP[OP["callsuperid"] = 0x4B] = "callsuperid";
            OP[OP["callproplex"] = 0x4C] = "callproplex";
            OP[OP["callinterface"] = 0x4D] = "callinterface";
            OP[OP["callsupervoid"] = 0x4E] = "callsupervoid";
            OP[OP["callpropvoid"] = 0x4F] = "callpropvoid";
            OP[OP["sxi1"] = 0x50] = "sxi1";
            OP[OP["sxi8"] = 0x51] = "sxi8";
            OP[OP["sxi16"] = 0x52] = "sxi16";
            OP[OP["applytype"] = 0x53] = "applytype";
            OP[OP["pushfloat4"] = 0x54] = "pushfloat4";
            OP[OP["newobject"] = 0x55] = "newobject";
            OP[OP["newarray"] = 0x56] = "newarray";
            OP[OP["newactivation"] = 0x57] = "newactivation";
            OP[OP["newclass"] = 0x58] = "newclass";
            OP[OP["getdescendants"] = 0x59] = "getdescendants";
            OP[OP["newcatch"] = 0x5A] = "newcatch";
            OP[OP["findpropstrict"] = 0x5D] = "findpropstrict";
            OP[OP["findproperty"] = 0x5E] = "findproperty";
            OP[OP["finddef"] = 0x5F] = "finddef";
            OP[OP["getlex"] = 0x60] = "getlex";
            OP[OP["setproperty"] = 0x61] = "setproperty";
            OP[OP["getlocal"] = 0x62] = "getlocal";
            OP[OP["setlocal"] = 0x63] = "setlocal";
            OP[OP["getglobalscope"] = 0x64] = "getglobalscope";
            OP[OP["getscopeobject"] = 0x65] = "getscopeobject";
            OP[OP["getproperty"] = 0x66] = "getproperty";
            OP[OP["getouterscope"] = 0x67] = "getouterscope";
            OP[OP["initproperty"] = 0x68] = "initproperty";
            OP[OP["setpropertylate"] = 0x69] = "setpropertylate";
            OP[OP["deleteproperty"] = 0x6A] = "deleteproperty";
            OP[OP["deletepropertylate"] = 0x6B] = "deletepropertylate";
            OP[OP["getslot"] = 0x6C] = "getslot";
            OP[OP["setslot"] = 0x6D] = "setslot";
            OP[OP["getglobalslot"] = 0x6E] = "getglobalslot";
            OP[OP["setglobalslot"] = 0x6F] = "setglobalslot";
            OP[OP["convert_s"] = 0x70] = "convert_s";
            OP[OP["esc_xelem"] = 0x71] = "esc_xelem";
            OP[OP["esc_xattr"] = 0x72] = "esc_xattr";
            OP[OP["convert_i"] = 0x73] = "convert_i";
            OP[OP["convert_u"] = 0x74] = "convert_u";
            OP[OP["convert_d"] = 0x75] = "convert_d";
            OP[OP["convert_b"] = 0x76] = "convert_b";
            OP[OP["convert_o"] = 0x77] = "convert_o";
            OP[OP["checkfilter"] = 0x78] = "checkfilter";
            OP[OP["convert_f"] = 0x79] = "convert_f";
            OP[OP["unplus"] = 0x7a] = "unplus";
            OP[OP["convert_f4"] = 0x7b] = "convert_f4";
            OP[OP["coerce"] = 0x80] = "coerce";
            OP[OP["coerce_b"] = 0x81] = "coerce_b";
            OP[OP["coerce_a"] = 0x82] = "coerce_a";
            OP[OP["coerce_i"] = 0x83] = "coerce_i";
            OP[OP["coerce_d"] = 0x84] = "coerce_d";
            OP[OP["coerce_s"] = 0x85] = "coerce_s";
            OP[OP["astype"] = 0x86] = "astype";
            OP[OP["astypelate"] = 0x87] = "astypelate";
            OP[OP["coerce_u"] = 0x88] = "coerce_u";
            OP[OP["coerce_o"] = 0x89] = "coerce_o";
            OP[OP["negate"] = 0x90] = "negate";
            OP[OP["increment"] = 0x91] = "increment";
            OP[OP["inclocal"] = 0x92] = "inclocal";
            OP[OP["decrement"] = 0x93] = "decrement";
            OP[OP["declocal"] = 0x94] = "declocal";
            OP[OP["not"] = 0x96] = "not";
            OP[OP["bitnot"] = 0x97] = "bitnot";
            OP[OP["add"] = 0xA0] = "add";
            OP[OP["subtract"] = 0xA1] = "subtract";
            OP[OP["multiply"] = 0xA2] = "multiply";
            OP[OP["divide"] = 0xA3] = "divide";
            OP[OP["modulo"] = 0xA4] = "modulo";
            OP[OP["lshift"] = 0xA5] = "lshift";
            OP[OP["rshift"] = 0xA6] = "rshift";
            OP[OP["urshift"] = 0xA7] = "urshift";
            OP[OP["bitand"] = 0xA8] = "bitand";
            OP[OP["bitor"] = 0xA9] = "bitor";
            OP[OP["bitxor"] = 0xAA] = "bitxor";
            OP[OP["equals"] = 0xAB] = "equals";
            OP[OP["strictequals"] = 0xAC] = "strictequals";
            OP[OP["lessthan"] = 0xAD] = "lessthan";
            OP[OP["lessequals"] = 0xAE] = "lessequals";
            OP[OP["greaterthan"] = 0xAF] = "greaterthan";
            OP[OP["greaterequals"] = 0xB0] = "greaterequals";
            OP[OP["istype"] = 0xB2] = "istype";
            OP[OP["istypelate"] = 0xB3] = "istypelate";
            OP[OP["increment_i"] = 0xC0] = "increment_i";
            OP[OP["decrement_i"] = 0xC1] = "decrement_i";
            OP[OP["inclocal_i"] = 0xC2] = "inclocal_i";
            OP[OP["declocal_i"] = 0xC3] = "declocal_i";
            OP[OP["negate_i"] = 0xC4] = "negate_i";
            OP[OP["add_i"] = 0xC5] = "add_i";
            OP[OP["subtract_i"] = 0xC6] = "subtract_i";
            OP[OP["multiply_i"] = 0xC7] = "multiply_i";
            OP[OP["getlocal0"] = 0xD0] = "getlocal0";
            OP[OP["getlocal1"] = 0xD1] = "getlocal1";
            OP[OP["getlocal2"] = 0xD2] = "getlocal2";
            OP[OP["getlocal3"] = 0xD3] = "getlocal3";
            OP[OP["setlocal0"] = 0xD4] = "setlocal0";
            OP[OP["setlocal1"] = 0xD5] = "setlocal1";
            OP[OP["setlocal2"] = 0xD6] = "setlocal2";
            OP[OP["setlocal3"] = 0xD7] = "setlocal3";
            OP[OP["invalid"] = 0xED] = "invalid";
            OP[OP["debug"] = 0xEF] = "debug";
            OP[OP["debugline"] = 0xF0] = "debugline";
            OP[OP["debugfile"] = 0xF1] = "debugfile";
            OP[OP["bkptline"] = 0xF2] = "bkptline";
            OP[OP["timestamp"] = 0xF3] = "timestamp";
            OP[OP["throw"] = 0x03] = "throw";
            OP[OP["typeof"] = 0x95] = "typeof";
            OP[OP["instanceof"] = 0xB1] = "instanceof";
            OP[OP["in"] = 0xB4] = "in";
        })(AVM2.OP || (AVM2.OP = {}));
        var OP = AVM2.OP;
        AVM2.opcodeTable = [
            null,
            { name: "bkpt", canThrow: false, operands: [] },
            { name: "nop", canThrow: false, operands: [] },
            { name: "throw", canThrow: true, operands: [] },
            { name: "getsuper", canThrow: true, operands: [{ name: "index", size: "u30", type: "" }] },
            { name: "setsuper", canThrow: true, operands: [{ name: "index", size: "u30", type: "" }] },
            { name: "dxns", canThrow: true, operands: [{ name: "index", size: "u30", type: "" }] },
            { name: "dxnslate", canThrow: true, operands: [] },
            { name: "kill", canThrow: false, operands: [{ name: "index", size: "u30", type: "" }] },
            { name: "label", canThrow: false, operands: [] },
            { name: "lf32x4", canThrow: true, operands: [] },
            { name: "sf32x4", canThrow: true, operands: [] },
            { name: "ifnlt", canThrow: true, operands: [{ name: "offset", size: "s24", type: "" }] },
            { name: "ifnle", canThrow: true, operands: [{ name: "offset", size: "s24", type: "" }] },
            { name: "ifngt", canThrow: true, operands: [{ name: "offset", size: "s24", type: "" }] },
            { name: "ifnge", canThrow: true, operands: [{ name: "offset", size: "s24", type: "" }] },
            { name: "jump", canThrow: false, operands: [{ name: "offset", size: "s24", type: "" }] },
            { name: "iftrue", canThrow: false, operands: [{ name: "offset", size: "s24", type: "" }] },
            { name: "iffalse", canThrow: false, operands: [{ name: "offset", size: "s24", type: "" }] },
            { name: "ifeq", canThrow: true, operands: [{ name: "offset", size: "s24", type: "" }] },
            { name: "ifne", canThrow: true, operands: [{ name: "offset", size: "s24", type: "" }] },
            { name: "iflt", canThrow: true, operands: [{ name: "offset", size: "s24", type: "" }] },
            { name: "ifle", canThrow: true, operands: [{ name: "offset", size: "s24", type: "" }] },
            { name: "ifgt", canThrow: true, operands: [{ name: "offset", size: "s24", type: "" }] },
            { name: "ifge", canThrow: true, operands: [{ name: "offset", size: "s24", type: "" }] },
            { name: "ifstricteq", canThrow: false, operands: [{ name: "offset", size: "s24", type: "" }] },
            { name: "ifstrictne", canThrow: false, operands: [{ name: "offset", size: "s24", type: "" }] },
            { name: "lookupswitch", canThrow: false, operands: null },
            { name: "pushwith", canThrow: false, operands: [] },
            { name: "popscope", canThrow: false, operands: [] },
            { name: "nextname", canThrow: true, operands: [] },
            { name: "hasnext", canThrow: true, operands: [] },
            { name: "pushnull", canThrow: false, operands: [] },
            { name: "pushundefined", canThrow: false, operands: [] },
            null,
            { name: "nextvalue", canThrow: true, operands: [] },
            { name: "pushbyte", canThrow: false, operands: [{ name: "value", size: "s08", type: "" }] },
            { name: "pushshort", canThrow: false, operands: [{ name: "value", size: "s16", type: "" }] },
            { name: "pushtrue", canThrow: false, operands: [] },
            { name: "pushfalse", canThrow: false, operands: [] },
            { name: "pushnan", canThrow: false, operands: [] },
            { name: "pop", canThrow: false, operands: [] },
            { name: "dup", canThrow: false, operands: [] },
            { name: "swap", canThrow: false, operands: [] },
            { name: "pushstring", canThrow: false, operands: [{ name: "index", size: "u30", type: "S" }] },
            { name: "pushint", canThrow: false, operands: [{ name: "index", size: "u30", type: "I" }] },
            { name: "pushuint", canThrow: false, operands: [{ name: "index", size: "u30", type: "U" }] },
            { name: "pushdouble", canThrow: false, operands: [{ name: "index", size: "u30", type: "D" }] },
            { name: "pushscope", canThrow: false, operands: [] },
            { name: "pushnamespace", canThrow: false, operands: [{ name: "index", size: "u30", type: "N" }] },
            { name: "hasnext2", canThrow: true, operands: [{ name: "object", size: "u30", type: "" }, { name: "index", size: "u30", type: "" }] },
            { name: "lix8", canThrow: true, operands: null },
            { name: "lix16", canThrow: true, operands: null },
            { name: "li8", canThrow: true, operands: [] },
            { name: "li16", canThrow: true, operands: [] },
            { name: "li32", canThrow: true, operands: [] },
            { name: "lf32", canThrow: true, operands: [] },
            { name: "lf64", canThrow: true, operands: [] },
            { name: "si8", canThrow: true, operands: [] },
            { name: "si16", canThrow: true, operands: [] },
            { name: "si32", canThrow: true, operands: [] },
            { name: "sf32", canThrow: true, operands: [] },
            { name: "sf64", canThrow: true, operands: [] },
            null,
            { name: "newfunction", canThrow: true, operands: [{ name: "index", size: "u30", type: "MI" }] },
            { name: "call", canThrow: true, operands: [{ name: "argCount", size: "u30", type: "" }] },
            { name: "construct", canThrow: true, operands: [{ name: "argCount", size: "u30", type: "" }] },
            { name: "callmethod", canThrow: true, operands: [{ name: "index", size: "u30", type: "" }, { name: "argCount", size: "u30", type: "" }] },
            { name: "callstatic", canThrow: true, operands: [{ name: "index", size: "u30", type: "MI" }, { name: "argCount", size: "u30", type: "" }] },
            { name: "callsuper", canThrow: true, operands: [{ name: "index", size: "u30", type: "M" }, { name: "argCount", size: "u30", type: "" }] },
            { name: "callproperty", canThrow: true, operands: [{ name: "index", size: "u30", type: "M" }, { name: "argCount", size: "u30", type: "" }] },
            { name: "returnvoid", canThrow: false, operands: [] },
            { name: "returnvalue", canThrow: true, operands: [] },
            { name: "constructsuper", canThrow: true, operands: [{ name: "argCount", size: "u30", type: "" }] },
            { name: "constructprop", canThrow: true, operands: [{ name: "index", size: "u30", type: "M" }, { name: "argCount", size: "u30", type: "" }] },
            { name: "callsuperid", canThrow: true, operands: null },
            { name: "callproplex", canThrow: true, operands: [{ name: "index", size: "u30", type: "M" }, { name: "argCount", size: "u30", type: "" }] },
            { name: "callinterface", canThrow: true, operands: null },
            { name: "callsupervoid", canThrow: true, operands: [{ name: "index", size: "u30", type: "M" }, { name: "argCount", size: "u30", type: "" }] },
            { name: "callpropvoid", canThrow: true, operands: [{ name: "index", size: "u30", type: "M" }, { name: "argCount", size: "u30", type: "" }] },
            { name: "sxi1", canThrow: false, operands: [] },
            { name: "sxi8", canThrow: false, operands: [] },
            { name: "sxi16", canThrow: false, operands: [] },
            { name: "applytype", canThrow: true, operands: [{ name: "argCount", size: "u30", type: "" }] },
            { name: "pushfloat4", canThrow: false, operands: null },
            { name: "newobject", canThrow: true, operands: [{ name: "argCount", size: "u30", type: "" }] },
            { name: "newarray", canThrow: true, operands: [{ name: "argCount", size: "u30", type: "" }] },
            { name: "newactivation", canThrow: true, operands: [] },
            { name: "newclass", canThrow: true, operands: [{ name: "index", size: "u30", type: "CI" }] },
            { name: "getdescendants", canThrow: true, operands: [{ name: "index", size: "u30", type: "M" }] },
            { name: "newcatch", canThrow: true, operands: [{ name: "index", size: "u30", type: "EI" }] },
            { name: "findpropglobalstrict", canThrow: true, operands: null },
            { name: "findpropglobal", canThrow: true, operands: null },
            { name: "findpropstrict", canThrow: true, operands: [{ name: "index", size: "u30", type: "M" }] },
            { name: "findproperty", canThrow: true, operands: [{ name: "index", size: "u30", type: "M" }] },
            { name: "finddef", canThrow: true, operands: null },
            { name: "getlex", canThrow: true, operands: [{ name: "index", size: "u30", type: "M" }] },
            { name: "setproperty", canThrow: true, operands: [{ name: "index", size: "u30", type: "M" }] },
            { name: "getlocal", canThrow: false, operands: [{ name: "index", size: "u30", type: "" }] },
            { name: "setlocal", canThrow: false, operands: [{ name: "index", size: "u30", type: "" }] },
            { name: "getglobalscope", canThrow: false, operands: [] },
            { name: "getscopeobject", canThrow: false, operands: [{ name: "index", size: "u30", type: "" }] },
            { name: "getproperty", canThrow: true, operands: [{ name: "index", size: "u30", type: "M" }] },
            { name: "getouterscope", canThrow: false, operands: null },
            { name: "initproperty", canThrow: true, operands: [{ name: "index", size: "u30", type: "M" }] },
            null,
            { name: "deleteproperty", canThrow: true, operands: [{ name: "index", size: "u30", type: "M" }] },
            null,
            { name: "getslot", canThrow: true, operands: [{ name: "index", size: "u30", type: "" }] },
            { name: "setslot", canThrow: true, operands: [{ name: "index", size: "u30", type: "" }] },
            { name: "getglobalslot", canThrow: false, operands: [{ name: "index", size: "u30", type: "" }] },
            { name: "setglobalslot", canThrow: false, operands: [{ name: "index", size: "u30", type: "" }] },
            { name: "convert_s", canThrow: true, operands: [] },
            { name: "esc_xelem", canThrow: true, operands: [] },
            { name: "esc_xattr", canThrow: true, operands: [] },
            { name: "convert_i", canThrow: true, operands: [] },
            { name: "convert_u", canThrow: true, operands: [] },
            { name: "convert_d", canThrow: true, operands: [] },
            { name: "convert_b", canThrow: true, operands: [] },
            { name: "convert_o", canThrow: true, operands: [] },
            { name: "checkfilter", canThrow: true, operands: [] },
            { name: "convert_f", canThrow: true, operands: [] },
            { name: "unplus", canThrow: true, operands: [] },
            { name: "convert_f4", canThrow: true, operands: [] },
            null,
            null,
            null,
            null,
            { name: "coerce", canThrow: true, operands: [{ name: "index", size: "u30", type: "M" }] },
            { name: "coerce_b", canThrow: true, operands: [] },
            { name: "coerce_a", canThrow: true, operands: [] },
            { name: "coerce_i", canThrow: true, operands: [] },
            { name: "coerce_d", canThrow: true, operands: [] },
            { name: "coerce_s", canThrow: true, operands: [] },
            { name: "astype", canThrow: true, operands: [{ name: "index", size: "u30", type: "M" }] },
            { name: "astypelate", canThrow: true, operands: [] },
            { name: "coerce_u", canThrow: true, operands: [] },
            { name: "coerce_o", canThrow: true, operands: [] },
            null,
            null,
            null,
            null,
            null,
            null,
            { name: "negate", canThrow: true, operands: [] },
            { name: "increment", canThrow: true, operands: [] },
            { name: "inclocal", canThrow: true, operands: [{ name: "index", size: "u30", type: "" }] },
            { name: "decrement", canThrow: true, operands: [] },
            { name: "declocal", canThrow: true, operands: [{ name: "index", size: "u30", type: "" }] },
            { name: "typeof", canThrow: false, operands: [] },
            { name: "not", canThrow: false, operands: [] },
            { name: "bitnot", canThrow: true, operands: [] },
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            { name: "add", canThrow: true, operands: [] },
            { name: "subtract", canThrow: true, operands: [] },
            { name: "multiply", canThrow: true, operands: [] },
            { name: "divide", canThrow: true, operands: [] },
            { name: "modulo", canThrow: true, operands: [] },
            { name: "lshift", canThrow: true, operands: [] },
            { name: "rshift", canThrow: true, operands: [] },
            { name: "urshift", canThrow: true, operands: [] },
            { name: "bitand", canThrow: true, operands: [] },
            { name: "bitor", canThrow: true, operands: [] },
            { name: "bitxor", canThrow: true, operands: [] },
            { name: "equals", canThrow: true, operands: [] },
            { name: "strictequals", canThrow: true, operands: [] },
            { name: "lessthan", canThrow: true, operands: [] },
            { name: "lessequals", canThrow: true, operands: [] },
            { name: "greaterthan", canThrow: true, operands: [] },
            { name: "greaterequals", canThrow: true, operands: [] },
            { name: "instanceof", canThrow: true, operands: [] },
            { name: "istype", canThrow: true, operands: [{ name: "index", size: "u30", type: "M" }] },
            { name: "istypelate", canThrow: true, operands: [] },
            { name: "in", canThrow: true, operands: [] },
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            { name: "increment_i", canThrow: true, operands: [] },
            { name: "decrement_i", canThrow: true, operands: [] },
            { name: "inclocal_i", canThrow: true, operands: [{ name: "index", size: "u30", type: "" }] },
            { name: "declocal_i", canThrow: true, operands: [{ name: "index", size: "u30", type: "" }] },
            { name: "negate_i", canThrow: true, operands: [] },
            { name: "add_i", canThrow: true, operands: [] },
            { name: "subtract_i", canThrow: true, operands: [] },
            { name: "multiply_i", canThrow: true, operands: [] },
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            { name: "getlocal0", canThrow: false, operands: [] },
            { name: "getlocal1", canThrow: false, operands: [] },
            { name: "getlocal2", canThrow: false, operands: [] },
            { name: "getlocal3", canThrow: false, operands: [] },
            { name: "setlocal0", canThrow: false, operands: [] },
            { name: "setlocal1", canThrow: false, operands: [] },
            { name: "setlocal2", canThrow: false, operands: [] },
            { name: "setlocal3", canThrow: false, operands: [] },
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            { name: "invalid", canThrow: false, operands: [] },
            null,
            { name: "debug", canThrow: true, operands: [{ name: "debugType", size: "u08", type: "" }, { name: "index", size: "u30", type: "S" }, { name: "reg", size: "u08", type: "" }, { name: "extra", size: "u30", type: "" }] },
            { name: "debugline", canThrow: true, operands: [{ name: "lineNumber", size: "u30", type: "" }] },
            { name: "debugfile", canThrow: true, operands: [{ name: "index", size: "u30", type: "S" }] },
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null,
            null
        ];
        function opcodeName(op) {
            return AVM2.opcodeTable[op].name;
        }
        AVM2.opcodeName = opcodeName;
        var Bytecode = (function () {
            function Bytecode(code) {
                var op = code.readU8();
                this.op = op;
                this.originalPosition = code.position;
                var opdesc = Shumway.AVM2.opcodeTable[op];
                if (!opdesc) {
                    release || unexpected("Unknown Op " + op);
                }
                this.canThrow = opdesc.canThrow;
                var i, n;
                if (op === 27 /* lookupswitch */) {
                    var defaultOffset = code.readS24();
                    this.offsets = [];
                    var n = code.readU30() + 1;
                    for (i = 0; i < n; i++) {
                        this.offsets.push(code.readS24());
                    }
                    this.offsets.push(defaultOffset);
                }
                else {
                    for (i = 0, n = opdesc.operands.length; i < n; i++) {
                        var operand = opdesc.operands[i];
                        switch (operand.size) {
                            case "u08":
                                this[operand.name] = code.readU8();
                                break;
                            case "s08":
                                this[operand.name] = code.readS8();
                                break;
                            case "s16":
                                this[operand.name] = code.readS16();
                                break;
                            case "s24":
                                this[operand.name] = code.readS24();
                                break;
                            case "u30":
                                this[operand.name] = code.readU30();
                                break;
                            case "u32":
                                this[operand.name] = code.readU32();
                                break;
                            default:
                                release || unexpected();
                        }
                    }
                }
            }
            Bytecode.prototype.makeBlockHead = function (id) {
                if (this.succs) {
                    return id;
                }
                this.bid = id;
                this.succs = [];
                this.preds = [];
                this.dominatees = [];
                return id + 1;
            };
            Bytecode.prototype.trace = function (writer) {
                if (!this.succs) {
                    return;
                }
                writer.writeLn("#" + this.bid);
            };
            Bytecode.prototype.toString = function (abc) {
                var opDescription = Shumway.AVM2.opcodeTable[this.op];
                var str = opDescription.name.padRight(' ', 20);
                var i, j;
                if (this.op === 27 /* lookupswitch */) {
                    str += "targets:";
                    for (i = 0, j = this.targets.length; i < j; i++) {
                        str += (i > 0 ? "," : "") + this.targets[i].position;
                    }
                }
                else {
                    for (i = 0, j = opDescription.operands.length; i < j; i++) {
                        var operand = opDescription.operands[i];
                        if (operand.name === "offset") {
                            str += "target:" + this.target.position;
                        }
                        else {
                            str += operand.name + ": ";
                            var value = this[operand.name];
                            if (abc) {
                                switch (operand.type) {
                                    case "":
                                        str += value;
                                        break;
                                    case "I":
                                        str += abc.constantPool.ints[value];
                                        break;
                                    case "U":
                                        str += abc.constantPool.uints[value];
                                        break;
                                    case "D":
                                        str += abc.constantPool.doubles[value];
                                        break;
                                    case "S":
                                        str += abc.constantPool.strings[value];
                                        break;
                                    case "N":
                                        str += abc.constantPool.namespaces[value];
                                        break;
                                    case "CI":
                                        str += abc.classes[value];
                                        break;
                                    case "M":
                                        str += abc.constantPool.multinames[value];
                                        break;
                                    default:
                                        str += "?";
                                        break;
                                }
                            }
                            else {
                                str += value;
                            }
                        }
                        if (i < j - 1) {
                            str += ", ";
                        }
                    }
                }
                return str;
            };
            return Bytecode;
        })();
        AVM2.Bytecode = Bytecode;
        var BITS_PER_WORD = Shumway.BitSets.BITS_PER_WORD;
        var ADDRESS_BITS_PER_WORD = Shumway.BitSets.ADDRESS_BITS_PER_WORD;
        var BIT_INDEX_MASK = Shumway.BitSets.BIT_INDEX_MASK;
        var BlockSet = (function (_super) {
            __extends(BlockSet, _super);
            function BlockSet(length, blockById) {
                _super.call(this, length);
                this.blockById = blockById;
            }
            BlockSet.prototype.forEachBlock = function (fn) {
                release || assert(fn);
                var byId = this.blockById;
                var bits = this.bits;
                for (var i = 0, j = bits.length; i < j; i++) {
                    var word = bits[i];
                    if (word) {
                        for (var k = 0; k < BITS_PER_WORD; k++) {
                            if (word & (1 << k)) {
                                fn(byId[i * BITS_PER_WORD + k]);
                            }
                        }
                    }
                }
            };
            BlockSet.prototype.choose = function () {
                var byId = this.blockById;
                var bits = this.bits;
                for (var i = 0, j = bits.length; i < j; i++) {
                    var word = bits[i];
                    if (word) {
                        for (var k = 0; k < BITS_PER_WORD; k++) {
                            if (word & (1 << k)) {
                                return byId[i * BITS_PER_WORD + k];
                            }
                        }
                    }
                }
            };
            BlockSet.prototype.members = function () {
                var byId = this.blockById;
                var set = [];
                var bits = this.bits;
                for (var i = 0, j = bits.length; i < j; i++) {
                    var word = bits[i];
                    if (word) {
                        for (var k = 0; k < BITS_PER_WORD; k++) {
                            if (word & (1 << k)) {
                                set.push(byId[i * BITS_PER_WORD + k]);
                            }
                        }
                    }
                }
                return set;
            };
            BlockSet.prototype.setBlocks = function (bs) {
                var bits = this.bits;
                for (var i = 0, j = bs.length; i < j; i++) {
                    var id = bs[i].bid;
                    bits[id >> ADDRESS_BITS_PER_WORD] |= 1 << (id & BIT_INDEX_MASK);
                }
            };
            return BlockSet;
        })(Shumway.BitSets.Uint32ArrayBitSet);
        AVM2.BlockSet = BlockSet;
        var Analysis = (function () {
            function Analysis(methodInfo) {
                this.methodInfo = methodInfo;
                if (this.methodInfo.code) {
                    AVM2.enterTimeline("normalizeBytecode");
                    this.normalizeBytecode();
                    AVM2.leaveTimeline();
                }
            }
            Analysis.prototype.makeBlockSetFactory = function (length, blockById) {
                release || assert(!this.boundBlockSet);
                this.boundBlockSet = (function blockSet() {
                    return new Shumway.AVM2.BlockSet(length, blockById);
                });
            };
            Analysis.prototype.accessLocal = function (index) {
                if (index-- === 0)
                    return;
                if (index < this.methodInfo.parameters.length) {
                    this.methodInfo.parameters[index].isUsed = true;
                }
            };
            Analysis.prototype.getInvalidTarget = function (cache, offset) {
                if (cache && cache[offset]) {
                    return cache[offset];
                }
                var code = Object.create(Bytecode.prototype);
                code.op = 237 /* invalid */;
                code.position = offset;
                cache && (cache[offset] = code);
                return code;
            };
            Analysis.prototype.normalizeBytecode = function () {
                var methodInfo = this.methodInfo;
                var bytecodesOffset = [];
                var bytecodes = [];
                var codeStream = new AbcStream(this.methodInfo.code);
                var bytecode;
                while (codeStream.remaining() > 0) {
                    var pos = codeStream.position;
                    bytecode = new Bytecode(codeStream);
                    switch (bytecode.op) {
                        case 2 /* nop */:
                        case 9 /* label */:
                            bytecodesOffset[pos] = bytecodes.length;
                            continue;
                        case 27 /* lookupswitch */:
                            this.methodInfo.hasLookupSwitches = true;
                            bytecode.targets = [];
                            var offsets = bytecode.offsets;
                            for (var i = 0, j = offsets.length; i < j; i++) {
                                offsets[i] += pos;
                            }
                            break;
                        case 16 /* jump */:
                        case 21 /* iflt */:
                        case 12 /* ifnlt */:
                        case 22 /* ifle */:
                        case 13 /* ifnle */:
                        case 23 /* ifgt */:
                        case 14 /* ifngt */:
                        case 24 /* ifge */:
                        case 15 /* ifnge */:
                        case 19 /* ifeq */:
                        case 20 /* ifne */:
                        case 25 /* ifstricteq */:
                        case 26 /* ifstrictne */:
                        case 17 /* iftrue */:
                        case 18 /* iffalse */:
                            bytecode.offset += codeStream.position;
                            break;
                        case 208 /* getlocal0 */:
                        case 209 /* getlocal1 */:
                        case 210 /* getlocal2 */:
                        case 211 /* getlocal3 */:
                            this.accessLocal(bytecode.op - 208 /* getlocal0 */);
                            break;
                        case 98 /* getlocal */:
                            this.accessLocal(bytecode.index);
                            break;
                        default:
                            break;
                    }
                    bytecode.position = bytecodes.length;
                    bytecodesOffset[pos] = bytecodes.length;
                    bytecodes.push(bytecode);
                }
                var invalidJumps = {};
                var newOffset;
                for (var pc = 0, end = bytecodes.length; pc < end; pc++) {
                    bytecode = bytecodes[pc];
                    switch (bytecode.op) {
                        case 27 /* lookupswitch */:
                            var offsets = bytecode.offsets;
                            for (var i = 0, j = offsets.length; i < j; i++) {
                                newOffset = bytecodesOffset[offsets[i]];
                                bytecode.targets.push(bytecodes[newOffset] || this.getInvalidTarget(invalidJumps, offsets[i]));
                                offsets[i] = newOffset;
                            }
                            break;
                        case 16 /* jump */:
                        case 21 /* iflt */:
                        case 12 /* ifnlt */:
                        case 22 /* ifle */:
                        case 13 /* ifnle */:
                        case 23 /* ifgt */:
                        case 14 /* ifngt */:
                        case 24 /* ifge */:
                        case 15 /* ifnge */:
                        case 19 /* ifeq */:
                        case 20 /* ifne */:
                        case 25 /* ifstricteq */:
                        case 26 /* ifstrictne */:
                        case 17 /* iftrue */:
                        case 18 /* iffalse */:
                            newOffset = bytecodesOffset[bytecode.offset];
                            bytecode.target = (bytecodes[newOffset] || this.getInvalidTarget(invalidJumps, bytecode.offset));
                            bytecode.offset = newOffset;
                            break;
                        default:
                    }
                }
                this.bytecodes = bytecodes;
                var exceptions = this.methodInfo.exceptions;
                for (var i = 0, j = exceptions.length; i < j; i++) {
                    var ex = exceptions[i];
                    ex.start = bytecodesOffset[ex.start];
                    ex.end = bytecodesOffset[ex.end];
                    ex.offset = bytecodesOffset[ex.target];
                    ex.target = bytecodes[ex.offset];
                    ex.target.exception = ex;
                }
            };
            Analysis.prototype.analyzeControlFlow = function () {
                release || assert(this.bytecodes);
                AVM2.enterTimeline("analyzeControlFlow");
                this.detectBasicBlocks();
                this.normalizeReachableBlocks();
                this.computeDominance();
                this.analyzedControlFlow = true;
                AVM2.leaveTimeline();
                return true;
            };
            Analysis.prototype.detectBasicBlocks = function () {
                var bytecodes = this.bytecodes;
                var exceptions = this.methodInfo.exceptions;
                var hasExceptions = exceptions.length > 0;
                var blockById = {};
                var code;
                var pc, end;
                var id = 0;
                function tryTargets(block) {
                    var targets = [];
                    for (var i = 0, j = exceptions.length; i < j; i++) {
                        var ex = exceptions[i];
                        if (block.position >= ex.start && block.end.position <= ex.end) {
                            targets.push(ex.target);
                        }
                    }
                    return targets;
                }
                id = bytecodes[0].makeBlockHead(id);
                for (pc = 0, end = bytecodes.length - 1; pc < end; pc++) {
                    code = bytecodes[pc];
                    switch (code.op) {
                        case 71 /* returnvoid */:
                        case 72 /* returnvalue */:
                        case 3 /* throw */:
                            id = bytecodes[pc + 1].makeBlockHead(id);
                            break;
                        case 27 /* lookupswitch */:
                            var targets = code.targets;
                            for (var i = 0, j = targets.length; i < j; i++) {
                                id = targets[i].makeBlockHead(id);
                            }
                            id = bytecodes[pc + 1].makeBlockHead(id);
                            break;
                        case 16 /* jump */:
                        case 21 /* iflt */:
                        case 12 /* ifnlt */:
                        case 22 /* ifle */:
                        case 13 /* ifnle */:
                        case 23 /* ifgt */:
                        case 14 /* ifngt */:
                        case 24 /* ifge */:
                        case 15 /* ifnge */:
                        case 19 /* ifeq */:
                        case 20 /* ifne */:
                        case 25 /* ifstricteq */:
                        case 26 /* ifstrictne */:
                        case 17 /* iftrue */:
                        case 18 /* iffalse */:
                            id = code.target.makeBlockHead(id);
                            id = bytecodes[pc + 1].makeBlockHead(id);
                            break;
                        default:
                    }
                }
                code = bytecodes[end];
                switch (code.op) {
                    case 71 /* returnvoid */:
                    case 72 /* returnvalue */:
                    case 3 /* throw */:
                        break;
                    case 27 /* lookupswitch */:
                        var targets = code.targets;
                        for (var i = 0, j = targets.length; i < j; i++) {
                            id = targets[i].makeBlockHead(id);
                        }
                        break;
                    case 16 /* jump */:
                        id = code.target.makeBlockHead(id);
                        break;
                    case 21 /* iflt */:
                    case 12 /* ifnlt */:
                    case 22 /* ifle */:
                    case 13 /* ifnle */:
                    case 23 /* ifgt */:
                    case 14 /* ifngt */:
                    case 24 /* ifge */:
                    case 15 /* ifnge */:
                    case 19 /* ifeq */:
                    case 20 /* ifne */:
                    case 25 /* ifstricteq */:
                    case 26 /* ifstrictne */:
                    case 17 /* iftrue */:
                    case 18 /* iffalse */:
                        id = code.target.makeBlockHead(id);
                        bytecodes[pc + 1] = this.getInvalidTarget(null, pc + 1);
                        id = bytecodes[pc + 1].makeBlockHead(id);
                        break;
                    default:
                }
                if (hasExceptions) {
                    for (var i = 0; i < exceptions.length; i++) {
                        var ex = exceptions[i];
                        var tryStart = bytecodes[ex.start];
                        var afterTry = bytecodes[ex.end + 1];
                        id = tryStart.makeBlockHead(id);
                        if (afterTry) {
                            id = afterTry.makeBlockHead(id);
                        }
                        id = ex.target.makeBlockHead(id);
                    }
                }
                var currentBlock = bytecodes[0];
                for (pc = 1, end = bytecodes.length; pc < end; pc++) {
                    if (!bytecodes[pc].succs) {
                        continue;
                    }
                    release || assert(currentBlock.succs);
                    blockById[currentBlock.bid] = currentBlock;
                    code = bytecodes[pc - 1];
                    currentBlock.end = code;
                    var nextBlock = bytecodes[pc];
                    switch (code.op) {
                        case 71 /* returnvoid */:
                        case 72 /* returnvalue */:
                        case 3 /* throw */:
                            break;
                        case 27 /* lookupswitch */:
                            for (var i = 0, j = code.targets.length; i < j; i++) {
                                currentBlock.succs.push(code.targets[i]);
                            }
                            break;
                        case 16 /* jump */:
                            currentBlock.succs.push(code.target);
                            break;
                        case 21 /* iflt */:
                        case 12 /* ifnlt */:
                        case 22 /* ifle */:
                        case 13 /* ifnle */:
                        case 23 /* ifgt */:
                        case 14 /* ifngt */:
                        case 24 /* ifge */:
                        case 15 /* ifnge */:
                        case 19 /* ifeq */:
                        case 20 /* ifne */:
                        case 25 /* ifstricteq */:
                        case 26 /* ifstrictne */:
                        case 17 /* iftrue */:
                        case 18 /* iffalse */:
                            currentBlock.succs.push(code.target);
                            if (code.target !== nextBlock) {
                                currentBlock.succs.push(nextBlock);
                            }
                            break;
                        default:
                            currentBlock.succs.push(nextBlock);
                    }
                    if (hasExceptions) {
                        var targets = tryTargets(currentBlock);
                        currentBlock.hasCatches = targets.length > 0;
                        currentBlock.succs.push.apply(currentBlock.succs, targets);
                    }
                    currentBlock = nextBlock;
                }
                blockById[currentBlock.bid] = currentBlock;
                code = bytecodes[end - 1];
                switch (code.op) {
                    case 27 /* lookupswitch */:
                        for (var i = 0, j = code.targets.length; i < j; i++) {
                            currentBlock.succs.push(code.targets[i]);
                        }
                        break;
                    case 16 /* jump */:
                        currentBlock.succs.push(code.target);
                        break;
                    default:
                }
                currentBlock.end = code;
                this.makeBlockSetFactory(id, blockById);
            };
            Analysis.prototype.normalizeReachableBlocks = function () {
                var root = this.bytecodes[0];
                release || assert(root.preds.length === 0);
                var ONCE = 1;
                var BUNCH_OF_TIMES = 2;
                var blocks = [];
                var visited = {};
                var ancestors = {};
                var worklist = [root];
                var node;
                ancestors[root.bid] = true;
                while ((node = top(worklist))) {
                    if (visited[node.bid]) {
                        if (visited[node.bid] === ONCE) {
                            visited[node.bid] = BUNCH_OF_TIMES;
                            blocks.push(node);
                            var succs = node.succs;
                            for (var i = 0, j = succs.length; i < j; i++) {
                                succs[i].preds.push(node);
                            }
                        }
                        ancestors[node.bid] = false;
                        worklist.pop();
                        continue;
                    }
                    visited[node.bid] = ONCE;
                    ancestors[node.bid] = true;
                    var succs = node.succs;
                    for (var i = 0, j = succs.length; i < j; i++) {
                        var s = succs[i];
                        if (ancestors[s.bid]) {
                            if (!node.spbacks) {
                                node.spbacks = new this.boundBlockSet();
                            }
                            node.spbacks.set(s.bid);
                        }
                        !visited[s.bid] && worklist.push(s);
                    }
                }
                this.blocks = blocks.reverse();
            };
            Analysis.prototype.computeDominance = function () {
                function intersectDominators(doms, b1, b2) {
                    var finger1 = b1;
                    var finger2 = b2;
                    while (finger1 !== finger2) {
                        while (finger1 > finger2) {
                            finger1 = doms[finger1];
                        }
                        while (finger2 > finger1) {
                            finger2 = doms[finger2];
                        }
                    }
                    return finger1;
                }
                var blocks = this.blocks;
                var n = blocks.length;
                var doms = new Array(n);
                doms[0] = 0;
                var rpo = {};
                for (var b = 0; b < n; b++) {
                    rpo[blocks[b].bid] = b;
                }
                var changed = true;
                while (changed) {
                    changed = false;
                    for (var b = 1; b < n; b++) {
                        var preds = blocks[b].preds;
                        var j = preds.length;
                        var newIdom = rpo[preds[0].bid];
                        if (!(newIdom in doms)) {
                            for (var i = 1; i < j; i++) {
                                newIdom = rpo[preds[i].bid];
                                if (newIdom in doms) {
                                    break;
                                }
                            }
                        }
                        release || assert(newIdom in doms);
                        for (var i = 0; i < j; i++) {
                            var p = rpo[preds[i].bid];
                            if (p === newIdom) {
                                continue;
                            }
                            if (p in doms) {
                                newIdom = intersectDominators(doms, p, newIdom);
                            }
                        }
                        if (doms[b] !== newIdom) {
                            doms[b] = newIdom;
                            changed = true;
                        }
                    }
                }
                blocks[0].dominator = blocks[0];
                var block;
                for (var b = 1; b < n; b++) {
                    block = blocks[b];
                    var idom = blocks[doms[b]];
                    block.dominator = idom;
                    idom.dominatees.push(block);
                    block.npreds = block.preds.length;
                }
                var worklist = [blocks[0]];
                blocks[0].level || (blocks[0].level = 0);
                while ((block = worklist.shift())) {
                    var dominatees = block.dominatees;
                    for (var i = 0; i < dominatees.length; i++) {
                        dominatees[i].level = block.level + 1;
                    }
                    worklist.push.apply(worklist, dominatees);
                }
            };
            Analysis.prototype.markLoops = function () {
                if (!this.analyzedControlFlow && !this.analyzeControlFlow()) {
                    return false;
                }
                var bytecodes = this.bytecodes;
                var BoundBlockSet = this.boundBlockSet;
                function findSCCs(root) {
                    var preorderId = 1;
                    var preorder = {};
                    var assigned = {};
                    var unconnectedNodes = [];
                    var pendingNodes = [];
                    var sccs = [];
                    var level = root.level + 1;
                    var worklist = [root];
                    var node;
                    var u, s;
                    while ((node = top(worklist))) {
                        if (preorder[node.bid]) {
                            if (peek(pendingNodes) === node) {
                                pendingNodes.pop();
                                var scc = [];
                                do {
                                    u = unconnectedNodes.pop();
                                    assigned[u.bid] = true;
                                    scc.push(u);
                                } while (u !== node);
                                if (scc.length > 1 || (u.spbacks && u.spbacks.get(u.bid))) {
                                    sccs.push(scc);
                                }
                            }
                            worklist.pop();
                            continue;
                        }
                        preorder[node.bid] = preorderId++;
                        unconnectedNodes.push(node);
                        pendingNodes.push(node);
                        var succs = node.succs;
                        for (var i = 0, j = succs.length; i < j; i++) {
                            s = succs[i];
                            if (s.level < level) {
                                continue;
                            }
                            var sid = s.bid;
                            if (!preorder[sid]) {
                                worklist.push(s);
                            }
                            else if (!assigned[sid]) {
                                while (preorder[peek(pendingNodes).bid] > preorder[sid]) {
                                    pendingNodes.pop();
                                }
                            }
                        }
                    }
                    return sccs;
                }
                function findLoopHeads(blocks) {
                    var heads = new BoundBlockSet();
                    for (var i = 0, j = blocks.length; i < j; i++) {
                        var block = blocks[i];
                        var spbacks = block.spbacks;
                        if (!spbacks) {
                            continue;
                        }
                        var succs = block.succs;
                        for (var k = 0, l = succs.length; k < l; k++) {
                            var s = succs[k];
                            if (spbacks.get(s.bid)) {
                                heads.set(s.dominator.bid);
                            }
                        }
                    }
                    return heads.members();
                }
                function LoopInfo(scc, loopId) {
                    var body = new BoundBlockSet();
                    body.setBlocks(scc);
                    body.recount();
                    this.id = loopId;
                    this.body = body;
                    this.exit = new BoundBlockSet();
                    this.save = {};
                    this.head = new BoundBlockSet();
                    this.npreds = 0;
                    this._dirtyLocals = null;
                }
                LoopInfo.prototype.getDirtyLocals = function () {
                    if (this._dirtyLocals) {
                        return this._dirtyLocals;
                    }
                    var dirtyLocals = this._dirtyLocals = [];
                    var blocks = this.body.members();
                    blocks.forEach(function (block) {
                        for (var bci = block.position, end = block.end.position; bci <= end; bci++) {
                            var bc = bytecodes[bci];
                            var op = bc.op;
                            switch (op) {
                                case 146 /* inclocal */:
                                case 148 /* declocal */:
                                case 99 /* setlocal */:
                                case 194 /* inclocal_i */:
                                case 195 /* declocal_i */:
                                    dirtyLocals[bc.index] = true;
                                    break;
                                case 50 /* hasnext2 */:
                                    dirtyLocals[bc.index] = true;
                                    dirtyLocals[bc.object] = true;
                                    break;
                                case 212 /* setlocal0 */:
                                case 213 /* setlocal1 */:
                                case 214 /* setlocal2 */:
                                case 215 /* setlocal3 */:
                                    dirtyLocals[op - 212 /* setlocal0 */] = true;
                                    break;
                            }
                        }
                    });
                    return dirtyLocals;
                };
                var heads = findLoopHeads(this.blocks);
                if (heads.length <= 0) {
                    this.markedLoops = true;
                    return true;
                }
                var worklist = heads.sort(function (a, b) {
                    return a.level - b.level;
                });
                var loopId = 0;
                for (var n = worklist.length - 1; n >= 0; n--) {
                    var t = worklist[n];
                    var sccs = findSCCs(t);
                    if (sccs.length === 0) {
                        continue;
                    }
                    for (var i = 0, j = sccs.length; i < j; i++) {
                        var scc = sccs[i];
                        var loop = new LoopInfo(scc, loopId++);
                        for (var k = 0, l = scc.length; k < l; k++) {
                            var h = scc[k];
                            if (h.level === t.level + 1 && !h.loop) {
                                h.loop = loop;
                                loop.head.set(h.bid);
                                var preds = h.preds;
                                for (var pi = 0, pj = preds.length; pi < pj; pi++) {
                                    loop.body.get(preds[pi].bid) && h.npreds--;
                                }
                                loop.npreds += h.npreds;
                            }
                        }
                        for (var k = 0, l = scc.length; k < l; k++) {
                            var h = scc[k];
                            if (h.level === t.level + 1) {
                                h.npreds = loop.npreds;
                            }
                        }
                        loop.head.recount();
                    }
                }
                this.markedLoops = true;
                return true;
            };
            return Analysis;
        })();
        AVM2.Analysis = Analysis;
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Bytecode = Shumway.AVM2.Bytecode;
var Analysis = Shumway.AVM2.Analysis;
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var Option = Shumway.Options.Option;
        var OptionSet = Shumway.Options.OptionSet;
        var shumwayOptions = Shumway.Settings.shumwayOptions;
        var avm2Options = shumwayOptions.register(new OptionSet("AVM2"));
        var Runtime;
        (function (Runtime) {
            var options = avm2Options.register(new OptionSet("Runtime"));
            Runtime.traceExecution = options.register(new Option("tx", "traceExecution", "number", 0, "trace script execution", { choices: { "off": 0, "normal": 2, "verbose": 3 } }));
            Runtime.traceCallExecution = options.register(new Option("txc", "traceCallExecution", "number", 0, "trace call execution", { choices: { "off": 0, "normal": 1, "verbose": 2 } }));
            Runtime.traceFunctions = options.register(new Option("t", "traceFunctions", "number", 0, "trace functions", { choices: { "off": 0, "compiled": 1, "compiled & abc": 2 } }));
            Runtime.traceClasses = options.register(new Option("tc", "traceClasses", "boolean", false, "trace class creation"));
            Runtime.traceDomain = options.register(new Option("td", "traceDomain", "boolean", false, "trace domain property access"));
            Runtime.debuggerMode = options.register(new Option("db", "debuggerMode", "boolean", true, "enable debugger mode"));
            Runtime.globalMultinameAnalysis = options.register(new Option("ga", "globalMultinameAnalysis", "boolean", false, "Global multiname analysis."));
            Runtime.codeCaching = options.register(new Option("cc", "codeCaching", "boolean", false, "Enable code caching."));
            Runtime.compilerEnableExceptions = options.register(new Option("cex", "exceptions", "boolean", false, "Compile functions with catch blocks."));
            Runtime.compilerMaximumMethodSize = options.register(new Option("cmms", "maximumMethodSize", "number", 4 * 1024, "Compiler maximum method size."));
            (function (ExecutionMode) {
                ExecutionMode[ExecutionMode["INTERPRET"] = 0x1] = "INTERPRET";
                ExecutionMode[ExecutionMode["COMPILE"] = 0x2] = "COMPILE";
            })(Runtime.ExecutionMode || (Runtime.ExecutionMode = {}));
            var ExecutionMode = Runtime.ExecutionMode;
        })(Runtime = AVM2.Runtime || (AVM2.Runtime = {}));
        var Compiler;
        (function (Compiler) {
            Compiler.options = avm2Options.register(new OptionSet("Compiler"));
            Compiler.traceLevel = Compiler.options.register(new Option("tc4", "tc4", "number", 0, "Compiler Trace Level"));
            Compiler.breakFilter = Compiler.options.register(new Option("", "break", "string", "", "Set a break point at methods whose qualified name matches this string pattern."));
            Compiler.compileFilter = Compiler.options.register(new Option("", "compile", "string", "", "Only compile methods whose qualified name matches this string pattern."));
            Compiler.enableDirtyLocals = Compiler.options.register(new Option("dl", "dirtyLocals", "boolean", true, "Performe dirty local analysis to minimise PHI nodes."));
        })(Compiler = AVM2.Compiler || (AVM2.Compiler = {}));
        var Verifier;
        (function (Verifier) {
            Verifier.options = avm2Options.register(new OptionSet("Verifier"));
            Verifier.enabled = Verifier.options.register(new Option("verifier", "verifier", "boolean", true, "Enable verifier."));
            Verifier.traceLevel = Verifier.options.register(new Option("tv", "tv", "number", 0, "Verifier Trace Level"));
        })(Verifier = AVM2.Verifier || (AVM2.Verifier = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Namespace = Shumway.AVM2.ABC.Namespace;
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var Runtime;
        (function (Runtime) {
            Runtime.sealConstTraits = false;
            Runtime.useAsAdd = true;
            var useSurrogates = true;
            var callCounter = new Shumway.Metrics.Counter(true);
            var counter = Shumway.Metrics.Counter.instance;
            var Multiname = Shumway.AVM2.ABC.Multiname;
            var Namespace = Shumway.AVM2.ABC.Namespace;
            var ClassInfo = Shumway.AVM2.ABC.ClassInfo;
            var InstanceInfo = Shumway.AVM2.ABC.InstanceInfo;
            var ScriptInfo = Shumway.AVM2.ABC.ScriptInfo;
            var SORT = Shumway.AVM2.ABC.SORT;
            var Trait = Shumway.AVM2.ABC.Trait;
            var IndentingWriter = Shumway.IndentingWriter;
            var hasOwnProperty = Shumway.ObjectUtilities.hasOwnProperty;
            var propertyIsEnumerable = Shumway.ObjectUtilities.propertyIsEnumerable;
            var isNullOrUndefined = Shumway.isNullOrUndefined;
            var boxValue = Shumway.ObjectUtilities.boxValue;
            var assert = Shumway.Debug.assert;
            var defineNonEnumerableGetterOrSetter = Shumway.ObjectUtilities.defineNonEnumerableGetterOrSetter;
            var defineNonEnumerableProperty = Shumway.ObjectUtilities.defineNonEnumerableProperty;
            var defineReadOnlyProperty = Shumway.ObjectUtilities.defineReadOnlyProperty;
            var defineNonEnumerableGetter = Shumway.ObjectUtilities.defineNonEnumerableGetter;
            var toSafeString = Shumway.StringUtilities.toSafeString;
            var toSafeArrayString = Shumway.StringUtilities.toSafeArrayString;
            var TRAIT = Shumway.AVM2.ABC.TRAIT;
            Runtime.VM_SLOTS = "asSlots";
            Runtime.VM_LENGTH = "asLength";
            Runtime.VM_BINDINGS = "asBindings";
            Runtime.VM_NATIVE_PROTOTYPE_FLAG = "asIsNative";
            Runtime.VM_OPEN_METHODS = "asOpenMethods";
            Runtime.VM_OPEN_METHOD_PREFIX = "m";
            Runtime.VM_MEMOIZER_PREFIX = "z";
            Runtime.VM_OPEN_SET_METHOD_PREFIX = "s";
            Runtime.VM_OPEN_GET_METHOD_PREFIX = "g";
            Runtime.SAVED_SCOPE_NAME = "$SS";
            Runtime.VM_METHOD_OVERRIDES = Object.create(null);
            var vmNextInterpreterFunctionId = 1;
            var vmNextCompiledFunctionId = 1;
            var compiledFunctionCount = 0;
            function isNativePrototype(object) {
                return Object.prototype.hasOwnProperty.call(object, Runtime.VM_NATIVE_PROTOTYPE_FLAG);
            }
            Runtime.isNativePrototype = isNativePrototype;
            Runtime.traitsWriter = null;
            Runtime.callWriter = release ? null : new IndentingWriter();
            function patch(patchTargets, value) {
                release || assert(Shumway.isFunction(value));
                for (var i = 0; i < patchTargets.length; i++) {
                    var patchTarget = patchTargets[i];
                    if (Runtime.traceExecution.value >= 3) {
                        var str = "Patching: ";
                        if (patchTarget.name) {
                            str += patchTarget.name;
                        }
                        else if (patchTarget.get) {
                            str += "get " + patchTarget.get;
                        }
                        else if (patchTarget.set) {
                            str += "set " + patchTarget.set;
                        }
                        Runtime.traitsWriter && Runtime.traitsWriter.redLn(str);
                    }
                    if (patchTarget.get) {
                        defineNonEnumerableGetterOrSetter(patchTarget.object, patchTarget.get, value, true);
                    }
                    else if (patchTarget.set) {
                        defineNonEnumerableGetterOrSetter(patchTarget.object, patchTarget.set, value, false);
                    }
                    else {
                        defineNonEnumerableProperty(patchTarget.object, patchTarget.name, value);
                    }
                }
            }
            Runtime.patch = patch;
            function applyMethodTrait(qn, object, binding, isScriptBinding) {
                AVM2.enterTimeline("applyMethodTrait");
                var trait = binding.trait;
                release || assert(trait);
                var isMethod = trait.isMethod();
                var isGetter = trait.isGetter();
                var prefix = isMethod ? Runtime.VM_OPEN_METHOD_PREFIX : isGetter ? Runtime.VM_OPEN_GET_METHOD_PREFIX : Runtime.VM_OPEN_SET_METHOD_PREFIX;
                var traitFunction;
                var patchTargets;
                if (trait.methodInfo.isNative()) {
                    traitFunction = getTraitFunction(trait, binding.scope, binding.natives);
                }
                else {
                    patchTargets = [{ object: object, name: prefix + qn }];
                    traitFunction = Runtime.makeTrampoline(trait, binding.scope, binding.natives, patchTargets, isMethod ? trait.methodInfo.parameters.length : 0, String(trait.name));
                    if (isMethod) {
                        patchTargets.push({ object: object.asOpenMethods, name: qn });
                    }
                    else {
                        var accessorPatchTarget = { object: object };
                        if (isGetter) {
                            accessorPatchTarget.get = qn;
                        }
                        else {
                            accessorPatchTarget.set = qn;
                        }
                        patchTargets.push(accessorPatchTarget);
                    }
                }
                defineNonEnumerableProperty(object, prefix + qn, traitFunction);
                if (isMethod) {
                    object.asOpenMethods[qn] = traitFunction;
                    if (isScriptBinding) {
                        var memoizerTarget = { value: traitFunction };
                        patchTargets && patchTargets.push({ object: memoizerTarget, name: "value" });
                        defineNonEnumerableGetter(object, qn, Runtime.makeMemoizer(qn, memoizerTarget));
                        tryInjectToStringAndValueOfForwarder(object, qn);
                    }
                    else {
                        defineNonEnumerableProperty(object, qn, traitFunction);
                    }
                }
                else {
                    defineNonEnumerableGetterOrSetter(object, qn, traitFunction, isGetter);
                    if (isScriptBinding) {
                        defineNonEnumerableProperty(object, prefix + qn, traitFunction);
                    }
                }
                AVM2.leaveTimeline();
            }
            Runtime.applyMethodTrait = applyMethodTrait;
            function getNamespaceResolutionMap(namespaces) {
                var self = this;
                var map = self.resolutionMap[namespaces.runtimeId];
                if (map) {
                    return map;
                }
                return createNamespaceResolutionMap(self, namespaces);
            }
            Runtime.getNamespaceResolutionMap = getNamespaceResolutionMap;
            function createNamespaceResolutionMap(object, namespaces) {
                var map = object.resolutionMap[namespaces.runtimeId] = Shumway.ObjectUtilities.createMap();
                var bindings = object.bindings;
                for (var key in bindings.map) {
                    var multiname = key;
                    var trait = bindings.map[key].trait;
                    if (trait.isGetter() || trait.isSetter()) {
                        multiname = multiname.substring(Runtime.Binding.KEY_PREFIX_LENGTH);
                    }
                    multiname = Multiname.fromQualifiedName(multiname);
                    if (multiname.getNamespace().inNamespaceSet(namespaces)) {
                        map[multiname.getName()] = Multiname.getQualifiedName(trait.name);
                    }
                }
                return map;
            }
            function resolveMultinameProperty(namespaces, name, flags) {
                var self = this;
                if (isNullOrUndefined(name)) {
                    name = String(asCoerceString(name));
                }
                else if (typeof name === "object") {
                    name = String(name);
                }
                if (Shumway.isNumeric(name)) {
                    return Shumway.toNumber(name);
                }
                if (!namespaces) {
                    return Multiname.getPublicQualifiedName(name);
                }
                if (namespaces.length > 1) {
                    var resolved = self.getNamespaceResolutionMap(namespaces)[name];
                    if (resolved)
                        return resolved;
                    return Multiname.getPublicQualifiedName(name);
                }
                else {
                    return Multiname.qualifyName(namespaces[0], name);
                }
            }
            Runtime.resolveMultinameProperty = resolveMultinameProperty;
            function asGetPublicProperty(name) {
                var self = this;
                return self.asGetProperty(undefined, name, 0);
            }
            Runtime.asGetPublicProperty = asGetPublicProperty;
            function asGetProperty(namespaces, name, flags) {
                var self = this;
                var resolved = self.resolveMultinameProperty(namespaces, name, flags);
                if (self.asGetNumericProperty && Multiname.isNumeric(resolved)) {
                    return self.asGetNumericProperty(resolved);
                }
                return self[resolved];
            }
            Runtime.asGetProperty = asGetProperty;
            function asGetResolvedStringProperty(resolved) {
                release || assert(Shumway.isString(resolved));
                return this[resolved];
            }
            Runtime.asGetResolvedStringProperty = asGetResolvedStringProperty;
            function asCallResolvedStringProperty(resolved, isLex, args) {
                var self = this;
                var receiver = isLex ? null : this;
                var openMethods = self.asOpenMethods;
                var method;
                if (receiver && openMethods && openMethods[resolved]) {
                    method = openMethods[resolved];
                }
                else {
                    method = self[resolved];
                }
                return method.asApply(receiver, args);
            }
            Runtime.asCallResolvedStringProperty = asCallResolvedStringProperty;
            function asGetResolvedStringPropertyFallback(resolved) {
                var self = this;
                var name = Multiname.getNameFromPublicQualifiedName(resolved);
                return self.asGetProperty([Namespace.PUBLIC], name, 0);
            }
            Runtime.asGetResolvedStringPropertyFallback = asGetResolvedStringPropertyFallback;
            function asSetPublicProperty(name, value) {
                var self = this;
                return self.asSetProperty(undefined, name, 0, value);
            }
            Runtime.asSetPublicProperty = asSetPublicProperty;
            Runtime.forwardValueOf = new Function("", 'return this.' + Multiname.VALUE_OF + ".apply(this, arguments)" + "//# sourceURL=forward-valueOf.as");
            Runtime.forwardToString = new Function("", 'return this.' + Multiname.TO_STRING + ".apply(this, arguments)" + "//# sourceURL=forward-toString.as");
            function tryInjectToStringAndValueOfForwarder(self, resolved) {
                if (resolved === Multiname.VALUE_OF) {
                    defineNonEnumerableProperty(self, "original_valueOf", self.valueOf);
                    self.valueOf = Runtime.forwardValueOf;
                }
                else if (resolved === Multiname.TO_STRING) {
                    defineNonEnumerableProperty(self, "original_toString", self.toString);
                    self.toString = Runtime.forwardToString;
                }
            }
            function asSetProperty(namespaces, name, flags, value) {
                var self = this;
                if (typeof name === "object") {
                    name = String(name);
                }
                var resolved = self.resolveMultinameProperty(namespaces, name, flags);
                if (self.asSetNumericProperty && Multiname.isNumeric(resolved)) {
                    return self.asSetNumericProperty(resolved, value);
                }
                var slotInfo = self.asSlots.byQN[resolved];
                if (slotInfo) {
                    if (slotInfo.isConst) {
                    }
                    var type = slotInfo.type;
                    if (type && type.coerce) {
                        value = type.coerce(value);
                    }
                }
                tryInjectToStringAndValueOfForwarder(self, resolved);
                self[resolved] = value;
            }
            Runtime.asSetProperty = asSetProperty;
            function asDefinePublicProperty(name, descriptor) {
                var self = this;
                return self.asDefineProperty(undefined, name, 0, descriptor);
            }
            Runtime.asDefinePublicProperty = asDefinePublicProperty;
            function asDefineProperty(namespaces, name, flags, descriptor) {
                var self = this;
                if (typeof name === "object") {
                    name = String(name);
                }
                var resolved = self.resolveMultinameProperty(namespaces, name, flags);
                Object.defineProperty(self, resolved, descriptor);
            }
            Runtime.asDefineProperty = asDefineProperty;
            function asGetPropertyDescriptor(namespaces, name, flags) {
                var self = this;
                if (typeof name === "object") {
                    name = String(name);
                }
                var resolved = self.resolveMultinameProperty(namespaces, name, flags);
                return Object.getOwnPropertyDescriptor(self, resolved);
            }
            Runtime.asGetPropertyDescriptor = asGetPropertyDescriptor;
            function asCallPublicProperty(name, args) {
                var self = this;
                return self.asCallProperty(undefined, name, 0, false, args);
            }
            Runtime.asCallPublicProperty = asCallPublicProperty;
            function asCallProperty(namespaces, name, flags, isLex, args) {
                var self = this;
                if (Runtime.traceCallExecution.value) {
                    var receiverClassName = self.class ? self.class + " " : "";
                    Runtime.callWriter.enter("call " + receiverClassName + name + "(" + toSafeArrayString(args) + ") #" + callCounter.count(name));
                }
                var receiver = isLex ? null : self;
                var result;
                var method;
                var resolved = self.resolveMultinameProperty(namespaces, name, flags);
                if (self.asGetNumericProperty && Multiname.isNumeric(resolved)) {
                    method = self.asGetNumericProperty(resolved);
                }
                else {
                    var openMethods = self.asOpenMethods;
                    if (receiver && openMethods && openMethods[resolved]) {
                        method = openMethods[resolved];
                    }
                    else {
                        method = self[resolved];
                    }
                }
                result = method.asApply(receiver, args);
                Runtime.traceCallExecution.value > 0 && Runtime.callWriter.leave("return " + toSafeString(result));
                return result;
            }
            Runtime.asCallProperty = asCallProperty;
            function asCallSuper(scope, namespaces, name, flags, args) {
                var self = this;
                if (Runtime.traceCallExecution.value) {
                    var receiverClassName = self.class ? self.class + " " : "";
                    Runtime.callWriter.enter("call super " + receiverClassName + name + "(" + toSafeArrayString(args) + ") #" + callCounter.count(name));
                }
                var baseClass = scope.object.baseClass;
                var resolved = baseClass.traitsPrototype.resolveMultinameProperty(namespaces, name, flags);
                var openMethods = baseClass.traitsPrototype.asOpenMethods;
                release || assert(openMethods && openMethods[resolved]);
                var method = openMethods[resolved];
                var result = method.asApply(this, args);
                Runtime.traceCallExecution.value > 0 && Runtime.callWriter.leave("return " + toSafeString(result));
                return result;
            }
            Runtime.asCallSuper = asCallSuper;
            function asSetSuper(scope, namespaces, name, flags, value) {
                var self = this;
                if (Runtime.traceCallExecution.value) {
                    var receiverClassName = self.class ? self.class + " " : "";
                    Runtime.callWriter.enter("set super " + receiverClassName + name + "(" + toSafeString(value) + ") #" + callCounter.count(name));
                }
                var baseClass = scope.object.baseClass;
                var resolved = baseClass.traitsPrototype.resolveMultinameProperty(namespaces, name, flags);
                if (self.asSlots.byQN[resolved]) {
                    this.asSetProperty(namespaces, name, flags, value);
                }
                else {
                    baseClass.traitsPrototype[Runtime.VM_OPEN_SET_METHOD_PREFIX + resolved].call(this, value);
                }
                Runtime.traceCallExecution.value > 0 && Runtime.callWriter.leave("");
            }
            Runtime.asSetSuper = asSetSuper;
            function asGetSuper(scope, namespaces, name, flags) {
                var self = this;
                if (Runtime.traceCallExecution.value) {
                    var receiver = self.class ? self.class + " " : "";
                    Runtime.callWriter.enter("get super " + receiver + name + " #" + callCounter.count(name));
                }
                var baseClass = scope.object.baseClass;
                var resolved = baseClass.traitsPrototype.resolveMultinameProperty(namespaces, name, flags);
                var result;
                if (self.asSlots.byQN[resolved]) {
                    result = this.asGetProperty(namespaces, name, flags);
                }
                else {
                    result = baseClass.traitsPrototype[Runtime.VM_OPEN_GET_METHOD_PREFIX + resolved].call(this);
                }
                Runtime.traceCallExecution.value > 0 && Runtime.callWriter.leave("return " + toSafeString(result));
                return result;
            }
            Runtime.asGetSuper = asGetSuper;
            function construct(cls, args) {
                if (cls.classInfo) {
                    var qn = Multiname.getQualifiedName(cls.classInfo.instanceInfo.name);
                    if (qn === Multiname.String) {
                        return String.asApply(null, args);
                    }
                    if (qn === Multiname.Boolean) {
                        return Boolean.asApply(null, args);
                    }
                    if (qn === Multiname.Number) {
                        return Number.asApply(null, args);
                    }
                }
                var c = cls.instanceConstructor;
                var a = args;
                switch (args.length) {
                    case 0:
                        return new c();
                    case 1:
                        return new c(a[0]);
                    case 2:
                        return new c(a[0], a[1]);
                    case 3:
                        return new c(a[0], a[1], a[2]);
                    case 4:
                        return new c(a[0], a[1], a[2], a[3]);
                    case 5:
                        return new c(a[0], a[1], a[2], a[3], a[4]);
                    case 6:
                        return new c(a[0], a[1], a[2], a[3], a[4], a[5]);
                    case 7:
                        return new c(a[0], a[1], a[2], a[3], a[4], a[5], a[6]);
                    case 8:
                        return new c(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7]);
                    case 9:
                        return new c(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);
                    case 10:
                        return new c(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9]);
                }
                var applyArguments = [];
                for (var i = 0; i < args.length; i++) {
                    applyArguments[i + 1] = args[i];
                }
                return new (Function.bind.asApply(c, applyArguments));
            }
            Runtime.construct = construct;
            function asConstructProperty(namespaces, name, flags, args) {
                var self = this;
                var constructor = self.asGetProperty(namespaces, name, flags);
                if (Runtime.traceCallExecution.value) {
                    Runtime.callWriter.enter("construct " + name + "(" + toSafeArrayString(args) + ") #" + callCounter.count(name));
                }
                var result = construct(constructor, args);
                Runtime.traceCallExecution.value > 0 && Runtime.callWriter.leave("return " + toSafeString(result));
                return result;
            }
            Runtime.asConstructProperty = asConstructProperty;
            function asHasProperty(namespaces, name, flags) {
                var self = this;
                return self.resolveMultinameProperty(namespaces, name, flags) in this;
            }
            Runtime.asHasProperty = asHasProperty;
            function asHasOwnProperty(namespaces, name, flags) {
                var self = this;
                var resolved = self.resolveMultinameProperty(namespaces, name, flags);
                return hasOwnProperty(self, resolved) || self.asBindings.indexOf(resolved) >= 0;
            }
            Runtime.asHasOwnProperty = asHasOwnProperty;
            function asPropertyIsEnumerable(namespaces, name, flags) {
                var self = this;
                var resolved = self.resolveMultinameProperty(namespaces, name, flags);
                return propertyIsEnumerable(self, resolved);
            }
            Runtime.asPropertyIsEnumerable = asPropertyIsEnumerable;
            function asDeleteProperty(namespaces, name, flags) {
                var self = this;
                if (self.asHasTraitProperty(namespaces, name, flags)) {
                    return false;
                }
                var resolved = self.resolveMultinameProperty(namespaces, name, flags);
                return delete self[resolved];
            }
            Runtime.asDeleteProperty = asDeleteProperty;
            function asHasTraitProperty(namespaces, name, flags) {
                var self = this;
                var resolved = self.resolveMultinameProperty(namespaces, name, flags);
                return self.asBindings.indexOf(resolved) >= 0;
            }
            Runtime.asHasTraitProperty = asHasTraitProperty;
            function asGetNumericProperty(i) {
                return this[i];
            }
            Runtime.asGetNumericProperty = asGetNumericProperty;
            function asSetNumericProperty(i, v) {
                this[i] = v;
            }
            Runtime.asSetNumericProperty = asSetNumericProperty;
            function asGetDescendants(namespaces, name, flags) {
                Shumway.Debug.notImplemented("asGetDescendants");
            }
            Runtime.asGetDescendants = asGetDescendants;
            function asNextNameIndex(index) {
                var self = this;
                if (index === 0) {
                    defineNonEnumerableProperty(self, "asEnumerableKeys", self.asGetEnumerableKeys());
                }
                var asEnumerableKeys = self.asEnumerableKeys;
                while (index < asEnumerableKeys.length) {
                    if (self.asHasProperty(undefined, asEnumerableKeys[index], 0)) {
                        return index + 1;
                    }
                    index++;
                }
                return 0;
            }
            Runtime.asNextNameIndex = asNextNameIndex;
            function asNextName(index) {
                var self = this;
                var asEnumerableKeys = self.asEnumerableKeys;
                release || assert(asEnumerableKeys && index > 0 && index < asEnumerableKeys.length + 1);
                return asEnumerableKeys[index - 1];
            }
            Runtime.asNextName = asNextName;
            function asNextValue(index) {
                return this.asGetPublicProperty(this.asNextName(index));
            }
            Runtime.asNextValue = asNextValue;
            function asHasNext2(hasNext2Info) {
                if (isNullOrUndefined(hasNext2Info.object)) {
                    hasNext2Info.index = 0;
                    hasNext2Info.object = null;
                    return;
                }
                var object = boxValue(hasNext2Info.object);
                var nextIndex = object.asNextNameIndex(hasNext2Info.index);
                if (nextIndex > 0) {
                    hasNext2Info.index = nextIndex;
                    hasNext2Info.object = object;
                    return;
                }
                while (true) {
                    var object = Object.getPrototypeOf(object);
                    if (!object) {
                        hasNext2Info.index = 0;
                        hasNext2Info.object = null;
                        return;
                    }
                    nextIndex = object.asNextNameIndex(0);
                    if (nextIndex > 0) {
                        hasNext2Info.index = nextIndex;
                        hasNext2Info.object = object;
                        return;
                    }
                }
                hasNext2Info.index = 0;
                hasNext2Info.object = null;
                return;
            }
            Runtime.asHasNext2 = asHasNext2;
            function asGetEnumerableKeys() {
                var self = this;
                if (self instanceof String || self instanceof Number) {
                    return [];
                }
                var keys = Object.keys(this);
                var result = [];
                for (var i = 0; i < keys.length; i++) {
                    var key = keys[i];
                    if (Shumway.isNumeric(key)) {
                        result.push(key);
                    }
                    else {
                        var name = Multiname.stripPublicQualifier(key);
                        if (name !== undefined) {
                            result.push(name);
                        }
                    }
                }
                return result;
            }
            Runtime.asGetEnumerableKeys = asGetEnumerableKeys;
            function asTypeOf(x) {
                if (x) {
                    if (x.constructor === String) {
                        return "string";
                    }
                    else if (x.constructor === Number) {
                        return "number";
                    }
                    else if (x.constructor === Boolean) {
                        return "boolean";
                    }
                    else if (x instanceof Shumway.AVM2.AS.ASXML || x instanceof Shumway.AVM2.AS.ASXMLList) {
                        return "xml";
                    }
                    else if (Shumway.AVM2.AS.ASClass.isType(x)) {
                        return "object";
                    }
                }
                return typeof x;
            }
            Runtime.asTypeOf = asTypeOf;
            function publicizeProperties(object) {
                var keys = Object.keys(object);
                for (var i = 0; i < keys.length; i++) {
                    var k = keys[i];
                    if (!Multiname.isPublicQualifiedName(k)) {
                        var v = object[k];
                        object[Multiname.getPublicQualifiedName(k)] = v;
                        delete object[k];
                    }
                }
            }
            Runtime.publicizeProperties = publicizeProperties;
            function asGetSlot(object, index) {
                return object[object.asSlots.byID[index].name];
            }
            Runtime.asGetSlot = asGetSlot;
            function asSetSlot(object, index, value) {
                var slotInfo = object.asSlots.byID[index];
                if (slotInfo.const) {
                    return;
                }
                var name = slotInfo.name;
                var type = slotInfo.type;
                if (type && type.coerce) {
                    object[name] = type.coerce(value);
                }
                else {
                    object[name] = value;
                }
            }
            Runtime.asSetSlot = asSetSlot;
            function asCheckVectorSetNumericProperty(i, length, fixed) {
                if (i < 0 || i > length || (i === length && fixed) || !Shumway.isNumeric(i)) {
                    throwError("RangeError", AVM2.Errors.OutOfRangeError, i, length);
                }
            }
            Runtime.asCheckVectorSetNumericProperty = asCheckVectorSetNumericProperty;
            function asCheckVectorGetNumericProperty(i, length) {
                if (i < 0 || i >= length || !Shumway.isNumeric(i)) {
                    throwError("RangeError", AVM2.Errors.OutOfRangeError, i, length);
                }
            }
            Runtime.asCheckVectorGetNumericProperty = asCheckVectorGetNumericProperty;
            function checkNullParameter(argument, name) {
                if (!argument) {
                    throwError('TypeError', AVM2.Errors.NullPointerError, name);
                }
            }
            Runtime.checkNullParameter = checkNullParameter;
            function checkParameterType(argument, name, type) {
                checkNullParameter(argument, name);
                if (!type.isType(argument)) {
                    throwError('TypeError', AVM2.Errors.CheckTypeFailedError, argument, type.classInfo.instanceInfo.name.getOriginalName());
                }
            }
            Runtime.checkParameterType = checkParameterType;
            function throwError(className, error, replacement1, replacement2, replacement3, replacement4) {
                if (error.fqn) {
                    className = error.fqn;
                }
                var message = Shumway.AVM2.formatErrorMessage.apply(null, Array.prototype.slice.call(arguments, 1));
                throwErrorFromVM(Runtime.AVM2.currentDomain(), className, message, error.code);
            }
            Runtime.throwError = throwError;
            function throwErrorFromVM(domain, errorClass, message, id) {
                var error = new (domain.getClass(errorClass)).instanceConstructor(message, id);
                throw error;
            }
            function translateError(domain, error) {
                if (error instanceof Error) {
                    var type = domain.getClass(error.name);
                    if (type) {
                        return new type.instanceConstructor(Shumway.AVM2.translateErrorMessage(error));
                    }
                    Shumway.Debug.unexpected("Can't translate error: " + error);
                }
                return error;
            }
            Runtime.translateError = translateError;
            function asIsInstanceOf(type, value) {
                return type.isInstanceOf(value);
            }
            Runtime.asIsInstanceOf = asIsInstanceOf;
            function asIsType(type, value) {
                return type.isType(value);
            }
            Runtime.asIsType = asIsType;
            function asAsType(type, value) {
                return asIsType(type, value) ? value : null;
            }
            Runtime.asAsType = asAsType;
            function isXMLType(x) {
                return x instanceof AVM2.AS.ASXML || x instanceof AVM2.AS.ASXMLList || x instanceof AVM2.AS.ASQName || x instanceof AVM2.AS.ASNamespace;
            }
            function escapeXMLAttribute(value) {
                return AVM2.AS.escapeAttributeValue(value);
            }
            Runtime.escapeXMLAttribute = escapeXMLAttribute;
            function escapeXMLElement(value) {
                return AVM2.AS.escapeElementValue(value);
            }
            Runtime.escapeXMLElement = escapeXMLElement;
            function asEquals(left, right) {
                if (isXMLType(left)) {
                    return left.equals(right);
                }
                if (isXMLType(right)) {
                    return right.equals(left);
                }
                return left == right;
            }
            Runtime.asEquals = asEquals;
            function asCoerceByMultiname(methodInfo, multiname, value) {
                release || assert(multiname.isQName());
                switch (Multiname.getQualifiedName(multiname)) {
                    case Multiname.Int:
                        return asCoerceInt(value);
                    case Multiname.Uint:
                        return asCoerceUint(value);
                    case Multiname.String:
                        return asCoerceString(value);
                    case Multiname.Number:
                        return asCoerceNumber(value);
                    case Multiname.Boolean:
                        return asCoerceBoolean(value);
                    case Multiname.Object:
                        return asCoerceObject(value);
                }
                return asCoerce(methodInfo.abc.applicationDomain.getType(multiname), value);
            }
            Runtime.asCoerceByMultiname = asCoerceByMultiname;
            function asCoerce(type, value) {
                return type.coerce(value);
            }
            Runtime.asCoerce = asCoerce;
            function asCoerceString(x) {
                if (typeof x === "string") {
                    return x;
                }
                else if (x == undefined) {
                    return null;
                }
                return x + '';
            }
            Runtime.asCoerceString = asCoerceString;
            function asCoerceInt(x) {
                return x | 0;
            }
            Runtime.asCoerceInt = asCoerceInt;
            function asCoerceUint(x) {
                return x >>> 0;
            }
            Runtime.asCoerceUint = asCoerceUint;
            function asCoerceNumber(x) {
                return +x;
            }
            Runtime.asCoerceNumber = asCoerceNumber;
            function asCoerceBoolean(x) {
                return !!x;
            }
            Runtime.asCoerceBoolean = asCoerceBoolean;
            function asCoerceObject(x) {
                if (x instanceof Boolean) {
                    return x.valueOf();
                }
                else if (x == undefined) {
                    return null;
                }
                if (typeof x === 'string' || typeof x === 'number') {
                    return x;
                }
                return Object(x);
            }
            Runtime.asCoerceObject = asCoerceObject;
            function asDefaultCompareFunction(a, b) {
                return String(a).localeCompare(String(b));
            }
            Runtime.asDefaultCompareFunction = asDefaultCompareFunction;
            function asCompare(a, b, options, compareFunction) {
                release || Shumway.Debug.assertNotImplemented(!(options & 4 /* UNIQUESORT */), "UNIQUESORT");
                release || Shumway.Debug.assertNotImplemented(!(options & 8 /* RETURNINDEXEDARRAY */), "RETURNINDEXEDARRAY");
                var result = 0;
                if (!compareFunction) {
                    compareFunction = asDefaultCompareFunction;
                }
                if (options & 1 /* CASEINSENSITIVE */) {
                    a = String(a).toLowerCase();
                    b = String(b).toLowerCase();
                }
                if (options & 16 /* NUMERIC */) {
                    a = Shumway.toNumber(a);
                    b = Shumway.toNumber(b);
                    result = a < b ? -1 : (a > b ? 1 : 0);
                }
                else {
                    result = compareFunction(a, b);
                }
                if (options & 2 /* DESCENDING */) {
                    result *= -1;
                }
                return result;
            }
            Runtime.asCompare = asCompare;
            function asAdd(l, r) {
                if (typeof l === "string" || typeof r === "string") {
                    return String(l) + String(r);
                }
                if (isXMLCollection(l) && isXMLCollection(r)) {
                    return Shumway.AVM2.AS.ASXMLList.addXML(l, r);
                }
                return l + r;
            }
            Runtime.asAdd = asAdd;
            function isXMLCollection(x) {
                return x instanceof AVM2.AS.ASXML || x instanceof AVM2.AS.ASXMLList;
            }
            function getDescendants(object, mn) {
                if (!isXMLCollection(object)) {
                    throw "Not XML object in getDescendants";
                }
                return object.descendants(mn);
            }
            Runtime.getDescendants = getDescendants;
            function checkFilter(value) {
                if (!value.class || !isXMLCollection(value)) {
                    throw "TypeError operand of childFilter not of XML type";
                }
                return value;
            }
            Runtime.checkFilter = checkFilter;
            function initializeGlobalObject(global) {
                ["Object", "Number", "Boolean", "String", "Array", "Date", "RegExp"].forEach(function (name) {
                    defineReadOnlyProperty(global[name].prototype, Runtime.VM_NATIVE_PROTOTYPE_FLAG, true);
                });
                defineNonEnumerableProperty(global.Object.prototype, "getNamespaceResolutionMap", getNamespaceResolutionMap);
                defineNonEnumerableProperty(global.Object.prototype, "resolveMultinameProperty", resolveMultinameProperty);
                defineNonEnumerableProperty(global.Object.prototype, "asGetProperty", asGetProperty);
                defineNonEnumerableProperty(global.Object.prototype, "asGetPublicProperty", asGetPublicProperty);
                defineNonEnumerableProperty(global.Object.prototype, "asGetResolvedStringProperty", asGetResolvedStringProperty);
                defineNonEnumerableProperty(global.Object.prototype, "asSetProperty", asSetProperty);
                defineNonEnumerableProperty(global.Object.prototype, "asSetPublicProperty", asSetPublicProperty);
                defineNonEnumerableProperty(global.Object.prototype, "asDefineProperty", asDefineProperty);
                defineNonEnumerableProperty(global.Object.prototype, "asDefinePublicProperty", asDefinePublicProperty);
                defineNonEnumerableProperty(global.Object.prototype, "asGetPropertyDescriptor", asGetPropertyDescriptor);
                defineNonEnumerableProperty(global.Object.prototype, "asCallProperty", asCallProperty);
                defineNonEnumerableProperty(global.Object.prototype, "asCallSuper", asCallSuper);
                defineNonEnumerableProperty(global.Object.prototype, "asGetSuper", asGetSuper);
                defineNonEnumerableProperty(global.Object.prototype, "asSetSuper", asSetSuper);
                defineNonEnumerableProperty(global.Object.prototype, "asCallPublicProperty", asCallPublicProperty);
                defineNonEnumerableProperty(global.Object.prototype, "asCallResolvedStringProperty", asCallResolvedStringProperty);
                defineNonEnumerableProperty(global.Object.prototype, "asConstructProperty", asConstructProperty);
                defineNonEnumerableProperty(global.Object.prototype, "asHasProperty", asHasProperty);
                defineNonEnumerableProperty(global.Object.prototype, "asHasPropertyInternal", asHasProperty);
                defineNonEnumerableProperty(global.Object.prototype, "asHasOwnProperty", asHasOwnProperty);
                defineNonEnumerableProperty(global.Object.prototype, "asPropertyIsEnumerable", asPropertyIsEnumerable);
                defineNonEnumerableProperty(global.Object.prototype, "asHasTraitProperty", asHasTraitProperty);
                defineNonEnumerableProperty(global.Object.prototype, "asDeleteProperty", asDeleteProperty);
                defineNonEnumerableProperty(global.Object.prototype, "asHasNext2", asHasNext2);
                defineNonEnumerableProperty(global.Object.prototype, "asNextName", asNextName);
                defineNonEnumerableProperty(global.Object.prototype, "asNextValue", asNextValue);
                defineNonEnumerableProperty(global.Object.prototype, "asNextNameIndex", asNextNameIndex);
                defineNonEnumerableProperty(global.Object.prototype, "asGetEnumerableKeys", asGetEnumerableKeys);
                defineNonEnumerableProperty(global.Function.prototype, "asCall", global.Function.prototype.call);
                defineNonEnumerableProperty(global.Function.prototype, "asApply", global.Function.prototype.apply);
                [
                    "Array",
                    "Object",
                    "Int8Array",
                    "Uint8Array",
                    "Uint8ClampedArray",
                    "Int16Array",
                    "Uint16Array",
                    "Int32Array",
                    "Uint32Array",
                    "Float32Array",
                    "Float64Array"
                ].forEach(function (name) {
                    if (!(name in global)) {
                        console.warn(name + ' was not found in globals');
                        return;
                    }
                    defineNonEnumerableProperty(global[name].prototype, "asGetNumericProperty", asGetNumericProperty);
                    defineNonEnumerableProperty(global[name].prototype, "asSetNumericProperty", asSetNumericProperty);
                });
                global.Array.prototype.asGetProperty = function (namespaces, name, flags) {
                    if (typeof name === "number") {
                        return this[name];
                    }
                    return asGetProperty.call(this, namespaces, name, flags);
                };
                global.Array.prototype.asSetProperty = function (namespaces, name, flags, value) {
                    if (typeof name === "number") {
                        this[name] = value;
                        return;
                    }
                    return asSetProperty.call(this, namespaces, name, flags, value);
                };
            }
            Runtime.initializeGlobalObject = initializeGlobalObject;
            initializeGlobalObject(jsGlobal);
            function nameInTraits(object, qn) {
                if (object.hasOwnProperty(Runtime.VM_BINDINGS) && object.hasOwnProperty(qn)) {
                    return true;
                }
                var proto = Object.getPrototypeOf(object);
                return proto.hasOwnProperty(Runtime.VM_BINDINGS) && proto.hasOwnProperty(qn);
            }
            Runtime.nameInTraits = nameInTraits;
            function CatchScopeObject(domain, trait) {
                if (trait) {
                    new Runtime.CatchBindings(new Runtime.Scope(null, this), trait).applyTo(domain, this);
                }
            }
            Runtime.CatchScopeObject = CatchScopeObject;
            var Global = (function () {
                function Global(script) {
                    this.scriptInfo = script;
                    script.global = this;
                    this.scriptBindings = new Runtime.ScriptBindings(script, new Runtime.Scope(null, this, false));
                    this.scriptBindings.applyTo(script.abc.applicationDomain, this);
                    script.loaded = true;
                }
                Global.prototype.toString = function () {
                    return "[object global]";
                };
                Global.prototype.isExecuted = function () {
                    return this.scriptInfo.executed;
                };
                Global.prototype.isExecuting = function () {
                    return this.scriptInfo.executing;
                };
                Global.prototype.ensureExecuted = function () {
                    Shumway.AVM2.Runtime.ensureScriptIsExecuted(this.scriptInfo);
                };
                return Global;
            })();
            Runtime.Global = Global;
            defineNonEnumerableProperty(Global.prototype, Multiname.getPublicQualifiedName("toString"), function () {
                return this.toString();
            });
            var LazyInitializer = (function () {
                function LazyInitializer(target) {
                    this._isLazyInitializer = true;
                    release || assert(!target.asLazyInitializer);
                    this._target = target;
                    this._resolved = null;
                }
                LazyInitializer.create = function (target) {
                    if (target.asLazyInitializer) {
                        return target.asLazyInitializer;
                    }
                    return target.asLazyInitializer = new LazyInitializer(target);
                };
                LazyInitializer.prototype.resolve = function () {
                    if (this._resolved) {
                        return this._resolved;
                    }
                    if (this._target instanceof ScriptInfo) {
                        var scriptInfo = this._target;
                        Runtime.ensureScriptIsExecuted(scriptInfo, "Lazy Initializer");
                        return this._resolved = scriptInfo.global;
                    }
                    else if (this._target instanceof ClassInfo) {
                        var classInfo = this._target;
                        if (classInfo.classObject) {
                            return this._resolved = classInfo.classObject;
                        }
                        return this._resolved = classInfo.abc.applicationDomain.getProperty(classInfo.instanceInfo.name, false, false);
                    }
                    else {
                        Shumway.Debug.notImplemented(String(this._target));
                        return;
                    }
                };
                return LazyInitializer;
            })();
            Runtime.LazyInitializer = LazyInitializer;
            function forEachPublicProperty(object, fn, self) {
                if (!object.asBindings) {
                    for (var key in object) {
                        fn.call(self, key, object[key]);
                    }
                    return;
                }
                for (var key in object) {
                    if (Shumway.isNumeric(key)) {
                        fn.call(self, key, object[key]);
                    }
                    else if (Multiname.isPublicQualifiedName(key) && object.asBindings.indexOf(key) < 0) {
                        var name = Multiname.stripPublicQualifier(key);
                        fn.call(self, name, object[key]);
                    }
                }
            }
            Runtime.forEachPublicProperty = forEachPublicProperty;
            function wrapJSObject(object) {
                var wrapper = Object.create(object);
                for (var i in object) {
                    Object.defineProperty(wrapper, Multiname.getPublicQualifiedName(i), (function (object, i) {
                        return {
                            get: function () {
                                return object[i];
                            },
                            set: function (value) {
                                object[i] = value;
                            },
                            enumerable: true
                        };
                    })(object, i));
                }
                return wrapper;
            }
            Runtime.wrapJSObject = wrapJSObject;
            function asCreateActivation(methodInfo) {
                return Object.create(methodInfo.activationPrototype);
            }
            Runtime.asCreateActivation = asCreateActivation;
            var GlobalMultinameResolver = (function () {
                function GlobalMultinameResolver() {
                }
                GlobalMultinameResolver.updateTraits = function (traits) {
                    for (var i = 0; i < traits.length; i++) {
                        var trait = traits[i];
                        var name = trait.name.name;
                        var namespace = trait.name.getNamespace();
                        if (!namespace.isDynamic()) {
                            GlobalMultinameResolver.hasNonDynamicNamespaces[name] = true;
                            if (GlobalMultinameResolver.wasResolved[name]) {
                                Shumway.Debug.notImplemented("We have to the undo the optimization, " + name + " can now bind to " + namespace);
                            }
                        }
                    }
                };
                GlobalMultinameResolver.loadAbc = function (abc) {
                    if (!Runtime.globalMultinameAnalysis.value) {
                        return;
                    }
                    var scripts = abc.scripts;
                    var classes = abc.classes;
                    var methods = abc.methods;
                    for (var i = 0; i < scripts.length; i++) {
                        GlobalMultinameResolver.updateTraits(scripts[i].traits);
                    }
                    for (var i = 0; i < classes.length; i++) {
                        GlobalMultinameResolver.updateTraits(classes[i].traits);
                        GlobalMultinameResolver.updateTraits(classes[i].instanceInfo.traits);
                    }
                    for (var i = 0; i < methods.length; i++) {
                        if (methods[i].traits) {
                            GlobalMultinameResolver.updateTraits(methods[i].traits);
                        }
                    }
                };
                GlobalMultinameResolver.resolveMultiname = function (multiname) {
                    var name = multiname.name;
                    if (GlobalMultinameResolver.hasNonDynamicNamespaces[name]) {
                        return;
                    }
                    GlobalMultinameResolver.wasResolved[name] = true;
                    return new Multiname([Namespace.PUBLIC], multiname.name, 0);
                };
                GlobalMultinameResolver.hasNonDynamicNamespaces = Object.create(null);
                GlobalMultinameResolver.wasResolved = Object.create(null);
                return GlobalMultinameResolver;
            })();
            Runtime.GlobalMultinameResolver = GlobalMultinameResolver;
            var ActivationInfo = (function () {
                function ActivationInfo(methodInfo) {
                    this.methodInfo = methodInfo;
                }
                return ActivationInfo;
            })();
            Runtime.ActivationInfo = ActivationInfo;
            var HasNext2Info = (function () {
                function HasNext2Info(object, index) {
                    this.object = object;
                    this.index = index;
                }
                return HasNext2Info;
            })();
            Runtime.HasNext2Info = HasNext2Info;
            function sliceArguments(args, offset) {
                if (offset === void 0) { offset = 0; }
                return Array.prototype.slice.call(args, offset);
            }
            Runtime.sliceArguments = sliceArguments;
            function canCompile(mi) {
                if (!mi.hasBody) {
                    return false;
                }
                if (mi.hasExceptions() && !Runtime.compilerEnableExceptions.value) {
                    return false;
                }
                else if (mi.hasSetsDxns()) {
                    return false;
                }
                else if (mi.code.length > Runtime.compilerMaximumMethodSize.value) {
                    return false;
                }
                return true;
            }
            Runtime.canCompile = canCompile;
            function shouldCompile(mi) {
                if (!canCompile(mi)) {
                    return false;
                }
                if (mi.isClassInitializer || mi.isScriptInitializer) {
                    return false;
                }
                return true;
            }
            Runtime.shouldCompile = shouldCompile;
            function forceCompile(mi) {
                if (mi.hasExceptions()) {
                    return false;
                }
                var holder = mi.holder;
                if (holder instanceof ClassInfo) {
                    holder = holder.instanceInfo;
                }
                if (holder instanceof InstanceInfo) {
                    var packageName = holder.name.namespaces[0].uri;
                    switch (packageName) {
                        case "flash.geom":
                        case "flash.events":
                            return true;
                        default:
                            break;
                    }
                    var className = holder.name.getOriginalName();
                    switch (className) {
                        case "com.google.youtube.model.VideoData":
                            return true;
                    }
                }
                return false;
            }
            Runtime.forceCompile = forceCompile;
            Runtime.CODE_CACHE = Object.create(null);
            function searchCodeCache(methodInfo) {
                if (!Runtime.codeCaching.value) {
                    return;
                }
                var cacheInfo = Runtime.CODE_CACHE[methodInfo.abc.hash];
                if (!cacheInfo) {
                    console.warn("Cannot Find Code Cache For ABC, name: " + methodInfo.abc.name + ", hash: " + methodInfo.abc.hash);
                    AVM2.countTimeline("Code Cache ABC Miss");
                    return;
                }
                if (!cacheInfo.isInitialized) {
                    cacheInfo.isInitialized = true;
                }
                var method = cacheInfo.methods[methodInfo.index];
                if (!method) {
                    if (methodInfo.isInstanceInitializer || methodInfo.isClassInitializer) {
                        AVM2.countTimeline("Code Cache Query On Initializer");
                    }
                    else {
                        AVM2.countTimeline("Code Cache MISS ON OTHER");
                        console.warn("Shouldn't MISS: " + methodInfo + " " + methodInfo.debugName);
                    }
                    AVM2.countTimeline("Code Cache Miss");
                    return;
                }
                console.log("Linking CC: " + methodInfo);
                AVM2.countTimeline("Code Cache Hit");
                return method;
            }
            Runtime.searchCodeCache = searchCodeCache;
            function createInterpretedFunction(methodInfo, scope, hasDynamicScope) {
                var mi = methodInfo;
                var hasDefaults = false;
                var defaults = mi.parameters.map(function (p) {
                    if (p.value !== undefined) {
                        hasDefaults = true;
                    }
                    return p.value;
                });
                var fn;
                if (hasDynamicScope) {
                    fn = function (scope) {
                        var global = (this === jsGlobal ? scope.global.object : this);
                        var args = sliceArguments(arguments, 1);
                        if (hasDefaults && args.length < defaults.length) {
                            args = args.concat(defaults.slice(args.length - defaults.length));
                        }
                        return Shumway.AVM2.Interpreter.interpretMethod(global, methodInfo, scope, args);
                    };
                }
                else {
                    fn = function () {
                        var global = (this === jsGlobal ? scope.global.object : this);
                        var args = sliceArguments(arguments);
                        if (hasDefaults && args.length < defaults.length) {
                            args = args.concat(defaults.slice(arguments.length - defaults.length));
                        }
                        return Shumway.AVM2.Interpreter.interpretMethod(global, methodInfo, scope, args);
                    };
                }
                if (methodInfo.hasSetsDxns()) {
                    fn = (function (fn) {
                        return function () {
                            var savedDxns = Shumway.AVM2.AS.ASXML.defaultNamespace;
                            try {
                                var result = fn.apply(this, arguments);
                                Shumway.AVM2.AS.ASXML.defaultNamespace = savedDxns;
                                return result;
                            }
                            catch (e) {
                                Shumway.AVM2.AS.ASXML.defaultNamespace = savedDxns;
                                throw e;
                            }
                        };
                    })(fn);
                }
                fn.instanceConstructor = fn;
                fn.debugName = "Interpreter Function #" + vmNextInterpreterFunctionId++;
                return fn;
            }
            Runtime.createInterpretedFunction = createInterpretedFunction;
            function debugName(value) {
                if (Shumway.isFunction(value)) {
                    return value.debugName;
                }
                return value;
            }
            Runtime.debugName = debugName;
            function createCompiledFunction(methodInfo, scope, hasDynamicScope, breakpoint, deferCompilation) {
                var mi = methodInfo;
                var cached = searchCodeCache(mi);
                var compilation;
                if (!cached) {
                    compilation = AVM2.Compiler.compileMethod(mi, scope, hasDynamicScope);
                }
                var fnName = mi.name ? Multiname.getQualifiedName(mi.name) : "fn" + compiledFunctionCount;
                if (mi.holder) {
                    var fnNamePrefix = "";
                    if (mi.holder instanceof ClassInfo) {
                        fnNamePrefix = "static$" + mi.holder.instanceInfo.name.getName();
                    }
                    else if (mi.holder instanceof InstanceInfo) {
                        fnNamePrefix = mi.holder.name.getName();
                    }
                    else if (mi.holder instanceof ScriptInfo) {
                        fnNamePrefix = "script";
                    }
                    fnName = fnNamePrefix + "$" + fnName;
                }
                fnName = Shumway.StringUtilities.escapeString(fnName);
                if (mi.verified) {
                    fnName += "$V";
                }
                if (!breakpoint) {
                    var breakFilter = Shumway.AVM2.Compiler.breakFilter.value;
                    if (breakFilter && fnName.search(breakFilter) >= 0) {
                        breakpoint = true;
                    }
                }
                var body = compilation.body;
                if (breakpoint) {
                    body = "{ debugger; \n" + body + "}";
                }
                if (!cached) {
                    var fnSource = "function " + fnName + " (" + compilation.parameters.join(", ") + ") " + body;
                    fnSource += "//# sourceURL=fun-" + fnName + ".as";
                }
                if (!release) {
                    if (Runtime.traceFunctions.value > 1) {
                        mi.trace(new IndentingWriter(), mi.abc);
                    }
                    mi.debugTrace = function () {
                        mi.trace(new IndentingWriter(), mi.abc);
                    };
                    if (Runtime.traceFunctions.value > 0) {
                        console.log(fnSource);
                    }
                }
                var fn = cached || new Function("return " + fnSource)();
                fn.debugName = "Compiled Function #" + vmNextCompiledFunctionId++;
                return fn;
            }
            Runtime.createCompiledFunction = createCompiledFunction;
            function createFunction(mi, scope, hasDynamicScope, breakpoint, useInterpreter) {
                if (useInterpreter === void 0) { useInterpreter = false; }
                release || assert(!mi.isNative(), "Method should have a builtin: " + mi.name);
                if (mi.freeMethod) {
                    if (hasDynamicScope) {
                        return Runtime.bindFreeMethodScope(mi, scope);
                    }
                    return mi.freeMethod;
                }
                var fn;
                if ((fn = Runtime.checkMethodOverrides(mi))) {
                    release || assert(!hasDynamicScope);
                    return fn;
                }
                if ((fn = Runtime.checkCommonMethodPatterns(mi))) {
                    return fn;
                }
                ensureFunctionIsInitialized(mi);
                if ((mi.abc.applicationDomain.mode === 1 /* INTERPRET */ || !shouldCompile(mi)) && !forceCompile(mi)) {
                    useInterpreter = true;
                }
                var compileFilter = Shumway.AVM2.Compiler.compileFilter.value;
                if (compileFilter && mi.name && Multiname.getQualifiedName(mi.name).search(compileFilter) < 0) {
                    useInterpreter = true;
                }
                if (useInterpreter) {
                    mi.freeMethod = createInterpretedFunction(mi, scope, hasDynamicScope);
                }
                else {
                    compiledFunctionCount++;
                    mi.freeMethod = createCompiledFunction(mi, scope, hasDynamicScope, breakpoint, mi.isInstanceInitializer);
                }
                mi.freeMethod.methodInfo = mi;
                if (hasDynamicScope) {
                    return Runtime.bindFreeMethodScope(mi, scope);
                }
                return mi.freeMethod;
            }
            Runtime.createFunction = createFunction;
            function ensureFunctionIsInitialized(methodInfo) {
                var mi = methodInfo;
                if (!mi.analysis) {
                    mi.analysis = new AVM2.Analysis(mi);
                    if (mi.needsActivation()) {
                        mi.activationPrototype = new ActivationInfo(mi);
                        new Runtime.ActivationBindings(mi).applyTo(mi.abc.applicationDomain, mi.activationPrototype);
                    }
                    var exceptions = mi.exceptions;
                    for (var i = 0, j = exceptions.length; i < j; i++) {
                        var handler = exceptions[i];
                        if (handler.varName) {
                            var varTrait = Object.create(Trait.prototype);
                            varTrait.kind = 0 /* Slot */;
                            varTrait.name = handler.varName;
                            varTrait.typeName = handler.typeName;
                            varTrait.holder = mi;
                            handler.scopeObject = new CatchScopeObject(mi.abc.applicationDomain, varTrait);
                        }
                        else {
                            handler.scopeObject = new CatchScopeObject(undefined, undefined);
                        }
                    }
                }
            }
            Runtime.ensureFunctionIsInitialized = ensureFunctionIsInitialized;
            function getTraitFunction(trait, scope, natives) {
                release || assert(scope);
                release || assert(trait.isMethod() || trait.isGetter() || trait.isSetter());
                var mi = trait.methodInfo;
                var fn;
                if (mi.isNative()) {
                    if (!release && Runtime.traceExecution.value >= 2) {
                        console.log("Retrieving Native For Trait: " + trait.holder + " " + trait);
                    }
                    var md = trait.metadata;
                    if (md && md.native) {
                        var nativeName = md.native.value[0].value;
                        fn = Shumway.AVM2.AS.getNative(nativeName);
                    }
                    else if (natives) {
                        fn = Shumway.AVM2.AS.getMethodOrAccessorNative(trait, natives);
                    }
                    if (!fn) {
                        return (function (mi) {
                            return function () {
                                Shumway.Debug.warning("Calling undefined native method: " + trait.kindName() + " " + mi.holder.name + "::" + Multiname.getQualifiedName(mi.name));
                            };
                        })(mi);
                    }
                }
                else {
                    if (!release && Runtime.traceExecution.value >= 2) {
                        console.log("Creating Function For Trait: " + trait.holder + " " + trait);
                    }
                    fn = createFunction(mi, scope, false, false);
                    release || assert(fn);
                }
                if (!release && Runtime.traceExecution.value >= 3) {
                    console.log("Made Function: " + Multiname.getQualifiedName(mi.name));
                }
                return fn;
            }
            Runtime.getTraitFunction = getTraitFunction;
            function createClass(classInfo, baseClass, scope) {
                var ci = classInfo;
                var ii = ci.instanceInfo;
                var domain = ci.abc.applicationDomain;
                var className = Multiname.getName(ii.name);
                AVM2.enterTimeline("createClass", { className: className, classInfo: classInfo });
                if (!release && Runtime.traceExecution.value) {
                    console.log("Creating " + (ii.isInterface() ? "Interface" : "Class") + ": " + className + (ci.native ? " replaced with native " + ci.native.cls : ""));
                }
                var cls;
                if (ii.isInterface()) {
                    cls = Shumway.AVM2.AS.createInterface(classInfo);
                }
                else {
                    cls = Shumway.AVM2.AS.createClass(classInfo, baseClass, scope);
                }
                if (Runtime.traceClasses.value) {
                    domain.loadedClasses.push(cls);
                    domain.traceLoadedClasses(true);
                }
                if (ii.isInterface()) {
                    AVM2.leaveTimeline();
                    return cls;
                }
                domain.onMessage.notify1('classCreated', cls);
                classInfo.classObject = cls;
                if (!release && Runtime.traceExecution.value) {
                    console.log("Running " + (ii.isInterface() ? "Interface" : "Class") + ": " + className + " Static Constructor");
                }
                AVM2.enterTimeline("staticInitializer");
                createFunction(classInfo.init, scope, false, false, true).call(cls);
                AVM2.leaveTimeline();
                if (!release && Runtime.traceExecution.value) {
                    console.log("Done With Static Constructor");
                }
                if (Runtime.sealConstTraits) {
                    this.sealConstantTraits(cls, ci.traits);
                }
                AVM2.leaveTimeline();
                return cls;
            }
            Runtime.createClass = createClass;
            function sealConstantTraits(object, traits) {
                for (var i = 0, j = traits.length; i < j; i++) {
                    var trait = traits[i];
                    if (trait.isConst()) {
                        var qn = Multiname.getQualifiedName(trait.name);
                        var value = object[qn];
                        (function (qn, value) {
                            Object.defineProperty(object, qn, { configurable: false, enumerable: false, get: function () {
                                return value;
                            }, set: function () {
                                throwError('ReferenceError', AVM2.Errors.ConstWriteError, qn);
                            } });
                        })(qn, value);
                    }
                }
            }
            Runtime.sealConstantTraits = sealConstantTraits;
            function applyType(methodInfo, factory, types) {
                var factoryClassName = factory.classInfo.instanceInfo.name.name;
                if (factoryClassName === "Vector") {
                    release || assert(types.length === 1);
                    var type = types[0];
                    var typeClassName;
                    if (!isNullOrUndefined(type)) {
                        typeClassName = type.classInfo.instanceInfo.name.name.toLowerCase();
                        switch (typeClassName) {
                            case "number":
                                typeClassName = "double";
                            case "int":
                            case "uint":
                            case "double":
                                return methodInfo.abc.applicationDomain.getClass("packageInternal __AS3__.vec.Vector$" + typeClassName);
                        }
                    }
                    return methodInfo.abc.applicationDomain.getClass("packageInternal __AS3__.vec.Vector$object").applyType(type);
                }
                else {
                    Shumway.Debug.notImplemented(factoryClassName);
                }
            }
            Runtime.applyType = applyType;
            function createName(namespaces, name, flags) {
                if (name === undefined) {
                    name = '*';
                }
                return new Multiname(namespaces, name, flags);
            }
            Runtime.createName = createName;
        })(Runtime = AVM2.Runtime || (AVM2.Runtime = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var throwError = Shumway.AVM2.Runtime.throwError;
var CC = Shumway.AVM2.Runtime.CODE_CACHE;
var HasNext2Info = Shumway.AVM2.Runtime.HasNext2Info;
var asCreateActivation = Shumway.AVM2.Runtime.asCreateActivation;
var asIsInstanceOf = Shumway.AVM2.Runtime.asIsInstanceOf;
var asIsType = Shumway.AVM2.Runtime.asIsType;
var asAsType = Shumway.AVM2.Runtime.asAsType;
var asEquals = Shumway.AVM2.Runtime.asEquals;
var asTypeOf = Shumway.AVM2.Runtime.asTypeOf;
var asCoerceByMultiname = Shumway.AVM2.Runtime.asCoerceByMultiname;
var asCoerce = Shumway.AVM2.Runtime.asCoerce;
var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
var asCoerceInt = Shumway.AVM2.Runtime.asCoerceInt;
var asCoerceUint = Shumway.AVM2.Runtime.asCoerceUint;
var asCoerceNumber = Shumway.AVM2.Runtime.asCoerceNumber;
var asCoerceBoolean = Shumway.AVM2.Runtime.asCoerceBoolean;
var asCoerceObject = Shumway.AVM2.Runtime.asCoerceObject;
var asCompare = Shumway.AVM2.Runtime.asCompare;
var asAdd = Shumway.AVM2.Runtime.asAdd;
var applyType = Shumway.AVM2.Runtime.applyType;
var escapeXMLAttribute = Shumway.AVM2.Runtime.escapeXMLAttribute;
var escapeXMLElement = Shumway.AVM2.Runtime.escapeXMLElement;
var asGetSlot = Shumway.AVM2.Runtime.asGetSlot;
var asSetSlot = Shumway.AVM2.Runtime.asSetSlot;
var asHasNext2 = Shumway.AVM2.Runtime.asHasNext2;
var getDescendants = Shumway.AVM2.Runtime.getDescendants;
var checkFilter = Shumway.AVM2.Runtime.checkFilter;
var sliceArguments = Shumway.AVM2.Runtime.sliceArguments;
var createFunction = Shumway.AVM2.Runtime.createFunction;
var createName = Shumway.AVM2.Runtime.createName;
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var Runtime;
        (function (Runtime) {
            var Multiname = Shumway.AVM2.ABC.Multiname;
            var assert = Shumway.Debug.assert;
            var boxValue = Shumway.ObjectUtilities.boxValue;
            var counter = Shumway.Metrics.Counter.instance;
            function makeCacheKey(namespaces, name, flags) {
                if (!namespaces) {
                    return name;
                }
                else if (namespaces.length > 1) {
                    return namespaces.runtimeId + "$" + name;
                }
                else {
                    return namespaces[0].qualifiedName + "$" + name;
                }
            }
            var Scope = (function () {
                function Scope(parent, object, isWith) {
                    if (isWith === void 0) { isWith = false; }
                    this.parent = parent;
                    this.object = boxValue(object);
                    release || assert(Shumway.isObject(this.object));
                    this.global = parent ? parent.global : this;
                    this.isWith = isWith;
                    this.cache = Object.create(null);
                }
                Scope.prototype.findDepth = function (object) {
                    var current = this;
                    var depth = 0;
                    while (current) {
                        if (current.object === object) {
                            return depth;
                        }
                        depth++;
                        current = current.parent;
                    }
                    return -1;
                };
                Scope.prototype.getScopeObjects = function () {
                    var objects = [];
                    var current = this;
                    while (current) {
                        objects.unshift(current.object);
                        current = current.parent;
                    }
                    return objects;
                };
                Scope.prototype.findScopeProperty = function (namespaces, name, flags, method, strict, scopeOnly) {
                    AVM2.countTimeline("findScopeProperty");
                    var object;
                    var key = makeCacheKey(namespaces, name, flags);
                    if (!scopeOnly && (object = this.cache[key])) {
                        return object;
                    }
                    if (this.object.asHasPropertyInternal(namespaces, name, flags)) {
                        return this.isWith ? this.object : (this.cache[key] = this.object);
                    }
                    if (this.parent) {
                        return (this.cache[key] = this.parent.findScopeProperty(namespaces, name, flags, method, strict, scopeOnly));
                    }
                    if (scopeOnly) {
                        return null;
                    }
                    if ((object = method.abc.applicationDomain.findDomainProperty(new Multiname(namespaces, name, flags), strict, true))) {
                        return object;
                    }
                    if (strict) {
                        Shumway.Debug.unexpected("Cannot find property " + name);
                    }
                    return this.global.object;
                };
                return Scope;
            })();
            Runtime.Scope = Scope;
            function bindFreeMethodScope(methodInfo, scope) {
                var fn = methodInfo.freeMethod;
                if (methodInfo.lastBoundMethod && methodInfo.lastBoundMethod.scope === scope) {
                    return methodInfo.lastBoundMethod.boundMethod;
                }
                release || assert(fn, "There should already be a cached method.");
                var boundMethod;
                var asGlobal = scope.global.object;
                if (!methodInfo.hasOptional() && !methodInfo.needsArguments() && !methodInfo.needsRest()) {
                    switch (methodInfo.parameters.length) {
                        case 0:
                            boundMethod = function () {
                                return fn.call(this === jsGlobal ? asGlobal : this, scope);
                            };
                            break;
                        case 1:
                            boundMethod = function (x) {
                                return fn.call(this === jsGlobal ? asGlobal : this, scope, x);
                            };
                            break;
                        case 2:
                            boundMethod = function (x, y) {
                                return fn.call(this === jsGlobal ? asGlobal : this, scope, x, y);
                            };
                            break;
                        case 3:
                            boundMethod = function (x, y, z) {
                                return fn.call(this === jsGlobal ? asGlobal : this, scope, x, y, z);
                            };
                            break;
                        default:
                            break;
                    }
                }
                if (!boundMethod) {
                    AVM2.countTimeline("Bind Scope - Slow Path");
                    boundMethod = function () {
                        Array.prototype.unshift.call(arguments, scope);
                        var global = (this === jsGlobal ? scope.global.object : this);
                        return fn.asApply(global, arguments);
                    };
                }
                boundMethod.methodInfo = methodInfo;
                boundMethod.instanceConstructor = boundMethod;
                methodInfo.lastBoundMethod = {
                    scope: scope,
                    boundMethod: boundMethod
                };
                return boundMethod;
            }
            Runtime.bindFreeMethodScope = bindFreeMethodScope;
        })(Runtime = AVM2.Runtime || (AVM2.Runtime = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Scope = Shumway.AVM2.Runtime.Scope;
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var Runtime;
        (function (Runtime) {
            var Multiname = Shumway.AVM2.ABC.Multiname;
            var Trait = Shumway.AVM2.ABC.Trait;
            var hasOwnProperty = Shumway.ObjectUtilities.hasOwnProperty;
            var createMap = Shumway.ObjectUtilities.createMap;
            var cloneObject = Shumway.ObjectUtilities.cloneObject;
            var copyProperties = Shumway.ObjectUtilities.copyProperties;
            var assert = Shumway.Debug.assert;
            var defineNonEnumerableProperty = Shumway.ObjectUtilities.defineNonEnumerableProperty;
            var defineNonEnumerableGetter = Shumway.ObjectUtilities.defineNonEnumerableGetter;
            var makeForwardingGetter = Shumway.FunctionUtilities.makeForwardingGetter;
            var pushUnique = Shumway.ArrayUtilities.pushUnique;
            var Binding = (function () {
                function Binding(trait) {
                    this.trait = trait;
                }
                Binding.getKey = function (qn, trait) {
                    var key = qn;
                    if (trait.isGetter()) {
                        key = Binding.GET_PREFIX + qn;
                    }
                    else if (trait.isSetter()) {
                        key = Binding.SET_PREFIX + qn;
                    }
                    return key;
                };
                Binding.prototype.toString = function () {
                    return String(this.trait);
                };
                Binding.SET_PREFIX = "set ";
                Binding.GET_PREFIX = "get ";
                Binding.KEY_PREFIX_LENGTH = 4;
                return Binding;
            })();
            Runtime.Binding = Binding;
            var SlotInfo = (function () {
                function SlotInfo(name, isConst, type, trait) {
                    this.name = name;
                    this.isConst = isConst;
                    this.type = type;
                    this.trait = trait;
                }
                return SlotInfo;
            })();
            Runtime.SlotInfo = SlotInfo;
            var SlotInfoMap = (function () {
                function SlotInfoMap() {
                    this.byID = createMap();
                    this.byQN = createMap();
                }
                return SlotInfoMap;
            })();
            Runtime.SlotInfoMap = SlotInfoMap;
            var Bindings = (function () {
                function Bindings() {
                    this.map = createMap();
                    this.slots = [];
                    this.nextSlotId = 1;
                }
                Bindings.prototype.assignNextSlot = function (trait) {
                    release || assert(trait instanceof Trait);
                    release || assert(trait.isSlot() || trait.isConst() || trait.isClass());
                    if (!trait.slotId) {
                        trait.slotId = this.nextSlotId++;
                    }
                    else {
                        this.nextSlotId = trait.slotId + 1;
                    }
                    release || assert(!this.slots[trait.slotId], "Trait slot already taken.");
                    this.slots[trait.slotId] = trait;
                };
                Bindings.prototype.trace = function (writer) {
                    writer.enter("Bindings");
                    for (var key in this.map) {
                        var binding = this.map[key];
                        writer.writeLn(binding.trait.kindName() + ": " + key + " -> " + binding);
                    }
                    writer.leaveAndEnter("Slots");
                    writer.writeArray(this.slots);
                    writer.outdent();
                };
                Bindings.prototype.applyTo = function (domain, object, append) {
                    if (append === void 0) { append = false; }
                    if (!append) {
                        release || assert(!hasOwnProperty(object, Runtime.VM_SLOTS), "Already has VM_SLOTS.");
                        release || assert(!hasOwnProperty(object, Runtime.VM_BINDINGS), "Already has VM_BINDINGS.");
                        release || assert(!hasOwnProperty(object, Runtime.VM_OPEN_METHODS), "Already has VM_OPEN_METHODS.");
                        defineNonEnumerableProperty(object, Runtime.VM_SLOTS, new SlotInfoMap());
                        defineNonEnumerableProperty(object, Runtime.VM_BINDINGS, []);
                        defineNonEnumerableProperty(object, Runtime.VM_OPEN_METHODS, createMap());
                        defineNonEnumerableProperty(object, "bindings", this);
                        defineNonEnumerableProperty(object, "resolutionMap", []);
                    }
                    traitsWriter && traitsWriter.greenLn("Applying Traits" + (append ? " (Append)" : ""));
                    for (var key in this.map) {
                        var binding = this.map[key];
                        var trait = binding.trait;
                        var qn = Multiname.getQualifiedName(trait.name);
                        if (trait.isSlot() || trait.isConst() || trait.isClass()) {
                            var defaultValue = undefined;
                            if (trait.isSlot() || trait.isConst()) {
                                if (trait.hasDefaultValue) {
                                    defaultValue = trait.value;
                                }
                                else if (trait.typeName) {
                                    var classInfo = domain.findClassInfo(trait.typeName);
                                    if (classInfo) {
                                        defaultValue = classInfo.defaultValue;
                                    }
                                }
                            }
                            if (key !== qn) {
                                traitsWriter && traitsWriter.yellowLn("Binding Trait: " + key + " -> " + qn);
                                defineNonEnumerableGetter(object, key, makeForwardingGetter(qn));
                                pushUnique(object.asBindings, key);
                            }
                            else {
                                traitsWriter && traitsWriter.greenLn("Applying Trait " + trait.kindName() + ": " + trait);
                                defineNonEnumerableProperty(object, qn, defaultValue);
                                pushUnique(object.asBindings, qn);
                                var slotInfo = new SlotInfo(qn, trait.isConst(), trait.typeName ? domain.getProperty(trait.typeName, false, false) : null, trait);
                                object.asSlots.byID[trait.slotId] = slotInfo;
                                object.asSlots.byQN[qn] = slotInfo;
                            }
                        }
                        else if (trait.isMethod() || trait.isGetter() || trait.isSetter()) {
                            if (trait.isGetter() || trait.isSetter()) {
                                key = key.substring(Binding.KEY_PREFIX_LENGTH);
                            }
                            if (key !== qn) {
                                traitsWriter && traitsWriter.yellowLn("Binding Trait: " + key + " -> " + qn);
                            }
                            else {
                                traitsWriter && traitsWriter.greenLn("Applying Trait " + trait.kindName() + ": " + trait);
                            }
                            pushUnique(object.asBindings, key);
                            Runtime.applyMethodTrait(key, object, binding, !(this instanceof ScriptBindings));
                        }
                    }
                };
                return Bindings;
            })();
            Runtime.Bindings = Bindings;
            var ActivationBindings = (function (_super) {
                __extends(ActivationBindings, _super);
                function ActivationBindings(methodInfo) {
                    _super.call(this);
                    release || assert(methodInfo.needsActivation());
                    this.methodInfo = methodInfo;
                    var traits = methodInfo.traits;
                    for (var i = 0; i < traits.length; i++) {
                        var trait = traits[i];
                        release || assert(trait.isSlot() || trait.isConst(), "Only slot or constant traits are allowed in activation objects.");
                        var key = Multiname.getQualifiedName(trait.name);
                        this.map[key] = new Binding(trait);
                        this.assignNextSlot(trait);
                    }
                }
                return ActivationBindings;
            })(Bindings);
            Runtime.ActivationBindings = ActivationBindings;
            var CatchBindings = (function (_super) {
                __extends(CatchBindings, _super);
                function CatchBindings(scope, trait) {
                    _super.call(this);
                    var key = Multiname.getQualifiedName(trait.name);
                    this.map[key] = new Binding(trait);
                    release || assert(trait.isSlot(), "Only slot traits are allowed in catch objects.");
                    this.assignNextSlot(trait);
                }
                return CatchBindings;
            })(Bindings);
            Runtime.CatchBindings = CatchBindings;
            var ScriptBindings = (function (_super) {
                __extends(ScriptBindings, _super);
                function ScriptBindings(scriptInfo, scope) {
                    _super.call(this);
                    this.scope = scope;
                    this.scriptInfo = scriptInfo;
                    var traits = scriptInfo.traits;
                    for (var i = 0; i < traits.length; i++) {
                        var trait = traits[i];
                        var name = Multiname.getQualifiedName(trait.name);
                        var key = Binding.getKey(name, trait);
                        var binding = this.map[key] = new Binding(trait);
                        if (trait.isSlot() || trait.isConst() || trait.isClass()) {
                            this.assignNextSlot(trait);
                        }
                        if (trait.isClass()) {
                            if (trait.metadata && trait.metadata.native) {
                                trait.classInfo.native = trait.metadata.native;
                            }
                        }
                        if (trait.isMethod() || trait.isGetter() || trait.isSetter()) {
                            binding.scope = this.scope;
                        }
                    }
                }
                return ScriptBindings;
            })(Bindings);
            Runtime.ScriptBindings = ScriptBindings;
            var ClassBindings = (function (_super) {
                __extends(ClassBindings, _super);
                function ClassBindings(classInfo, scope, natives) {
                    _super.call(this);
                    this.scope = scope;
                    this.natives = natives;
                    this.classInfo = classInfo;
                    var traits = classInfo.traits;
                    for (var i = 0; i < traits.length; i++) {
                        var trait = traits[i];
                        var name = Multiname.getQualifiedName(trait.name);
                        var key = Binding.getKey(name, trait);
                        var binding = this.map[key] = new Binding(trait);
                        if (trait.isSlot() || trait.isConst()) {
                            this.assignNextSlot(trait);
                        }
                        if (trait.isMethod() || trait.isGetter() || trait.isSetter()) {
                            binding.scope = this.scope;
                            binding.natives = this.natives;
                        }
                    }
                }
                return ClassBindings;
            })(Bindings);
            Runtime.ClassBindings = ClassBindings;
            var InstanceBindings = (function (_super) {
                __extends(InstanceBindings, _super);
                function InstanceBindings(parent, instanceInfo, scope, natives) {
                    _super.call(this);
                    this.scope = scope;
                    this.natives = natives;
                    this.parent = parent;
                    this.instanceInfo = instanceInfo;
                    this.implementedInterfaces = parent ? cloneObject(parent.implementedInterfaces) : Object.create(null);
                    if (parent) {
                        this.slots = parent.slots.slice();
                        this.nextSlotId = parent.nextSlotId;
                    }
                    this.extend(parent);
                }
                InstanceBindings.prototype.extend = function (parent) {
                    var ii = this.instanceInfo, ib;
                    var map = this.map;
                    var name, key, trait, binding, protectedName, protectedKey;
                    if (parent) {
                        for (key in parent.map) {
                            binding = parent.map[key];
                            trait = binding.trait;
                            map[key] = binding;
                            if (trait.isProtected()) {
                                protectedName = Multiname.getQualifiedName(new Multiname([ii.protectedNs], trait.name.getName(), 0));
                                protectedKey = Binding.getKey(protectedName, trait);
                                map[protectedKey] = binding;
                            }
                        }
                    }
                    function writeOrOverwriteBinding(object, key, binding) {
                        var trait = binding.trait;
                        var oldBinding = object[key];
                        if (oldBinding) {
                            var oldTrait = oldBinding.trait;
                            release || assert(!oldTrait.isFinal(), "Cannot redefine a final trait: " + trait);
                            release || assert(trait.isOverride() || trait.name.getName() === "length", "Overriding a trait that is not marked for override: " + trait);
                        }
                        else {
                            release || assert(!trait.isOverride(), "Trait marked override must override another trait: " + trait);
                        }
                        object[key] = binding;
                    }
                    function overwriteProtectedBinding(object, key, binding) {
                        if (key in object) {
                            object[key] = binding;
                        }
                    }
                    var traits = ii.traits;
                    for (var i = 0; i < traits.length; i++) {
                        trait = traits[i];
                        name = Multiname.getQualifiedName(trait.name);
                        key = Binding.getKey(name, trait);
                        binding = new Binding(trait);
                        writeOrOverwriteBinding(map, key, binding);
                        if (trait.isProtected()) {
                            ib = this.parent;
                            while (ib && ib.instanceInfo.protectedNs) {
                                protectedName = Multiname.getQualifiedName(new Multiname([ib.instanceInfo.protectedNs], trait.name.getName(), 0));
                                protectedKey = Binding.getKey(protectedName, trait);
                                overwriteProtectedBinding(map, protectedKey, binding);
                                ib = ib.parent;
                            }
                        }
                        if (trait.isSlot() || trait.isConst()) {
                            this.assignNextSlot(trait);
                        }
                        if (trait.isMethod() || trait.isGetter() || trait.isSetter()) {
                            binding.scope = this.scope;
                            binding.natives = this.natives;
                        }
                    }
                    var domain = ii.abc.applicationDomain;
                    var interfaces = ii.interfaces;
                    var _interface;
                    for (var i = 0; i < interfaces.length; i++) {
                        _interface = domain.getProperty(interfaces[i], true, true);
                        release || assert(_interface);
                        copyProperties(this.implementedInterfaces, _interface.interfaceBindings.implementedInterfaces);
                        this.implementedInterfaces[Multiname.getQualifiedName(_interface.classInfo.instanceInfo.name)] = _interface;
                    }
                    for (var interfaceName in this.implementedInterfaces) {
                        _interface = this.implementedInterfaces[interfaceName];
                        ib = _interface.interfaceBindings;
                        for (var interfaceKey in ib.map) {
                            var interfaceBinding = ib.map[interfaceKey];
                            if (ii.isInterface()) {
                                map[interfaceKey] = interfaceBinding;
                            }
                            else {
                                name = Multiname.getPublicQualifiedName(interfaceBinding.trait.name.getName());
                                key = Binding.getKey(name, interfaceBinding.trait);
                                map[interfaceKey] = map[key];
                            }
                        }
                    }
                };
                InstanceBindings.prototype.toString = function () {
                    return this.instanceInfo.toString();
                };
                return InstanceBindings;
            })(Bindings);
            Runtime.InstanceBindings = InstanceBindings;
            var traitsWriter = null;
        })(Runtime = AVM2.Runtime || (AVM2.Runtime = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Binding = Shumway.AVM2.Runtime.Binding;
var Bindings = Shumway.AVM2.Runtime.Bindings;
var ActivationBindings = Shumway.AVM2.Runtime.ActivationBindings;
var CatchBindings = Shumway.AVM2.Runtime.CatchBindings;
var ScriptBindings = Shumway.AVM2.Runtime.ScriptBindings;
var ClassBindings = Shumway.AVM2.Runtime.ClassBindings;
var InstanceBindings = Shumway.AVM2.Runtime.InstanceBindings;
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        AVM2.XRegExp = (function () {
            'use strict';
            var REGEX_DATA = 'xregexp', self, features = {
                astral: false,
                natives: false
            }, nativ = {
                exec: RegExp.prototype.exec,
                test: RegExp.prototype.test,
                match: String.prototype.match,
                replace: String.prototype.replace,
                split: String.prototype.split
            }, fixed = {}, cache = {}, patternCache = {}, tokens = [], defaultScope = 'default', classScope = 'class', nativeTokens = {
                'default': /\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9]\d*|x[\dA-Fa-f]{2}|u[\dA-Fa-f]{4}|c[A-Za-z]|[\s\S])|\(\?[:=!]|[?*+]\?|{\d+(?:,\d*)?}\??|[\s\S]/,
                'class': /\\(?:[0-3][0-7]{0,2}|[4-7][0-7]?|x[\dA-Fa-f]{2}|u[\dA-Fa-f]{4}|c[A-Za-z]|[\s\S])|[\s\S]/
            }, replacementToken = /\$(?:{([\w$]+)}|([\d$&`']))/g, correctExecNpcg = nativ.exec.call(/()??/, '')[1] === undefined, hasNativeY = RegExp.prototype.sticky !== undefined, registeredFlags = {
                g: true,
                i: true,
                m: true,
                y: hasNativeY
            }, toString = {}.toString, add;
            function augment(regex, captureNames, addProto) {
                var p;
                if (addProto) {
                    if (regex.__proto__) {
                        regex.__proto__ = self.prototype;
                    }
                    else {
                        for (p in self.prototype) {
                            regex[p] = self.prototype[p];
                        }
                    }
                }
                regex[REGEX_DATA] = { captureNames: captureNames };
                return regex;
            }
            function clipDuplicates(str) {
                return nativ.replace.call(str, /([\s\S])(?=[\s\S]*\1)/g, '');
            }
            function copy(regex, options) {
                if (!self.isRegExp(regex)) {
                    throw new TypeError('Type RegExp expected');
                }
                var flags = nativ.exec.call(/\/([a-z]*)$/i, String(regex))[1];
                options = options || {};
                if (options.add) {
                    flags = clipDuplicates(flags + options.add);
                }
                if (options.remove) {
                    flags = nativ.replace.call(flags, new RegExp('[' + options.remove + ']+', 'g'), '');
                }
                regex = augment(new RegExp(regex.source, flags), hasNamedCapture(regex) ? regex[REGEX_DATA].captureNames.slice(0) : null, options.addProto);
                return regex;
            }
            function getBaseProps() {
                return { captureNames: null };
            }
            function hasNamedCapture(regex) {
                return !!(regex[REGEX_DATA] && regex[REGEX_DATA].captureNames);
            }
            function indexOf(array, value) {
                if (Array.prototype.indexOf) {
                    return array.indexOf(value);
                }
                var len = array.length, i;
                for (i = 0; i < len; ++i) {
                    if (array[i] === value) {
                        return i;
                    }
                }
                return -1;
            }
            function isType(value, type) {
                return toString.call(value) === '[object ' + type + ']';
            }
            function isQuantifierNext(pattern, pos, flags) {
                return nativ.test.call(flags.indexOf('x') > -1 ? /^(?:\s+|#.*|\(\?#[^)]*\))*(?:[?*+]|{\d+(?:,\d*)?})/ : /^(?:\(\?#[^)]*\))*(?:[?*+]|{\d+(?:,\d*)?})/, pattern.slice(pos));
            }
            function prepareFlags(pattern, flags) {
                var i;
                if (clipDuplicates(flags) !== flags) {
                    throw new SyntaxError('Invalid duplicate regex flag ' + flags);
                }
                pattern = nativ.replace.call(pattern, /^\(\?([\w$]+)\)/, function ($0, $1) {
                    if (nativ.test.call(/[gy]/, $1)) {
                        throw new SyntaxError('Cannot use flag g or y in mode modifier ' + $0);
                    }
                    flags = clipDuplicates(flags + $1);
                    return '';
                });
                for (i = 0; i < flags.length; ++i) {
                    if (!registeredFlags[flags.charAt(i)]) {
                        throw new SyntaxError('Unknown regex flag ' + flags.charAt(i));
                    }
                }
                return {
                    pattern: pattern,
                    flags: flags
                };
            }
            function prepareOptions(value) {
                value = value || {};
                if (isType(value, 'String')) {
                    value = self.forEach(value, /[^\s,]+/, function (match) {
                        this[match] = true;
                    }, {});
                }
                return value;
            }
            function registerFlag(flag) {
                if (!/^[\w$]$/.test(flag)) {
                    throw new Error('Flag must be a single character A-Za-z0-9_$');
                }
                registeredFlags[flag] = true;
            }
            function runTokens(pattern, flags, pos, scope, context) {
                var i = tokens.length, result = null, match, t;
                while (i--) {
                    t = tokens[i];
                    if ((t.scope === scope || t.scope === 'all') && (!t.flag || flags.indexOf(t.flag) > -1)) {
                        match = self.exec(pattern, t.regex, pos, 'sticky');
                        if (match) {
                            result = {
                                matchLength: match[0].length,
                                output: t.handler.call(context, match, scope, flags),
                                reparse: t.reparse
                            };
                            break;
                        }
                    }
                }
                return result;
            }
            function setAstral(on) {
                self.cache.flush('patterns');
                features.astral = on;
            }
            function setNatives(on) {
                RegExp.prototype.exec = (on ? fixed : nativ).exec;
                RegExp.prototype.test = (on ? fixed : nativ).test;
                String.prototype.match = (on ? fixed : nativ).match;
                String.prototype.replace = (on ? fixed : nativ).replace;
                String.prototype.split = (on ? fixed : nativ).split;
                features.natives = on;
            }
            function toObject(value) {
                if (value == null) {
                    throw new TypeError('Cannot convert null or undefined to object');
                }
                return value;
            }
            self = function (pattern, flags) {
                var context = {
                    hasNamedCapture: false,
                    captureNames: []
                }, scope = defaultScope, output = '', pos = 0, result, token, key;
                if (self.isRegExp(pattern)) {
                    if (flags !== undefined) {
                        throw new TypeError('Cannot supply flags when copying a RegExp');
                    }
                    return copy(pattern, { addProto: true });
                }
                pattern = pattern === undefined ? '' : String(pattern);
                flags = flags === undefined ? '' : String(flags);
                key = pattern + '***' + flags;
                if (!patternCache[key]) {
                    result = prepareFlags(pattern, flags);
                    pattern = result.pattern;
                    flags = result.flags;
                    while (pos < pattern.length) {
                        do {
                            result = runTokens(pattern, flags, pos, scope, context);
                            if (result && result.reparse) {
                                pattern = pattern.slice(0, pos) + result.output + pattern.slice(pos + result.matchLength);
                            }
                        } while (result && result.reparse);
                        if (result) {
                            output += result.output;
                            pos += (result.matchLength || 1);
                        }
                        else {
                            token = self.exec(pattern, nativeTokens[scope], pos, 'sticky')[0];
                            output += token;
                            pos += token.length;
                            if (token === '[' && scope === defaultScope) {
                                scope = classScope;
                            }
                            else if (token === ']' && scope === classScope) {
                                scope = defaultScope;
                            }
                        }
                    }
                    patternCache[key] = {
                        pattern: nativ.replace.call(output, /\(\?:\)(?=\(\?:\))|^\(\?:\)|\(\?:\)$/g, ''),
                        flags: nativ.replace.call(flags, /[^gimy]+/g, ''),
                        captures: context.hasNamedCapture ? context.captureNames : null
                    };
                }
                key = patternCache[key];
                return augment(new RegExp(key.pattern, key.flags), key.captures, true);
            };
            self.prototype = new RegExp;
            self.version = '3.0.0-pre';
            self.addToken = function (regex, handler, options) {
                options = options || {};
                var optionalFlags = options.optionalFlags, i;
                if (options.flag) {
                    registerFlag(options.flag);
                }
                if (optionalFlags) {
                    optionalFlags = nativ.split.call(optionalFlags, '');
                    for (i = 0; i < optionalFlags.length; ++i) {
                        registerFlag(optionalFlags[i]);
                    }
                }
                tokens.push({
                    regex: copy(regex, { add: 'g' + (hasNativeY ? 'y' : '') }),
                    handler: handler,
                    scope: options.scope || defaultScope,
                    flag: options.flag,
                    reparse: options.reparse
                });
                self.cache.flush('patterns');
            };
            self.cache = function (pattern, flags) {
                var key = pattern + '***' + (flags || '');
                return cache[key] || (cache[key] = self(pattern, flags));
            };
            self.cache.flush = function (cacheName) {
                if (cacheName === 'patterns') {
                    patternCache = {};
                }
                else {
                    cache = {};
                }
            };
            self.escape = function (str) {
                return nativ.replace.call(toObject(str), /[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
            };
            self.exec = function (str, regex, pos, sticky) {
                var cacheFlags = 'g', match, r2;
                if (hasNativeY && (sticky || (regex.sticky && sticky !== false))) {
                    cacheFlags += 'y';
                }
                regex[REGEX_DATA] = regex[REGEX_DATA] || getBaseProps();
                r2 = regex[REGEX_DATA][cacheFlags] || (regex[REGEX_DATA][cacheFlags] = copy(regex, {
                    add: cacheFlags,
                    remove: sticky === false ? 'y' : ''
                }));
                r2.lastIndex = pos = pos || 0;
                match = fixed.exec.call(r2, str);
                if (sticky && match && match.index !== pos) {
                    match = null;
                }
                if (regex.global) {
                    regex.lastIndex = match ? r2.lastIndex : 0;
                }
                return match;
            };
            self.forEach = function (str, regex, callback, context) {
                var pos = 0, i = -1, match;
                while ((match = self.exec(str, regex, pos))) {
                    callback.call(context, match, ++i, str, regex);
                    pos = match.index + (match[0].length || 1);
                }
                return context;
            };
            self.globalize = function (regex) {
                return copy(regex, { add: 'g', addProto: true });
            };
            self.install = function (options) {
                options = prepareOptions(options);
                if (!features.astral && options.astral) {
                    setAstral(true);
                }
                if (!features.natives && options.natives) {
                    setNatives(true);
                }
            };
            self.isInstalled = function (feature) {
                return !!(features[feature]);
            };
            self.isRegExp = function (value) {
                return toString.call(value) === '[object RegExp]';
            };
            self.match = function (str, regex, scope) {
                var global = (regex.global && scope !== 'one') || scope === 'all', cacheFlags = (global ? 'g' : '') + (regex.sticky ? 'y' : ''), result, r2;
                regex[REGEX_DATA] = regex[REGEX_DATA] || getBaseProps();
                r2 = regex[REGEX_DATA][cacheFlags || 'noGY'] || (regex[REGEX_DATA][cacheFlags || 'noGY'] = copy(regex, {
                    add: cacheFlags,
                    remove: scope === 'one' ? 'g' : ''
                }));
                result = nativ.match.call(toObject(str), r2);
                if (regex.global) {
                    regex.lastIndex = ((scope === 'one' && result) ? (result.index + result[0].length) : 0);
                }
                return global ? (result || []) : (result && result[0]);
            };
            self.matchChain = function (str, chain) {
                return (function recurseChain(values, level) {
                    var item = chain[level].regex ? chain[level] : { regex: chain[level] }, matches = [], addMatch = function (match) {
                        if (item.backref) {
                            if (!(match.hasOwnProperty(item.backref) || +item.backref < match.length)) {
                                throw new ReferenceError('Backreference to undefined group: ' + item.backref);
                            }
                            matches.push(match[item.backref] || '');
                        }
                        else {
                            matches.push(match[0]);
                        }
                    }, i;
                    for (i = 0; i < values.length; ++i) {
                        self.forEach(values[i], item.regex, addMatch);
                    }
                    return ((level === chain.length - 1) || !matches.length) ? matches : recurseChain(matches, level + 1);
                }([str], 0));
            };
            self.replace = function (str, search, replacement, scope) {
                var isRegex = self.isRegExp(search), global = (search.global && scope !== 'one') || scope === 'all', cacheFlags = (global ? 'g' : '') + (search.sticky ? 'y' : ''), s2 = search, result;
                if (isRegex) {
                    search[REGEX_DATA] = search[REGEX_DATA] || getBaseProps();
                    s2 = search[REGEX_DATA][cacheFlags || 'noGY'] || (search[REGEX_DATA][cacheFlags || 'noGY'] = copy(search, {
                        add: cacheFlags,
                        remove: scope === 'one' ? 'g' : ''
                    }));
                }
                else if (global) {
                    s2 = new RegExp(self.escape(String(search)), 'g');
                }
                result = fixed.replace.call(toObject(str), s2, replacement);
                if (isRegex && search.global) {
                    search.lastIndex = 0;
                }
                return result;
            };
            self.replaceEach = function (str, replacements) {
                var i, r;
                for (i = 0; i < replacements.length; ++i) {
                    r = replacements[i];
                    str = self.replace(str, r[0], r[1], r[2]);
                }
                return str;
            };
            self.split = function (str, separator, limit) {
                return fixed.split.call(toObject(str), separator, limit);
            };
            self.test = function (str, regex, pos, sticky) {
                return !!self.exec(str, regex, pos, sticky);
            };
            self.uninstall = function (options) {
                options = prepareOptions(options);
                if (features.astral && options.astral) {
                    setAstral(false);
                }
                if (features.natives && options.natives) {
                    setNatives(false);
                }
            };
            self.union = function (patterns, flags) {
                var parts = /(\()(?!\?)|\\([1-9]\d*)|\\[\s\S]|\[(?:[^\\\]]|\\[\s\S])*]/g, output = [], numCaptures = 0, numPriorCaptures, captureNames, pattern, rewrite = function (match, paren, backref) {
                    var name = captureNames[numCaptures - numPriorCaptures];
                    if (paren) {
                        ++numCaptures;
                        if (name) {
                            return '(?<' + name + '>';
                        }
                    }
                    else if (backref) {
                        return '\\' + (+backref + numPriorCaptures);
                    }
                    return match;
                }, i;
                if (!(isType(patterns, 'Array') && patterns.length)) {
                    throw new TypeError('Must provide a nonempty array of patterns to merge');
                }
                for (i = 0; i < patterns.length; ++i) {
                    pattern = patterns[i];
                    if (self.isRegExp(pattern)) {
                        numPriorCaptures = numCaptures;
                        captureNames = (pattern[REGEX_DATA] && pattern[REGEX_DATA].captureNames) || [];
                        output.push(nativ.replace.call(self(pattern.source).source, parts, rewrite));
                    }
                    else {
                        output.push(self.escape(pattern));
                    }
                }
                return self(output.join('|'), flags);
            };
            fixed.exec = function (str) {
                var origLastIndex = this.lastIndex, match = nativ.exec.apply(this, arguments), name, r2, i;
                if (match) {
                    if (!correctExecNpcg && match.length > 1 && indexOf(match, '') > -1) {
                        r2 = copy(this, { remove: 'g' });
                        nativ.replace.call(String(str).slice(match.index), r2, function () {
                            var len = arguments.length, i;
                            for (i = 1; i < len - 2; ++i) {
                                if (arguments[i] === undefined) {
                                    match[i] = undefined;
                                }
                            }
                        });
                    }
                    if (this[REGEX_DATA] && this[REGEX_DATA].captureNames) {
                        for (i = 1; i < match.length; ++i) {
                            name = this[REGEX_DATA].captureNames[i - 1];
                            if (name) {
                                match[name] = match[i];
                            }
                        }
                    }
                    if (this.global && !match[0].length && (this.lastIndex > match.index)) {
                        this.lastIndex = match.index;
                    }
                }
                if (!this.global) {
                    this.lastIndex = origLastIndex;
                }
                return match;
            };
            fixed.test = function (str) {
                return !!fixed.exec.call(this, str);
            };
            fixed.match = function (regex) {
                var result;
                if (!self.isRegExp(regex)) {
                    regex = new RegExp(regex);
                }
                else if (regex.global) {
                    result = nativ.match.apply(this, arguments);
                    regex.lastIndex = 0;
                    return result;
                }
                return fixed.exec.call(regex, toObject(this));
            };
            fixed.replace = function (search, replacement) {
                var isRegex = self.isRegExp(search), origLastIndex, captureNames, result;
                if (isRegex) {
                    if (search[REGEX_DATA]) {
                        captureNames = search[REGEX_DATA].captureNames;
                    }
                    origLastIndex = search.lastIndex;
                }
                else {
                    search += '';
                }
                if (isType(replacement, 'Function')) {
                    result = nativ.replace.call(String(this), search, function () {
                        var args = arguments, i;
                        if (captureNames) {
                            args[0] = new String(args[0]);
                            for (i = 0; i < captureNames.length; ++i) {
                                if (captureNames[i]) {
                                    args[0][captureNames[i]] = args[i + 1];
                                }
                            }
                        }
                        if (isRegex && search.global) {
                            search.lastIndex = args[args.length - 2] + args[0].length;
                        }
                        return replacement.apply(undefined, args);
                    });
                }
                else {
                    result = nativ.replace.call(this == null ? this : String(this), search, function () {
                        var args = arguments;
                        return nativ.replace.call(String(replacement), replacementToken, function ($0, $1, $2) {
                            var n;
                            if ($1) {
                                n = +$1;
                                if (n <= args.length - 3) {
                                    return args[n] || '';
                                }
                                n = captureNames ? indexOf(captureNames, $1) : -1;
                                if (n < 0) {
                                    throw new SyntaxError('Backreference to undefined group ' + $0);
                                }
                                return args[n + 1] || '';
                            }
                            if ($2 === '$') {
                                return '$';
                            }
                            if ($2 === '&' || +$2 === 0) {
                                return args[0];
                            }
                            if ($2 === '`') {
                                return args[args.length - 1].slice(0, args[args.length - 2]);
                            }
                            if ($2 === "'") {
                                return args[args.length - 1].slice(args[args.length - 2] + args[0].length);
                            }
                            $2 = +$2;
                            if (!isNaN($2)) {
                                if ($2 > args.length - 3) {
                                    throw new SyntaxError('Backreference to undefined group ' + $0);
                                }
                                return args[$2] || '';
                            }
                            throw new SyntaxError('Invalid token ' + $0);
                        });
                    });
                }
                if (isRegex) {
                    if (search.global) {
                        search.lastIndex = 0;
                    }
                    else {
                        search.lastIndex = origLastIndex;
                    }
                }
                return result;
            };
            fixed.split = function (separator, limit) {
                if (!self.isRegExp(separator)) {
                    return nativ.split.apply(this, arguments);
                }
                var str = String(this), output = [], origLastIndex = separator.lastIndex, lastLastIndex = 0, lastLength;
                limit = (limit === undefined ? -1 : limit) >>> 0;
                self.forEach(str, separator, function (match) {
                    if ((match.index + match[0].length) > lastLastIndex) {
                        output.push(str.slice(lastLastIndex, match.index));
                        if (match.length > 1 && match.index < str.length) {
                            Array.prototype.push.apply(output, match.slice(1));
                        }
                        lastLength = match[0].length;
                        lastLastIndex = match.index + lastLength;
                    }
                });
                if (lastLastIndex === str.length) {
                    if (!nativ.test.call(separator, '') || lastLength) {
                        output.push('');
                    }
                }
                else {
                    output.push(str.slice(lastLastIndex));
                }
                separator.lastIndex = origLastIndex;
                return output.length > limit ? output.slice(0, limit) : output;
            };
            add = self.addToken;
            add(/\\([ABCE-RTUVXYZaeg-mopqyz]|c(?![A-Za-z])|u(?![\dA-Fa-f]{4})|x(?![\dA-Fa-f]{2}))/, function (match, scope) {
                if (match[1] === 'B' && scope === defaultScope) {
                    return match[0];
                }
                throw new SyntaxError('Invalid escape ' + match[0]);
            }, { scope: 'all' });
            add(/\[(\^?)]/, function (match) {
                return match[1] ? '[\\s\\S]' : '\\b\\B';
            });
            add(/\(\?#[^)]*\)/, function (match, scope, flags) {
                return isQuantifierNext(match.input, match.index + match[0].length, flags) ? '' : '(?:)';
            });
            add(/\s+|#.*/, function (match, scope, flags) {
                return isQuantifierNext(match.input, match.index + match[0].length, flags) ? '' : '(?:)';
            }, { flag: 'x' });
            add(/\./, function () {
                return '[\\s\\S]';
            }, { flag: 's' });
            add(/\\k<([\w$]+)>/, function (match) {
                var index = isNaN(match[1]) ? (indexOf(this.captureNames, match[1]) + 1) : +match[1], endIndex = match.index + match[0].length;
                if (!index || index > this.captureNames.length) {
                    throw new SyntaxError('Backreference to undefined group ' + match[0]);
                }
                return '\\' + index + (endIndex === match.input.length || isNaN(match.input.charAt(endIndex)) ? '' : '(?:)');
            });
            add(/\\(\d+)/, function (match, scope) {
                if (!(scope === defaultScope && /^[1-9]/.test(match[1]) && +match[1] <= this.captureNames.length) && match[1] !== '0') {
                    throw new SyntaxError('Cannot use octal escape or backreference to undefined group ' + match[0]);
                }
                return match[0];
            }, { scope: 'all' });
            add(/\(\?P?<([\w$]+)>/, function (match) {
                if (!isNaN(match[1])) {
                    throw new SyntaxError('Cannot use integer as capture name ' + match[0]);
                }
                if (match[1] === 'length' || match[1] === '__proto__') {
                    throw new SyntaxError('Cannot use reserved word as capture name ' + match[0]);
                }
                if (indexOf(this.captureNames, match[1]) > -1) {
                    throw new SyntaxError('Cannot use same name for multiple groups ' + match[0]);
                }
                this.captureNames.push(match[1]);
                this.hasNamedCapture = true;
                return '(';
            });
            add(/\((?!\?)/, function (match, scope, flags) {
                if (flags.indexOf('n') > -1) {
                    return '(?:';
                }
                this.captureNames.push(null);
                return '(';
            }, { optionalFlags: 'n' });
            return self;
        }());
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
Shumway.AVM2.XRegExp.install({ natives: true });
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var Multiname = Shumway.AVM2.ABC.Multiname;
            var Scope = Shumway.AVM2.Runtime.Scope;
            var hasOwnProperty = Shumway.ObjectUtilities.hasOwnProperty;
            var hasOwnGetter = Shumway.ObjectUtilities.hasOwnGetter;
            var defineNonEnumerableProperty = Shumway.ObjectUtilities.defineNonEnumerableProperty;
            var isNumber = Shumway.isNumber;
            var isNullOrUndefined = Shumway.isNullOrUndefined;
            var isPrototypeWriteable = Shumway.ObjectUtilities.isPrototypeWriteable;
            var getOwnPropertyDescriptor = Shumway.ObjectUtilities.getOwnPropertyDescriptor;
            var notImplemented = Shumway.Debug.notImplemented;
            var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
            var assert = Shumway.Debug.assert;
            var createFunction = Shumway.AVM2.Runtime.createFunction;
            var Runtime = Shumway.AVM2.Runtime;
            var IndentingWriter = Shumway.IndentingWriter;
            var boxValue = Shumway.ObjectUtilities.boxValue;
            var SORT = Shumway.AVM2.ABC.SORT;
            var ClassBindings = Shumway.AVM2.Runtime.ClassBindings;
            var InstanceBindings = Shumway.AVM2.Runtime.InstanceBindings;
            var asCompare = Shumway.AVM2.Runtime.asCompare;
            var debug = false;
            var writer = debug ? new IndentingWriter() : null;
            (function (InitializationFlags) {
                InitializationFlags[InitializationFlags["NONE"] = 0x0] = "NONE";
                InitializationFlags[InitializationFlags["OWN_INITIALIZE"] = 0x1] = "OWN_INITIALIZE";
                InitializationFlags[InitializationFlags["SUPER_INITIALIZE"] = 0x2] = "SUPER_INITIALIZE";
            })(AS.InitializationFlags || (AS.InitializationFlags = {}));
            var InitializationFlags = AS.InitializationFlags;
            var ASObject = (function () {
                function ASObject() {
                }
                ASObject.morphIntoASClass = function (classInfo) {
                    this.classInfo = classInfo;
                    this.__proto__ = ASClass.prototype;
                };
                ASObject.create = function (self, baseClass, instanceConstructor) {
                    ASClass.create(self, baseClass, this.instanceConstructor);
                };
                ASObject.initializeFrom = function (value) {
                    return ASClassPrototype.initializeFrom.call(this, value);
                };
                ASObject.asCall = function (self) {
                    var argArray = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        argArray[_i - 1] = arguments[_i];
                    }
                    return this.callableConstructor.apply(self, argArray);
                };
                ASObject.asApply = function (self, argArray) {
                    return this.callableConstructor.apply(self, argArray);
                };
                ASObject.verify = function () {
                    ASClassPrototype.verify.call(this);
                };
                ASObject.trace = function (writer) {
                    ASClassPrototype.trace.call(this, writer);
                };
                ASObject.getQualifiedClassName = function () {
                    return ASClassPrototype.getQualifiedClassName.call(this);
                };
                ASObject._setPropertyIsEnumerable = function (o, V, enumerable) {
                    var name = Multiname.getPublicQualifiedName(V);
                    var descriptor = getOwnPropertyDescriptor(o, name);
                    descriptor.enumerable = false;
                    Object.defineProperty(o, name, descriptor);
                };
                ASObject._dontEnumPrototype = function (o) {
                    for (var key in o) {
                        if (Multiname.isPublicQualifiedName(key)) {
                            var descriptor = getOwnPropertyDescriptor(o, key);
                            descriptor.enumerable = false;
                            Object.defineProperty(o, key, descriptor);
                        }
                    }
                };
                ASObject._init = function () {
                    this.dynamicPrototype.asSetPublicProperty("hasOwnProperty", ASObject.prototype.native_hasOwnProperty);
                    this.dynamicPrototype.asSetPublicProperty("propertyIsEnumerable", ASObject.prototype.native_propertyIsEnumerable);
                    this.dynamicPrototype.asSetPublicProperty("setPropertyIsEnumerable", ASObject.prototype.setPropertyIsEnumerable);
                    this.dynamicPrototype.asSetPublicProperty("isPrototypeOf", ASObject.prototype.native_isPrototypeOf);
                    this.dynamicPrototype.asSetPublicProperty("toString", ASObject.prototype.toString);
                    this.dynamicPrototype.asSetPublicProperty("valueOf", ASObject.prototype.valueOf);
                    ASObject._dontEnumPrototype(this.dynamicPrototype);
                };
                ASObject.prototype.native_isPrototypeOf = function (V) {
                    notImplemented("isPrototypeOf");
                    return false;
                };
                ASObject.prototype.native_hasOwnProperty = function (name) {
                    var self = this;
                    return self.asHasOwnProperty(null, name, 0);
                };
                ASObject.prototype.native_propertyIsEnumerable = function (name) {
                    var self = this;
                    return self.asPropertyIsEnumerable(null, name, 0);
                };
                ASObject.prototype.setPropertyIsEnumerable = function (name, enumerable) {
                    ASObject._setPropertyIsEnumerable(this, name, enumerable);
                };
                ASObject.prototype.toString = function () {
                    var self = boxValue(this);
                    if (self instanceof ASClass) {
                        var cls = self;
                        return Shumway.StringUtilities.concat3("[class ", cls.classInfo.instanceInfo.name.name, "]");
                    }
                    return Shumway.StringUtilities.concat3("[object ", self.class.classInfo.instanceInfo.name.name, "]");
                };
                ASObject.baseClass = null;
                ASObject.instanceConstructor = Object;
                ASObject.instanceConstructorNoInitialize = null;
                ASObject.initializer = null;
                ASObject.initializers = null;
                ASObject.classInitializer = null;
                ASObject.callableConstructor = ASObject.instanceConstructor;
                ASObject.defaultValue = null;
                ASObject.initializationFlags = 0 /* NONE */;
                ASObject.call = Function.prototype.call;
                ASObject.apply = Function.prototype.apply;
                ASObject.coerce = Runtime.asCoerceObject;
                ASObject.defineProperty = Object.defineProperty;
                return ASObject;
            })();
            AS.ASObject = ASObject;
            var ASNative = (function (_super) {
                __extends(ASNative, _super);
                function ASNative() {
                    _super.apply(this, arguments);
                }
                ASNative.baseClass = null;
                ASNative.classInfo = null;
                ASNative.instanceConstructor = null;
                ASNative.callableConstructor = null;
                ASNative.classBindings = null;
                ASNative.instanceBindings = null;
                ASNative.staticNatives = null;
                ASNative.instanceNatives = null;
                ASNative.traitsPrototype = null;
                ASNative.dynamicPrototype = null;
                ASNative.defaultValue = null;
                ASNative.initializationFlags = 0 /* NONE */;
                return ASNative;
            })(ASObject);
            AS.ASNative = ASNative;
            var ASClass = (function (_super) {
                __extends(ASClass, _super);
                function ASClass(classInfo) {
                    false && _super.call(this);
                    this.classInfo = classInfo;
                    this.staticNatives = null;
                    this.instanceNatives = null;
                    this.initializationFlags = 0 /* NONE */;
                    this.defaultValue = null;
                }
                ASClass.configureBuiltinPrototype = function (self, baseClass) {
                    release || assert(self.instanceConstructor);
                    self.baseClass = baseClass;
                    self.dynamicPrototype = self.traitsPrototype = self.instanceConstructor.prototype;
                };
                ASClass.configurePrototype = function (self, baseClass) {
                    self.baseClass = baseClass;
                    self.dynamicPrototype = Object.create(baseClass.dynamicPrototype);
                    self.traitsPrototype = Object.create(self.dynamicPrototype);
                    var traitsPrototype = self.traitsPrototype;
                    var classes = [];
                    while (self) {
                        classes.push(self);
                        self = self.baseClass;
                    }
                    for (var i = 0; i < classes.length; i++) {
                        var sources = [classes[i].typeScriptPrototype];
                        if (classes[i].instanceNatives) {
                            Shumway.ArrayUtilities.pushMany(sources, classes[i].instanceNatives);
                        }
                        for (var j = 0; j < sources.length; j++) {
                            var source = sources[j];
                            for (var property in source) {
                                if (i > 0 && property === "toString") {
                                    continue;
                                }
                                if (hasOwnProperty(source, property) && !hasOwnProperty(traitsPrototype, property)) {
                                    var descriptor = Object.getOwnPropertyDescriptor(source, property);
                                    release || Shumway.Debug.assert(descriptor);
                                    try {
                                        Object.defineProperty(traitsPrototype, property, descriptor);
                                    }
                                    catch (e) {
                                    }
                                }
                            }
                        }
                    }
                };
                ASClass.create = function (self, baseClass, instanceConstructor) {
                    release || assert(!self.instanceConstructorNoInitialize, "This should not be set yet.");
                    release || assert(!self.dynamicPrototype && !self.traitsPrototype, "These should not be set yet.");
                    self.typeScriptPrototype = self.prototype;
                    if (self.instanceConstructor && !isPrototypeWriteable(self.instanceConstructor)) {
                        ASClass.configureBuiltinPrototype(self, baseClass);
                    }
                    else {
                        ASClass.configurePrototype(self, baseClass);
                    }
                    if (!self.instanceConstructor) {
                        self.instanceConstructor = instanceConstructor;
                        if (self !== instanceConstructor) {
                            self.instanceConstructor.__proto__ = self;
                        }
                    }
                    else {
                        writer && writer.warnLn("Ignoring AS3 instanceConstructor.");
                    }
                    if (!self.callableConstructor) {
                        self.callableConstructor = self.coerce.bind(self);
                    }
                    self.instanceConstructorNoInitialize = self.instanceConstructor;
                    self.instanceConstructor.prototype = self.traitsPrototype;
                    defineNonEnumerableProperty(self.instanceConstructor.prototype, "class", self);
                    defineNonEnumerableProperty(self.dynamicPrototype, Multiname.getPublicQualifiedName("constructor"), self);
                    if (self.protocol) {
                        Shumway.ObjectUtilities.copyOwnPropertyDescriptors(self.traitsPrototype, self.protocol);
                    }
                };
                ASClass.prototype.initializeFrom = function (value) {
                    var o = Object.create(this.traitsPrototype);
                    ASClass.runInitializers(o, value);
                    return o;
                };
                ASClass.runInitializers = function (self, argument) {
                    argument = argument || self.class.defaultInitializerArgument;
                    var cls = self.class;
                    var initializers = cls.initializers;
                    if (initializers) {
                        for (var i = 0; i < initializers.length; i++) {
                            initializers[i].call(self, argument);
                        }
                    }
                };
                ASClass.configureInitializers = function (self) {
                    if (self.baseClass && self.baseClass.initializers) {
                        self.initializers = self.baseClass.initializers.slice(0);
                    }
                    if (self.initializer) {
                        if (!self.initializers) {
                            self.initializers = [];
                        }
                        self.initializers.push(self.initializer);
                    }
                    if (self.initializers) {
                        release || assert(self.instanceConstructorNoInitialize === self.instanceConstructor);
                        var previousConstructor = self;
                        self.instanceConstructor = function () {
                            ASClass.runInitializers(this, undefined);
                            return self.instanceConstructorNoInitialize.apply(this, arguments);
                        };
                        self.instanceConstructor.prototype = self.traitsPrototype;
                        defineNonEnumerableProperty(self.instanceConstructor.prototype, "class", self);
                        (self.instanceConstructor).classInfo = previousConstructor.classInfo;
                        self.instanceConstructor.__proto__ = previousConstructor;
                    }
                };
                ASClass.runClassInitializer = function (self) {
                    if (self.classInitializer) {
                        self.classInitializer();
                    }
                };
                ASClass.linkSymbols = function (self) {
                    function containsSymbol(symbols, name) {
                        for (var i = 0; i < symbols.length; i++) {
                            var symbol = symbols[i];
                            if (symbol.indexOf(name) >= 0) {
                                var releaseSymbol = symbol[symbol.length - 1] === "!";
                                if (releaseSymbol) {
                                    symbol = symbol.slice(0, symbol.length - 1);
                                }
                                if (name !== symbol) {
                                    continue;
                                }
                                if (release) {
                                    return releaseSymbol;
                                }
                                return true;
                            }
                        }
                        return false;
                    }
                    function link(symbols, traits, object) {
                        for (var i = 0; i < traits.length; i++) {
                            var trait = traits[i];
                            if (!containsSymbol(symbols, trait.name.name)) {
                                continue;
                            }
                            release || assert(!trait.name.getNamespace().isPrivate(), "Why are you linking against private members?");
                            if (trait.isConst()) {
                                notImplemented("Don't link against const traits.");
                                return;
                            }
                            var name = trait.name.name;
                            var qn = Multiname.getQualifiedName(trait.name);
                            if (trait.isSlot()) {
                                Object.defineProperty(object, name, {
                                    get: new Function("", "return this." + qn + "//# sourceURL=get-" + qn + ".as"),
                                    set: new Function("v", "this." + qn + " = v;" + "//# sourceURL=set-" + qn + ".as")
                                });
                            }
                            else if (trait.isMethod()) {
                                release || assert(!object[name], "Symbol should not already exist.");
                                release || assert(object.asOpenMethods[qn], "There should be an open method for this symbol.");
                                object[name] = object.asOpenMethods[qn];
                            }
                            else if (trait.isGetter()) {
                                release || assert(hasOwnGetter(object, qn), "There should be an getter method for this symbol.");
                                Object.defineProperty(object, name, {
                                    get: new Function("", "return this." + qn + "//# sourceURL=get-" + qn + ".as")
                                });
                            }
                            else {
                                notImplemented(trait);
                            }
                        }
                    }
                    if (self.classSymbols) {
                        link(self.classSymbols, self.classInfo.traits, self);
                    }
                    if (self.instanceSymbols) {
                        link(self.instanceSymbols, self.classInfo.instanceInfo.traits, self.traitsPrototype);
                    }
                };
                ASClass.prototype.morphIntoASClass = function (classInfo) {
                    release || assert(this.classInfo === classInfo);
                    release || assert(this instanceof ASClass);
                };
                Object.defineProperty(ASClass.prototype, "native_prototype", {
                    get: function () {
                        release || assert(this.dynamicPrototype);
                        return this.dynamicPrototype;
                    },
                    enumerable: true,
                    configurable: true
                });
                ASClass.prototype.asCall = function (self, cls) {
                    return this.coerce(cls);
                };
                ASClass.prototype.asApply = function (self, argArray) {
                    return this.coerce(argArray[0]);
                };
                ASClass.prototype.applyType = function (type) {
                    debugger;
                    return null;
                };
                ASClass.prototype.isInstanceOf = function (value) {
                    if (this.isInterface()) {
                        return false;
                    }
                    return this.isType(value);
                };
                ASClass.prototype.isType = function (value) {
                    if (Shumway.isNullOrUndefined(value)) {
                        return false;
                    }
                    value = boxValue(value);
                    if (this.isInterface()) {
                        if (value === null || typeof value !== "object") {
                            return false;
                        }
                        release || assert(value.class.implementedInterfaces, "No 'implementedInterfaces' map found on class " + value.class);
                        var qualifiedName = Multiname.getQualifiedName(this.classInfo.instanceInfo.name);
                        return value.class.implementedInterfaces[qualifiedName] !== undefined;
                    }
                    return this.dynamicPrototype.isPrototypeOf(value);
                };
                ASClass.prototype.isSubtypeOf = function (value) {
                    var that = this;
                    while (that) {
                        if (that.traitsPrototype === value.traitsPrototype) {
                            return true;
                        }
                        that = that.baseClass;
                    }
                    return false;
                };
                ASClass.prototype.coerce = function (value) {
                    debug && console.log(Shumway.StringUtilities.concat4("Coercing ", value, " to ", this));
                    return value;
                };
                ASClass.prototype.isInterface = function () {
                    return this.classInfo.instanceInfo.isInterface();
                };
                ASClass.prototype.getQualifiedClassName = function () {
                    var name = this.classInfo.instanceInfo.name;
                    var uri = name.namespaces[0].uri;
                    if (uri) {
                        return uri + "::" + name.name;
                    }
                    return name.name;
                };
                ASClass.prototype.verify = function () {
                    var self = this;
                    if (this.isInterface()) {
                        return;
                    }
                    writer && writer.enter("Verifying Class: " + self.classInfo + " {");
                    var traits = [self.classInfo.traits, self.classInfo.instanceInfo.traits];
                    var staticNatives = [self];
                    if (self.staticNatives) {
                        Shumway.ArrayUtilities.pushMany(staticNatives, self.staticNatives);
                    }
                    var instanceNatives = [self.prototype];
                    if (self.instanceNatives) {
                        Shumway.ArrayUtilities.pushMany(instanceNatives, self.instanceNatives);
                    }
                    if (self === ASObject) {
                        release || assert(!self.baseClass, "ASObject should have no base class.");
                    }
                    else {
                        release || assert(self.baseClass, self.classInfo.instanceInfo.name + " has no base class.");
                        release || assert(self.baseClass !== self);
                    }
                    release || assert(self.traitsPrototype === self.instanceConstructor.prototype, "The traitsPrototype is not set correctly.");
                    if (self !== ASObject) {
                        if (ASObject.staticNatives === self.staticNatives) {
                            writer && writer.warnLn("Template does not override its staticNatives, possibly a bug.");
                        }
                        if (ASObject.instanceNatives === self.instanceNatives) {
                            writer && writer.warnLn("Template does not override its instanceNatives, possibly a bug.");
                        }
                    }
                    function has(objects, predicate, name) {
                        for (var i = 0; i < objects.length; i++) {
                            if (predicate(objects[i], name)) {
                                return true;
                            }
                        }
                        return false;
                    }
                    for (var j = 0; j < traits.length; j++) {
                        var isClassTrait = j === 0;
                        for (var i = 0; i < traits[j].length; i++) {
                            var trait = traits[j][i];
                            var name = escapeNativeName(trait.name.name);
                            if (!(trait.isMethodOrAccessor() && trait.methodInfo.isNative())) {
                                continue;
                            }
                            var holders = isClassTrait ? staticNatives : instanceNatives;
                            var hasDefinition = false;
                            if (trait.isMethod()) {
                                hasDefinition = has(holders, Shumway.ObjectUtilities.hasOwnProperty, name);
                            }
                            else if (trait.isGetter()) {
                                hasDefinition = has(holders, Shumway.ObjectUtilities.hasOwnGetter, name);
                            }
                            else if (trait.isSetter()) {
                                hasDefinition = has(holders, Shumway.ObjectUtilities.hasOwnSetter, name);
                            }
                            if (!hasDefinition) {
                                writer && writer.warnLn("Template is missing an implementation of the native " + (isClassTrait ? "static" : "instance") + " trait: " + trait + " in class: " + self.classInfo);
                            }
                        }
                    }
                    writer && writer.leave("}");
                    Shumway.Debug.assert(self.instanceConstructor, "Must have a constructor function.");
                };
                ASClass.labelObject = function (o) {
                    if (!o) {
                        return o;
                    }
                    if (!hasOwnProperty(o, "labelId")) {
                        o.labelId = ASClass.labelCounter++;
                    }
                    if (o instanceof Function) {
                        return "Function [#" + o.labelId + "]";
                    }
                    return "Object [#" + o.labelId + "]";
                };
                ASClass.prototype.trace = function (writer) {
                    writer.enter("Class: " + this.classInfo);
                    writer.writeLn("baseClass: " + (this.baseClass ? this.baseClass.classInfo.instanceInfo.name : null));
                    writer.writeLn("instanceConstructor: " + this.instanceConstructor + " " + ASClass.labelObject(this.instanceConstructor));
                    writer.writeLn("instanceConstructorNoInitialize: " + this.instanceConstructorNoInitialize + " " + ASClass.labelObject(this.instanceConstructorNoInitialize));
                    writer.writeLn("traitsPrototype: " + ASClass.labelObject(this.traitsPrototype));
                    writer.writeLn("traitsPrototype.__proto__: " + ASClass.labelObject(this.traitsPrototype.__proto__));
                    writer.writeLn("dynamicPrototype: " + ASClass.labelObject(this.dynamicPrototype));
                    writer.writeLn("dynamicPrototype.__proto__: " + ASClass.labelObject(this.dynamicPrototype.__proto__));
                    writer.writeLn("instanceConstructor.prototype: " + ASClass.labelObject(this.instanceConstructor.prototype));
                    writer.leave("}");
                };
                ASClass.instanceConstructor = ASClass;
                ASClass.staticNatives = null;
                ASClass.instanceNatives = null;
                ASClass.labelCounter = 0;
                return ASClass;
            })(ASObject);
            AS.ASClass = ASClass;
            var ASClassPrototype = ASClass.prototype;
            ASClassPrototype.call = Function.prototype.call;
            ASClassPrototype.apply = Function.prototype.apply;
            var ASFunction = (function (_super) {
                __extends(ASFunction, _super);
                function ASFunction() {
                    false && _super.call(this);
                }
                Object.defineProperty(ASFunction.prototype, "native_prototype", {
                    get: function () {
                        var self = this;
                        return self.prototype;
                    },
                    set: function (p) {
                        var self = this;
                        self.prototype = p;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ASFunction.prototype, "native_length", {
                    get: function () {
                        if (this.hasOwnProperty(Runtime.VM_LENGTH)) {
                            return this.asLength;
                        }
                        return this.length;
                    },
                    enumerable: true,
                    configurable: true
                });
                ASFunction.prototype.toString = function () {
                    return "function Function() {}";
                };
                ASFunction.baseClass = null;
                ASFunction.instanceConstructor = Function;
                ASFunction.staticNatives = [Function];
                ASFunction.instanceNatives = [Function.prototype];
                return ASFunction;
            })(ASObject);
            AS.ASFunction = ASFunction;
            var ASBoolean = (function (_super) {
                __extends(ASBoolean, _super);
                function ASBoolean(value) {
                    if (value === void 0) { value = undefined; }
                    false && _super.call(this);
                }
                ASBoolean.instanceConstructor = Boolean;
                ASBoolean.callableConstructor = ASBoolean.instanceConstructor;
                ASBoolean.staticNatives = null;
                ASBoolean.instanceNatives = null;
                ASBoolean.coerce = Runtime.asCoerceBoolean;
                return ASBoolean;
            })(ASObject);
            AS.ASBoolean = ASBoolean;
            ASBoolean.prototype.toString = Boolean.prototype.toString;
            ASBoolean.prototype.valueOf = Boolean.prototype.valueOf;
            var ASMethodClosure = (function (_super) {
                __extends(ASMethodClosure, _super);
                function ASMethodClosure(self, fn) {
                    false && _super.call(this);
                    var bound = Shumway.FunctionUtilities.bindSafely(fn, self);
                    defineNonEnumerableProperty(this, "call", bound.call.bind(bound));
                    defineNonEnumerableProperty(this, "apply", bound.apply.bind(bound));
                }
                ASMethodClosure.prototype.toString = function () {
                    return "function Function() {}";
                };
                ASMethodClosure.staticNatives = null;
                ASMethodClosure.instanceNatives = null;
                ASMethodClosure.instanceConstructor = ASMethodClosure;
                return ASMethodClosure;
            })(ASFunction);
            AS.ASMethodClosure = ASMethodClosure;
            var ASNumber = (function (_super) {
                __extends(ASNumber, _super);
                function ASNumber() {
                    _super.apply(this, arguments);
                }
                ASNumber._numberToString = function (n, radix) {
                    radix = radix | 0;
                    return Number(n).toString(radix);
                };
                ASNumber._minValue = function () {
                    return Number.MIN_VALUE;
                };
                ASNumber.instanceConstructor = Number;
                ASNumber.callableConstructor = ASNumber.instanceConstructor;
                ASNumber.staticNatives = [Math];
                ASNumber.instanceNatives = [Number.prototype];
                ASNumber.defaultValue = Number(0);
                ASNumber.coerce = Runtime.asCoerceNumber;
                return ASNumber;
            })(ASObject);
            AS.ASNumber = ASNumber;
            var ASInt = (function (_super) {
                __extends(ASInt, _super);
                function ASInt(value) {
                    false && _super.call(this);
                    return Object(Number(value | 0));
                }
                ASInt.asCall = function (self, arg0) {
                    return arg0 | 0;
                };
                ASInt.asApply = function (self, argArray) {
                    return argArray[0] | 0;
                };
                ASInt.isInstanceOf = function (value) {
                    return false;
                };
                ASInt.isType = function (value) {
                    if (isNumber(value) || value instanceof Number) {
                        value = +value;
                        return (value | 0) === value;
                    }
                    return false;
                };
                ASInt.instanceConstructor = ASInt;
                ASInt.callableConstructor = ASInt.instanceConstructor;
                ASInt.staticNatives = [Math];
                ASInt.instanceNatives = [Number.prototype];
                ASInt.defaultValue = 0;
                ASInt.coerce = Runtime.asCoerceInt;
                return ASInt;
            })(ASObject);
            AS.ASInt = ASInt;
            var ASUint = (function (_super) {
                __extends(ASUint, _super);
                function ASUint(value) {
                    false && _super.call(this);
                    return Object(Number(value >>> 0));
                }
                ASUint.asCall = function (self, arg0) {
                    return arg0 >>> 0;
                };
                ASUint.asApply = function (self, argArray) {
                    return argArray[0] >>> 0;
                };
                ASUint.isInstanceOf = function (value) {
                    return false;
                };
                ASUint.isType = function (value) {
                    if (isNumber(value) || value instanceof Number) {
                        value = +value;
                        return (value >>> 0) === value;
                    }
                    return false;
                };
                ASUint.instanceConstructor = ASUint;
                ASUint.callableConstructor = ASUint.instanceConstructor;
                ASUint.staticNatives = [Math];
                ASUint.instanceNatives = [Number.prototype];
                ASUint.defaultValue = 0;
                ASUint.coerce = Runtime.asCoerceUint;
                return ASUint;
            })(ASObject);
            AS.ASUint = ASUint;
            var ASString = (function (_super) {
                __extends(ASString, _super);
                function ASString() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(ASString.prototype, "native_length", {
                    get: function () {
                        return this.length;
                    },
                    enumerable: true,
                    configurable: true
                });
                ASString.prototype.match = function (re) {
                    if (re === (void 0) || re === null) {
                        return null;
                    }
                    else {
                        if (re instanceof AVM2.XRegExp && re.global) {
                            var matches = [], m;
                            while ((m = re.exec(this))) {
                                matches.push(m[0]);
                            }
                            return matches;
                        }
                        if (!(re instanceof AVM2.XRegExp) && !(typeof re === 'string')) {
                            re = String(re);
                        }
                        return this.match(re);
                    }
                };
                ASString.prototype.search = function (re) {
                    if (re instanceof AVM2.XRegExp) {
                        return this.search(re);
                    }
                    return this.indexOf(asCoerceString(re));
                };
                ASString.prototype.toUpperCase = function () {
                    var str = String.prototype.toUpperCase.apply(this);
                    var str = str.replace(/\u039C/g, String.fromCharCode(181));
                    return str;
                };
                ASString.prototype.toLocaleUpperCase = function () {
                    var str = String.prototype.toLocaleUpperCase.apply(this);
                    var str = str.replace(/\u039C/g, String.fromCharCode(181));
                    return str;
                };
                ASString.instanceConstructor = String;
                ASString.callableConstructor = ASString.instanceConstructor;
                ASString.staticNatives = [String];
                ASString.instanceNatives = [String.prototype];
                ASString.coerce = Runtime.asCoerceString;
                return ASString;
            })(ASObject);
            AS.ASString = ASString;
            function arraySort(o, args) {
                if (args.length === 0) {
                    return o.sort();
                }
                var compareFunction, options = 0;
                if (args[0] instanceof Function) {
                    compareFunction = args[0];
                }
                else if (isNumber(args[0])) {
                    options = args[0];
                }
                if (isNumber(args[1])) {
                    options = args[1];
                }
                o.sort(function (a, b) {
                    return asCompare(a, b, options, compareFunction);
                });
                return o;
            }
            AS.arraySort = arraySort;
            var ASArray = (function (_super) {
                __extends(ASArray, _super);
                function ASArray() {
                    _super.apply(this, arguments);
                }
                ASArray.prototype.toLocaleString = function () {
                    var a = ASArray.coerce(this);
                    var out = "";
                    for (var i = 0, n = a.length; i < n; i++) {
                        var val = a[i];
                        if (val !== null && val !== undefined) {
                            out += val.toLocaleString();
                        }
                        if (i + 1 < n) {
                            out += ",";
                        }
                    }
                    return out;
                };
                ASArray.prototype.splice = function () {
                    var o = this;
                    if (arguments.length === 0) {
                        return undefined;
                    }
                    return o.splice.apply(o, arguments);
                };
                ASArray.prototype.every = function (callback, thisObject) {
                    var o = this;
                    for (var i = 0; i < o.length; i++) {
                        if (callback.call(thisObject, o[i], i, o) !== true) {
                            return false;
                        }
                    }
                    return false;
                };
                ASArray.prototype.filter = function (callback, thisObject) {
                    var o = this;
                    var result = [];
                    for (var i = 0; i < o.length; i++) {
                        if (callback.call(thisObject, o[i], i, o) === true) {
                            result.push(o[i]);
                        }
                    }
                    return result;
                };
                ASArray.prototype.sort = function () {
                    var o = this;
                    if (arguments.length === 0) {
                        return o.sort();
                    }
                    var compareFunction, options = 0;
                    if (arguments[0] instanceof Function) {
                        compareFunction = arguments[0];
                    }
                    else if (isNumber(arguments[0])) {
                        options = arguments[0];
                    }
                    if (isNumber(arguments[1])) {
                        options = arguments[1];
                    }
                    o.sort(function (a, b) {
                        return Runtime.asCompare(a, b, options, compareFunction);
                    });
                    return o;
                };
                ASArray.prototype.sortOn = function (names, options) {
                    var o = this;
                    if (Shumway.isString(names)) {
                        names = [names];
                    }
                    if (isNullOrUndefined(options)) {
                        options = [];
                    }
                    else if (isNumber(options)) {
                        options = [options];
                    }
                    for (var i = names.length - 1; i >= 0; i--) {
                        var key = Multiname.getPublicQualifiedName(names[i]);
                        if (ASArray.CACHE_NUMERIC_COMPARATORS && options[i] & 16 /* NUMERIC */) {
                            var str = "var x = +(a." + key + "), y = +(b." + key + ");";
                            if (options[i] & 2 /* DESCENDING */) {
                                str += "return x < y ? 1 : (x > y ? -1 : 0);";
                            }
                            else {
                                str += "return x < y ? -1 : (x > y ? 1 : 0);";
                            }
                            var numericComparator = ASArray.numericComparatorCache[str];
                            if (!numericComparator) {
                                numericComparator = ASArray.numericComparatorCache[str] = new Function("a", "b", str);
                            }
                            o.sort(numericComparator);
                        }
                        else {
                            o.sort(function (a, b) {
                                return Runtime.asCompare(a[key], b[key], options[i] | 0);
                            });
                        }
                    }
                    return o;
                };
                Object.defineProperty(ASArray.prototype, "native_length", {
                    get: function () {
                        return this.length;
                    },
                    set: function (newLength) {
                        newLength = newLength >>> 0;
                        this.length = newLength;
                    },
                    enumerable: true,
                    configurable: true
                });
                ASArray.instanceConstructor = Array;
                ASArray.staticNatives = [Array];
                ASArray.instanceNatives = [Array.prototype];
                ASArray.classInitializer = function () {
                    var proto = Array.prototype;
                    var asProto = ASArray.prototype;
                    defineNonEnumerableProperty(proto, '$Bgjoin', proto.join);
                    defineNonEnumerableProperty(proto, '$BgtoString', proto.join);
                    defineNonEnumerableProperty(proto, '$BgtoLocaleString', asProto.toLocaleString);
                    defineNonEnumerableProperty(proto, '$Bgpop', proto.pop);
                    defineNonEnumerableProperty(proto, '$Bgpush', proto.push);
                    defineNonEnumerableProperty(proto, '$Bgreverse', proto.reverse);
                    defineNonEnumerableProperty(proto, '$Bgconcat', proto.concat);
                    defineNonEnumerableProperty(proto, '$Bgsplice', asProto.splice);
                    defineNonEnumerableProperty(proto, '$Bgslice', proto.slice);
                    defineNonEnumerableProperty(proto, '$Bgshift', proto.shift);
                    defineNonEnumerableProperty(proto, '$Bgunshift', proto.unshift);
                    defineNonEnumerableProperty(proto, '$BgindexOf', proto.indexOf);
                    defineNonEnumerableProperty(proto, '$BglastIndexOf', proto.lastIndexOf);
                    defineNonEnumerableProperty(proto, '$BgforEach', proto.forEach);
                    defineNonEnumerableProperty(proto, '$Bgmap', proto.map);
                    defineNonEnumerableProperty(proto, '$Bgfilter', proto.filter);
                    defineNonEnumerableProperty(proto, '$Bgsome', proto.some);
                    defineNonEnumerableProperty(proto, '$Bgevery', asProto.every);
                    defineNonEnumerableProperty(proto, '$Bgsort', asProto.sort);
                    defineNonEnumerableProperty(proto, '$BgsortOn', asProto.sortOn);
                };
                ASArray.CACHE_NUMERIC_COMPARATORS = true;
                ASArray.numericComparatorCache = Object.create(null);
                return ASArray;
            })(ASObject);
            AS.ASArray = ASArray;
            var ASVector = (function (_super) {
                __extends(ASVector, _super);
                function ASVector() {
                    _super.apply(this, arguments);
                }
                ASVector.prototype.newThisType = function () {
                    return new this.class.instanceConstructor();
                };
                ASVector.staticNatives = null;
                ASVector.instanceNatives = null;
                ASVector.instanceConstructor = ASVector;
                ASVector.callableConstructor = null;
                return ASVector;
            })(ASNative);
            AS.ASVector = ASVector;
            var ASJSON = (function (_super) {
                __extends(ASJSON, _super);
                function ASJSON() {
                    _super.apply(this, arguments);
                }
                ASJSON.transformJSValueToAS = function (value, deep) {
                    if (typeof value !== "object") {
                        return value;
                    }
                    if (isNullOrUndefined(value)) {
                        return value;
                    }
                    var keys = Object.keys(value);
                    var result = Array.isArray(value) ? [] : {};
                    for (var i = 0; i < keys.length; i++) {
                        var v = value[keys[i]];
                        if (deep) {
                            v = ASJSON.transformJSValueToAS(v, true);
                        }
                        result.asSetPublicProperty(keys[i], v);
                    }
                    return result;
                };
                ASJSON.transformASValueToJS = function (value, deep) {
                    if (typeof value !== "object") {
                        return value;
                    }
                    if (isNullOrUndefined(value)) {
                        return value;
                    }
                    var keys = Object.keys(value);
                    var result = Array.isArray(value) ? [] : {};
                    for (var i = 0; i < keys.length; i++) {
                        var key = keys[i];
                        var jsKey = key;
                        if (!Shumway.isNumeric(key)) {
                            jsKey = Multiname.getNameFromPublicQualifiedName(key);
                        }
                        var v = value[key];
                        if (deep) {
                            v = ASJSON.transformASValueToJS(v, true);
                        }
                        result[jsKey] = v;
                    }
                    return result;
                };
                ASJSON.parseCore = function (text) {
                    text = asCoerceString(text);
                    return ASJSON.transformJSValueToAS(JSON.parse(text), true);
                };
                ASJSON.stringifySpecializedToString = function (value, replacerArray, replacerFunction, gap) {
                    return JSON.stringify(ASJSON.transformASValueToJS(value, true), replacerFunction, gap);
                };
                ASJSON.instanceConstructor = ASJSON;
                ASJSON.staticNatives = null;
                ASJSON.instanceNatives = null;
                return ASJSON;
            })(ASObject);
            AS.ASJSON = ASJSON;
            var ASError = (function (_super) {
                __extends(ASError, _super);
                function ASError(msg, id) {
                    if (msg === void 0) { msg = ""; }
                    if (id === void 0) { id = 0; }
                    false && _super.call(this);
                    notImplemented("ASError");
                }
                ASError.prototype.getStackTrace = function () {
                    return null;
                };
                ASError.instanceConstructor = null;
                ASError.staticNatives = null;
                ASError.instanceNatives = null;
                ASError.getErrorMessage = Shumway.AVM2.getErrorMessage;
                return ASError;
            })(ASNative);
            AS.ASError = ASError;
            var ASDefinitionError = (function (_super) {
                __extends(ASDefinitionError, _super);
                function ASDefinitionError() {
                    _super.apply(this, arguments);
                }
                return ASDefinitionError;
            })(ASError);
            AS.ASDefinitionError = ASDefinitionError;
            var ASEvalError = (function (_super) {
                __extends(ASEvalError, _super);
                function ASEvalError() {
                    _super.apply(this, arguments);
                }
                return ASEvalError;
            })(ASError);
            AS.ASEvalError = ASEvalError;
            var ASRangeError = (function (_super) {
                __extends(ASRangeError, _super);
                function ASRangeError() {
                    _super.apply(this, arguments);
                }
                return ASRangeError;
            })(ASError);
            AS.ASRangeError = ASRangeError;
            var ASReferenceError = (function (_super) {
                __extends(ASReferenceError, _super);
                function ASReferenceError() {
                    _super.apply(this, arguments);
                }
                return ASReferenceError;
            })(ASError);
            AS.ASReferenceError = ASReferenceError;
            var ASSecurityError = (function (_super) {
                __extends(ASSecurityError, _super);
                function ASSecurityError() {
                    _super.apply(this, arguments);
                }
                return ASSecurityError;
            })(ASError);
            AS.ASSecurityError = ASSecurityError;
            var ASSyntaxError = (function (_super) {
                __extends(ASSyntaxError, _super);
                function ASSyntaxError() {
                    _super.apply(this, arguments);
                }
                return ASSyntaxError;
            })(ASError);
            AS.ASSyntaxError = ASSyntaxError;
            var ASTypeError = (function (_super) {
                __extends(ASTypeError, _super);
                function ASTypeError() {
                    _super.apply(this, arguments);
                }
                return ASTypeError;
            })(ASError);
            AS.ASTypeError = ASTypeError;
            var ASURIError = (function (_super) {
                __extends(ASURIError, _super);
                function ASURIError() {
                    _super.apply(this, arguments);
                }
                return ASURIError;
            })(ASError);
            AS.ASURIError = ASURIError;
            var ASVerifyError = (function (_super) {
                __extends(ASVerifyError, _super);
                function ASVerifyError() {
                    _super.apply(this, arguments);
                }
                return ASVerifyError;
            })(ASError);
            AS.ASVerifyError = ASVerifyError;
            var ASUninitializedError = (function (_super) {
                __extends(ASUninitializedError, _super);
                function ASUninitializedError() {
                    _super.apply(this, arguments);
                }
                return ASUninitializedError;
            })(ASError);
            AS.ASUninitializedError = ASUninitializedError;
            var ASArgumentError = (function (_super) {
                __extends(ASArgumentError, _super);
                function ASArgumentError() {
                    _super.apply(this, arguments);
                }
                return ASArgumentError;
            })(ASError);
            AS.ASArgumentError = ASArgumentError;
            var ASRegExp = (function (_super) {
                __extends(ASRegExp, _super);
                function ASRegExp() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(ASRegExp.prototype, "native_source", {
                    get: function () {
                        var self = this;
                        return self.source;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ASRegExp.prototype, "native_global", {
                    get: function () {
                        var self = this;
                        return self.global;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ASRegExp.prototype, "native_ignoreCase", {
                    get: function () {
                        var self = this;
                        return self.ignoreCase;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ASRegExp.prototype, "native_multiline", {
                    get: function () {
                        var self = this;
                        return self.multiline;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ASRegExp.prototype, "native_lastIndex", {
                    get: function () {
                        var self = this;
                        return self.lastIndex;
                    },
                    set: function (i) {
                        var self = this;
                        i = i | 0;
                        self.lastIndex = i;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ASRegExp.prototype, "native_dotall", {
                    get: function () {
                        var self = this;
                        return self.dotall;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ASRegExp.prototype, "native_extended", {
                    get: function () {
                        var self = this;
                        return self.extended;
                    },
                    enumerable: true,
                    configurable: true
                });
                ASRegExp.prototype.exec = function (s) {
                    if (s === void 0) { s = ""; }
                    var result = RegExp.prototype.exec.apply(this, arguments);
                    if (!result) {
                        return result;
                    }
                    var keys = Object.keys(result);
                    for (var i = 0; i < keys.length; i++) {
                        var k = keys[i];
                        if (!Shumway.isNumeric(k)) {
                            if (result[k] === undefined) {
                                result[k] = "";
                            }
                        }
                    }
                    Shumway.AVM2.Runtime.publicizeProperties(result);
                    return result;
                };
                ASRegExp.instanceConstructor = AVM2.XRegExp;
                ASRegExp.staticNatives = [AVM2.XRegExp];
                ASRegExp.instanceNatives = [AVM2.XRegExp.prototype];
                return ASRegExp;
            })(ASObject);
            AS.ASRegExp = ASRegExp;
            var ASMath = (function (_super) {
                __extends(ASMath, _super);
                function ASMath() {
                    _super.apply(this, arguments);
                }
                ASMath.staticNatives = [Math];
                return ASMath;
            })(ASNative);
            AS.ASMath = ASMath;
            var ASDate = (function (_super) {
                __extends(ASDate, _super);
                function ASDate() {
                    _super.apply(this, arguments);
                }
                ASDate.staticNatives = [Date];
                ASDate.instanceNatives = [Date.prototype];
                ASDate.instanceConstructor = Date;
                return ASDate;
            })(ASNative);
            AS.ASDate = ASDate;
            var builtinNativeClasses = Shumway.ObjectUtilities.createMap();
            var isInitialized = false;
            function initialize(domain) {
                if (isInitialized) {
                    return;
                }
                builtinNativeClasses["ObjectClass"] = ASObject;
                builtinNativeClasses["Class"] = ASClass;
                builtinNativeClasses["FunctionClass"] = ASFunction;
                builtinNativeClasses["BooleanClass"] = ASBoolean;
                builtinNativeClasses["MethodClosureClass"] = ASMethodClosure;
                builtinNativeClasses["NamespaceClass"] = AS.ASNamespace;
                builtinNativeClasses["NumberClass"] = ASNumber;
                builtinNativeClasses["IntClass"] = ASInt;
                builtinNativeClasses["UIntClass"] = ASUint;
                builtinNativeClasses["StringClass"] = ASString;
                builtinNativeClasses["ArrayClass"] = ASArray;
                builtinNativeClasses["VectorClass"] = ASVector;
                builtinNativeClasses["ObjectVectorClass"] = AS.GenericVector;
                builtinNativeClasses["IntVectorClass"] = AS.Int32Vector;
                builtinNativeClasses["UIntVectorClass"] = AS.Uint32Vector;
                builtinNativeClasses["DoubleVectorClass"] = AS.Float64Vector;
                builtinNativeClasses["JSONClass"] = ASJSON;
                builtinNativeClasses["XMLClass"] = AS.ASXML;
                builtinNativeClasses["XMLListClass"] = AS.ASXMLList;
                builtinNativeClasses["QNameClass"] = AS.ASQName;
                builtinNativeClasses["ErrorClass"] = ASError;
                builtinNativeClasses["DefinitionErrorClass"] = ASDefinitionError;
                builtinNativeClasses["EvalErrorClass"] = ASEvalError;
                builtinNativeClasses["RangeErrorClass"] = ASRangeError;
                builtinNativeClasses["ReferenceErrorClass"] = ASReferenceError;
                builtinNativeClasses["SecurityErrorClass"] = ASSecurityError;
                builtinNativeClasses["SyntaxErrorClass"] = ASSyntaxError;
                builtinNativeClasses["TypeErrorClass"] = ASTypeError;
                builtinNativeClasses["URIErrorClass"] = ASURIError;
                builtinNativeClasses["VerifyErrorClass"] = ASVerifyError;
                builtinNativeClasses["UninitializedErrorClass"] = ASUninitializedError;
                builtinNativeClasses["ArgumentErrorClass"] = ASArgumentError;
                builtinNativeClasses["DateClass"] = ASDate;
                builtinNativeClasses["MathClass"] = ASMath;
                builtinNativeClasses["RegExpClass"] = ASRegExp;
                builtinNativeClasses["ProxyClass"] = AS.flash.utils.OriginalProxy;
                builtinNativeClasses["DictionaryClass"] = AS.flash.utils.OriginalDictionary;
                builtinNativeClasses["ByteArrayClass"] = AS.flash.utils.OriginalByteArray;
                builtinNativeClasses["SystemClass"] = AS.flash.system.OriginalSystem;
                isInitialized = true;
            }
            AS.initialize = initialize;
            var nativeClasses = Shumway.ObjectUtilities.createMap();
            var nativeFunctions = Shumway.ObjectUtilities.createMap();
            function registerNativeClass(name, cls) {
                release || assert(!nativeClasses[name], "Native class: " + name + " is already registered.");
                nativeClasses[name] = cls;
            }
            AS.registerNativeClass = registerNativeClass;
            function registerNativeFunction(name, fn) {
                release || assert(!nativeFunctions[name], "Native function: " + name + " is already registered.");
                nativeFunctions[name] = fn;
            }
            AS.registerNativeFunction = registerNativeFunction;
            function createInterface(classInfo) {
                var ii = classInfo.instanceInfo;
                release || assert(ii.isInterface());
                var cls = new ASClass(classInfo);
                cls.interfaceBindings = new InstanceBindings(null, ii, null, null);
                cls.verify();
                return cls;
            }
            AS.createInterface = createInterface;
            var morphPatchList = [];
            function createClass(classInfo, baseClass, scope) {
                var ci = classInfo;
                var ii = ci.instanceInfo;
                var domain = ci.abc.applicationDomain;
                var isNativeClass = ci.native;
                var cls;
                if (isNativeClass) {
                    cls = builtinNativeClasses[ci.native.cls];
                    if (!cls) {
                        cls = nativeClasses[ci.native.cls];
                    }
                    if (!cls) {
                        Shumway.Debug.unexpected("No native class for " + ci.native.cls);
                    }
                    cls.morphIntoASClass(classInfo);
                    if (morphPatchList) {
                        morphPatchList.push(cls);
                    }
                }
                else {
                    cls = new ASClass(classInfo);
                }
                var classScope = new Scope(scope, null);
                classScope.object = cls;
                var instanceConstructor = null;
                if (ii.init.isNative()) {
                    release || assert(isNativeClass);
                    instanceConstructor = cls;
                }
                else {
                    instanceConstructor = createFunction(ii.init, classScope, false, false);
                }
                var staticNatives = null;
                var instanceNatives = null;
                if (isNativeClass) {
                    staticNatives = [cls];
                    if (cls.staticNatives) {
                        Shumway.ArrayUtilities.pushMany(staticNatives, cls.staticNatives);
                    }
                    instanceNatives = [cls.prototype];
                    if (cls.instanceNatives) {
                        Shumway.ArrayUtilities.pushMany(instanceNatives, cls.instanceNatives);
                    }
                }
                ASClass.create(cls, baseClass, instanceConstructor);
                release || cls.verify();
                if (classInfo.instanceInfo.name.name === "Class") {
                    for (var i = 0; i < morphPatchList.length; i++) {
                        morphPatchList[i].__proto__ = ASClass.prototype;
                    }
                    morphPatchList = null;
                }
                AVM2.enterTimeline("ClassBindings");
                cls.classBindings = new ClassBindings(classInfo, classScope, staticNatives);
                AVM2.enterTimeline("applyTo");
                cls.classBindings.applyTo(domain, cls);
                AVM2.leaveTimeline();
                AVM2.leaveTimeline();
                AVM2.enterTimeline("InstanceBindings");
                cls.instanceBindings = new InstanceBindings(baseClass ? baseClass.instanceBindings : null, ii, classScope, instanceNatives);
                if (cls.instanceConstructor) {
                    AVM2.enterTimeline("applyTo");
                    cls.instanceBindings.applyTo(domain, cls.traitsPrototype);
                    AVM2.leaveTimeline();
                }
                AVM2.leaveTimeline();
                cls.implementedInterfaces = cls.instanceBindings.implementedInterfaces;
                if (cls === ASClass) {
                    cls.instanceBindings.applyTo(domain, ASObject, true);
                }
                else if (ASClass.instanceBindings) {
                    ASClass.instanceBindings.applyTo(domain, cls, true);
                }
                AVM2.enterTimeline("Configure");
                ASClass.configureInitializers(cls);
                ASClass.linkSymbols(cls);
                ASClass.runClassInitializer(cls);
                AVM2.leaveTimeline();
                return cls;
            }
            AS.createClass = createClass;
            var illegalAS3Functions = [
                Runtime.forwardValueOf,
                Runtime.forwardToString
            ];
            function getMethodOrAccessorNative(trait, natives) {
                var name = escapeNativeName(Multiname.getName(trait.name));
                debug && console.log("getMethodOrAccessorNative(" + name + ")");
                for (var i = 0; i < natives.length; i++) {
                    var native = natives[i];
                    var fullName = name;
                    if (hasOwnProperty(native, "original_" + name)) {
                        fullName = "original_" + name;
                    }
                    if (!hasOwnProperty(native, name) && hasOwnProperty(native, "native_" + name)) {
                        fullName = "native_" + name;
                    }
                    if (hasOwnProperty(native, fullName)) {
                        var value;
                        if (trait.isAccessor()) {
                            var pd = getOwnPropertyDescriptor(native, fullName);
                            if (trait.isGetter()) {
                                value = pd.get;
                            }
                            else {
                                value = pd.set;
                            }
                        }
                        else {
                            release || assert(trait.isMethod());
                            value = native[fullName];
                        }
                        release || assert(value, "Method or Accessor property exists but it's undefined: " + trait);
                        release || assert(illegalAS3Functions.indexOf(value) < 0, "Leaking illegal function.");
                        return value;
                    }
                }
                Shumway.Debug.warning("No native method for: " + trait.kindName() + " " + trait.methodInfo.holder + "::" + Multiname.getQualifiedName(trait.name) + ", make sure you've got the static keyword for static methods.");
                return null;
            }
            AS.getMethodOrAccessorNative = getMethodOrAccessorNative;
            function escapeNativeName(name) {
                switch (name) {
                    case "prototype":
                        return "native_prototype";
                    case "hasOwnProperty":
                        return "native_hasOwnProperty";
                    case "isPrototypeOf":
                        return "native_isPrototypeOf";
                    case "propertyIsEnumerable":
                        return "native_propertyIsEnumerable";
                    default:
                        return name;
                }
            }
            AS.escapeNativeName = escapeNativeName;
            var Natives;
            (function (Natives) {
                Natives.String = jsGlobal.String;
                Natives.Function = jsGlobal.Function;
                Natives.Boolean = jsGlobal.Boolean;
                Natives.Number = jsGlobal.Number;
                Natives.Date = jsGlobal.Date;
                Natives.ASObject = Shumway.AVM2.AS.ASObject;
                Natives.ASFunction = Shumway.AVM2.AS.ASFunction;
                function makeOriginalPrototype(constructor) {
                    var o = { prototype: Object.create(null) };
                    var keys = Object.getOwnPropertyNames(constructor.prototype);
                    for (var i = 0; i < keys.length; i++) {
                        o.prototype[keys[i]] = constructor.prototype[keys[i]];
                    }
                    return o;
                }
                Natives.Original = {
                    Date: makeOriginalPrototype(Natives.Date),
                    Array: makeOriginalPrototype(Array),
                    String: makeOriginalPrototype(Natives.String),
                    Number: makeOriginalPrototype(Natives.Number),
                    Boolean: makeOriginalPrototype(Natives.Boolean)
                };
                function print(expression, arg1, arg2, arg3, arg4) {
                    jsGlobal.print.apply(null, arguments);
                }
                Natives.print = print;
                function debugBreak(v) {
                    debugger;
                }
                Natives.debugBreak = debugBreak;
                function bugzilla(n) {
                    switch (n) {
                        case 574600:
                            return true;
                    }
                    return false;
                }
                Natives.bugzilla = bugzilla;
                Natives.decodeURI = jsGlobal.decodeURI;
                Natives.decodeURIComponent = jsGlobal.decodeURIComponent;
                Natives.encodeURI = jsGlobal.encodeURI;
                Natives.encodeURIComponent = jsGlobal.encodeURIComponent;
                Natives.isNaN = jsGlobal.isNaN;
                Natives.isFinite = jsGlobal.isFinite;
                Natives.parseInt = jsGlobal.parseInt;
                Natives.parseFloat = jsGlobal.parseFloat;
                Natives.escape = jsGlobal.escape;
                Natives.unescape = jsGlobal.unescape;
                Natives.isXMLName;
                Natives.notImplemented = Shumway.Debug.notImplemented;
                function getQualifiedClassName(value) {
                    if (value === null) {
                        return "null";
                    }
                    else if (value === undefined) {
                        return "void";
                    }
                    if (ASInt.isType(value)) {
                        return "int";
                    }
                    value = boxValue(value);
                    if (ASClass.isType(value)) {
                        return value.getQualifiedClassName();
                    }
                    return value.class.getQualifiedClassName();
                }
                Natives.getQualifiedClassName = getQualifiedClassName;
                function getQualifiedSuperclassName(value) {
                    if (isNullOrUndefined(value)) {
                        return "null";
                    }
                    value = boxValue(value);
                    var cls = ASClass.isType(value) ? value : value.class;
                    if (!cls.baseClass) {
                        return "null";
                    }
                    return cls.baseClass.getQualifiedClassName();
                }
                Natives.getQualifiedSuperclassName = getQualifiedSuperclassName;
                function getDefinitionByName(name) {
                    var simpleName = Natives.String(name).replace("::", ".");
                    var cls = Shumway.AVM2.Runtime.AVM2.currentDomain().getClass(simpleName, false);
                    return cls || null;
                }
                Natives.getDefinitionByName = getDefinitionByName;
                function describeType(value, flags) {
                    return Shumway.AVM2.AS.describeType(value, flags);
                }
                Natives.describeType = describeType;
                function describeTypeJSON(value, flags) {
                    return Shumway.AVM2.AS.describeTypeJSON(value, flags);
                }
                Natives.describeTypeJSON = describeTypeJSON;
            })(Natives = AS.Natives || (AS.Natives = {}));
            function getNative(path) {
                debug && console.log("getNative(" + path + ")");
                var chain = path.split(".");
                var v = Natives;
                for (var i = 0, j = chain.length; i < j; i++) {
                    v = v && v[chain[i]];
                }
                if (!v) {
                    v = nativeFunctions[path];
                }
                release || assert(v, "getNative(" + path + ") not found.");
                release || assert(illegalAS3Functions.indexOf(v) < 0, "Leaking illegal function.");
                return v;
            }
            AS.getNative = getNative;
            registerNativeFunction("unsafeJSNative", getNative);
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var checkArguments = true;
            var assert = Shumway.Debug.assert;
            var assertNotImplemented = Shumway.Debug.assertNotImplemented;
            var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
            var defineNonEnumerableProperty = Shumway.ObjectUtilities.defineNonEnumerableProperty;
            var throwError = Shumway.AVM2.Runtime.throwError;
            var asCheckVectorGetNumericProperty = Shumway.AVM2.Runtime.asCheckVectorGetNumericProperty;
            var asCheckVectorSetNumericProperty = Shumway.AVM2.Runtime.asCheckVectorSetNumericProperty;
            var GenericVector = (function (_super) {
                __extends(GenericVector, _super);
                function GenericVector(length, fixed, type) {
                    if (length === void 0) { length = 0; }
                    if (fixed === void 0) { fixed = false; }
                    if (type === void 0) { type = AS.ASObject; }
                    false && _super.call(this);
                    length = length >>> 0;
                    fixed = !!fixed;
                    this._fixed = !!fixed;
                    this._buffer = new Array(length);
                    this._type = type;
                    this._defaultValue = type ? type.defaultValue : null;
                    this._fill(0, length, this._defaultValue);
                }
                GenericVector.prototype.newThisType = function () {
                    return new GenericVector();
                };
                GenericVector.defaultCompareFunction = function (a, b) {
                    return String(a).localeCompare(String(b));
                };
                GenericVector.compare = function (a, b, options, compareFunction) {
                    release || assertNotImplemented(!(options & GenericVector.CASEINSENSITIVE), "CASEINSENSITIVE");
                    release || assertNotImplemented(!(options & GenericVector.UNIQUESORT), "UNIQUESORT");
                    release || assertNotImplemented(!(options & GenericVector.RETURNINDEXEDARRAY), "RETURNINDEXEDARRAY");
                    var result = 0;
                    if (!compareFunction) {
                        compareFunction = GenericVector.defaultCompareFunction;
                    }
                    if (options & GenericVector.NUMERIC) {
                        a = Shumway.toNumber(a);
                        b = Shumway.toNumber(b);
                        result = a < b ? -1 : (a > b ? 1 : 0);
                    }
                    else {
                        result = compareFunction(a, b);
                    }
                    if (options & GenericVector.DESCENDING) {
                        result *= -1;
                    }
                    return result;
                };
                GenericVector.applyType = function (type) {
                    function parameterizedVectorConstructor(length, fixed) {
                        Function.prototype.call.call(GenericVector.instanceConstructor, this, length, fixed, type);
                    }
                    ;
                    function parameterizedVectorCallableConstructor(object) {
                        if (object instanceof AS.Int32Vector) {
                            return object;
                        }
                        var length = object.asGetProperty(undefined, "length");
                        if (length !== undefined) {
                            var v = new parameterizedVectorConstructor(length, false);
                            for (var i = 0; i < length; i++) {
                                v.asSetNumericProperty(i, object.asGetPublicProperty(i));
                            }
                            return v;
                        }
                        Shumway.Debug.unexpected();
                    }
                    var parameterizedVector = parameterizedVectorConstructor;
                    parameterizedVector.prototype = GenericVector.prototype;
                    parameterizedVector.instanceConstructor = parameterizedVector;
                    parameterizedVector.callableConstructor = parameterizedVectorCallableConstructor;
                    parameterizedVector.__proto__ = GenericVector;
                    return parameterizedVector;
                };
                GenericVector.prototype._fill = function (index, length, value) {
                    for (var i = 0; i < length; i++) {
                        this._buffer[index + i] = value;
                    }
                };
                GenericVector.prototype.toString = function () {
                    var str = "";
                    for (var i = 0; i < this._buffer.length; i++) {
                        str += this._buffer[i];
                        if (i < this._buffer.length - 1) {
                            str += ",";
                        }
                    }
                    return str;
                };
                GenericVector.prototype.toLocaleString = function () {
                    var str = "";
                    for (var i = 0; i < this._buffer.length; i++) {
                        str += this._buffer[i].asCallPublicProperty('toLocaleString');
                        if (i < this._buffer.length - 1) {
                            str += ",";
                        }
                    }
                    return str;
                };
                GenericVector.prototype.sort = function (sortBehavior) {
                    if (arguments.length === 0) {
                        return this._buffer.sort();
                    }
                    if (sortBehavior instanceof Function) {
                        return this._buffer.sort(sortBehavior);
                    }
                    else {
                        var options = sortBehavior | 0;
                        release || assertNotImplemented(!(options & AS.Int32Vector.UNIQUESORT), "UNIQUESORT");
                        release || assertNotImplemented(!(options & AS.Int32Vector.RETURNINDEXEDARRAY), "RETURNINDEXEDARRAY");
                        if (options && GenericVector.NUMERIC) {
                            if (options & GenericVector.DESCENDING) {
                                return this._buffer.sort(function (a, b) { return asCoerceNumber(b) - asCoerceNumber(a); });
                            }
                            return this._buffer.sort(function (a, b) { return asCoerceNumber(a) - asCoerceNumber(b); });
                        }
                        if (options && GenericVector.CASEINSENSITIVE) {
                            if (options & GenericVector.DESCENDING) {
                                return this._buffer.sort(function (a, b) { return asCoerceString(b).toLowerCase() - asCoerceString(a).toLowerCase(); });
                            }
                            return this._buffer.sort(function (a, b) { return asCoerceString(a).toLowerCase() - asCoerceString(b).toLowerCase(); });
                        }
                        if (options & GenericVector.DESCENDING) {
                            return this._buffer.sort(function (a, b) { return b - a; });
                        }
                        return this._buffer.sort();
                    }
                };
                GenericVector.prototype.every = function (callback, thisObject) {
                    for (var i = 0; i < this._buffer.length; i++) {
                        if (!callback.call(thisObject, this.asGetNumericProperty(i), i, this)) {
                            return false;
                        }
                    }
                    return true;
                };
                GenericVector.prototype.filter = function (callback, thisObject) {
                    var v = new GenericVector(0, false, this._type);
                    for (var i = 0; i < this._buffer.length; i++) {
                        if (callback.call(thisObject, this.asGetNumericProperty(i), i, this)) {
                            v.push(this.asGetNumericProperty(i));
                        }
                    }
                    return v;
                };
                GenericVector.prototype.some = function (callback, thisObject) {
                    if (arguments.length !== 2) {
                        throwError("ArgumentError", AVM2.Errors.WrongArgumentCountError);
                    }
                    else if (!Shumway.isFunction(callback)) {
                        throwError("ArgumentError", AVM2.Errors.CheckTypeFailedError);
                    }
                    for (var i = 0; i < this._buffer.length; i++) {
                        if (callback.call(thisObject, this.asGetNumericProperty(i), i, this)) {
                            return true;
                        }
                    }
                    return false;
                };
                GenericVector.prototype.forEach = function (callback, thisObject) {
                    if (!Shumway.isFunction(callback)) {
                        throwError("ArgumentError", AVM2.Errors.CheckTypeFailedError);
                    }
                    for (var i = 0; i < this._buffer.length; i++) {
                        callback.call(thisObject, this.asGetNumericProperty(i), i, this);
                    }
                };
                GenericVector.prototype.join = function (separator) {
                    if (separator === void 0) { separator = ','; }
                    var buffer = this._buffer;
                    var limit = this._buffer.length;
                    var result = "";
                    for (var i = 0; i < limit - 1; i++) {
                        result += buffer[i] + separator;
                    }
                    if (limit > 0) {
                        result += buffer[limit - 1];
                    }
                    return result;
                };
                GenericVector.prototype.indexOf = function (searchElement, fromIndex) {
                    if (fromIndex === void 0) { fromIndex = 0; }
                    return this._buffer.indexOf(searchElement, fromIndex);
                };
                GenericVector.prototype.lastIndexOf = function (searchElement, fromIndex) {
                    if (fromIndex === void 0) { fromIndex = 0x7fffffff; }
                    return this._buffer.lastIndexOf(searchElement, fromIndex);
                };
                GenericVector.prototype.map = function (callback, thisObject) {
                    if (!Shumway.isFunction(callback)) {
                        throwError("ArgumentError", AVM2.Errors.CheckTypeFailedError);
                    }
                    var v = new GenericVector(0, false, this._type);
                    for (var i = 0; i < this._buffer.length; i++) {
                        v.push(callback.call(thisObject, this.asGetNumericProperty(i), i, this));
                    }
                    return v;
                };
                GenericVector.prototype.push = function (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {
                    this._checkFixed();
                    for (var i = 0; i < arguments.length; i++) {
                        this._buffer.push(this._coerce(arguments[i]));
                    }
                };
                GenericVector.prototype.pop = function () {
                    this._checkFixed();
                    if (this._buffer.length === 0) {
                        return undefined;
                    }
                    return this._buffer.pop();
                };
                GenericVector.prototype.concat = function () {
                    var buffers = [];
                    for (var i = 0; i < arguments.length; i++) {
                        buffers.push(this._coerce(arguments[i])._buffer);
                    }
                    return this._buffer.concat.apply(this._buffer, buffers);
                };
                GenericVector.prototype.reverse = function () {
                    this._buffer.reverse();
                    return this;
                };
                GenericVector.prototype._coerce = function (v) {
                    if (this._type) {
                        return this._type.coerce(v);
                    }
                    else if (v === undefined) {
                        return null;
                    }
                    return v;
                };
                GenericVector.prototype.shift = function () {
                    this._checkFixed();
                    if (this._buffer.length === 0) {
                        return undefined;
                    }
                    return this._buffer.shift();
                };
                GenericVector.prototype.unshift = function () {
                    if (!arguments.length) {
                        return;
                    }
                    this._checkFixed();
                    for (var i = 0; i < arguments.length; i++) {
                        this._buffer.unshift(this._coerce(arguments[i]));
                    }
                };
                GenericVector.prototype.slice = function (start, end) {
                    if (start === void 0) { start = 0; }
                    if (end === void 0) { end = 0x7fffffff; }
                    var buffer = this._buffer;
                    var length = buffer.length;
                    var first = Math.min(Math.max(start, 0), length);
                    var last = Math.min(Math.max(end, first), length);
                    var result = new GenericVector(last - first, this.fixed, this._type);
                    result._buffer = buffer.slice(first, last);
                    return result;
                };
                GenericVector.prototype.splice = function (start, deleteCount_) {
                    var buffer = this._buffer;
                    var length = buffer.length;
                    var first = Math.min(Math.max(start, 0), length);
                    var deleteCount = Math.min(Math.max(deleteCount_, 0), length - first);
                    var insertCount = arguments.length - 2;
                    if (deleteCount !== insertCount) {
                        this._checkFixed();
                    }
                    var items = [first, deleteCount];
                    for (var i = 2; i < insertCount + 2; i++) {
                        items[i] = this._coerce(arguments[i]);
                    }
                    var result = new GenericVector(deleteCount, this.fixed, this._type);
                    result._buffer = buffer.splice.apply(buffer, items);
                    return result;
                };
                Object.defineProperty(GenericVector.prototype, "length", {
                    get: function () {
                        return this._buffer.length;
                    },
                    set: function (value) {
                        value = value >>> 0;
                        if (value > this._buffer.length) {
                            for (var i = this._buffer.length; i < value; i++) {
                                this._buffer[i] = this._defaultValue;
                            }
                        }
                        else {
                            this._buffer.length = value;
                        }
                        release || assert(this._buffer.length === value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(GenericVector.prototype, "fixed", {
                    get: function () {
                        return this._fixed;
                    },
                    set: function (f) {
                        this._fixed = !!f;
                    },
                    enumerable: true,
                    configurable: true
                });
                GenericVector.prototype._checkFixed = function () {
                    if (this._fixed) {
                        throwError("RangeError", AVM2.Errors.VectorFixedError);
                    }
                };
                GenericVector.prototype.asNextName = function (index) {
                    return index - 1;
                };
                GenericVector.prototype.asNextValue = function (index) {
                    return this._buffer[index - 1];
                };
                GenericVector.prototype.asNextNameIndex = function (index) {
                    var nextNameIndex = index + 1;
                    if (nextNameIndex <= this._buffer.length) {
                        return nextNameIndex;
                    }
                    return 0;
                };
                GenericVector.prototype.asHasProperty = function (namespaces, name, flags) {
                    if (GenericVector.prototype === this || !Shumway.isNumeric(name)) {
                        return Object.prototype.asHasProperty.call(this, namespaces, name, flags);
                    }
                    var index = Shumway.toNumber(name);
                    return index >= 0 && index < this._buffer.length;
                };
                GenericVector.prototype.asGetNumericProperty = function (i) {
                    checkArguments && asCheckVectorGetNumericProperty(i, this._buffer.length);
                    return this._buffer[i];
                };
                GenericVector.prototype.asSetNumericProperty = function (i, v) {
                    checkArguments && asCheckVectorSetNumericProperty(i, this._buffer.length, this._fixed);
                    this._buffer[i] = this._coerce(v);
                };
                GenericVector.prototype.asHasNext2 = function (hasNext2Info) {
                    hasNext2Info.index = this.asNextNameIndex(hasNext2Info.index);
                };
                GenericVector.CASEINSENSITIVE = 1;
                GenericVector.DESCENDING = 2;
                GenericVector.UNIQUESORT = 4;
                GenericVector.RETURNINDEXEDARRAY = 8;
                GenericVector.NUMERIC = 16;
                GenericVector.instanceConstructor = GenericVector;
                GenericVector.staticNatives = [GenericVector];
                GenericVector.instanceNatives = [GenericVector.prototype];
                GenericVector.classInitializer = function () {
                    var proto = GenericVector.prototype;
                    defineNonEnumerableProperty(proto, '$Bgjoin', proto.join);
                    defineNonEnumerableProperty(proto, '$BgtoString', proto.join);
                    defineNonEnumerableProperty(proto, '$BgtoLocaleString', proto.toLocaleString);
                    defineNonEnumerableProperty(proto, '$Bgpop', proto.pop);
                    defineNonEnumerableProperty(proto, '$Bgpush', proto.push);
                    defineNonEnumerableProperty(proto, '$Bgreverse', proto.reverse);
                    defineNonEnumerableProperty(proto, '$Bgconcat', proto.concat);
                    defineNonEnumerableProperty(proto, '$Bgsplice', proto.splice);
                    defineNonEnumerableProperty(proto, '$Bgslice', proto.slice);
                    defineNonEnumerableProperty(proto, '$Bgshift', proto.shift);
                    defineNonEnumerableProperty(proto, '$Bgunshift', proto.unshift);
                    defineNonEnumerableProperty(proto, '$BgindexOf', proto.indexOf);
                    defineNonEnumerableProperty(proto, '$BglastIndexOf', proto.lastIndexOf);
                    defineNonEnumerableProperty(proto, '$BgforEach', proto.forEach);
                    defineNonEnumerableProperty(proto, '$Bgmap', proto.map);
                    defineNonEnumerableProperty(proto, '$Bgfilter', proto.filter);
                    defineNonEnumerableProperty(proto, '$Bgsome', proto.some);
                    defineNonEnumerableProperty(proto, '$Bgevery', proto.every);
                    defineNonEnumerableProperty(proto, '$Bgsort', proto.sort);
                };
                return GenericVector;
            })(AS.ASVector);
            AS.GenericVector = GenericVector;
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var checkArguments = true;
            var assertNotImplemented = Shumway.Debug.assertNotImplemented;
            var defineNonEnumerableProperty = Shumway.ObjectUtilities.defineNonEnumerableProperty;
            var throwError = Shumway.AVM2.Runtime.throwError;
            var asCheckVectorGetNumericProperty = Shumway.AVM2.Runtime.asCheckVectorGetNumericProperty;
            var asCheckVectorSetNumericProperty = Shumway.AVM2.Runtime.asCheckVectorSetNumericProperty;
            var Int32Vector = (function (_super) {
                __extends(Int32Vector, _super);
                function Int32Vector(length, fixed) {
                    if (length === void 0) { length = 0; }
                    if (fixed === void 0) { fixed = false; }
                    false && _super.call(this);
                    length = length >>> 0;
                    fixed = !!fixed;
                    this._fixed = fixed;
                    this._buffer = new Int32Array(Math.max(Int32Vector.INITIAL_CAPACITY, length + Int32Vector.EXTRA_CAPACITY));
                    this._offset = 0;
                    this._length = length;
                }
                Int32Vector.prototype.newThisType = function () {
                    return new Int32Vector();
                };
                Int32Vector.callable = function (object) {
                    if (object instanceof Int32Vector) {
                        return object;
                    }
                    var length = object.asGetProperty(undefined, "length");
                    if (length !== undefined) {
                        var v = new Int32Vector(length, false);
                        for (var i = 0; i < length; i++) {
                            v.asSetNumericProperty(i, object.asGetPublicProperty(i));
                        }
                        return v;
                    }
                    Shumway.Debug.unexpected();
                };
                Int32Vector.prototype.internalToString = function () {
                    var str = "";
                    var start = this._offset;
                    var end = start + this._length;
                    for (var i = 0; i < this._buffer.length; i++) {
                        if (i === start) {
                            str += "[";
                        }
                        if (i === end) {
                            str += "]";
                        }
                        str += this._buffer[i];
                        if (i < this._buffer.length - 1) {
                            str += ",";
                        }
                    }
                    if (this._offset + this._length === this._buffer.length) {
                        str += "]";
                    }
                    return str + ": offset: " + this._offset + ", length: " + this._length + ", capacity: " + this._buffer.length;
                };
                Int32Vector.prototype.toString = function () {
                    var str = "";
                    for (var i = 0; i < this._length; i++) {
                        str += this._buffer[this._offset + i];
                        if (i < this._length - 1) {
                            str += ",";
                        }
                    }
                    return str;
                };
                Int32Vector.prototype.toLocaleString = function () {
                    var str = "";
                    for (var i = 0; i < this._length; i++) {
                        str += this._buffer[this._offset + i];
                        if (i < this._length - 1) {
                            str += ",";
                        }
                    }
                    return str;
                };
                Int32Vector.prototype._view = function () {
                    return this._buffer.subarray(this._offset, this._offset + this._length);
                };
                Int32Vector.prototype._ensureCapacity = function (length) {
                    var minCapacity = this._offset + length;
                    if (minCapacity < this._buffer.length) {
                        return;
                    }
                    if (length <= this._buffer.length) {
                        var offset = (this._buffer.length - length) >> 2;
                        this._buffer.set(this._view(), offset);
                        this._offset = offset;
                        return;
                    }
                    var oldCapacity = this._buffer.length;
                    var newCapacity = ((oldCapacity * 3) >> 1) + 1;
                    if (newCapacity < minCapacity) {
                        newCapacity = minCapacity;
                    }
                    var buffer = new Int32Array(newCapacity);
                    buffer.set(this._buffer, 0);
                    this._buffer = buffer;
                };
                Int32Vector.prototype.concat = function () {
                    var length = this._length;
                    for (var i = 0; i < arguments.length; i++) {
                        var vector = arguments[i];
                        if (!(vector._buffer instanceof Int32Array)) {
                            throwError('TypeError', AVM2.Errors.CheckTypeFailedError, vector.constructor.name, '__AS3__.vec.Vector.<int>');
                        }
                        length += vector._length;
                    }
                    var result = new Int32Vector(length);
                    var buffer = result._buffer;
                    buffer.set(this._buffer);
                    var offset = this._length;
                    for (var i = 0; i < arguments.length; i++) {
                        var vector = arguments[i];
                        if (offset + vector._buffer.length < vector._buffer.length) {
                            buffer.set(vector._buffer, offset);
                        }
                        else {
                            buffer.set(vector._buffer.subarray(0, vector._length), offset);
                        }
                        offset += vector._length;
                    }
                    return result;
                };
                Int32Vector.prototype.every = function (callback, thisObject) {
                    for (var i = 0; i < this._length; i++) {
                        if (!callback.call(thisObject, this._buffer[this._offset + i], i, this)) {
                            return false;
                        }
                    }
                    return true;
                };
                Int32Vector.prototype.filter = function (callback, thisObject) {
                    var v = new Int32Vector();
                    for (var i = 0; i < this._length; i++) {
                        if (callback.call(thisObject, this._buffer[this._offset + i], i, this)) {
                            v.push(this._buffer[this._offset + i]);
                        }
                    }
                    return v;
                };
                Int32Vector.prototype.some = function (callback, thisObject) {
                    if (arguments.length !== 2) {
                        throwError("ArgumentError", AVM2.Errors.WrongArgumentCountError);
                    }
                    else if (!Shumway.isFunction(callback)) {
                        throwError("ArgumentError", AVM2.Errors.CheckTypeFailedError);
                    }
                    for (var i = 0; i < this._length; i++) {
                        if (callback.call(thisObject, this._buffer[this._offset + i], i, this)) {
                            return true;
                        }
                    }
                    return false;
                };
                Int32Vector.prototype.forEach = function (callback, thisObject) {
                    for (var i = 0; i < this._length; i++) {
                        callback.call(thisObject, this._buffer[this._offset + i], i, this);
                    }
                };
                Int32Vector.prototype.join = function (separator) {
                    if (separator === void 0) { separator = ','; }
                    var limit = this.length;
                    var buffer = this._buffer;
                    var offset = this._offset;
                    var result = "";
                    for (var i = 0; i < limit - 1; i++) {
                        result += buffer[offset + i] + separator;
                    }
                    if (limit > 0) {
                        result += buffer[offset + limit - 1];
                    }
                    return result;
                };
                Int32Vector.prototype.indexOf = function (searchElement, fromIndex) {
                    if (fromIndex === void 0) { fromIndex = 0; }
                    var length = this._length;
                    var start = fromIndex | 0;
                    if (start < 0) {
                        start = start + length;
                        if (start < 0) {
                            start = 0;
                        }
                    }
                    else if (start >= length) {
                        return -1;
                    }
                    var buffer = this._buffer;
                    var length = this._length;
                    var offset = this._offset;
                    start += offset;
                    var end = offset + length;
                    for (var i = start; i < end; i++) {
                        if (buffer[i] === searchElement) {
                            return i - offset;
                        }
                    }
                    return -1;
                };
                Int32Vector.prototype.lastIndexOf = function (searchElement, fromIndex) {
                    if (fromIndex === void 0) { fromIndex = 0x7fffffff; }
                    var length = this._length;
                    var start = fromIndex | 0;
                    if (start < 0) {
                        start = start + length;
                        if (start < 0) {
                            return -1;
                        }
                    }
                    else if (start >= length) {
                        start = length;
                    }
                    var buffer = this._buffer;
                    var offset = this._offset;
                    start += offset;
                    var end = offset;
                    for (var i = start; i-- > end;) {
                        if (buffer[i] === searchElement) {
                            return i - offset;
                        }
                    }
                    return -1;
                };
                Int32Vector.prototype.map = function (callback, thisObject) {
                    if (!Shumway.isFunction(callback)) {
                        throwError("ArgumentError", AVM2.Errors.CheckTypeFailedError);
                    }
                    var v = new Int32Vector();
                    for (var i = 0; i < this._length; i++) {
                        v.push(callback.call(thisObject, this._buffer[this._offset + i], i, this));
                    }
                    return v;
                };
                Int32Vector.prototype.push = function (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {
                    this._checkFixed();
                    this._ensureCapacity(this._length + arguments.length);
                    for (var i = 0; i < arguments.length; i++) {
                        this._buffer[this._offset + this._length++] = arguments[i];
                    }
                };
                Int32Vector.prototype.pop = function () {
                    this._checkFixed();
                    if (this._length === 0) {
                        return Int32Vector.DEFAULT_VALUE;
                    }
                    this._length--;
                    return this._buffer[this._offset + this._length];
                };
                Int32Vector.prototype.reverse = function () {
                    var l = this._offset;
                    var r = this._offset + this._length - 1;
                    var b = this._buffer;
                    while (l < r) {
                        var t = b[l];
                        b[l] = b[r];
                        b[r] = t;
                        l++;
                        r--;
                    }
                    return this;
                };
                Int32Vector.prototype.sort = function (sortBehavior) {
                    if (arguments.length === 0) {
                        return Array.prototype.sort.call(this._view());
                    }
                    if (sortBehavior instanceof Function) {
                        return Array.prototype.sort.call(this._view(), sortBehavior);
                    }
                    else {
                        var options = sortBehavior | 0;
                        release || assertNotImplemented(!(options & Int32Vector.UNIQUESORT), "UNIQUESORT");
                        release || assertNotImplemented(!(options & Int32Vector.RETURNINDEXEDARRAY), "RETURNINDEXEDARRAY");
                        if (options & Int32Vector.DESCENDING) {
                            return Array.prototype.sort.call(this._view(), function (a, b) { return b - a; });
                        }
                        return Array.prototype.sort.call(this._view(), function (a, b) { return a - b; });
                    }
                };
                Int32Vector.prototype.shift = function () {
                    this._checkFixed();
                    if (this._length === 0) {
                        return 0;
                    }
                    this._length--;
                    return this._buffer[this._offset++];
                };
                Int32Vector.prototype.unshift = function () {
                    this._checkFixed();
                    if (!arguments.length) {
                        return;
                    }
                    this._ensureCapacity(this._length + arguments.length);
                    this._slide(arguments.length);
                    this._offset -= arguments.length;
                    this._length += arguments.length;
                    for (var i = 0; i < arguments.length; i++) {
                        this._buffer[this._offset + i] = arguments[i];
                    }
                };
                Int32Vector.prototype.slice = function (start, end) {
                    if (start === void 0) { start = 0; }
                    if (end === void 0) { end = 0x7fffffff; }
                    var buffer = this._buffer;
                    var length = this._length;
                    var first = Math.min(Math.max(start, 0), length);
                    var last = Math.min(Math.max(end, first), length);
                    var result = new Int32Vector(last - first, this.fixed);
                    result._buffer.set(buffer.subarray(this._offset + first, this._offset + last), result._offset);
                    return result;
                };
                Int32Vector.prototype.splice = function (start, deleteCount_) {
                    var buffer = this._buffer;
                    var length = this._length;
                    var first = Math.min(Math.max(start, 0), length);
                    var startOffset = this._offset + first;
                    var deleteCount = Math.min(Math.max(deleteCount_, 0), length - first);
                    var insertCount = arguments.length - 2;
                    var deletedItems;
                    var result = new Int32Vector(deleteCount, this.fixed);
                    if (deleteCount > 0) {
                        deletedItems = buffer.subarray(startOffset, startOffset + deleteCount);
                        result._buffer.set(deletedItems, result._offset);
                    }
                    this._ensureCapacity(length - deleteCount + insertCount);
                    var right = startOffset + deleteCount;
                    var slice = buffer.subarray(right, length);
                    buffer.set(slice, startOffset + insertCount);
                    this._length += insertCount - deleteCount;
                    for (var i = 0; i < insertCount; i++) {
                        buffer[startOffset + i] = arguments[i + 2];
                    }
                    return result;
                };
                Int32Vector.prototype._slide = function (distance) {
                    this._buffer.set(this._view(), this._offset + distance);
                    this._offset += distance;
                };
                Object.defineProperty(Int32Vector.prototype, "length", {
                    get: function () {
                        return this._length;
                    },
                    set: function (value) {
                        value = value >>> 0;
                        if (value > this._length) {
                            this._ensureCapacity(value);
                            for (var i = this._offset + this._length, j = this._offset + value; i < j; i++) {
                                this._buffer[i] = Int32Vector.DEFAULT_VALUE;
                            }
                        }
                        this._length = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Int32Vector.prototype, "fixed", {
                    get: function () {
                        return this._fixed;
                    },
                    set: function (f) {
                        this._fixed = !!f;
                    },
                    enumerable: true,
                    configurable: true
                });
                Int32Vector.prototype._checkFixed = function () {
                    if (this._fixed) {
                        throwError("RangeError", AVM2.Errors.VectorFixedError);
                    }
                };
                Int32Vector.prototype.asGetNumericProperty = function (i) {
                    checkArguments && asCheckVectorGetNumericProperty(i, this._length);
                    return this._buffer[this._offset + i];
                };
                Int32Vector.prototype.asSetNumericProperty = function (i, v) {
                    checkArguments && asCheckVectorSetNumericProperty(i, this._length, this._fixed);
                    if (i === this._length) {
                        this._ensureCapacity(this._length + 1);
                        this._length++;
                    }
                    this._buffer[this._offset + i] = v;
                };
                Int32Vector.prototype.asHasProperty = function (namespaces, name, flags) {
                    if (Int32Vector.prototype === this || !Shumway.isNumeric(name)) {
                        return Object.prototype.asHasProperty.call(this, namespaces, name, flags);
                    }
                    var index = Shumway.toNumber(name);
                    return index >= 0 && index < this._length;
                };
                Int32Vector.prototype.asNextName = function (index) {
                    return index - 1;
                };
                Int32Vector.prototype.asNextValue = function (index) {
                    return this._buffer[this._offset + index - 1];
                };
                Int32Vector.prototype.asNextNameIndex = function (index) {
                    var nextNameIndex = index + 1;
                    if (nextNameIndex <= this._length) {
                        return nextNameIndex;
                    }
                    return 0;
                };
                Int32Vector.prototype.asHasNext2 = function (hasNext2Info) {
                    hasNext2Info.index = this.asNextNameIndex(hasNext2Info.index);
                };
                Int32Vector.EXTRA_CAPACITY = 4;
                Int32Vector.INITIAL_CAPACITY = 10;
                Int32Vector.DEFAULT_VALUE = 0;
                Int32Vector.DESCENDING = 2;
                Int32Vector.UNIQUESORT = 4;
                Int32Vector.RETURNINDEXEDARRAY = 8;
                Int32Vector.instanceConstructor = Int32Vector;
                Int32Vector.staticNatives = [Int32Vector];
                Int32Vector.instanceNatives = [Int32Vector.prototype];
                Int32Vector.callableConstructor = Int32Vector.callable;
                Int32Vector.classInitializer = function () {
                    var proto = Int32Vector.prototype;
                    defineNonEnumerableProperty(proto, '$Bgjoin', proto.join);
                    defineNonEnumerableProperty(proto, '$BgtoString', proto.join);
                    defineNonEnumerableProperty(proto, '$BgtoLocaleString', proto.toLocaleString);
                    defineNonEnumerableProperty(proto, '$Bgpop', proto.pop);
                    defineNonEnumerableProperty(proto, '$Bgpush', proto.push);
                    defineNonEnumerableProperty(proto, '$Bgreverse', proto.reverse);
                    defineNonEnumerableProperty(proto, '$Bgconcat', proto.concat);
                    defineNonEnumerableProperty(proto, '$Bgsplice', proto.splice);
                    defineNonEnumerableProperty(proto, '$Bgslice', proto.slice);
                    defineNonEnumerableProperty(proto, '$Bgshift', proto.shift);
                    defineNonEnumerableProperty(proto, '$Bgunshift', proto.unshift);
                    defineNonEnumerableProperty(proto, '$BgindexOf', proto.indexOf);
                    defineNonEnumerableProperty(proto, '$BglastIndexOf', proto.lastIndexOf);
                    defineNonEnumerableProperty(proto, '$BgforEach', proto.forEach);
                    defineNonEnumerableProperty(proto, '$Bgmap', proto.map);
                    defineNonEnumerableProperty(proto, '$Bgfilter', proto.filter);
                    defineNonEnumerableProperty(proto, '$Bgsome', proto.some);
                    defineNonEnumerableProperty(proto, '$Bgevery', proto.every);
                    defineNonEnumerableProperty(proto, '$Bgsort', proto.sort);
                };
                return Int32Vector;
            })(AS.ASVector);
            AS.Int32Vector = Int32Vector;
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var checkArguments = true;
            var assertNotImplemented = Shumway.Debug.assertNotImplemented;
            var defineNonEnumerableProperty = Shumway.ObjectUtilities.defineNonEnumerableProperty;
            var throwError = Shumway.AVM2.Runtime.throwError;
            var asCheckVectorGetNumericProperty = Shumway.AVM2.Runtime.asCheckVectorGetNumericProperty;
            var asCheckVectorSetNumericProperty = Shumway.AVM2.Runtime.asCheckVectorSetNumericProperty;
            var Uint32Vector = (function (_super) {
                __extends(Uint32Vector, _super);
                function Uint32Vector(length, fixed) {
                    if (length === void 0) { length = 0; }
                    if (fixed === void 0) { fixed = false; }
                    false && _super.call(this);
                    length = length >>> 0;
                    fixed = !!fixed;
                    this._fixed = fixed;
                    this._buffer = new Uint32Array(Math.max(Uint32Vector.INITIAL_CAPACITY, length + Uint32Vector.EXTRA_CAPACITY));
                    this._offset = 0;
                    this._length = length;
                }
                Uint32Vector.prototype.newThisType = function () {
                    return new Uint32Vector();
                };
                Uint32Vector.callable = function (object) {
                    if (object instanceof Uint32Vector) {
                        return object;
                    }
                    var length = object.asGetProperty(undefined, "length");
                    if (length !== undefined) {
                        var v = new Uint32Vector(length, false);
                        for (var i = 0; i < length; i++) {
                            v.asSetNumericProperty(i, object.asGetPublicProperty(i));
                        }
                        return v;
                    }
                    Shumway.Debug.unexpected();
                };
                Uint32Vector.prototype.internalToString = function () {
                    var str = "";
                    var start = this._offset;
                    var end = start + this._length;
                    for (var i = 0; i < this._buffer.length; i++) {
                        if (i === start) {
                            str += "[";
                        }
                        if (i === end) {
                            str += "]";
                        }
                        str += this._buffer[i];
                        if (i < this._buffer.length - 1) {
                            str += ",";
                        }
                    }
                    if (this._offset + this._length === this._buffer.length) {
                        str += "]";
                    }
                    return str + ": offset: " + this._offset + ", length: " + this._length + ", capacity: " + this._buffer.length;
                };
                Uint32Vector.prototype.toString = function () {
                    var str = "";
                    for (var i = 0; i < this._length; i++) {
                        str += this._buffer[this._offset + i];
                        if (i < this._length - 1) {
                            str += ",";
                        }
                    }
                    return str;
                };
                Uint32Vector.prototype.toLocaleString = function () {
                    var str = "";
                    for (var i = 0; i < this._length; i++) {
                        str += this._buffer[this._offset + i];
                        if (i < this._length - 1) {
                            str += ",";
                        }
                    }
                    return str;
                };
                Uint32Vector.prototype._view = function () {
                    return this._buffer.subarray(this._offset, this._offset + this._length);
                };
                Uint32Vector.prototype._ensureCapacity = function (length) {
                    var minCapacity = this._offset + length;
                    if (minCapacity < this._buffer.length) {
                        return;
                    }
                    if (length <= this._buffer.length) {
                        var offset = (this._buffer.length - length) >> 2;
                        this._buffer.set(this._view(), offset);
                        this._offset = offset;
                        return;
                    }
                    var oldCapacity = this._buffer.length;
                    var newCapacity = ((oldCapacity * 3) >> 1) + 1;
                    if (newCapacity < minCapacity) {
                        newCapacity = minCapacity;
                    }
                    var buffer = new Uint32Array(newCapacity);
                    buffer.set(this._buffer, 0);
                    this._buffer = buffer;
                };
                Uint32Vector.prototype.concat = function () {
                    var length = this._length;
                    for (var i = 0; i < arguments.length; i++) {
                        var vector = arguments[i];
                        if (!(vector._buffer instanceof Uint32Array)) {
                            throwError('TypeError', AVM2.Errors.CheckTypeFailedError, vector.constructor.name, '__AS3__.vec.Vector.<uint>');
                        }
                        length += vector._length;
                    }
                    var result = new Uint32Vector(length);
                    var buffer = result._buffer;
                    buffer.set(this._buffer);
                    var offset = this._length;
                    for (var i = 0; i < arguments.length; i++) {
                        var vector = arguments[i];
                        if (offset + vector._buffer.length < vector._buffer.length) {
                            buffer.set(vector._buffer, offset);
                        }
                        else {
                            buffer.set(vector._buffer.subarray(0, vector._length), offset);
                        }
                        offset += vector._length;
                    }
                    return result;
                };
                Uint32Vector.prototype.every = function (callback, thisObject) {
                    for (var i = 0; i < this._length; i++) {
                        if (!callback.call(thisObject, this._buffer[this._offset + i], i, this)) {
                            return false;
                        }
                    }
                    return true;
                };
                Uint32Vector.prototype.filter = function (callback, thisObject) {
                    var v = new Uint32Vector();
                    for (var i = 0; i < this._length; i++) {
                        if (callback.call(thisObject, this._buffer[this._offset + i], i, this)) {
                            v.push(this._buffer[this._offset + i]);
                        }
                    }
                    return v;
                };
                Uint32Vector.prototype.some = function (callback, thisObject) {
                    if (arguments.length !== 2) {
                        throwError("ArgumentError", AVM2.Errors.WrongArgumentCountError);
                    }
                    else if (!Shumway.isFunction(callback)) {
                        throwError("ArgumentError", AVM2.Errors.CheckTypeFailedError);
                    }
                    for (var i = 0; i < this._length; i++) {
                        if (callback.call(thisObject, this._buffer[this._offset + i], i, this)) {
                            return true;
                        }
                    }
                    return false;
                };
                Uint32Vector.prototype.forEach = function (callback, thisObject) {
                    for (var i = 0; i < this._length; i++) {
                        callback.call(thisObject, this._buffer[this._offset + i], i, this);
                    }
                };
                Uint32Vector.prototype.join = function (separator) {
                    if (separator === void 0) { separator = ','; }
                    var limit = this.length;
                    var buffer = this._buffer;
                    var offset = this._offset;
                    var result = "";
                    for (var i = 0; i < limit - 1; i++) {
                        result += buffer[offset + i] + separator;
                    }
                    if (limit > 0) {
                        result += buffer[offset + limit - 1];
                    }
                    return result;
                };
                Uint32Vector.prototype.indexOf = function (searchElement, fromIndex) {
                    if (fromIndex === void 0) { fromIndex = 0; }
                    var length = this._length;
                    var start = fromIndex | 0;
                    if (start < 0) {
                        start = start + length;
                        if (start < 0) {
                            start = 0;
                        }
                    }
                    else if (start >= length) {
                        return -1;
                    }
                    var buffer = this._buffer;
                    var length = this._length;
                    var offset = this._offset;
                    start += offset;
                    var end = offset + length;
                    for (var i = start; i < end; i++) {
                        if (buffer[i] === searchElement) {
                            return i - offset;
                        }
                    }
                    return -1;
                };
                Uint32Vector.prototype.lastIndexOf = function (searchElement, fromIndex) {
                    if (fromIndex === void 0) { fromIndex = 0x7fffffff; }
                    var length = this._length;
                    var start = fromIndex | 0;
                    if (start < 0) {
                        start = start + length;
                        if (start < 0) {
                            return -1;
                        }
                    }
                    else if (start >= length) {
                        start = length;
                    }
                    var buffer = this._buffer;
                    var offset = this._offset;
                    start += offset;
                    var end = offset;
                    for (var i = start; i-- > end;) {
                        if (buffer[i] === searchElement) {
                            return i - offset;
                        }
                    }
                    return -1;
                };
                Uint32Vector.prototype.map = function (callback, thisObject) {
                    if (!Shumway.isFunction(callback)) {
                        throwError("ArgumentError", AVM2.Errors.CheckTypeFailedError);
                    }
                    var v = new Uint32Vector();
                    for (var i = 0; i < this._length; i++) {
                        v.push(callback.call(thisObject, this._buffer[this._offset + i], i, this));
                    }
                    return v;
                };
                Uint32Vector.prototype.push = function (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {
                    this._checkFixed();
                    this._ensureCapacity(this._length + arguments.length);
                    for (var i = 0; i < arguments.length; i++) {
                        this._buffer[this._offset + this._length++] = arguments[i];
                    }
                };
                Uint32Vector.prototype.pop = function () {
                    this._checkFixed();
                    if (this._length === 0) {
                        return Uint32Vector.DEFAULT_VALUE;
                    }
                    this._length--;
                    return this._buffer[this._offset + this._length];
                };
                Uint32Vector.prototype.reverse = function () {
                    var l = this._offset;
                    var r = this._offset + this._length - 1;
                    var b = this._buffer;
                    while (l < r) {
                        var t = b[l];
                        b[l] = b[r];
                        b[r] = t;
                        l++;
                        r--;
                    }
                    return this;
                };
                Uint32Vector.prototype.sort = function (sortBehavior) {
                    if (arguments.length === 0) {
                        return Array.prototype.sort.call(this._view());
                    }
                    if (sortBehavior instanceof Function) {
                        return Array.prototype.sort.call(this._view(), sortBehavior);
                    }
                    else {
                        var options = sortBehavior | 0;
                        release || assertNotImplemented(!(options & Uint32Vector.UNIQUESORT), "UNIQUESORT");
                        release || assertNotImplemented(!(options & Uint32Vector.RETURNINDEXEDARRAY), "RETURNINDEXEDARRAY");
                        if (options & Uint32Vector.DESCENDING) {
                            return Array.prototype.sort.call(this._view(), function (a, b) { return b - a; });
                        }
                        return Array.prototype.sort.call(this._view(), function (a, b) { return a - b; });
                    }
                };
                Uint32Vector.prototype.shift = function () {
                    this._checkFixed();
                    if (this._length === 0) {
                        return 0;
                    }
                    this._length--;
                    return this._buffer[this._offset++];
                };
                Uint32Vector.prototype.unshift = function () {
                    this._checkFixed();
                    if (!arguments.length) {
                        return;
                    }
                    this._ensureCapacity(this._length + arguments.length);
                    this._slide(arguments.length);
                    this._offset -= arguments.length;
                    this._length += arguments.length;
                    for (var i = 0; i < arguments.length; i++) {
                        this._buffer[this._offset + i] = arguments[i];
                    }
                };
                Uint32Vector.prototype.slice = function (start, end) {
                    if (start === void 0) { start = 0; }
                    if (end === void 0) { end = 0x7fffffff; }
                    var buffer = this._buffer;
                    var length = this._length;
                    var first = Math.min(Math.max(start, 0), length);
                    var last = Math.min(Math.max(end, first), length);
                    var result = new Uint32Vector(last - first, this.fixed);
                    result._buffer.set(buffer.subarray(this._offset + first, this._offset + last), result._offset);
                    return result;
                };
                Uint32Vector.prototype.splice = function (start, deleteCount_) {
                    var buffer = this._buffer;
                    var length = this._length;
                    var first = Math.min(Math.max(start, 0), length);
                    var startOffset = this._offset + first;
                    var deleteCount = Math.min(Math.max(deleteCount_, 0), length - first);
                    var insertCount = arguments.length - 2;
                    var deletedItems;
                    var result = new Uint32Vector(deleteCount, this.fixed);
                    if (deleteCount > 0) {
                        deletedItems = buffer.subarray(startOffset, startOffset + deleteCount);
                        result._buffer.set(deletedItems, result._offset);
                    }
                    this._ensureCapacity(length - deleteCount + insertCount);
                    var right = startOffset + deleteCount;
                    var slice = buffer.subarray(right, length);
                    buffer.set(slice, startOffset + insertCount);
                    this._length += insertCount - deleteCount;
                    for (var i = 0; i < insertCount; i++) {
                        buffer[startOffset + i] = arguments[i + 2];
                    }
                    return result;
                };
                Uint32Vector.prototype._slide = function (distance) {
                    this._buffer.set(this._view(), this._offset + distance);
                    this._offset += distance;
                };
                Object.defineProperty(Uint32Vector.prototype, "length", {
                    get: function () {
                        return this._length;
                    },
                    set: function (value) {
                        value = value >>> 0;
                        if (value > this._length) {
                            this._ensureCapacity(value);
                            for (var i = this._offset + this._length, j = this._offset + value; i < j; i++) {
                                this._buffer[i] = Uint32Vector.DEFAULT_VALUE;
                            }
                        }
                        this._length = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Uint32Vector.prototype, "fixed", {
                    get: function () {
                        return this._fixed;
                    },
                    set: function (f) {
                        this._fixed = !!f;
                    },
                    enumerable: true,
                    configurable: true
                });
                Uint32Vector.prototype._checkFixed = function () {
                    if (this._fixed) {
                        throwError("RangeError", AVM2.Errors.VectorFixedError);
                    }
                };
                Uint32Vector.prototype.asGetNumericProperty = function (i) {
                    checkArguments && asCheckVectorGetNumericProperty(i, this._length);
                    return this._buffer[this._offset + i];
                };
                Uint32Vector.prototype.asSetNumericProperty = function (i, v) {
                    checkArguments && asCheckVectorSetNumericProperty(i, this._length, this._fixed);
                    if (i === this._length) {
                        this._ensureCapacity(this._length + 1);
                        this._length++;
                    }
                    this._buffer[this._offset + i] = v;
                };
                Uint32Vector.prototype.asHasProperty = function (namespaces, name, flags) {
                    if (Uint32Vector.prototype === this || !Shumway.isNumeric(name)) {
                        return Object.prototype.asHasProperty.call(this, namespaces, name, flags);
                    }
                    var index = Shumway.toNumber(name);
                    return index >= 0 && index < this._length;
                };
                Uint32Vector.prototype.asNextName = function (index) {
                    return index - 1;
                };
                Uint32Vector.prototype.asNextValue = function (index) {
                    return this._buffer[this._offset + index - 1];
                };
                Uint32Vector.prototype.asNextNameIndex = function (index) {
                    var nextNameIndex = index + 1;
                    if (nextNameIndex <= this._length) {
                        return nextNameIndex;
                    }
                    return 0;
                };
                Uint32Vector.prototype.asHasNext2 = function (hasNext2Info) {
                    hasNext2Info.index = this.asNextNameIndex(hasNext2Info.index);
                };
                Uint32Vector.EXTRA_CAPACITY = 4;
                Uint32Vector.INITIAL_CAPACITY = 10;
                Uint32Vector.DEFAULT_VALUE = 0;
                Uint32Vector.DESCENDING = 2;
                Uint32Vector.UNIQUESORT = 4;
                Uint32Vector.RETURNINDEXEDARRAY = 8;
                Uint32Vector.instanceConstructor = Uint32Vector;
                Uint32Vector.staticNatives = [Uint32Vector];
                Uint32Vector.instanceNatives = [Uint32Vector.prototype];
                Uint32Vector.callableConstructor = Uint32Vector.callable;
                Uint32Vector.classInitializer = function () {
                    var proto = Uint32Vector.prototype;
                    defineNonEnumerableProperty(proto, '$Bgjoin', proto.join);
                    defineNonEnumerableProperty(proto, '$BgtoString', proto.join);
                    defineNonEnumerableProperty(proto, '$BgtoLocaleString', proto.toLocaleString);
                    defineNonEnumerableProperty(proto, '$Bgpop', proto.pop);
                    defineNonEnumerableProperty(proto, '$Bgpush', proto.push);
                    defineNonEnumerableProperty(proto, '$Bgreverse', proto.reverse);
                    defineNonEnumerableProperty(proto, '$Bgconcat', proto.concat);
                    defineNonEnumerableProperty(proto, '$Bgsplice', proto.splice);
                    defineNonEnumerableProperty(proto, '$Bgslice', proto.slice);
                    defineNonEnumerableProperty(proto, '$Bgshift', proto.shift);
                    defineNonEnumerableProperty(proto, '$Bgunshift', proto.unshift);
                    defineNonEnumerableProperty(proto, '$BgindexOf', proto.indexOf);
                    defineNonEnumerableProperty(proto, '$BglastIndexOf', proto.lastIndexOf);
                    defineNonEnumerableProperty(proto, '$BgforEach', proto.forEach);
                    defineNonEnumerableProperty(proto, '$Bgmap', proto.map);
                    defineNonEnumerableProperty(proto, '$Bgfilter', proto.filter);
                    defineNonEnumerableProperty(proto, '$Bgsome', proto.some);
                    defineNonEnumerableProperty(proto, '$Bgevery', proto.every);
                    defineNonEnumerableProperty(proto, '$Bgsort', proto.sort);
                };
                return Uint32Vector;
            })(AS.ASVector);
            AS.Uint32Vector = Uint32Vector;
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var checkArguments = true;
            var assertNotImplemented = Shumway.Debug.assertNotImplemented;
            var defineNonEnumerableProperty = Shumway.ObjectUtilities.defineNonEnumerableProperty;
            var throwError = Shumway.AVM2.Runtime.throwError;
            var asCheckVectorGetNumericProperty = Shumway.AVM2.Runtime.asCheckVectorGetNumericProperty;
            var asCheckVectorSetNumericProperty = Shumway.AVM2.Runtime.asCheckVectorSetNumericProperty;
            var Float64Vector = (function (_super) {
                __extends(Float64Vector, _super);
                function Float64Vector(length, fixed) {
                    if (length === void 0) { length = 0; }
                    if (fixed === void 0) { fixed = false; }
                    false && _super.call(this);
                    length = length >>> 0;
                    fixed = !!fixed;
                    this._fixed = fixed;
                    this._buffer = new Float64Array(Math.max(Float64Vector.INITIAL_CAPACITY, length + Float64Vector.EXTRA_CAPACITY));
                    this._offset = 0;
                    this._length = length;
                }
                Float64Vector.prototype.newThisType = function () {
                    return new Float64Vector();
                };
                Float64Vector.callable = function (object) {
                    if (object instanceof Float64Vector) {
                        return object;
                    }
                    var length = object.asGetProperty(undefined, "length");
                    if (length !== undefined) {
                        var v = new Float64Vector(length, false);
                        for (var i = 0; i < length; i++) {
                            v.asSetNumericProperty(i, object.asGetPublicProperty(i));
                        }
                        return v;
                    }
                    Shumway.Debug.unexpected();
                };
                Float64Vector.prototype.internalToString = function () {
                    var str = "";
                    var start = this._offset;
                    var end = start + this._length;
                    for (var i = 0; i < this._buffer.length; i++) {
                        if (i === start) {
                            str += "[";
                        }
                        if (i === end) {
                            str += "]";
                        }
                        str += this._buffer[i];
                        if (i < this._buffer.length - 1) {
                            str += ",";
                        }
                    }
                    if (this._offset + this._length === this._buffer.length) {
                        str += "]";
                    }
                    return str + ": offset: " + this._offset + ", length: " + this._length + ", capacity: " + this._buffer.length;
                };
                Float64Vector.prototype.toString = function () {
                    var str = "";
                    for (var i = 0; i < this._length; i++) {
                        str += this._buffer[this._offset + i];
                        if (i < this._length - 1) {
                            str += ",";
                        }
                    }
                    return str;
                };
                Float64Vector.prototype.toLocaleString = function () {
                    var str = "";
                    for (var i = 0; i < this._length; i++) {
                        str += this._buffer[this._offset + i];
                        if (i < this._length - 1) {
                            str += ",";
                        }
                    }
                    return str;
                };
                Float64Vector.prototype._view = function () {
                    return this._buffer.subarray(this._offset, this._offset + this._length);
                };
                Float64Vector.prototype._ensureCapacity = function (length) {
                    var minCapacity = this._offset + length;
                    if (minCapacity < this._buffer.length) {
                        return;
                    }
                    if (length <= this._buffer.length) {
                        var offset = (this._buffer.length - length) >> 2;
                        this._buffer.set(this._view(), offset);
                        this._offset = offset;
                        return;
                    }
                    var oldCapacity = this._buffer.length;
                    var newCapacity = ((oldCapacity * 3) >> 1) + 1;
                    if (newCapacity < minCapacity) {
                        newCapacity = minCapacity;
                    }
                    var buffer = new Float64Array(newCapacity);
                    buffer.set(this._buffer, 0);
                    this._buffer = buffer;
                };
                Float64Vector.prototype.concat = function () {
                    var length = this._length;
                    for (var i = 0; i < arguments.length; i++) {
                        var vector = arguments[i];
                        if (!(vector._buffer instanceof Float64Array)) {
                            throwError('TypeError', AVM2.Errors.CheckTypeFailedError, vector.constructor.name, '__AS3__.vec.Vector.<Number>');
                        }
                        length += vector._length;
                    }
                    var result = new Float64Vector(length);
                    var buffer = result._buffer;
                    buffer.set(this._buffer);
                    var offset = this._length;
                    for (var i = 0; i < arguments.length; i++) {
                        var vector = arguments[i];
                        if (offset + vector._buffer.length < vector._buffer.length) {
                            buffer.set(vector._buffer, offset);
                        }
                        else {
                            buffer.set(vector._buffer.subarray(0, vector._length), offset);
                        }
                        offset += vector._length;
                    }
                    return result;
                };
                Float64Vector.prototype.every = function (callback, thisObject) {
                    for (var i = 0; i < this._length; i++) {
                        if (!callback.call(thisObject, this._buffer[this._offset + i], i, this)) {
                            return false;
                        }
                    }
                    return true;
                };
                Float64Vector.prototype.filter = function (callback, thisObject) {
                    var v = new Float64Vector();
                    for (var i = 0; i < this._length; i++) {
                        if (callback.call(thisObject, this._buffer[this._offset + i], i, this)) {
                            v.push(this._buffer[this._offset + i]);
                        }
                    }
                    return v;
                };
                Float64Vector.prototype.some = function (callback, thisObject) {
                    if (arguments.length !== 2) {
                        throwError("ArgumentError", AVM2.Errors.WrongArgumentCountError);
                    }
                    else if (!Shumway.isFunction(callback)) {
                        throwError("ArgumentError", AVM2.Errors.CheckTypeFailedError);
                    }
                    for (var i = 0; i < this._length; i++) {
                        if (callback.call(thisObject, this._buffer[this._offset + i], i, this)) {
                            return true;
                        }
                    }
                    return false;
                };
                Float64Vector.prototype.forEach = function (callback, thisObject) {
                    for (var i = 0; i < this._length; i++) {
                        callback.call(thisObject, this._buffer[this._offset + i], i, this);
                    }
                };
                Float64Vector.prototype.join = function (separator) {
                    if (separator === void 0) { separator = ','; }
                    var limit = this.length;
                    var buffer = this._buffer;
                    var offset = this._offset;
                    var result = "";
                    for (var i = 0; i < limit - 1; i++) {
                        result += buffer[offset + i] + separator;
                    }
                    if (limit > 0) {
                        result += buffer[offset + limit - 1];
                    }
                    return result;
                };
                Float64Vector.prototype.indexOf = function (searchElement, fromIndex) {
                    if (fromIndex === void 0) { fromIndex = 0; }
                    var length = this._length;
                    var start = fromIndex | 0;
                    if (start < 0) {
                        start = start + length;
                        if (start < 0) {
                            start = 0;
                        }
                    }
                    else if (start >= length) {
                        return -1;
                    }
                    var buffer = this._buffer;
                    var length = this._length;
                    var offset = this._offset;
                    start += offset;
                    var end = offset + length;
                    for (var i = start; i < end; i++) {
                        if (buffer[i] === searchElement) {
                            return i - offset;
                        }
                    }
                    return -1;
                };
                Float64Vector.prototype.lastIndexOf = function (searchElement, fromIndex) {
                    if (fromIndex === void 0) { fromIndex = 0x7fffffff; }
                    var length = this._length;
                    var start = fromIndex | 0;
                    if (start < 0) {
                        start = start + length;
                        if (start < 0) {
                            return -1;
                        }
                    }
                    else if (start >= length) {
                        start = length;
                    }
                    var buffer = this._buffer;
                    var offset = this._offset;
                    start += offset;
                    var end = offset;
                    for (var i = start; i-- > end;) {
                        if (buffer[i] === searchElement) {
                            return i - offset;
                        }
                    }
                    return -1;
                };
                Float64Vector.prototype.map = function (callback, thisObject) {
                    if (!Shumway.isFunction(callback)) {
                        throwError("ArgumentError", AVM2.Errors.CheckTypeFailedError);
                    }
                    var v = new Float64Vector();
                    for (var i = 0; i < this._length; i++) {
                        v.push(callback.call(thisObject, this._buffer[this._offset + i], i, this));
                    }
                    return v;
                };
                Float64Vector.prototype.push = function (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {
                    this._checkFixed();
                    this._ensureCapacity(this._length + arguments.length);
                    for (var i = 0; i < arguments.length; i++) {
                        this._buffer[this._offset + this._length++] = arguments[i];
                    }
                };
                Float64Vector.prototype.pop = function () {
                    this._checkFixed();
                    if (this._length === 0) {
                        return Float64Vector.DEFAULT_VALUE;
                    }
                    this._length--;
                    return this._buffer[this._offset + this._length];
                };
                Float64Vector.prototype.reverse = function () {
                    var l = this._offset;
                    var r = this._offset + this._length - 1;
                    var b = this._buffer;
                    while (l < r) {
                        var t = b[l];
                        b[l] = b[r];
                        b[r] = t;
                        l++;
                        r--;
                    }
                    return this;
                };
                Float64Vector.prototype.sort = function (sortBehavior) {
                    if (arguments.length === 0) {
                        return Array.prototype.sort.call(this._view());
                    }
                    if (sortBehavior instanceof Function) {
                        return Array.prototype.sort.call(this._view(), sortBehavior);
                    }
                    else {
                        var options = sortBehavior | 0;
                        release || assertNotImplemented(!(options & Float64Vector.UNIQUESORT), "UNIQUESORT");
                        release || assertNotImplemented(!(options & Float64Vector.RETURNINDEXEDARRAY), "RETURNINDEXEDARRAY");
                        if (options & Float64Vector.DESCENDING) {
                            return Array.prototype.sort.call(this._view(), function (a, b) { return b - a; });
                        }
                        return Array.prototype.sort.call(this._view(), function (a, b) { return a - b; });
                    }
                };
                Float64Vector.prototype.shift = function () {
                    this._checkFixed();
                    if (this._length === 0) {
                        return 0;
                    }
                    this._length--;
                    return this._buffer[this._offset++];
                };
                Float64Vector.prototype.unshift = function () {
                    this._checkFixed();
                    if (!arguments.length) {
                        return;
                    }
                    this._ensureCapacity(this._length + arguments.length);
                    this._slide(arguments.length);
                    this._offset -= arguments.length;
                    this._length += arguments.length;
                    for (var i = 0; i < arguments.length; i++) {
                        this._buffer[this._offset + i] = arguments[i];
                    }
                };
                Float64Vector.prototype.slice = function (start, end) {
                    if (start === void 0) { start = 0; }
                    if (end === void 0) { end = 0x7fffffff; }
                    var buffer = this._buffer;
                    var length = this._length;
                    var first = Math.min(Math.max(start, 0), length);
                    var last = Math.min(Math.max(end, first), length);
                    var result = new Float64Vector(last - first, this.fixed);
                    result._buffer.set(buffer.subarray(this._offset + first, this._offset + last), result._offset);
                    return result;
                };
                Float64Vector.prototype.splice = function (start, deleteCount_) {
                    var buffer = this._buffer;
                    var length = this._length;
                    var first = Math.min(Math.max(start, 0), length);
                    var startOffset = this._offset + first;
                    var deleteCount = Math.min(Math.max(deleteCount_, 0), length - first);
                    var insertCount = arguments.length - 2;
                    var deletedItems;
                    var result = new Float64Vector(deleteCount, this.fixed);
                    if (deleteCount > 0) {
                        deletedItems = buffer.subarray(startOffset, startOffset + deleteCount);
                        result._buffer.set(deletedItems, result._offset);
                    }
                    this._ensureCapacity(length - deleteCount + insertCount);
                    var right = startOffset + deleteCount;
                    var slice = buffer.subarray(right, length);
                    buffer.set(slice, startOffset + insertCount);
                    this._length += insertCount - deleteCount;
                    for (var i = 0; i < insertCount; i++) {
                        buffer[startOffset + i] = arguments[i + 2];
                    }
                    return result;
                };
                Float64Vector.prototype._slide = function (distance) {
                    this._buffer.set(this._view(), this._offset + distance);
                    this._offset += distance;
                };
                Object.defineProperty(Float64Vector.prototype, "length", {
                    get: function () {
                        return this._length;
                    },
                    set: function (value) {
                        value = value >>> 0;
                        if (value > this._length) {
                            this._ensureCapacity(value);
                            for (var i = this._offset + this._length, j = this._offset + value; i < j; i++) {
                                this._buffer[i] = Float64Vector.DEFAULT_VALUE;
                            }
                        }
                        this._length = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Float64Vector.prototype, "fixed", {
                    get: function () {
                        return this._fixed;
                    },
                    set: function (f) {
                        this._fixed = !!f;
                    },
                    enumerable: true,
                    configurable: true
                });
                Float64Vector.prototype._checkFixed = function () {
                    if (this._fixed) {
                        throwError("RangeError", AVM2.Errors.VectorFixedError);
                    }
                };
                Float64Vector.prototype.asGetNumericProperty = function (i) {
                    checkArguments && asCheckVectorGetNumericProperty(i, this._length);
                    return this._buffer[this._offset + i];
                };
                Float64Vector.prototype.asSetNumericProperty = function (i, v) {
                    checkArguments && asCheckVectorSetNumericProperty(i, this._length, this._fixed);
                    if (i === this._length) {
                        this._ensureCapacity(this._length + 1);
                        this._length++;
                    }
                    this._buffer[this._offset + i] = v;
                };
                Float64Vector.prototype.asHasProperty = function (namespaces, name, flags) {
                    if (Float64Vector.prototype === this || !Shumway.isNumeric(name)) {
                        return Object.prototype.asHasProperty.call(this, namespaces, name, flags);
                    }
                    var index = Shumway.toNumber(name);
                    return index >= 0 && index < this._length;
                };
                Float64Vector.prototype.asNextName = function (index) {
                    return index - 1;
                };
                Float64Vector.prototype.asNextValue = function (index) {
                    return this._buffer[this._offset + index - 1];
                };
                Float64Vector.prototype.asNextNameIndex = function (index) {
                    var nextNameIndex = index + 1;
                    if (nextNameIndex <= this._length) {
                        return nextNameIndex;
                    }
                    return 0;
                };
                Float64Vector.prototype.asHasNext2 = function (hasNext2Info) {
                    hasNext2Info.index = this.asNextNameIndex(hasNext2Info.index);
                };
                Float64Vector.EXTRA_CAPACITY = 4;
                Float64Vector.INITIAL_CAPACITY = 10;
                Float64Vector.DEFAULT_VALUE = 0;
                Float64Vector.DESCENDING = 2;
                Float64Vector.UNIQUESORT = 4;
                Float64Vector.RETURNINDEXEDARRAY = 8;
                Float64Vector.instanceConstructor = Float64Vector;
                Float64Vector.staticNatives = [Float64Vector];
                Float64Vector.instanceNatives = [Float64Vector.prototype];
                Float64Vector.callableConstructor = Float64Vector.callable;
                Float64Vector.classInitializer = function () {
                    var proto = Float64Vector.prototype;
                    defineNonEnumerableProperty(proto, '$Bgjoin', proto.join);
                    defineNonEnumerableProperty(proto, '$BgtoString', proto.join);
                    defineNonEnumerableProperty(proto, '$BgtoLocaleString', proto.toLocaleString);
                    defineNonEnumerableProperty(proto, '$Bgpop', proto.pop);
                    defineNonEnumerableProperty(proto, '$Bgpush', proto.push);
                    defineNonEnumerableProperty(proto, '$Bgreverse', proto.reverse);
                    defineNonEnumerableProperty(proto, '$Bgconcat', proto.concat);
                    defineNonEnumerableProperty(proto, '$Bgsplice', proto.splice);
                    defineNonEnumerableProperty(proto, '$Bgslice', proto.slice);
                    defineNonEnumerableProperty(proto, '$Bgshift', proto.shift);
                    defineNonEnumerableProperty(proto, '$Bgunshift', proto.unshift);
                    defineNonEnumerableProperty(proto, '$BgindexOf', proto.indexOf);
                    defineNonEnumerableProperty(proto, '$BglastIndexOf', proto.lastIndexOf);
                    defineNonEnumerableProperty(proto, '$BgforEach', proto.forEach);
                    defineNonEnumerableProperty(proto, '$Bgmap', proto.map);
                    defineNonEnumerableProperty(proto, '$Bgfilter', proto.filter);
                    defineNonEnumerableProperty(proto, '$Bgsome', proto.some);
                    defineNonEnumerableProperty(proto, '$Bgevery', proto.every);
                    defineNonEnumerableProperty(proto, '$Bgsort', proto.sort);
                };
                return Float64Vector;
            })(AS.ASVector);
            AS.Float64Vector = Float64Vector;
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var assert = Shumway.Debug.assert;
            var Multiname = Shumway.AVM2.ABC.Multiname;
            var notImplemented = Shumway.Debug.notImplemented;
            var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
            var defineNonEnumerableProperty = Shumway.ObjectUtilities.defineNonEnumerableProperty;
            var createPublicAliases = Shumway.ObjectUtilities.createPublicAliases;
            var _asGetProperty = Object.prototype.asGetProperty;
            var _asSetProperty = Object.prototype.asSetProperty;
            var _asCallProperty = Object.prototype.asCallProperty;
            var _asHasProperty = Object.prototype.asHasProperty;
            var _asHasOwnProperty = Object.prototype.asHasOwnProperty;
            var _asDeleteProperty = Object.prototype.asDeleteProperty;
            var _asGetEnumerableKeys = Object.prototype.asGetEnumerableKeys;
            function isXMLType(val) {
                return (val instanceof AS.ASXML || val instanceof AS.ASXMLList);
            }
            function toString(node) {
                if (!(node instanceof AS.ASXML)) {
                    return String(node);
                }
                switch (node._kind) {
                    case 3 /* Text */:
                    case 2 /* Attribute */:
                        return node._value;
                    default:
                        if (node.hasSimpleContent()) {
                            var s = '';
                            for (var i = 0; i < node._children.length; i++) {
                                var child = node._children[i];
                                if (child._kind === 4 /* Comment */ || child._kind === 5 /* ProcessingInstruction */) {
                                    continue;
                                }
                                s += toString(child);
                            }
                            return s;
                        }
                        return toXMLString(node);
                }
            }
            function escapeElementValue(s) {
                var i = 0, ch;
                while (i < s.length && (ch = s[i]) !== '&' && ch !== '<' && ch !== '>') {
                    i++;
                }
                if (i >= s.length) {
                    return s;
                }
                var buf = s.substring(0, i);
                while (i < s.length) {
                    ch = s[i++];
                    switch (ch) {
                        case '&':
                            buf += '&amp;';
                            break;
                        case '<':
                            buf += '&lt;';
                            break;
                        case '>':
                            buf += '&gt;';
                            break;
                        default:
                            buf += ch;
                            break;
                    }
                }
                return buf;
            }
            AS.escapeElementValue = escapeElementValue;
            function escapeAttributeValue(s) {
                var i = 0, ch;
                while (i < s.length && (ch = s[i]) !== '&' && ch !== '<' && ch !== '\"' && ch !== '\n' && ch !== '\r' && ch !== '\t') {
                    i++;
                }
                if (i >= s.length) {
                    return s;
                }
                var buf = s.substring(0, i);
                while (i < s.length) {
                    ch = s[i++];
                    switch (ch) {
                        case '&':
                            buf += '&amp;';
                            break;
                        case '<':
                            buf += '&lt;';
                            break;
                        case '\"':
                            buf += '&quot;';
                            break;
                        case '\n':
                            buf += '&#xA;';
                            break;
                        case '\r':
                            buf += '&#xD;';
                            break;
                        case '\t':
                            buf += '&#x9;';
                            break;
                        default:
                            buf += ch;
                            break;
                    }
                }
                return buf;
            }
            AS.escapeAttributeValue = escapeAttributeValue;
            function isWhitespace(s, index) {
                var ch = s[index];
                return ch === ' ' || ch === '\n' || ch === '\r' || ch === '\t';
            }
            function trimWhitespaces(s) {
                var i = 0;
                while (i < s.length && isWhitespace(s, i)) {
                    i++;
                }
                if (i >= s.length) {
                    return '';
                }
                var j = s.length - 1;
                while (isWhitespace(s, j)) {
                    j--;
                }
                return i === 0 && j === s.length - 1 ? s : s.substring(i, j + 1);
            }
            var indentStringCache = [];
            function getIndentString(indent) {
                if (indent > 0) {
                    if (indentStringCache[indent] !== undefined) {
                        return indentStringCache[indent];
                    }
                    var s = '';
                    for (var i = 0; i < indent; i++) {
                        s += ' ';
                    }
                    indentStringCache[indent] = s;
                    return s;
                }
                return '';
            }
            function generateUniquePrefix(namespaces) {
                var i = 1, newPrefix;
                while (true) {
                    newPrefix = '_ns' + i;
                    if (!namespaces.some(function (ns) {
                        return ns.prefix == newPrefix;
                    })) {
                        break;
                    }
                    i++;
                }
                return newPrefix;
            }
            function toXMLString(node, ancestorNamespaces, indentLevel) {
                if (node === null || node === undefined) {
                    throw new TypeError();
                }
                if (!(node instanceof ASXML)) {
                    if (node instanceof ASXMLList) {
                        return node._children.map(function (childNode) {
                            return toXMLString(childNode, ancestorNamespaces);
                        }).join(ASXML.prettyPrinting ? '\n' : '');
                    }
                    return escapeElementValue(String(node));
                }
                var prettyPrinting = ASXML.prettyPrinting;
                indentLevel |= 0;
                var s = prettyPrinting ? getIndentString(indentLevel) : '';
                var kind = node._kind;
                switch (kind) {
                    case 3 /* Text */:
                        return prettyPrinting ? s + escapeElementValue(trimWhitespaces(node._value)) : escapeElementValue(node._value);
                    case 2 /* Attribute */:
                        return s + escapeAttributeValue(node._value);
                    case 4 /* Comment */:
                        return s + '<!--' + node._value + '-->';
                    case 5 /* ProcessingInstruction */:
                        return s + '<?' + node._name.localName + ' ' + node._value + '?>';
                    default:
                        release || assert(kind === 1 /* Element */);
                        break;
                }
                ancestorNamespaces = ancestorNamespaces || [];
                var namespaceDeclarations = [];
                for (var i = 0; node._inScopeNamespaces && i < node._inScopeNamespaces.length; i++) {
                    var nsPrefix = node._inScopeNamespaces[i].prefix;
                    var nsUri = node._inScopeNamespaces[i].uri;
                    if (ancestorNamespaces.every(function (ans) {
                        return ans.uri != nsUri || ans.prefix != nsPrefix;
                    })) {
                        var ns1 = new AS.ASNamespace(nsPrefix, nsUri);
                        namespaceDeclarations.push(ns1);
                    }
                }
                var currentNamespaces = ancestorNamespaces.concat(namespaceDeclarations);
                var namespace = node._name.getNamespace(currentNamespaces);
                if (namespace.prefix === undefined) {
                    var newPrefix = generateUniquePrefix(currentNamespaces);
                    var ns2 = new AS.ASNamespace(newPrefix, namespace.uri);
                    namespaceDeclarations.push(ns2);
                    currentNamespaces.push(ns2);
                }
                var elementName = (namespace.prefix ? namespace.prefix + ':' : '') + node._name.localName;
                s += '<' + elementName;
                node._attributes && node._attributes.forEach(function (attr) {
                    var name = attr._name;
                    var namespace = name.getNamespace(currentNamespaces);
                    if (namespace.prefix === undefined) {
                        var newPrefix = generateUniquePrefix(currentNamespaces);
                        var ns2 = new AS.ASNamespace(newPrefix, namespace.uri);
                        namespaceDeclarations.push(ns2);
                        currentNamespaces.push(ns2);
                    }
                });
                for (var i = 0; i < namespaceDeclarations.length; i++) {
                    var namespace = namespaceDeclarations[i];
                    var attributeName = namespace.prefix ? 'xmlns:' + namespace.prefix : 'xmlns';
                    s += ' ' + attributeName + '=\"' + escapeAttributeValue(namespace.uri) + '\"';
                }
                node._attributes && node._attributes.forEach(function (attr) {
                    var name = attr._name;
                    var namespace = name.getNamespace(ancestorNamespaces);
                    var attributeName = namespace.prefix ? namespace.prefix + ':' + name.localName : name.localName;
                    s += ' ' + attributeName + '=\"' + escapeAttributeValue(attr._value) + '\"';
                });
                if (node.length() === 0) {
                    s += '/>';
                    return s;
                }
                s += '>';
                var indentChildren = node._children.length > 1 || (node._children.length === 1 && node._children[0]._kind !== 3 /* Text */);
                var nextIndentLevel = (prettyPrinting && indentChildren) ? indentLevel + ASXML.prettyIndent : 0;
                node._children.forEach(function (childNode, i) {
                    if (prettyPrinting && indentChildren) {
                        s += '\n';
                    }
                    var child = toXMLString(childNode, currentNamespaces, nextIndentLevel);
                    s += child;
                });
                if (prettyPrinting && indentChildren) {
                    s += '\n' + getIndentString(indentLevel);
                }
                s += '</' + elementName + '>';
                return s;
            }
            function toXML(v) {
                if (v === null) {
                    throw new TypeError(AVM2.formatErrorMessage(AVM2.Errors.ConvertNullToObjectError));
                }
                if (v === undefined) {
                    throw new TypeError(AVM2.formatErrorMessage(AVM2.Errors.ConvertUndefinedToObjectError));
                }
                if (v instanceof ASXML) {
                    return v;
                }
                if (v instanceof ASXMLList) {
                    if (v._children.length !== 1) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.XMLMarkupMustBeWellFormed);
                    }
                    return v._children[0];
                }
                var x = xmlParser.parseFromString(asCoerceString(v));
                var length = x.length();
                if (length === 0) {
                    return createXML(3 /* Text */);
                }
                if (length === 1) {
                    x._children[0]._parent = null;
                    return x._children[0];
                }
                AVM2.Runtime.throwError('TypeError', AVM2.Errors.XMLMarkupMustBeWellFormed);
            }
            function toXMLList(value, targetList) {
                release || assert(!(value instanceof ASXMLList));
                if (value === null) {
                    AVM2.Runtime.throwError('TypeError', AVM2.Errors.ConvertNullToObjectError);
                }
                if (value === undefined) {
                    AVM2.Runtime.throwError('TypeError', AVM2.Errors.ConvertUndefinedToObjectError);
                }
                if (value instanceof ASXML) {
                    targetList.append(value);
                    return;
                }
                var parentString = '<parent xmlns="' + escapeAttributeValue(ASXML.defaultNamespace) + '">' + value + '</parent>';
                var x = toXML(parentString);
                var children = x._children;
                if (!children) {
                    return;
                }
                for (var i = 0; i < children.length; i++) {
                    var v = children[i];
                    v._parent = null;
                    targetList.append(v);
                }
            }
            function toAttributeName(v) {
                if (v === undefined || v === null || typeof v === "boolean" || typeof v === "number") {
                    AVM2.Runtime.throwError('TypeError', AVM2.Errors.ConvertUndefinedToObjectError);
                }
                if (typeof v === 'object') {
                    if (v instanceof ASQName) {
                        return new AS.ASQName(v.uri, v.localName, true);
                    }
                    if (Multiname.isQName(v)) {
                        return ASQName.fromMultiname(v);
                    }
                }
                v = toString(v);
                return new AS.ASQName(undefined, v, true);
            }
            function toXMLName(mn) {
                if (mn === undefined) {
                    return new AS.ASQName('*');
                }
                if (typeof mn === 'object' && mn !== null) {
                    if (mn instanceof ASQName) {
                        return mn;
                    }
                    if (Multiname.isQName(mn)) {
                        return ASQName.fromMultiname(mn);
                    }
                    var name;
                    if (mn instanceof ASXML || mn instanceof ASXMLList) {
                        name = toString(mn);
                    }
                    else if (mn instanceof Multiname) {
                        name = mn.name;
                    }
                    else {
                        name = mn.toString();
                    }
                }
                else if (typeof mn === 'string') {
                    name = mn;
                }
                else {
                    throw new TypeError();
                }
                if (name[0] === '@') {
                    return toAttributeName(name.substring(1));
                }
                return new AS.ASQName(undefined, name, !!(mn.flags & 1 /* ATTR_NAME */));
            }
            function isQNameAttribute(name) {
                return name instanceof ASQName && !!(name.name.flags & 1 /* ATTR_NAME */);
            }
            function prefixWithNamespace(namespaces, name, isAttribute) {
                if (!namespaces || namespaces.length !== 1 || !(namespaces[0] instanceof ASNamespace) || (typeof name !== 'string' && name !== undefined)) {
                    return name;
                }
                return new AS.ASQName(namespaces[0], name || '*', isAttribute);
            }
            function getDefaultNamespace() {
                return new AS.ASNamespace("", ASXML.defaultNamespace);
            }
            function isXMLName(v) {
                try {
                    var qn = new AS.ASQName(v);
                }
                catch (e) {
                    return false;
                }
                return true;
            }
            AS.isXMLName = isXMLName;
            Shumway.AVM2.AS.Natives.isXMLName = isXMLName;
            function XMLParser() {
                function parseXml(s, sink) {
                    var i = 0, scopes = [{
                        namespaces: [],
                        lookup: {
                            "xmlns": 'http://www.w3.org/2000/xmlns/',
                            "xml": 'http://www.w3.org/XML/1998/namespace'
                        },
                        inScopes: !ASXML.defaultNamespace ? [] : [{ uri: ASXML.defaultNamespace, prefix: '' }],
                        space: 'default',
                        xmlns: (ASXML.defaultNamespace || '')
                    }];
                    function resolveEntities(s) {
                        return s.replace(/&([^;]+);/g, function (all, entity) {
                            if (entity.substring(0, 2) === '#x') {
                                return String.fromCharCode(parseInt(entity.substring(2), 16));
                            }
                            else if (entity.substring(0, 1) === '#') {
                                return String.fromCharCode(parseInt(entity.substring(1), 10));
                            }
                            switch (entity) {
                                case 'lt':
                                    return '<';
                                case 'gt':
                                    return '>';
                                case 'amp':
                                    return '&';
                                case 'quot':
                                    return '\"';
                            }
                            return all;
                        });
                    }
                    function isWhitespacePreserved() {
                        for (var j = scopes.length - 1; j >= 0; --j) {
                            if (scopes[j].space === "preserve") {
                                return true;
                            }
                        }
                        return false;
                    }
                    function lookupDefaultNs() {
                        for (var j = scopes.length - 1; j >= 0; --j) {
                            if ('xmlns' in scopes[j]) {
                                return scopes[j].xmlns;
                            }
                        }
                        return '';
                    }
                    function lookupNs(prefix) {
                        for (var j = scopes.length - 1; j >= 0; --j) {
                            if (prefix in scopes[j].lookup) {
                                return scopes[j].lookup[prefix];
                            }
                        }
                        return undefined;
                    }
                    function getName(name, resolveDefaultNs) {
                        var j = name.indexOf(':');
                        if (j >= 0) {
                            var prefix = name.substring(0, j);
                            var namespace = lookupNs(prefix);
                            if (namespace === undefined) {
                                throw "Unknown namespace: " + prefix;
                            }
                            var localName = name.substring(j + 1);
                            return {
                                name: namespace + '::' + localName,
                                localName: localName,
                                prefix: prefix,
                                namespace: namespace,
                            };
                        }
                        else if (resolveDefaultNs) {
                            return {
                                name: name,
                                localName: name,
                                prefix: '',
                                namespace: lookupDefaultNs()
                            };
                        }
                        else {
                            return {
                                name: name,
                                localName: name,
                                prefix: '',
                                namespace: ''
                            };
                        }
                    }
                    function parseContent(s, start) {
                        var pos = start, name, attributes = [];
                        function skipWs() {
                            while (pos < s.length && isWhitespace(s, pos)) {
                                ++pos;
                            }
                        }
                        while (pos < s.length && !isWhitespace(s, pos) && s[pos] !== ">" && s[pos] !== "/") {
                            ++pos;
                        }
                        name = s.substring(start, pos);
                        skipWs();
                        while (pos < s.length && s[pos] !== ">" && s[pos] !== "/" && s[pos] !== "?") {
                            skipWs();
                            var attrName = "", attrValue = "";
                            while (pos < s.length && !isWhitespace(s, pos) && s[pos] !== "=") {
                                attrName += s[pos];
                                ++pos;
                            }
                            skipWs();
                            if (s[pos] !== "=")
                                throw "'=' expected";
                            ++pos;
                            skipWs();
                            var attrEndChar = s[pos];
                            if (attrEndChar !== "\"" && attrEndChar !== "\'")
                                throw "Quote expected";
                            var attrEndIndex = s.indexOf(attrEndChar, ++pos);
                            if (attrEndIndex < 0)
                                throw "Unexpected EOF[6]";
                            attrValue = s.substring(pos, attrEndIndex);
                            attributes.push({ name: attrName, value: resolveEntities(attrValue) });
                            pos = attrEndIndex + 1;
                            skipWs();
                        }
                        return { name: name, attributes: attributes, parsed: pos - start };
                    }
                    function parseProcessingInstruction(s, start) {
                        var pos = start, name, value;
                        function skipWs() {
                            while (pos < s.length && isWhitespace(s, pos)) {
                                ++pos;
                            }
                        }
                        while (pos < s.length && !isWhitespace(s, pos) && s[pos] !== ">" && s[pos] !== "/") {
                            ++pos;
                        }
                        name = s.substring(start, pos);
                        skipWs();
                        var attrStart = pos;
                        while (pos < s.length && (s[pos] !== "?" || s[pos + 1] != '>')) {
                            ++pos;
                        }
                        value = s.substring(attrStart, pos);
                        return { name: name, value: value, parsed: pos - start };
                    }
                    while (i < s.length) {
                        var ch = s[i];
                        var j = i;
                        if (ch === "<") {
                            ++j;
                            var ch2 = s[j], q, name;
                            switch (ch2) {
                                case "/":
                                    ++j;
                                    q = s.indexOf(">", j);
                                    if (q < 0) {
                                        throw "Unexpected EOF[1]";
                                    }
                                    name = getName(s.substring(j, q), true);
                                    sink.endElement(name);
                                    scopes.pop();
                                    j = q + 1;
                                    break;
                                case "?":
                                    ++j;
                                    var pi = parseProcessingInstruction(s, j);
                                    if (s.substring(j + pi.parsed, j + pi.parsed + 2) != "?>") {
                                        throw "Unexpected EOF[2]";
                                    }
                                    sink.pi(pi.name, pi.value);
                                    j += pi.parsed + 2;
                                    break;
                                case "!":
                                    if (s.substring(j + 1, j + 3) === "--") {
                                        q = s.indexOf("-->", j + 3);
                                        if (q < 0) {
                                            throw "Unexpected EOF[3]";
                                        }
                                        sink.comment(s.substring(j + 3, q));
                                        j = q + 3;
                                    }
                                    else if (s.substring(j + 1, j + 8) === "[CDATA[") {
                                        q = s.indexOf("]]>", j + 8);
                                        if (q < 0) {
                                            throw "Unexpected EOF[4]";
                                        }
                                        sink.cdata(s.substring(j + 8, q));
                                        j = q + 3;
                                    }
                                    else if (s.substring(j + 1, j + 8) === "DOCTYPE") {
                                        var q2 = s.indexOf("[", j + 8), complexDoctype = false;
                                        q = s.indexOf(">", j + 8);
                                        if (q < 0) {
                                            throw "Unexpected EOF[5]";
                                        }
                                        if (q2 > 0 && q > q2) {
                                            q = s.indexOf("]>", j + 8);
                                            if (q < 0) {
                                                throw "Unexpected EOF[7]";
                                            }
                                            complexDoctype = true;
                                        }
                                        var doctypeContent = s.substring(j + 8, q + (complexDoctype ? 1 : 0));
                                        sink.doctype(doctypeContent);
                                        j = q + (complexDoctype ? 2 : 1);
                                    }
                                    else {
                                        throw "Unknown !tag";
                                    }
                                    break;
                                default:
                                    var content = parseContent(s, j);
                                    var isClosed = false;
                                    if (s.substring(j + content.parsed, j + content.parsed + 2) === "/>") {
                                        isClosed = true;
                                    }
                                    else if (s.substring(j + content.parsed, j + content.parsed + 1) !== ">") {
                                        throw "Unexpected EOF[2]";
                                    }
                                    var scope = { namespaces: [], lookup: Object.create(null) };
                                    var contentAttributes = content.attributes;
                                    for (q = 0; q < contentAttributes.length; ++q) {
                                        var attribute = contentAttributes[q];
                                        var attributeName = attribute.name;
                                        if (attributeName.substring(0, 6) === "xmlns:") {
                                            var prefix = attributeName.substring(6);
                                            var uri = attribute.value;
                                            if (lookupNs(prefix) !== uri) {
                                                scope.lookup[prefix] = trimWhitespaces(uri);
                                                scope.namespaces.push({ uri: uri, prefix: prefix });
                                            }
                                            delete contentAttributes[q];
                                        }
                                        else if (attributeName === "xmlns") {
                                            var uri = attribute.value;
                                            if (lookupDefaultNs() !== uri) {
                                                scope["xmlns"] = trimWhitespaces(uri);
                                                scope.namespaces.push({ uri: uri, prefix: '' });
                                            }
                                            delete contentAttributes[q];
                                        }
                                        else if (attributeName.substring(0, 4) === "xml:") {
                                            var xmlAttrName = attributeName.substring(4);
                                            if (xmlAttrName !== 'space' && xmlAttrName !== 'lang' && xmlAttrName !== 'base' && xmlAttrName !== 'id') {
                                                throw "Invalid xml attribute: " + attributeName;
                                            }
                                            scope[xmlAttrName] = trimWhitespaces(attribute.value);
                                        }
                                        else if (attributeName.substring(0, 3) === "xml") {
                                            throw "Invalid xml attribute";
                                        }
                                        else {
                                        }
                                    }
                                    var inScopeNamespaces = [];
                                    scope.namespaces.forEach(function (ns) {
                                        if (!ns.prefix || scope.lookup[ns.prefix] === ns.uri) {
                                            inScopeNamespaces.push(ns);
                                        }
                                    });
                                    scopes[scopes.length - 1].inScopes.forEach(function (ns) {
                                        if ((ns.prefix && !(ns.prefix in scope.lookup)) || (!ns.prefix && !('xmlns' in scope))) {
                                            inScopeNamespaces.push(ns);
                                        }
                                    });
                                    scope.inScopes = inScopeNamespaces;
                                    scopes.push(scope);
                                    var attributes = [];
                                    for (q = 0; q < contentAttributes.length; ++q) {
                                        attribute = contentAttributes[q];
                                        if (attribute) {
                                            attributes.push({ name: getName(attribute.name, false), value: attribute.value });
                                        }
                                    }
                                    sink.beginElement(getName(content.name, true), attributes, inScopeNamespaces, isClosed);
                                    j += content.parsed + (isClosed ? 2 : 1);
                                    if (isClosed)
                                        scopes.pop();
                                    break;
                            }
                        }
                        else {
                            do {
                            } while (j++ < s.length && s[j] !== "<");
                            var text = s.substring(i, j);
                            sink.text(resolveEntities(text), isWhitespacePreserved());
                        }
                        i = j;
                    }
                }
                this.parseFromString = function (s, mimeType) {
                    var currentElement = createXML(1 /* Element */, '', '', '');
                    var elementsStack = [];
                    parseXml(s, {
                        beginElement: function (name, attrs, namespaces, isEmpty) {
                            var parent = currentElement;
                            elementsStack.push(parent);
                            currentElement = createNode(1 /* Element */, name.namespace, name.localName, name.prefix);
                            for (var i = 0; i < attrs.length; ++i) {
                                var rawAttr = attrs[i];
                                var attr = createNode(2 /* Attribute */, rawAttr.name.namespace, rawAttr.name.localName, rawAttr.name.prefix);
                                attr._value = rawAttr.value;
                                attr._parent = currentElement;
                                currentElement._attributes.push(attr);
                            }
                            for (var i = 0; i < namespaces.length; ++i) {
                                var rawNs = namespaces[i];
                                var ns = new AS.ASNamespace(rawNs.prefix, rawNs.uri);
                                currentElement._inScopeNamespaces.push(ns);
                            }
                            parent.insert(parent.length(), currentElement);
                            if (isEmpty) {
                                currentElement = elementsStack.pop();
                            }
                        },
                        endElement: function (name) {
                            currentElement = elementsStack.pop();
                        },
                        text: function (text, isWhitespacePreserve) {
                            if (ASXML.ignoreWhitespace) {
                                text = trimWhitespaces(text);
                            }
                            if (text.length === 0 || isWhitespacePreserve && ASXML.ignoreWhitespace) {
                                return;
                            }
                            var node = createNode(3 /* Text */, "", "");
                            node._value = text;
                            currentElement.insert(currentElement.length(), node);
                        },
                        cdata: function (text) {
                            var node = createNode(3 /* Text */, "", "");
                            node._value = text;
                            currentElement.insert(currentElement.length(), node);
                        },
                        comment: function (text) {
                            if (ASXML.ignoreComments) {
                                return;
                            }
                            var node = createNode(4 /* Comment */, "", "");
                            node._value = text;
                            currentElement.insert(currentElement.length(), node);
                        },
                        pi: function (name, value) {
                            if (ASXML.ignoreProcessingInstructions) {
                                return;
                            }
                            var node = createNode(5 /* ProcessingInstruction */, "", name);
                            node._value = value;
                            currentElement.insert(currentElement.length(), node);
                        },
                        doctype: function (text) {
                        }
                    });
                    return currentElement;
                };
                function createNode(kind, uri, name, prefix) {
                    return createXML(kind, uri, name, prefix);
                }
            }
            var xmlParser = new XMLParser();
            var ASNamespace = (function (_super) {
                __extends(ASNamespace, _super);
                function ASNamespace(a, b) {
                    false && _super.call(this);
                    var uri = "";
                    var prefix = "";
                    if (arguments.length === 0) {
                    }
                    else if (arguments.length === 1) {
                        var uriValue = a;
                        if (Shumway.isObject(uriValue) && uriValue instanceof ASNamespace) {
                            var uriValueAsNamespace = uriValue;
                            prefix = uriValueAsNamespace.prefix;
                            uri = uriValueAsNamespace.uri;
                        }
                        else if (Shumway.isObject(uriValue) && uriValue instanceof ASQName && uriValue.uri !== null) {
                            uri = uriValue.uri;
                        }
                        else {
                            uri = toString(uriValue);
                            if (uri === "") {
                                prefix = "";
                            }
                            else {
                                prefix = undefined;
                            }
                        }
                    }
                    else {
                        var prefixValue = a;
                        var uriValue = b;
                        if (Shumway.isObject(uriValue) && uriValue instanceof ASQName && uriValue.uri !== null) {
                            uri = uriValue.uri;
                        }
                        else {
                            uri = toString(uriValue);
                        }
                        if (uri === "") {
                            if (prefixValue === undefined || toString(prefixValue) === "") {
                                prefix = "";
                            }
                            else {
                                AVM2.Runtime.throwError('TypeError', AVM2.Errors.XMLNamespaceWithPrefixAndNoURI, prefixValue);
                            }
                        }
                        else if (prefixValue === undefined) {
                            prefix = undefined;
                        }
                        else if (isXMLName(prefixValue) === false) {
                            prefix = undefined;
                        }
                        else {
                            prefix = toString(prefixValue);
                        }
                    }
                    this._ns = Namespace.createNamespace(uri, prefix);
                }
                ASNamespace.prototype.equals = function (other) {
                    return other instanceof ASNamespace && other._ns.uri === this._ns.uri || typeof other === 'string' && this._ns.uri === other;
                };
                Object.defineProperty(ASNamespace.prototype, "prefix", {
                    get: function () {
                        return this._ns.prefix;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ASNamespace.prototype, "uri", {
                    get: function () {
                        return this._ns.uri;
                    },
                    enumerable: true,
                    configurable: true
                });
                ASNamespace.prototype.toString = function () {
                    if (this === ASNamespace.prototype) {
                        return '';
                    }
                    return this._ns.uri;
                };
                ASNamespace.prototype.valueOf = function () {
                    if (this === ASNamespace.prototype) {
                        return '';
                    }
                    return this._ns.uri;
                };
                ASNamespace.staticNatives = null;
                ASNamespace.instanceNatives = null;
                ASNamespace.instanceConstructor = ASNamespace;
                ASNamespace.classInitializer = function () {
                    var proto = ASNamespace.prototype;
                    defineNonEnumerableProperty(proto, '$BgtoString', proto.toString);
                };
                ASNamespace.callableConstructor = function (a, b) {
                    if (arguments.length === 1 && Shumway.isObject(a) && a instanceof ASNamespace) {
                        return a;
                    }
                    switch (arguments.length) {
                        case 0:
                            return new AS.ASNamespace();
                        case 1:
                            return new AS.ASNamespace(a);
                        default:
                            return new AS.ASNamespace(a, b);
                    }
                };
                return ASNamespace;
            })(AS.ASObject);
            AS.ASNamespace = ASNamespace;
            var ASQNameFlags;
            (function (ASQNameFlags) {
                ASQNameFlags[ASQNameFlags["ATTR_NAME"] = 1] = "ATTR_NAME";
                ASQNameFlags[ASQNameFlags["ELEM_NAME"] = 2] = "ELEM_NAME";
                ASQNameFlags[ASQNameFlags["ANY_NAME"] = 4] = "ANY_NAME";
                ASQNameFlags[ASQNameFlags["ANY_NAMESPACE"] = 8] = "ANY_NAMESPACE";
            })(ASQNameFlags || (ASQNameFlags = {}));
            var ASQName = (function (_super) {
                __extends(ASQName, _super);
                function ASQName(nameOrNS_, name_, isAttribute) {
                    false && _super.call(this);
                    var name;
                    var namespace;
                    if (arguments.length === 0) {
                        name = "";
                    }
                    else if (arguments.length === 1) {
                        name = nameOrNS_;
                    }
                    else {
                        namespace = nameOrNS_;
                        name = name_;
                    }
                    if (Shumway.isObject(name) && name instanceof ASQName) {
                        if (arguments.length < 2) {
                            return name;
                        }
                        else {
                            name = name.localName;
                        }
                    }
                    if (name === undefined || arguments.length === 0) {
                        name = "";
                    }
                    else {
                        name = toString(name);
                    }
                    if (namespace === undefined || arguments.length < 2) {
                        if (name === "*") {
                            namespace = null;
                        }
                        else {
                            namespace = getDefaultNamespace();
                        }
                    }
                    var localName = name;
                    var uri;
                    if (namespace === null) {
                        uri = null;
                    }
                    else {
                        namespace = namespace instanceof ASNamespace ? namespace : new AS.ASNamespace(namespace);
                        uri = namespace.uri;
                    }
                    var flags = isAttribute ? 1 /* ATTR_NAME */ : 2 /* ELEM_NAME */;
                    if (name === '*') {
                        flags |= 4 /* ANY_NAME */;
                    }
                    if (namespace === null) {
                        flags |= 8 /* ANY_NAMESPACE */;
                    }
                    this.name = new Multiname([namespace ? namespace._ns : null], localName, flags);
                }
                ASQName.fromMultiname = function (mn) {
                    var result = Object.create(ASQName.prototype);
                    result.name = mn;
                    return result;
                    return result;
                };
                ASQName.prototype.equals = function (other) {
                    return other instanceof ASQName && other.uri === this.uri && other.name.name === this.name.name || typeof other === 'string' && this.toString() === other;
                };
                Object.defineProperty(ASQName.prototype, "localName", {
                    get: function () {
                        return this.name.name;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ASQName.prototype, "uri", {
                    get: function () {
                        return this.name.namespaces[0] ? this.name.namespaces[0].uri : null;
                    },
                    enumerable: true,
                    configurable: true
                });
                ASQName.prototype.setUri = function (uri) {
                    if (!this.name.namespaces[0]) {
                        this.name.namespaces.push(Namespace.createNamespace(uri));
                    }
                    this.name.namespaces[0].uri = uri;
                };
                ASQName.prototype.toString = function () {
                    var uri = this.uri;
                    if (uri) {
                        return uri + '::' + this.name.name;
                    }
                    return this.name.name;
                };
                Object.defineProperty(ASQName.prototype, "prefix", {
                    get: function () {
                        return this.name.namespaces[0] ? this.name.namespaces[0].prefix : null;
                    },
                    enumerable: true,
                    configurable: true
                });
                ASQName.prototype.getNamespace = function (inScopeNamespaces) {
                    if (this.uri === null) {
                        throw "TypeError in QName.prototype.getNamespace()";
                    }
                    if (!inScopeNamespaces) {
                        inScopeNamespaces = [];
                    }
                    var ns;
                    for (var i = 0; i < inScopeNamespaces.length; i++) {
                        if (this.uri === inScopeNamespaces[i].uri) {
                            ns = inScopeNamespaces[i];
                        }
                    }
                    if (!ns) {
                        ns = new AS.ASNamespace(this.prefix, this.uri);
                    }
                    return ns;
                };
                Object.defineProperty(ASQName.prototype, "flags", {
                    get: function () {
                        return this.name.flags;
                    },
                    enumerable: true,
                    configurable: true
                });
                ASQName.instanceConstructor = ASQName;
                ASQName.callableConstructor = function (a, b) {
                    if (arguments.length === 1 && Shumway.isObject(a) && a instanceof ASQName) {
                        return a;
                    }
                    switch (arguments.length) {
                        case 0:
                            return new AS.ASQName();
                        case 1:
                            return new AS.ASQName(a);
                        default:
                            return new AS.ASQName(a, b);
                    }
                };
                return ASQName;
            })(AS.ASNative);
            AS.ASQName = ASQName;
            var ASXML_FLAGS;
            (function (ASXML_FLAGS) {
                ASXML_FLAGS[ASXML_FLAGS["FLAG_IGNORE_COMMENTS"] = 0x01] = "FLAG_IGNORE_COMMENTS";
                ASXML_FLAGS[ASXML_FLAGS["FLAG_IGNORE_PROCESSING_INSTRUCTIONS"] = 0x02] = "FLAG_IGNORE_PROCESSING_INSTRUCTIONS";
                ASXML_FLAGS[ASXML_FLAGS["FLAG_IGNORE_WHITESPACE"] = 0x04] = "FLAG_IGNORE_WHITESPACE";
                ASXML_FLAGS[ASXML_FLAGS["FLAG_PRETTY_PRINTING"] = 0x08] = "FLAG_PRETTY_PRINTING";
                ASXML_FLAGS[ASXML_FLAGS["ALL"] = ASXML_FLAGS.FLAG_IGNORE_COMMENTS | ASXML_FLAGS.FLAG_IGNORE_PROCESSING_INSTRUCTIONS | ASXML_FLAGS.FLAG_IGNORE_WHITESPACE | ASXML_FLAGS.FLAG_PRETTY_PRINTING] = "ALL";
            })(ASXML_FLAGS || (ASXML_FLAGS = {}));
            (function (ASXMLKind) {
                ASXMLKind[ASXMLKind["Unknown"] = 0] = "Unknown";
                ASXMLKind[ASXMLKind["Element"] = 1] = "Element";
                ASXMLKind[ASXMLKind["Attribute"] = 2] = "Attribute";
                ASXMLKind[ASXMLKind["Text"] = 3] = "Text";
                ASXMLKind[ASXMLKind["Comment"] = 4] = "Comment";
                ASXMLKind[ASXMLKind["ProcessingInstruction"] = 5] = "ProcessingInstruction";
            })(AS.ASXMLKind || (AS.ASXMLKind = {}));
            var ASXMLKind = AS.ASXMLKind;
            var ASXMLKindNames = [null, 'element', 'attribute', 'text', 'comment', 'processing-instruction'];
            var ASXML = (function (_super) {
                __extends(ASXML, _super);
                function ASXML(value) {
                    false && _super.call(this);
                    this._parent = null;
                    if (Shumway.isNullOrUndefined(value)) {
                        value = "";
                    }
                    if (typeof value === 'string' && value.length === 0) {
                        this._kind = 3 /* Text */;
                        this._value = '';
                        return;
                    }
                    var x = toXML(value);
                    if (isXMLType(value)) {
                        x = x._deepCopy();
                    }
                    return x;
                }
                ASXML.native_settings = function () {
                    return {
                        $BgignoreComments: ASXML.ignoreComments,
                        $BgignoreProcessingInstructions: ASXML.ignoreProcessingInstructions,
                        $BgignoreWhitespace: ASXML.ignoreWhitespace,
                        $BgprettyPrinting: ASXML.prettyPrinting,
                        $BgprettyIndent: ASXML.prettyIndent
                    };
                };
                ASXML.native_setSettings = function (o) {
                    if (Shumway.isNullOrUndefined(o)) {
                        ASXML.ignoreComments = true;
                        ASXML.ignoreProcessingInstructions = true;
                        ASXML.ignoreWhitespace = true;
                        ASXML.prettyPrinting = true;
                        ASXML.prettyIndent = 2;
                        return;
                    }
                    if (typeof o.$BgignoreComments === 'boolean') {
                        ASXML.ignoreComments = o.$BgignoreComments;
                    }
                    if (typeof o.$BgignoreProcessingInstructions === 'boolean') {
                        ASXML.ignoreProcessingInstructions = o.$BgignoreProcessingInstructions;
                    }
                    if (typeof o.$BgignoreWhitespace === 'boolean') {
                        ASXML.ignoreWhitespace = o.$BgignoreWhitespace;
                    }
                    if (o.$BgprettyPrinting === 'boolean') {
                        ASXML.prettyPrinting = o.$BgprettyPrinting;
                    }
                    if (o.$BgprettyIndent === 'number') {
                        ASXML.prettyIndent = o.$BgprettyIndent;
                    }
                };
                ASXML.native_defaultSettings = function () {
                    return {
                        $BgignoreComments: true,
                        $BgignoreProcessingInstructions: true,
                        $BgignoreWhitespace: true,
                        $BgprettyPrinting: true,
                        $BgprettyIndent: 2
                    };
                };
                ASXML.prototype.valueOf = function () {
                    return this;
                };
                ASXML.prototype.equals = function (other) {
                    if (other instanceof ASXMLList) {
                        return other.equals(this);
                    }
                    if (other instanceof ASXML) {
                        var otherXML = other;
                        if ((this._kind === 3 /* Text */ || this._kind === 2 /* Attribute */) && otherXML.hasSimpleContent() || (otherXML._kind === 3 /* Text */ || otherXML._kind === 2 /* Attribute */) && this.hasSimpleContent()) {
                            return this.toString() === other.toString();
                        }
                        return this._deepEquals(other);
                    }
                    return this.hasSimpleContent() && this.toString() === asCoerceString(other);
                };
                ASXML.prototype.init = function (kind, uri, name, prefix) {
                    var namespace = uri || prefix ? new AS.ASNamespace(prefix, uri) : undefined;
                    var isAttribute = kind === 2 /* Attribute */;
                    this._name = new AS.ASQName(namespace, name, isAttribute);
                    this._kind = kind;
                    this._parent = null;
                    switch (kind) {
                        case 1 /* Element */:
                            this._inScopeNamespaces = [];
                            this._attributes = [];
                            this._children = [];
                            break;
                        case 4 /* Comment */:
                        case 5 /* ProcessingInstruction */:
                        case 2 /* Attribute */:
                        case 3 /* Text */:
                            this._value = '';
                            break;
                        default:
                            break;
                    }
                    return this;
                };
                ASXML.prototype._deepEquals = function (V) {
                    if (!(V instanceof ASXML)) {
                        return false;
                    }
                    var other = V;
                    if (this._kind !== other._kind) {
                        return false;
                    }
                    if (!!this._name !== !!other._name || (this._name && !this._name.equals(other._name))) {
                        return false;
                    }
                    if (this._kind !== 1 /* Element */) {
                        if (this._value !== other._value) {
                            return false;
                        }
                        return true;
                    }
                    var attributes = this._attributes;
                    var otherAttributes = other._attributes;
                    if (attributes.length !== otherAttributes.length) {
                        return false;
                    }
                    var children = this._children;
                    var otherChildren = other._children;
                    if (children.length !== otherChildren.length) {
                        return false;
                    }
                    attribOuter: for (var i = 0; i < attributes.length; i++) {
                        var attribute = attributes[i];
                        for (var j = 0; j < otherAttributes.length; j++) {
                            var otherAttribute = otherAttributes[j];
                            if (otherAttribute._name.equals(attribute._name) && otherAttribute._value === attribute._value) {
                                continue attribOuter;
                            }
                        }
                        return false;
                    }
                    for (var i = 0; i < children.length; i++) {
                        if (!children[i].equals(otherChildren[i])) {
                            return false;
                        }
                    }
                    return true;
                };
                ASXML.prototype._deepCopy = function () {
                    var kind = this._kind;
                    var clone = new AS.ASXML();
                    clone._kind = kind;
                    clone._name = this._name;
                    switch (kind) {
                        case 1 /* Element */:
                            clone._inScopeNamespaces = [];
                            if (this._inScopeNamespaces.length > 0) {
                                this._inScopeNamespaces.forEach(function (ns) {
                                    clone._inScopeNamespaces.push(new AS.ASNamespace(ns.prefix, ns.uri));
                                });
                            }
                            clone._attributes = this._attributes.map(function (attr) {
                                attr = attr._deepCopy();
                                attr._parent = clone;
                                return attr;
                            });
                            clone._children = this._children.map(function (child) {
                                child = child._deepCopy();
                                child._parent = clone;
                                return child;
                            });
                            break;
                        case 4 /* Comment */:
                        case 5 /* ProcessingInstruction */:
                        case 2 /* Attribute */:
                        case 3 /* Text */:
                            clone._value = this._value;
                            break;
                        default:
                            break;
                    }
                    return clone;
                };
                ASXML.prototype.resolveValue = function () {
                    return this;
                };
                ASXML.prototype._addInScopeNamespaces = function (ns) {
                    if (this._inScopeNamespaces.some(function (ins) {
                        return ins.uri === ns.uri && ins.prefix === ns.prefix;
                    })) {
                        return;
                    }
                    this._inScopeNamespaces.push(ns);
                };
                Object.defineProperty(ASXML, "ignoreComments", {
                    get: function () {
                        return !!(ASXML._flags & 1 /* FLAG_IGNORE_COMMENTS */);
                    },
                    set: function (newIgnore) {
                        newIgnore = !!newIgnore;
                        if (newIgnore) {
                            ASXML._flags |= 1 /* FLAG_IGNORE_COMMENTS */;
                        }
                        else {
                            ASXML._flags &= ~1 /* FLAG_IGNORE_COMMENTS */;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ASXML, "ignoreProcessingInstructions", {
                    get: function () {
                        return !!(ASXML._flags & 2 /* FLAG_IGNORE_PROCESSING_INSTRUCTIONS */);
                    },
                    set: function (newIgnore) {
                        newIgnore = !!newIgnore;
                        if (newIgnore) {
                            ASXML._flags |= 2 /* FLAG_IGNORE_PROCESSING_INSTRUCTIONS */;
                        }
                        else {
                            ASXML._flags &= ~2 /* FLAG_IGNORE_PROCESSING_INSTRUCTIONS */;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ASXML, "ignoreWhitespace", {
                    get: function () {
                        return !!(ASXML._flags & 4 /* FLAG_IGNORE_WHITESPACE */);
                    },
                    set: function (newIgnore) {
                        newIgnore = !!newIgnore;
                        if (newIgnore) {
                            ASXML._flags |= 4 /* FLAG_IGNORE_WHITESPACE */;
                        }
                        else {
                            ASXML._flags &= ~4 /* FLAG_IGNORE_WHITESPACE */;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ASXML, "prettyPrinting", {
                    get: function () {
                        return !!(ASXML._flags & 8 /* FLAG_PRETTY_PRINTING */);
                    },
                    set: function (newPretty) {
                        newPretty = !!newPretty;
                        if (newPretty) {
                            ASXML._flags |= 8 /* FLAG_PRETTY_PRINTING */;
                        }
                        else {
                            ASXML._flags &= ~8 /* FLAG_PRETTY_PRINTING */;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ASXML, "prettyIndent", {
                    get: function () {
                        return ASXML._prettyIndent;
                    },
                    set: function (newIndent) {
                        newIndent = newIndent | 0;
                        ASXML._prettyIndent = newIndent;
                    },
                    enumerable: true,
                    configurable: true
                });
                ASXML.prototype.toString = function () {
                    if (ASXML.isTraitsOrDynamicPrototype(this)) {
                        return '';
                    }
                    if (this.hasComplexContent()) {
                        return this.toXMLString();
                    }
                    return toString(this);
                };
                ASXML.prototype.native_hasOwnProperty = function (P) {
                    if (ASXML.isTraitsOrDynamicPrototype(this)) {
                        return AS.ASObject.prototype.native_hasOwnProperty.call(this, P);
                    }
                    var mn = toXMLName(P);
                    var isAttribute = !!(mn.flags & 1 /* ATTR_NAME */);
                    if (this.hasProperty(mn, isAttribute, false)) {
                        return true;
                    }
                    return _asHasOwnProperty.call(this, String(P));
                };
                ASXML.prototype.native_propertyIsEnumerable = function (P) {
                    if (P === void 0) { P = undefined; }
                    return String(P) === "0";
                };
                ASXML.prototype.addNamespace = function (ns) {
                    if (!(this instanceof ASXML)) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.CheckTypeFailedError, this, 'XML');
                    }
                    this._addInScopeNamespaces(new AS.ASNamespace(ns));
                    return this;
                };
                ASXML.prototype.appendChild = function (child) {
                    if (!(this instanceof ASXML)) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.CheckTypeFailedError, this, 'XML');
                    }
                    if (child._parent) {
                        var index = child._parent._children.indexOf(child);
                        release || assert(index >= 0);
                        child._parent._children.splice(index, 1);
                    }
                    this._children.push(child);
                    child._parent = this;
                    return this;
                };
                ASXML.prototype.attribute = function (arg) {
                    if (!(this instanceof ASXML)) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.CheckTypeFailedError, this, 'XML');
                    }
                    return this.getProperty(arg, true);
                };
                ASXML.prototype.attributes = function () {
                    if (!(this instanceof ASXML)) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.CheckTypeFailedError, this, 'XML');
                    }
                    var list = AS.ASXMLList.createList(this, this._name);
                    Array.prototype.push.apply(list._children, this._attributes);
                    return list;
                };
                ASXML.prototype.child = function (propertyName) {
                    if (!(this instanceof ASXML)) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.CheckTypeFailedError, this, 'XML');
                    }
                    if (Shumway.isIndex(propertyName)) {
                        var list = AS.ASXMLList.createList();
                        if (this._children && propertyName < this._children.length) {
                            list.append(this._children[propertyName | 0]);
                        }
                        return list;
                    }
                    return this.getProperty(propertyName, isQNameAttribute(propertyName));
                };
                ASXML.prototype.childIndex = function () {
                    if (!(this instanceof ASXML)) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.CheckTypeFailedError, this, 'XML');
                    }
                    if (!this._parent || this._kind === 2 /* Attribute */) {
                        return -1;
                    }
                    return this._parent._children.indexOf(this);
                };
                ASXML.prototype.children = function () {
                    if (!(this instanceof ASXML)) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.CheckTypeFailedError, this, 'XML');
                    }
                    var xl = AS.ASXMLList.createList(this, this._name);
                    Array.prototype.push.apply(xl._children, this._children);
                    return xl;
                };
                ASXML.prototype.comments = function () {
                    if (!(this instanceof ASXML)) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.CheckTypeFailedError, this, 'XML');
                    }
                    var self = this;
                    var xl = AS.ASXMLList.createList(this, this._name);
                    self._children && self._children.forEach(function (v, i) {
                        if (v._kind === 4 /* Comment */) {
                            xl.append(v);
                        }
                    });
                    return xl;
                };
                ASXML.prototype.contains = function (value) {
                    if (!(this instanceof ASXML)) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.CheckTypeFailedError, this, 'XML');
                    }
                    return this === value;
                };
                ASXML.prototype.copy = function () {
                    if (!(this instanceof ASXML)) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.CheckTypeFailedError, this, 'XML');
                    }
                    return this._deepCopy();
                };
                ASXML.prototype.descendants = function (name_) {
                    if (name_ === void 0) { name_ = "*"; }
                    if (!(this instanceof ASXML)) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.CheckTypeFailedError, this, 'XML');
                    }
                    var xl = AS.ASXMLList.createList(this, this._name);
                    var name = toXMLName(name_);
                    return this.descendantsInto(name, xl);
                };
                ASXML.prototype.elements = function (name) {
                    if (name === void 0) { name = "*"; }
                    if (!(this instanceof ASXML)) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.CheckTypeFailedError, this, 'XML');
                    }
                    return this.getProperty(name, false);
                };
                ASXML.prototype.hasComplexContent = function () {
                    if (!(this instanceof ASXML)) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.CheckTypeFailedError, this, 'XML');
                    }
                    if (this._kind === 2 /* Attribute */ || this._kind === 4 /* Comment */ || this._kind === 5 /* ProcessingInstruction */ || this._kind === 3 /* Text */) {
                        return false;
                    }
                    return this._children.some(function (child) {
                        return child._kind === 1 /* Element */;
                    });
                };
                ASXML.prototype.hasSimpleContent = function () {
                    if (!(this instanceof ASXML)) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.CheckTypeFailedError, this, 'XML');
                    }
                    if (this._kind === 4 /* Comment */ || this._kind === 5 /* ProcessingInstruction */) {
                        return false;
                    }
                    if (this._kind !== 1 /* Element */) {
                        return true;
                    }
                    if (!this._children && this._children.length === 0) {
                        return true;
                    }
                    return this._children.every(function (child) {
                        return child._kind !== 1 /* Element */;
                    });
                };
                ASXML.prototype.inScopeNamespaces = function () {
                    if (!(this instanceof ASXML)) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.CheckTypeFailedError, this, 'XML');
                    }
                    ;
                    return this._inScopeNamespacesImpl(false);
                };
                ASXML.prototype._inScopeNamespacesImpl = function (internalUse) {
                    var y = this;
                    var inScopeNS = [];
                    var inScopeNSMap = internalUse ? inScopeNS : {};
                    while (y !== null) {
                        var namespaces = y._inScopeNamespaces;
                        for (var i = 0; namespaces && i < namespaces.length; i++) {
                            var ns = namespaces[i];
                            if (!inScopeNSMap[ns.prefix]) {
                                inScopeNSMap[ns.prefix] = ns;
                                inScopeNS.push(ns);
                            }
                        }
                        y = y._parent;
                    }
                    return inScopeNS;
                };
                ASXML.prototype.insertChildAfter = function (child1, child2) {
                    if (!(this instanceof ASXML)) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.CheckTypeFailedError, this, 'XML');
                    }
                    notImplemented("public.XML::insertChildAfter");
                    return;
                };
                ASXML.prototype.insertChildBefore = function (child1, child2) {
                    if (!(this instanceof ASXML)) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.CheckTypeFailedError, this, 'XML');
                    }
                    notImplemented("public.XML::insertChildBefore");
                    return;
                };
                ASXML.prototype.length = function () {
                    if (!(this instanceof ASXML)) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.CheckTypeFailedError, this, 'XML');
                    }
                    if (!this._children) {
                        return 0;
                    }
                    return this._children.length;
                };
                ASXML.prototype.localName = function () {
                    if (!(this instanceof ASXML)) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.CheckTypeFailedError, this, 'XML');
                    }
                    return this._name.localName;
                };
                ASXML.prototype.name = function () {
                    if (!(this instanceof ASXML)) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.CheckTypeFailedError, this, 'XML');
                    }
                    return this._name;
                };
                ASXML.prototype.namespace = function (prefix) {
                    if (!(this instanceof ASXML)) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.CheckTypeFailedError, this, 'XML');
                    }
                    if (arguments.length === 0 && this._kind >= 3 /* Text */) {
                        return null;
                    }
                    var inScopeNS = this._inScopeNamespacesImpl(true);
                    if (arguments.length === 0) {
                        return this._name.getNamespace(inScopeNS);
                    }
                    prefix = asCoerceString(prefix);
                    for (var i = 0; i < inScopeNS.length; i++) {
                        var ns = inScopeNS[i];
                        if (ns.prefix === prefix) {
                            return ns;
                        }
                    }
                };
                ASXML.prototype.namespaceDeclarations = function () {
                    if (!(this instanceof ASXML)) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.CheckTypeFailedError, this, 'XML');
                    }
                    notImplemented("public.XML::namespaceDeclarations");
                    return;
                };
                ASXML.prototype.nodeKind = function () {
                    if (!(this instanceof ASXML)) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.CheckTypeFailedError, this, 'XML');
                    }
                    return ASXMLKindNames[this._kind];
                };
                ASXML.prototype.normalize = function () {
                    if (!(this instanceof ASXML)) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.CheckTypeFailedError, this, 'XML');
                    }
                    for (var i = 0; i < this._children.length;) {
                        var child = this._children[i];
                        if (child._kind === 1 /* Element */) {
                            child.normalize();
                            i++;
                        }
                        else if (child._kind === 3 /* Text */) {
                            for (i++; i < this._children.length;) {
                                var nextChild = this._children[i];
                                if (nextChild._kind !== 3 /* Text */) {
                                    break;
                                }
                                child._value += nextChild._value;
                                this.removeByIndex(i);
                            }
                            if (child._value.length === 0) {
                                this.removeByIndex(i);
                            }
                            else {
                                i++;
                            }
                        }
                        else {
                            i++;
                        }
                    }
                    return this;
                };
                ASXML.prototype.removeByIndex = function (index) {
                    var child = this._children[index];
                    child._parent = null;
                    this._children.splice(index, 1);
                };
                ASXML.prototype.parent = function () {
                    return this._parent || undefined;
                };
                ASXML.prototype.processingInstructions = function (name) {
                    if (name === void 0) { name = "*"; }
                    var localName = toXMLName(name).localName;
                    var list = AS.ASXMLList.createList(this, this._name);
                    list._targetObject = this;
                    list._targetProperty = null;
                    return this.processingInstructionsInto(name, localName, list);
                };
                ASXML.prototype.processingInstructionsInto = function (name, localName, list) {
                    var children = this._children;
                    if (!children) {
                        return list;
                    }
                    for (var i = 0; i < children.length; i++) {
                        var child = children[i];
                        if (child._kind === 5 /* ProcessingInstruction */ && (name === '*' || child._name.localName === localName)) {
                            list._children.push(child);
                        }
                    }
                    return list;
                };
                ASXML.prototype.prependChild = function (value) {
                    notImplemented("public.XML::prependChild");
                    return;
                };
                ASXML.prototype.removeNamespace = function (ns) {
                    notImplemented("public.XML::removeNamespace");
                    return;
                };
                ASXML.prototype.replace = function (p, v) {
                    var s;
                    var self = this;
                    if (self._kind === 3 /* Text */ || self._kind === 4 /* Comment */ || self._kind === 5 /* ProcessingInstruction */ || self._kind === 2 /* Attribute */) {
                        return self;
                    }
                    if (v._kind === 1 /* Element */) {
                        var a = self;
                        while (a) {
                            if (a === v) {
                                throw "Error in XML.prototype.replace()";
                            }
                            a = a._parent;
                        }
                    }
                    var i = p >>> 0;
                    if (String(p) === String(i)) {
                        if (i >= self.length()) {
                            p = String(self.length());
                        }
                        if (self._children && self._children[p]) {
                            self._children[p]._parent = null;
                        }
                    }
                    else {
                        var toRemove = this.getProperty(p, false);
                        if (toRemove.length() === 0) {
                            return self;
                        }
                        self._children && toRemove._children.forEach(function (v, i) {
                            var index = self._children.indexOf(v);
                            v._parent = null;
                            if (i === 0) {
                                p = String(index);
                                self._children.splice(index, 1, undefined);
                            }
                            else {
                                self._children.splice(index, 1);
                            }
                        });
                    }
                    if (v._kind === 1 /* Element */ || v._kind === 3 /* Text */ || v._kind === 4 /* Comment */ || v._kind === 5 /* ProcessingInstruction */) {
                        v._parent = self;
                        if (!self._children) {
                            self._children = [];
                        }
                        self._children[p] = v;
                    }
                    else {
                        s = toString(v);
                        var t = createXML();
                        t._parent = self;
                        t._value = s;
                        if (!self._children) {
                            self._children = [];
                        }
                        self._children[p] = t;
                    }
                    return self;
                };
                ASXML.prototype.setChildren = function (value) {
                    this.setProperty('*', false, value);
                    return this;
                };
                ASXML.prototype.setLocalName = function (name) {
                    notImplemented("public.XML::setLocalName");
                    return;
                };
                ASXML.prototype.setName = function (name_) {
                    if (this._kind === 3 /* Text */ || this._kind === 4 /* Comment */) {
                        return;
                    }
                    if (name_ instanceof AS.ASQName && name_.uri === null) {
                        name_ = name_.localName;
                    }
                    var name = new ASQName(name_);
                    if (this._kind === 5 /* ProcessingInstruction */) {
                        name.setUri('');
                    }
                    this._name = name;
                    var node = this;
                    if (this._kind === 2 /* Attribute */) {
                        if (this._parent === null) {
                            return;
                        }
                        node = this._parent;
                    }
                    node.addInScopeNamespace(new AS.ASNamespace(name.uri));
                };
                ASXML.prototype.setNamespace = function (ns) {
                    notImplemented("public.XML::setNamespace");
                    return;
                };
                ASXML.prototype.text = function () {
                    var self = this;
                    var xl = AS.ASXMLList.createList(this, this._name);
                    self._children && self._children.forEach(function (v, i) {
                        if (v._kind === 3 /* Text */) {
                            xl.append(v);
                        }
                    });
                    return xl;
                };
                ASXML.prototype.toXMLString = function () {
                    return toXMLString(this);
                };
                ASXML.prototype.toJSON = function (k) {
                    return 'XML';
                };
                ASXML.isTraitsOrDynamicPrototype = function (value) {
                    return value === ASXML.traitsPrototype || value === ASXML.dynamicPrototype;
                };
                ASXML.prototype.asGetEnumerableKeys = function () {
                    if (ASXML.isTraitsOrDynamicPrototype(this)) {
                        return _asGetEnumerableKeys.call(this);
                    }
                    var keys = [];
                    this._children.forEach(function (v, i) {
                        keys.push(v.name);
                    });
                    return keys;
                };
                ASXML.prototype.setProperty = function (p, isAttribute, v) {
                    if (p === p >>> 0) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.XMLAssignmentToIndexedXMLNotAllowed);
                    }
                    if (this._kind === 3 /* Text */ || this._kind === 4 /* Comment */ || this._kind === 5 /* ProcessingInstruction */ || this._kind === 2 /* Attribute */) {
                        return;
                    }
                    var c;
                    if (!isXMLType(v) || v._kind === 3 /* Text */ || v._kind === 2 /* Attribute */) {
                        c = toString(v);
                    }
                    else {
                        c = v._deepCopy();
                    }
                    var n = toXMLName(p);
                    if (isAttribute) {
                        if (!isXMLName(n.name)) {
                            return;
                        }
                        if (c instanceof AS.ASXMLList) {
                            if (c._children.length === 0) {
                                c = '';
                            }
                            else {
                                var s = toString(c._children[0]);
                                for (var j = 1; j < c._children.length; j++) {
                                    s += ' ' + toString(c._children[j]);
                                }
                                c = s;
                            }
                        }
                        else {
                            c = asCoerceString(c);
                        }
                        var a = null;
                        var attributes = this._attributes;
                        var newAttributes = this._attributes = [];
                        for (var j = 0; attributes && j < attributes.length; j++) {
                            var attribute = attributes[j];
                            if (attribute._name.equals(n)) {
                                if (!a) {
                                    a = attribute;
                                }
                                else {
                                    attribute._parent = null;
                                    continue;
                                }
                            }
                            newAttributes.push(attribute);
                        }
                        if (!a) {
                            a = createXML(2 /* Attribute */, n.uri, n.localName);
                            a._parent = this;
                            newAttributes.push(a);
                        }
                        a._value = c;
                        return;
                    }
                    var i;
                    var primitiveAssign = !isXMLType(c) && n.localName !== "*";
                    var isAny = n.flags & 4 /* ANY_NAME */;
                    var isAnyNamespace = n.flags & 8 /* ANY_NAMESPACE */;
                    for (var k = this.length() - 1; k >= 0; k--) {
                        if ((isAny || this._children[k]._kind === 1 /* Element */ && this._children[k]._name.localName === n.localName) && (isAnyNamespace || this._children[k]._kind === 1 /* Element */ && this._children[k]._name.uri === n.uri)) {
                            if (i !== undefined) {
                                this.deleteByIndex(i);
                            }
                            i = k;
                        }
                    }
                    if (i === undefined) {
                        i = this.length();
                        if (primitiveAssign) {
                            if (n.uri === null) {
                                var name = new AS.ASQName(getDefaultNamespace(), n);
                            }
                            else {
                                var name = new AS.ASQName(n);
                            }
                            var y = createXML(1 /* Element */, name.uri, name.localName, name.prefix);
                            y._parent = this;
                            var ns = name.getNamespace();
                            this.replace(String(i), y);
                            y.addInScopeNamespace(ns);
                        }
                    }
                    if (primitiveAssign) {
                        this._children[i]._children = [];
                        var s = toString(c);
                        if (s !== "") {
                            this._children[i].replace("0", s);
                        }
                    }
                    else {
                        this.replace(String(i), c);
                    }
                };
                ASXML.prototype.asSetProperty = function (namespaces, name, flags, value) {
                    if (ASXML.isTraitsOrDynamicPrototype(this)) {
                        return _asSetProperty.call(this, namespaces, name, flags, value);
                    }
                    var isAttribute = !!(flags & Multiname.ATTRIBUTE);
                    this.setProperty(prefixWithNamespace(namespaces, name, isAttribute), isAttribute, value);
                };
                ASXML.prototype.getProperty = function (mn, isAttribute) {
                    if (Shumway.isIndex(mn) || !Multiname.isQName(mn) && Shumway.isNumeric(mn)) {
                        if ((mn | 0) === 0) {
                            return this;
                        }
                        return null;
                    }
                    var name = toXMLName(mn);
                    var list = AS.ASXMLList.createList(this, this._name);
                    list._targetObject = this;
                    list._targetProperty = name;
                    var length = 0;
                    var flags = name.name.flags;
                    var anyName = flags & 4 /* ANY_NAME */;
                    var anyNamespace = flags & 8 /* ANY_NAMESPACE */;
                    isAttribute = isAttribute || !!(flags & 1 /* ATTR_NAME */);
                    if (isAttribute) {
                        for (var i = 0; this._attributes && i < this._attributes.length; i++) {
                            var v = this._attributes[i];
                            if ((anyName || (v._name.localName === name.localName)) && ((anyNamespace || v._name.uri === name.uri))) {
                                list._children[length++] = v;
                            }
                        }
                        return list;
                    }
                    for (var i = 0; this._children && i < this._children.length; i++) {
                        var v = this._children[i];
                        if ((anyName || v._kind === 1 /* Element */ && v._name.localName === name.localName) && ((anyNamespace || v._kind === 1 /* Element */ && v._name.uri === name.uri))) {
                            list._children[length++] = v;
                        }
                    }
                    return list;
                };
                ASXML.prototype.asGetNumericProperty = function (name) {
                    return this.asGetProperty(null, name, 0);
                };
                ASXML.prototype.asSetNumericProperty = function (name, value) {
                    this.asSetProperty(null, name, 0, value);
                };
                ASXML.prototype.asGetProperty = function (namespaces, name, flags) {
                    if (ASXML.isTraitsOrDynamicPrototype(this)) {
                        return _asGetProperty.call(this, namespaces, name, flags);
                    }
                    var isAttribute = !!(flags & Multiname.ATTRIBUTE);
                    return this.getProperty(prefixWithNamespace(namespaces, name, isAttribute), isAttribute);
                };
                ASXML.prototype.hasProperty = function (mn, isAttribute, isMethod) {
                    if (isMethod) {
                        var resolved = Multiname.isQName(mn) ? mn : this.resolveMultinameProperty(mn.namespaces, mn.name, mn.flags);
                        return !!this[Multiname.getQualifiedName(resolved)];
                    }
                    if (Shumway.isIndex(mn)) {
                        return Number(mn) === 0;
                    }
                    var name = toXMLName(mn);
                    var flags = name.name.flags;
                    var anyName = flags & 4 /* ANY_NAME */;
                    var anyNamespace = flags & 8 /* ANY_NAMESPACE */;
                    if (isAttribute) {
                        for (var i = 0; this._attributes && i < this._attributes.length; i++) {
                            var v = this._attributes[i];
                            if ((anyName || (v._name.localName === name.localName) && (anyNamespace || v._name.uri === name.uri))) {
                                return true;
                            }
                        }
                        return false;
                    }
                    for (var i = 0; i < this._children.length; i++) {
                        var v = this._children[i];
                        if ((anyName || v._kind === 1 /* Element */ && v._name.localName === name.localName) && ((anyNamespace || v._kind === 1 /* Element */ && v._name.uri === name.uri))) {
                            return true;
                        }
                    }
                };
                ASXML.prototype.deleteProperty = function (mn, isAttribute) {
                    if (Shumway.isIndex(mn)) {
                        return true;
                    }
                    var name = toXMLName(mn);
                    var localName = name.localName;
                    var uri = name.uri;
                    var flags = name.name.flags;
                    var anyName = flags & 4 /* ANY_NAME */;
                    var anyNamespace = flags & 8 /* ANY_NAMESPACE */;
                    if (isAttribute) {
                        var attributes = this._attributes;
                        if (attributes) {
                            var newAttributes = this._attributes = [];
                            for (var i = 0; i < attributes.length; i++) {
                                var node = attributes[i];
                                var attrName = node._name;
                                if ((anyName || attrName.localName === localName) && (anyNamespace || attrName.uri === uri)) {
                                    node._parent = null;
                                }
                                else {
                                    newAttributes.push(node);
                                }
                            }
                        }
                    }
                    else {
                        if (this._children.some(function (v, i) {
                            return ((anyName || v._kind === 1 /* Element */ && v._name.localName === name.localName) && ((anyNamespace || v._kind === 1 /* Element */ && v._name.uri === name.uri)));
                        })) {
                            return true;
                        }
                    }
                };
                ASXML.prototype.asHasProperty = function (namespaces, name, flags) {
                    if (ASXML.isTraitsOrDynamicPrototype(this)) {
                        return _asHasProperty.call(this, namespaces, name, flags);
                    }
                    var isAttribute = !!(flags & Multiname.ATTRIBUTE);
                    name = prefixWithNamespace(namespaces, name, isAttribute);
                    if (this.hasProperty(name, isAttribute, false)) {
                        return true;
                    }
                    var resolved = Multiname.isQName(name) ? name : this.resolveMultinameProperty(namespaces, name, flags);
                    return !!this[Multiname.getQualifiedName(resolved)];
                };
                ASXML.prototype._asDeleteProperty = function (namespaces, name, flags) {
                    if (ASXML.isTraitsOrDynamicPrototype(this)) {
                        return _asDeleteProperty.call(this, namespaces, name, flags);
                    }
                    var isAttribute = !!(flags & Multiname.ATTRIBUTE);
                    name = prefixWithNamespace(namespaces, name, isAttribute);
                    if (this.deleteProperty(name, isAttribute)) {
                        return true;
                    }
                    var resolved = Multiname.isQName(name) ? name : this.resolveMultinameProperty(namespaces, name, flags);
                    return delete this[Multiname.getQualifiedName(resolved)];
                };
                ASXML.prototype.asHasPropertyInternal = function (namespaces, name, flags) {
                    return this.asHasProperty(namespaces, name, flags);
                };
                ASXML.prototype.asCallProperty = function (namespaces, name, flags, isLex, args) {
                    if (ASXML.isTraitsOrDynamicPrototype(this) || isLex) {
                        return _asCallProperty.call(this, namespaces, name, flags, isLex, args);
                    }
                    var method;
                    var resolved = this.resolveMultinameProperty(namespaces, name, flags);
                    if (this.asGetNumericProperty && Multiname.isNumeric(resolved)) {
                        method = this.asGetNumericProperty(resolved);
                    }
                    else {
                        var openMethods = this.asOpenMethods;
                        method = (openMethods && openMethods[resolved]) || this[resolved];
                    }
                    if (method) {
                        return method.asApply(isLex ? null : this, args);
                    }
                    if (this.hasSimpleContent()) {
                        return Object(toString(this)).asCallProperty(namespaces, name, flags, isLex, args);
                    }
                    throw new TypeError();
                };
                ASXML.prototype._delete = function (key, isMethod) {
                    notImplemented("XML.[[Delete]]");
                };
                ASXML.prototype.deleteByIndex = function (p) {
                    var i = p >>> 0;
                    if (String(i) !== String(p)) {
                        throw "TypeError in XML.prototype.deleteByIndex(): invalid index " + p;
                    }
                    var children = this._children;
                    if (p < children.length && children[p]) {
                        children[p]._parent = null;
                        children.splice(p, 1);
                    }
                };
                ASXML.prototype.insert = function (p, v) {
                    var s, i, n;
                    var self = this;
                    if (self._kind === 3 /* Text */ || self._kind === 4 /* Comment */ || self._kind === 5 /* ProcessingInstruction */ || self._kind === 2 /* Attribute */) {
                        return;
                    }
                    i = p >>> 0;
                    if (String(p) !== String(i)) {
                        throw "TypeError in XML.prototype.insert(): invalid property name " + p;
                    }
                    if (self._kind === 1 /* Element */) {
                        var a = self;
                        while (a) {
                            if (a === v) {
                                throw "Error in XML.prototype.insert()";
                            }
                            a = a._parent;
                        }
                    }
                    if (self instanceof ASXMLList) {
                        n = self.length();
                        if (n === 0) {
                            return;
                        }
                    }
                    else {
                        n = 1;
                    }
                    for (var j = self.length() - 1; j >= i; j--) {
                        self._children[j + n] = self._children[j];
                    }
                    if (self instanceof ASXMLList) {
                        n = v.length();
                        for (var j = 0; j < n; j++) {
                            v._children[j]._parent = self;
                            self[i + j] = v[j];
                        }
                    }
                    else {
                        v._parent = self;
                        if (!self._children) {
                            self._children = [];
                        }
                        self._children[i] = v;
                    }
                };
                ASXML.prototype.addInScopeNamespace = function (ns) {
                    var s;
                    var self = this;
                    if (self._kind === 3 /* Text */ || self._kind === 4 /* Comment */ || self._kind === 5 /* ProcessingInstruction */ || self._kind === 2 /* Attribute */) {
                        return;
                    }
                    if (ns.prefix !== undefined) {
                        if (ns.prefix === "" && self._name.uri === "") {
                            return;
                        }
                        var match = null;
                        self._inScopeNamespaces.forEach(function (v, i) {
                            if (v.prefix === ns.prefix) {
                                match = v;
                            }
                        });
                        if (match !== null && match.uri !== ns.uri) {
                            self._inScopeNamespaces.forEach(function (v, i) {
                                if (v.prefix === match.prefix) {
                                    self._inScopeNamespaces[i] = ns;
                                }
                            });
                        }
                        if (self._name.prefix === ns.prefix) {
                            self._name.prefix = undefined;
                        }
                        self._attributes.forEach(function (v, i) {
                            if (v._name.prefix === ns.prefix) {
                                v._name.prefix = undefined;
                            }
                        });
                    }
                };
                ASXML.prototype.descendantsInto = function (name, xl) {
                    var flags = name.flags;
                    var self = this;
                    if (self._kind !== 1 /* Element */) {
                        return xl;
                    }
                    var length = xl._children.length;
                    var localName = name.localName;
                    var uri = name.uri;
                    var isAny = flags & 4 /* ANY_NAME */;
                    if (flags & 1 /* ATTR_NAME */) {
                        this._attributes.forEach(function (v, i) {
                            if (isAny || localName === v._name.localName && uri === v._name.uri) {
                                xl._children[length++] = v;
                            }
                        });
                    }
                    else {
                        this._children.forEach(function (v, i) {
                            if (isAny || localName === v._name.localName && uri === v._name.uri) {
                                xl._children[length++] = v;
                            }
                        });
                    }
                    this._children.forEach(function (v, i) {
                        v.descendantsInto(name, xl);
                    });
                    return xl;
                };
                ASXML.instanceConstructor = ASXML;
                ASXML.classInitializer = function () {
                    var proto = ASXML.prototype;
                    defineNonEnumerableProperty(proto, 'asDeleteProperty', proto._asDeleteProperty);
                    defineNonEnumerableProperty(proto, '$BgvalueOf', Object.prototype['$BgvalueOf']);
                    defineNonEnumerableProperty(proto, '$BghasOwnProperty', proto.native_hasOwnProperty);
                    defineNonEnumerableProperty(proto, '$BgpropertyIsEnumerable', proto.native_propertyIsEnumerable);
                    createPublicAliases(ASXML, [
                        'settings',
                        'setSettings',
                        'defaultSettings'
                    ]);
                    createPublicAliases(proto, [
                        'toString',
                        'addNamespace',
                        'appendChild',
                        'attribute',
                        'attributes',
                        'child',
                        'childIndex',
                        'children',
                        'comments',
                        'contains',
                        'copy',
                        'descendants',
                        'elements',
                        'hasComplexContent',
                        'hasSimpleContent',
                        'inScopeNamespaces',
                        'insertChildAfter',
                        'insertChildBefore',
                        'length',
                        'localName',
                        'name',
                        'namespace',
                        'namespaceDeclarations',
                        'nodeKind',
                        'normalize',
                        'parent',
                        'processingInstructions',
                        'prependChild',
                        'removeNamespace',
                        'replace',
                        'setChildren',
                        'setLocalName',
                        'setName',
                        'setNamespace',
                        'text',
                        'toXMLString',
                        'toJSON'
                    ]);
                };
                ASXML.callableConstructor = function (value) {
                    if (Shumway.isNullOrUndefined(value)) {
                        value = '';
                    }
                    return toXML(value);
                };
                ASXML.defaultNamespace = '';
                ASXML._flags = ASXML_FLAGS.ALL;
                ASXML._prettyIndent = 2;
                return ASXML;
            })(AS.ASNative);
            AS.ASXML = ASXML;
            function createXML(kind, uri, name, prefix) {
                var xml = new AS.ASXML();
                if (kind === undefined) {
                    kind = 3 /* Text */;
                }
                if (uri === undefined) {
                    uri = "";
                }
                if (name === undefined) {
                    name = "";
                }
                xml.init(kind, uri, name, prefix);
                return xml;
            }
            var ASXMLList = (function (_super) {
                __extends(ASXMLList, _super);
                function ASXMLList(value) {
                    false && _super.call(this);
                    this._children = [];
                    if (Shumway.isNullOrUndefined(value)) {
                        value = "";
                    }
                    if (!value) {
                        return;
                    }
                    if (value instanceof ASXMLList) {
                        var children = value._children;
                        for (var i = 0; i < children.length; i++) {
                            var child = children[i];
                            this._children[i] = child;
                        }
                    }
                    else {
                        toXMLList(value, this);
                    }
                }
                ASXMLList.addXML = function (left, right) {
                    var result;
                    if (left instanceof ASXML) {
                        result = new AS.ASXMLList();
                        result.append(left);
                    }
                    else {
                        result = left;
                    }
                    result.append(right);
                    return result;
                };
                ASXMLList.createList = function (targetObject, targetProperty) {
                    if (targetObject === void 0) { targetObject = null; }
                    if (targetProperty === void 0) { targetProperty = null; }
                    var list = new AS.ASXMLList();
                    list._targetObject = targetObject;
                    list._targetProperty = targetProperty;
                    return list;
                };
                ASXMLList.prototype.valueOf = function () {
                    return this;
                };
                ASXMLList.prototype.equals = function (other) {
                    var children = this._children;
                    if (other === undefined && children.length === 0) {
                        return true;
                    }
                    if (other instanceof ASXMLList) {
                        var otherChildren = other._children;
                        if (otherChildren.length !== children.length) {
                            return false;
                        }
                        for (var i = 0; i < children.length; i++) {
                            if (!children[i].equals(otherChildren[i])) {
                                return false;
                            }
                        }
                        return true;
                    }
                    return children.length === 1 && children[0].equals(other);
                };
                ASXMLList.prototype.toString = function () {
                    if (this.hasComplexContent()) {
                        return this.toXMLString();
                    }
                    var s = '';
                    for (var i = 0; i < this._children.length; i++) {
                        s += toString(this._children[i]);
                    }
                    return s;
                };
                ASXMLList.prototype._deepCopy = function () {
                    var xl = AS.ASXMLList.createList(this._targetObject, this._targetProperty);
                    var length = this.length();
                    for (var i = 0; i < length; i++) {
                        xl._children[i] = this._children[i]._deepCopy();
                    }
                    return xl;
                };
                ASXMLList.prototype._shallowCopy = function () {
                    var xl = AS.ASXMLList.createList(this._targetObject, this._targetProperty);
                    var length = this.length();
                    for (var i = 0; i < length; i++) {
                        xl._children[i] = this._children[i];
                    }
                    return xl;
                };
                ASXMLList.prototype.native_hasOwnProperty = function (P) {
                    P = asCoerceString(P);
                    if (ASXMLList.isTraitsOrDynamicPrototype(this)) {
                        return AS.ASObject.prototype.native_hasOwnProperty.call(this, P);
                    }
                    if (Shumway.isIndex(P)) {
                        return (P | 0) < this._children.length;
                    }
                    var mn = toXMLName(P);
                    var isAttribute = !!(mn.flags & 1 /* ATTR_NAME */);
                    var children = this._children;
                    for (var i = 0; i < children.length; i++) {
                        var node = children[i];
                        if (node._kind === 1 /* Element */) {
                            if (node.hasProperty(mn, isAttribute, false)) {
                                return true;
                            }
                        }
                    }
                    return false;
                };
                ASXMLList.prototype.native_propertyIsEnumerable = function (P) {
                    return Shumway.isIndex(P) && (P | 0) < this._children.length;
                };
                ASXMLList.prototype.attribute = function (arg) {
                    return this.getProperty(arg, true);
                };
                ASXMLList.prototype.attributes = function () {
                    return this.getProperty('*', true);
                };
                ASXMLList.prototype.child = function (propertyName) {
                    if (Shumway.isIndex(propertyName)) {
                        var list = AS.ASXMLList.createList(this._targetObject, this._targetProperty);
                        if (propertyName < this._children.length) {
                            list._children[0] = this._children[propertyName | 0]._deepCopy();
                        }
                        return list;
                    }
                    return this.getProperty(propertyName, false);
                };
                ASXMLList.prototype.children = function () {
                    return this.getProperty('*', false);
                };
                ASXMLList.prototype.descendants = function (name_) {
                    var name = toXMLName(name_);
                    var list = AS.ASXMLList.createList(this._targetObject, this._targetProperty);
                    for (var i = 0; i < this._children.length; i++) {
                        var child = this._children[i];
                        if (child._kind === 1 /* Element */) {
                            child.descendantsInto(name, list);
                        }
                    }
                    return list;
                };
                ASXMLList.prototype.comments = function () {
                    var xl = AS.ASXMLList.createList(this._targetObject, this._targetProperty);
                    this._children.forEach(function (child) {
                        if (child._kind === 1 /* Element */) {
                            var r = child.comments();
                            Array.prototype.push.apply(xl._children, r._children);
                        }
                    });
                    return xl;
                };
                ASXMLList.prototype.contains = function (value) {
                    var children = this._children;
                    for (var i = 0; i < children.length; i++) {
                        var child = children[i];
                        if (child.equals(value)) {
                            return true;
                        }
                    }
                    return false;
                };
                ASXMLList.prototype.copy = function () {
                    return this._deepCopy();
                };
                ASXMLList.prototype.elements = function (name) {
                    if (name === void 0) { name = "*"; }
                    var mn = toXMLName(name);
                    var xl = AS.ASXMLList.createList(this._targetObject, mn);
                    this._children.forEach(function (child) {
                        if (child._kind === 1 /* Element */) {
                            var r = child.elements(mn);
                            Array.prototype.push.apply(xl._children, r._children);
                        }
                    });
                    return xl;
                };
                ASXMLList.prototype.hasComplexContent = function () {
                    switch (this.length()) {
                        case 0:
                            return false;
                        case 1:
                            return this._children[0].hasComplexContent();
                        default:
                            return this._children.some(function (child) {
                                return child._kind === 1 /* Element */;
                            });
                    }
                };
                ASXMLList.prototype.hasSimpleContent = function () {
                    switch (this.length()) {
                        case 0:
                            return true;
                        case 1:
                            return this._children[0].hasSimpleContent();
                        default:
                            return this._children.every(function (child) {
                                return child._kind !== 1 /* Element */;
                            });
                    }
                };
                ASXMLList.prototype.length = function () {
                    return this._children.length;
                };
                ASXMLList.prototype.name = function () {
                    return this._children[0].name();
                };
                ASXMLList.prototype.normalize = function () {
                    for (var i = 0; i < this._children.length;) {
                        var child = this._children[i];
                        if (child._kind === 1 /* Element */) {
                            child.normalize();
                            i++;
                        }
                        else if (child._kind === 3 /* Text */) {
                            for (i++; i < this._children.length;) {
                                var nextChild = this._children[i];
                                if (nextChild._kind !== 3 /* Text */) {
                                    break;
                                }
                                child._value += nextChild._value;
                                this.removeByIndex(i);
                            }
                            if (child._value.length === 0) {
                                this.removeByIndex(i);
                            }
                            else {
                                i++;
                            }
                        }
                        else {
                            i++;
                        }
                    }
                    return this;
                };
                ASXMLList.prototype.parent = function () {
                    var children = this._children;
                    if (children.length === 0) {
                        return undefined;
                    }
                    var parent = children[0]._parent;
                    for (var i = 1; i < children.length; i++) {
                        if (children[i]._parent !== parent) {
                            return undefined;
                        }
                    }
                    return parent;
                };
                ASXMLList.prototype.processingInstructions = function (name) {
                    if (name === void 0) { name = "*"; }
                    var localName = toXMLName(name).localName;
                    var list = AS.ASXMLList.createList(this._targetObject, this._targetProperty);
                    list._targetObject = this;
                    list._targetProperty = null;
                    var children = this._children;
                    for (var i = 0; i < children.length; i++) {
                        children[i].processingInstructionsInto(name, localName, list);
                    }
                    return list;
                };
                ASXMLList.prototype.text = function () {
                    var xl = AS.ASXMLList.createList(this._targetObject, this._targetProperty);
                    this._children.forEach(function (v, i) {
                        if (v._kind === 1 /* Element */) {
                            var gq = v.text();
                            if (gq.length() > 0) {
                                xl._children.push(gq);
                            }
                        }
                    });
                    return xl;
                };
                ASXMLList.prototype.toXMLString = function () {
                    return toXMLString(this);
                };
                ASXMLList.prototype.toJSON = function (k) {
                    return 'XMLList';
                };
                ASXMLList.prototype.addNamespace = function (ns) {
                    if (this._children.length !== 1) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.XMLOnlyWorksWithOneItemLists, 'addNamespace');
                    }
                    var xml = this._children[0];
                    xml.addNamespace(ns);
                    return xml;
                };
                ASXMLList.prototype.appendChild = function (child) {
                    if (this._children.length !== 1) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.XMLOnlyWorksWithOneItemLists, 'appendChild');
                    }
                    var xml = this._children[0];
                    xml.appendChild(child);
                    return xml;
                };
                ASXMLList.prototype.append = function (V) {
                    var children = this._children;
                    var i = children.length;
                    var n = 1;
                    if (V instanceof AS.ASXMLList) {
                        this._targetObject = V._targetObject;
                        this._targetProperty = V._targetProperty;
                        var valueChildren = V._children;
                        n = valueChildren.length;
                        if (n === 0) {
                            return;
                        }
                        for (var j = 0; j < valueChildren.length; j++) {
                            children[i + j] = valueChildren[j];
                        }
                        return;
                    }
                    release || assert(V instanceof AS.ASXML);
                    children[i] = V;
                    this._targetProperty = V._name;
                };
                ASXMLList.prototype.childIndex = function () {
                    if (this._children.length !== 1) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.XMLOnlyWorksWithOneItemLists, 'childIndex');
                    }
                    return this._children[0].childIndex();
                };
                ASXMLList.prototype.inScopeNamespaces = function () {
                    if (this._children.length !== 1) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.XMLOnlyWorksWithOneItemLists, 'inScopeNamespaces');
                    }
                    return this._children[0].inScopeNamespaces();
                };
                ASXMLList.prototype.insertChildAfter = function (child1, child2) {
                    if (this._children.length !== 1) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.XMLOnlyWorksWithOneItemLists, 'insertChildAfter');
                    }
                    return this._children[0].insertChildAfter(child1, child2);
                };
                ASXMLList.prototype.insertChildBefore = function (child1, child2) {
                    if (this._children.length !== 1) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.XMLOnlyWorksWithOneItemLists, 'insertChildBefore');
                    }
                    return this._children[0].insertChildBefore(child1, child2);
                };
                ASXMLList.prototype.nodeKind = function () {
                    if (this._children.length !== 1) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.XMLOnlyWorksWithOneItemLists, 'nodeKind');
                    }
                    return this._children[0].nodeKind();
                };
                ASXMLList.prototype.namespace = function (prefix) {
                    if (this._children.length !== 1) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.XMLOnlyWorksWithOneItemLists, 'namespace');
                    }
                    var firstChild = this._children[0];
                    return arguments.length ? firstChild.namespace(prefix) : firstChild.namespace();
                };
                ASXMLList.prototype.localName = function () {
                    if (this._children.length !== 1) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.XMLOnlyWorksWithOneItemLists, 'localName');
                    }
                    return this._children[0].localName();
                };
                ASXMLList.prototype.namespaceDeclarations = function () {
                    if (this._children.length !== 1) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.XMLOnlyWorksWithOneItemLists, 'namespaceDeclarations');
                    }
                    return this._children[0].namespaceDeclarations();
                };
                ASXMLList.prototype.prependChild = function (value) {
                    if (this._children.length !== 1) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.XMLOnlyWorksWithOneItemLists, 'prependChild');
                    }
                    return this._children[0].prependChild(value);
                };
                ASXMLList.prototype.removeNamespace = function (ns) {
                    if (this._children.length !== 1) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.XMLOnlyWorksWithOneItemLists, 'removeNamespace');
                    }
                    return this._children[0].removeNamespace(ns);
                };
                ASXMLList.prototype.replace = function (propertyName, value) {
                    if (this._children.length !== 1) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.XMLOnlyWorksWithOneItemLists, 'replace');
                    }
                    return this._children[0].replace(propertyName, value);
                };
                ASXMLList.prototype.setChildren = function (value) {
                    if (this._children.length !== 1) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.XMLOnlyWorksWithOneItemLists, 'setChildren');
                    }
                    return this._children[0].setChildren(value);
                };
                ASXMLList.prototype.setLocalName = function (name) {
                    if (this._children.length !== 1) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.XMLOnlyWorksWithOneItemLists, 'setLocalName');
                    }
                    return this._children[0].setLocalName(name);
                };
                ASXMLList.prototype.setName = function (name) {
                    if (this._children.length !== 1) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.XMLOnlyWorksWithOneItemLists, 'setName');
                    }
                    return this._children[0].setName(name);
                };
                ASXMLList.prototype.setNamespace = function (ns) {
                    if (this._children.length !== 1) {
                        AVM2.Runtime.throwError('TypeError', AVM2.Errors.XMLOnlyWorksWithOneItemLists, 'setNamespace');
                    }
                    return this._children[0].setNamespace(ns);
                };
                ASXMLList.isTraitsOrDynamicPrototype = function (value) {
                    return value === ASXMLList.traitsPrototype || value === ASXMLList.dynamicPrototype;
                };
                ASXMLList.prototype.asGetEnumerableKeys = function () {
                    if (ASXMLList.isTraitsOrDynamicPrototype(this)) {
                        return _asGetEnumerableKeys.call(this);
                    }
                    return this._children.asGetEnumerableKeys();
                };
                ASXMLList.prototype.getProperty = function (mn, isAttribute) {
                    if (Shumway.isIndex(mn)) {
                        return this._children[mn];
                    }
                    var name = toXMLName(mn);
                    var xl = AS.ASXMLList.createList(this._targetObject, name);
                    this._children.forEach(function (v, i) {
                        if (v._kind === 1 /* Element */) {
                            var gq = v.getProperty(name, isAttribute);
                            if (gq.length() > 0) {
                                var descendants = gq._children;
                                for (var j = 0; j < descendants.length; j++) {
                                    xl._children.push(descendants[j]);
                                }
                            }
                        }
                    });
                    return xl;
                };
                ASXMLList.prototype.asGetNumericProperty = function (name) {
                    return this.asGetProperty(null, name, 0);
                };
                ASXMLList.prototype.asSetNumericProperty = function (name, value) {
                    this.asSetProperty(null, name, 0, value);
                };
                ASXMLList.prototype.asGetProperty = function (namespaces, name, flags) {
                    if (ASXMLList.isTraitsOrDynamicPrototype(this)) {
                        return _asGetProperty.call(this, namespaces, name, flags);
                    }
                    var isAttribute = !!(flags & Multiname.ATTRIBUTE);
                    return this.getProperty(prefixWithNamespace(namespaces, name, isAttribute), isAttribute);
                };
                ASXMLList.prototype.hasProperty = function (mn, isAttribute) {
                    if (Shumway.isIndex(mn)) {
                        return Number(mn) < this._children.length;
                    }
                    return true;
                };
                ASXMLList.prototype.asHasProperty = function (namespaces, name, flags) {
                    if (ASXMLList.isTraitsOrDynamicPrototype(this)) {
                        return _asGetProperty.call(this, namespaces, name, flags);
                    }
                    var isAttribute = !!(flags & Multiname.ATTRIBUTE);
                    return this.hasProperty(prefixWithNamespace(namespaces, name, isAttribute), isAttribute);
                };
                ASXMLList.prototype.asHasPropertyInternal = function (namespaces, name, flags) {
                    var isAttribute = !!(flags & Multiname.ATTRIBUTE);
                    return this.hasProperty(prefixWithNamespace(namespaces, name, isAttribute), isAttribute);
                };
                ASXMLList.prototype.resolveValue = function () {
                    return this;
                };
                ASXMLList.prototype.setProperty = function (mn, isAttribute, value) {
                    if (Shumway.isIndex(mn)) {
                        var i = mn | 0;
                        var r = null;
                        if (this._targetObject) {
                            r = this._targetObject.resolveValue();
                            if (r === null) {
                                return;
                            }
                        }
                        var length = this.length();
                        if (i >= length) {
                            if (r instanceof AS.ASXMLList) {
                                if (r.length() !== 1) {
                                    return;
                                }
                                r = r._children[0];
                            }
                            release || assert(r === null || r instanceof AS.ASXML);
                            if (r && r._kind !== 1 /* Element */) {
                                return;
                            }
                            var y = new AS.ASXML();
                            y._parent = r;
                            y._name = this._targetProperty;
                            if (isQNameAttribute(this._targetProperty)) {
                                if (r.hasProperty(this._targetProperty, true, false)) {
                                    return;
                                }
                                y._kind = 2 /* Attribute */;
                            }
                            else if (Shumway.isNullOrUndefined(this._targetProperty) || this._targetProperty.localName === '*') {
                                y._name = null;
                                y._kind = 3 /* Text */;
                            }
                            else {
                                y._kind = 1 /* Element */;
                            }
                            i = length;
                            if (y._kind !== 2 /* Attribute */) {
                                if (r !== null) {
                                    var j;
                                    if (i > 0) {
                                        var lastChild = this._children[i - 1];
                                        for (j = 0; j < r.length - 1; j++) {
                                            if (r._children[j] === lastChild) {
                                                break;
                                            }
                                        }
                                    }
                                    else {
                                        j = r.length() - 1;
                                    }
                                    r._children[j + 1] = y;
                                    y._parent = r;
                                }
                                if (value instanceof AS.ASXML) {
                                    y._name = value._name;
                                }
                                else if (value instanceof AS.ASXMLList) {
                                    y._name = value._targetProperty;
                                }
                                this.append(y);
                            }
                        }
                        if (!isXMLType(value) || value._kind === 3 /* Text */ || value._kind === 2 /* Attribute */) {
                            value = value + '';
                        }
                        var currentChild = this._children[i];
                        var childKind = currentChild._kind;
                        var parent = currentChild._parent;
                        if (childKind === 2 /* Attribute */) {
                            var indexInParent = parent._children.indexOf(currentChild);
                            parent.setProperty(currentChild._name, true, false);
                            this._children[i] = parent._children[indexInParent];
                            return;
                        }
                        if (value instanceof AS.ASXMLList) {
                            var c = value._shallowCopy();
                            var cLength = c.length();
                            if (parent !== null) {
                                var q = parent._children.indexOf(currentChild);
                                parent.replace(q, c);
                                for (var j = 0; j < cLength; j++) {
                                    c.setProperty(j, false, parent._children[q + j]);
                                }
                            }
                            if (cLength === 0) {
                                for (var j = i + 1; j < length; j++) {
                                    this._children[j - 1] = this._children[j];
                                }
                                this._children.length--;
                            }
                            else {
                                for (var j = length - 1; j > i; j--) {
                                    this._children[j + cLength - 1] = this._children[j];
                                }
                            }
                            for (var j = 0; j < cLength; j++) {
                                this._children[i + j] = c._children[j];
                            }
                            return;
                        }
                        if (value instanceof AS.ASXML || childKind >= 3 /* Text */) {
                            if (parent !== null) {
                                var q = parent._children.indexOf(currentChild);
                                parent.replace(q, c);
                                value = parent._children[q];
                            }
                            if (typeof value === 'string') {
                                var t = new AS.ASXML(value);
                                this._children[i] = t;
                            }
                            else {
                                this._children[i] = value;
                            }
                            return;
                        }
                        currentChild.setProperty('*', false, value);
                        return;
                    }
                    if (this._children.length === 0) {
                        r = this.resolveValue();
                        if (r === null || r._children.length !== 1) {
                            return;
                        }
                        this.append(r._children[0]);
                    }
                    if (this._children.length === 1) {
                        this._children[0].setProperty(mn, isAttribute, value);
                        return;
                    }
                    AVM2.Runtime.throwError('TypeError', AVM2.Errors.XMLAssigmentOneItemLists);
                };
                ASXMLList.prototype.asSetProperty = function (namespaces, name, flags, value) {
                    if (ASXMLList.isTraitsOrDynamicPrototype(this)) {
                        return _asSetProperty.call(this, namespaces, name, flags, value);
                    }
                    var isAttribute = !!(flags & Multiname.ATTRIBUTE);
                    name = prefixWithNamespace(namespaces, name, isAttribute);
                    return this.setProperty(name, isAttribute, value);
                };
                ASXMLList.prototype._asDeleteProperty = function (namespaces, name, flags) {
                    if (Shumway.isIndex(name)) {
                        var i = name | 0;
                        if (i >= this._children.length) {
                            return true;
                        }
                        this.removeByIndex(i);
                        return true;
                    }
                    var isAttribute = !!(flags & Multiname.ATTRIBUTE);
                    name = prefixWithNamespace(namespaces, name, isAttribute);
                    for (var i = 0; i < this._children.length; i++) {
                        var child = this._children[i];
                        if (child._kind === 1 /* Element */) {
                            child.deleteProperty(name, isAttribute);
                        }
                    }
                    return true;
                };
                ASXMLList.prototype.removeByIndex = function (index) {
                    var child = this._children[index];
                    var parent = child._parent;
                    if (parent) {
                        child._parent = null;
                        parent._children.splice(parent._children.indexOf(child), 1);
                    }
                    this._children.splice(index, 1);
                };
                ASXMLList.prototype.asCallProperty = function (namespaces, name, flags, isLex, args) {
                    if (ASXMLList.isTraitsOrDynamicPrototype(this) || isLex) {
                        return _asCallProperty.call(this, namespaces, name, flags, isLex, args);
                    }
                    var method;
                    var resolved = this.resolveMultinameProperty(namespaces, name, flags);
                    if (this.asGetNumericProperty && Multiname.isNumeric(resolved)) {
                        method = this.asGetNumericProperty(resolved);
                    }
                    else {
                        var openMethods = this.asOpenMethods;
                        method = (openMethods && openMethods[resolved]) || this[resolved];
                    }
                    if (method) {
                        return method.asApply(isLex ? null : this, args);
                    }
                    if (this.length() === 1) {
                        return this._children[0].asCallProperty(namespaces, name, flags, isLex, args);
                    }
                    throw new TypeError();
                };
                ASXMLList.instanceConstructor = ASXMLList;
                ASXMLList.classInitializer = function () {
                    var proto = ASXMLList.prototype;
                    defineNonEnumerableProperty(proto, 'asDeleteProperty', proto._asDeleteProperty);
                    defineNonEnumerableProperty(proto, '$BgvalueOf', Object.prototype['$BgvalueOf']);
                    defineNonEnumerableProperty(proto, '$BghasOwnProperty', proto.native_hasOwnProperty);
                    defineNonEnumerableProperty(proto, '$BgpropertyIsEnumerable', proto.native_propertyIsEnumerable);
                    createPublicAliases(proto, [
                        'toString',
                        'addNamespace',
                        'appendChild',
                        'attribute',
                        'attributes',
                        'child',
                        'childIndex',
                        'children',
                        'comments',
                        'contains',
                        'copy',
                        'descendants',
                        'elements',
                        'hasComplexContent',
                        'hasSimpleContent',
                        'inScopeNamespaces',
                        'insertChildAfter',
                        'insertChildBefore',
                        'length',
                        'localName',
                        'name',
                        'namespace',
                        'namespaceDeclarations',
                        'nodeKind',
                        'normalize',
                        'parent',
                        'processingInstructions',
                        'prependChild',
                        'removeNamespace',
                        'replace',
                        'setChildren',
                        'setLocalName',
                        'setName',
                        'setNamespace',
                        'text',
                        'toXMLString',
                        'toJSON'
                    ]);
                };
                ASXMLList.callableConstructor = function (value) {
                    if (Shumway.isNullOrUndefined(value)) {
                        value = '';
                    }
                    if (value instanceof ASXMLList) {
                        return value;
                    }
                    var list = new AS.ASXMLList();
                    toXMLList(value, list);
                    return list;
                };
                return ASXMLList;
            })(AS.ASNative);
            AS.ASXMLList = ASXMLList;
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var assert = Shumway.Debug.assert;
            var Multiname = Shumway.AVM2.ABC.Multiname;
            var CONSTANT = Shumway.AVM2.ABC.CONSTANT;
            var TRAIT = Shumway.AVM2.ABC.TRAIT;
            var DescribeTypeFlags;
            (function (DescribeTypeFlags) {
                DescribeTypeFlags[DescribeTypeFlags["HIDE_NSURI_METHODS"] = 0x0001] = "HIDE_NSURI_METHODS";
                DescribeTypeFlags[DescribeTypeFlags["INCLUDE_BASES"] = 0x0002] = "INCLUDE_BASES";
                DescribeTypeFlags[DescribeTypeFlags["INCLUDE_INTERFACES"] = 0x0004] = "INCLUDE_INTERFACES";
                DescribeTypeFlags[DescribeTypeFlags["INCLUDE_VARIABLES"] = 0x0008] = "INCLUDE_VARIABLES";
                DescribeTypeFlags[DescribeTypeFlags["INCLUDE_ACCESSORS"] = 0x0010] = "INCLUDE_ACCESSORS";
                DescribeTypeFlags[DescribeTypeFlags["INCLUDE_METHODS"] = 0x0020] = "INCLUDE_METHODS";
                DescribeTypeFlags[DescribeTypeFlags["INCLUDE_METADATA"] = 0x0040] = "INCLUDE_METADATA";
                DescribeTypeFlags[DescribeTypeFlags["INCLUDE_CONSTRUCTOR"] = 0x0080] = "INCLUDE_CONSTRUCTOR";
                DescribeTypeFlags[DescribeTypeFlags["INCLUDE_TRAITS"] = 0x0100] = "INCLUDE_TRAITS";
                DescribeTypeFlags[DescribeTypeFlags["USE_ITRAITS"] = 0x0200] = "USE_ITRAITS";
                DescribeTypeFlags[DescribeTypeFlags["HIDE_OBJECT"] = 0x0400] = "HIDE_OBJECT";
            })(DescribeTypeFlags || (DescribeTypeFlags = {}));
            var declaredByKey = publicName("declaredBy");
            var metadataKey = publicName("metadata");
            var accessKey = publicName("access");
            var uriKey = publicName("uri");
            var nameKey = publicName("name");
            var typeKey = publicName("type");
            var returnTypeKey = publicName("returnType");
            var valueKey = publicName("value");
            var keyKey = publicName("key");
            var parametersKey = publicName("parameters");
            var optionalKey = publicName("optional");
            function describeTypeJSON(o, flags) {
                var isInt = (o | 0) === o;
                if (flags & 512 /* USE_ITRAITS */ && (Shumway.isNullOrUndefined(o) || isInt)) {
                    return null;
                }
                var isBoundMethod = false;
                if (o instanceof Function) {
                    if ('boundTo' in o) {
                        if (flags & 512 /* USE_ITRAITS */) {
                            return null;
                        }
                        isBoundMethod = true;
                    }
                    else if ('methodInfo' in o && o['methodInfo'] && 'lastBoundMethod' in o['methodInfo']) {
                        return null;
                    }
                }
                o = Object(o);
                var cls = o.classInfo ? o : Object.getPrototypeOf(o).class;
                release || assert(cls, "No class found for object " + o);
                var isClass = cls === o && !(flags & 512 /* USE_ITRAITS */);
                var info = cls.classInfo;
                var description = {};
                if (isInt) {
                    description[nameKey] = 'int';
                }
                else if (isBoundMethod) {
                    description[nameKey] = 'builtin.as$0::MethodClosure';
                }
                else {
                    description[nameKey] = unmangledQualifiedName(info.instanceInfo.name);
                }
                description[publicName("isDynamic")] = isClass || !(info.instanceInfo.flags & 1 /* ClassSealed */) && !isBoundMethod;
                description[publicName("isFinal")] = isClass || !!(info.instanceInfo.flags & 2 /* ClassFinal */) || isBoundMethod;
                description[publicName("isStatic")] = isClass;
                if (flags & 256 /* INCLUDE_TRAITS */) {
                    var traits = description[publicName("traits")] = addTraits(cls, info, isClass, flags);
                }
                if (isBoundMethod) {
                    traits[publicName("bases")].unshift('Function');
                    traits[publicName("accessors")][1][publicName("declaredBy")] = 'builtin.as$0::MethodClosure';
                }
                return description;
            }
            AS.describeTypeJSON = describeTypeJSON;
            function describeType(value, flags) {
                var classDescription = describeTypeJSON(value, flags);
                var systemDomain = AVM2.Runtime.AVM2.instance.systemDomain;
                systemDomain.getClass('XML');
                systemDomain.getClass('XMLList');
                systemDomain.getClass('QName');
                systemDomain.getClass('Namespace');
                var x = new AS.ASXML('<type/>');
                x.setProperty("name", true, classDescription[publicName('name')]);
                var bases = classDescription[publicName('traits')][publicName('bases')];
                if (bases.length) {
                    x.setProperty("base", true, bases[0]);
                }
                x.setProperty("isDynamic", true, classDescription[publicName('isDynamic')].toString());
                x.setProperty("isFinal", true, classDescription[publicName('isFinal')].toString());
                x.setProperty("isStatic", true, classDescription[publicName('isStatic')].toString());
                describeTraits(x, classDescription[publicName('traits')]);
                var instanceDescription = describeTypeJSON(value, flags | 512 /* USE_ITRAITS */);
                if (instanceDescription) {
                    var e = new AS.ASXML('<factory/>');
                    e.setProperty('type', true, instanceDescription[publicName('name')]);
                    if (describeTraits(e, instanceDescription[publicName('traits')])) {
                        x.appendChild(e);
                    }
                }
                return x;
            }
            AS.describeType = describeType;
            function describeTraits(x, traits) {
                var traitsCount = 0;
                var bases = traits[publicName('bases')];
                for (var i = 0; bases && i < bases.length; i++) {
                    var base = bases[i];
                    var e = new AS.ASXML('<extendsClass type="' + AS.escapeAttributeValue(base) + '"/>');
                    x.appendChild(e);
                    traitsCount++;
                }
                var interfaces = traits[publicName('interfaces')];
                for (var i = 0; interfaces && i < interfaces.length; i++) {
                    var e = new AS.ASXML('<implementsInterface type="' + AS.escapeAttributeValue(interfaces[i]) + '"/>');
                    x.appendChild(e);
                    traitsCount++;
                }
                if (traits[publicName('constructor')] !== null) {
                    var e = new AS.ASXML('<constructor/>');
                    describeParams(e, traits[publicName('constructor')]);
                    x.appendChild(e);
                    traitsCount++;
                }
                var variables = traits[publicName('variables')];
                for (var i = 0; variables && i < variables.length; i++) {
                    var variable = variables[i];
                    var nodeName = variable[publicName('access')] === 'readonly' ? 'constant' : 'variable';
                    var e = new AS.ASXML('<' + nodeName + ' name="' + AS.escapeAttributeValue(variable[publicName('name')]) + '" type="' + variable[publicName('type')] + '"/>');
                    if (variable[publicName('uri')] !== null) {
                        e.setProperty('uri', true, variable[publicName('uri')]);
                    }
                    if (variable[publicName('metadata')] !== null) {
                        describeMetadataXML(e, variable[publicName('metadata')]);
                    }
                    x.appendChild(e);
                    traitsCount++;
                }
                var accessors = traits[publicName('accessors')];
                for (var i = 0; accessors && i < accessors.length; i++) {
                    var accessor = accessors[i];
                    var e = new AS.ASXML('<accessor ' + 'name="' + AS.escapeAttributeValue(accessor[publicName('name')]) + '" access="' + accessor[publicName('access')] + '" type="' + AS.escapeAttributeValue(accessor[publicName('type')]) + '" declaredBy="' + AS.escapeAttributeValue(accessor[publicName('declaredBy')]) + '"/>');
                    if (accessor[publicName('uri')] !== null) {
                        e.setProperty('uri', true, accessor[publicName('uri')]);
                    }
                    if (accessor[publicName('metadata')] !== null) {
                        describeMetadataXML(e, variable[publicName('metadata')]);
                    }
                    x.appendChild(e);
                    traitsCount++;
                }
                var methods = traits[publicName('methods')];
                for (var i = 0; methods && i < methods.length; i++) {
                    var method = methods[i];
                    var e = new AS.ASXML('<method ' + 'name="' + AS.escapeAttributeValue(method[publicName('name')]) + '" declaredBy="' + AS.escapeAttributeValue(method[publicName('declaredBy')]) + '" returnType="' + AS.escapeAttributeValue(method[publicName('returnType')]) + '"/>');
                    describeParams(e, method[publicName('parameters')]);
                    if (method[publicName('uri')] !== null) {
                        e.setProperty('uri', true, method[publicName('uri')]);
                    }
                    if (method[publicName('metadata')] !== null) {
                        describeMetadataXML(e, variable[publicName('metadata')]);
                    }
                    x.appendChild(e);
                    traitsCount++;
                }
                describeMetadataXML(x, traits[publicName('metadata')]);
                return traitsCount > 0;
            }
            function describeParams(x, parameters) {
                if (!parameters) {
                    return;
                }
                for (var i = 0; i < parameters.length; i++) {
                    var p = parameters[i];
                    var f = new AS.ASXML('<parameter index="' + (i + 1) + '" type="' + AS.escapeAttributeValue(p[publicName('type')]) + '" optional="' + p[publicName('optional')] + '"/>');
                    x.appendChild(f);
                }
            }
            function describeMetadataXML(x, metadata) {
                if (!metadata) {
                    return;
                }
                for (var i = 0; i < metadata.length; i++) {
                    var md = metadata[i];
                    var m = new AS.ASXML('<metadata name="' + AS.escapeAttributeValue(md[publicName('name')]) + '"/>');
                    var values = md[publicName('value')];
                    for (var j = 0; j < values.length; j++) {
                        var value = values[j];
                        var a = new AS.ASXML('<arg key="' + AS.escapeAttributeValue(value[publicName('key')]) + '" value="' + AS.escapeAttributeValue(value[publicName('value')]) + '"/>');
                        m.appendChild(a);
                    }
                    x.appendChild(m);
                }
            }
            function publicName(str) {
                return Multiname.getPublicQualifiedName(str);
            }
            function unmangledQualifiedName(mn) {
                var name = mn.name;
                var namespace = mn.namespaces[0];
                if (namespace && namespace.uri) {
                    return namespace.uri + '::' + name;
                }
                return name;
            }
            function describeMetadataMap(map) {
                if (!map) {
                    return null;
                }
                var result = [];
                for (var key in map) {
                    if (key === 'native') {
                        continue;
                    }
                    result.push(describeMetadata(map[key]));
                }
                return result;
            }
            function describeMetadata(metadata) {
                var result = {};
                result[nameKey] = metadata.name;
                result[valueKey] = metadata.value.map(function (value) {
                    var val = {};
                    val[valueKey] = value.value;
                    val[keyKey] = value.key;
                    return val;
                });
                return result;
            }
            function addTraits(cls, info, describingClass, flags) {
                var includeBases = flags & 2 /* INCLUDE_BASES */;
                var includeMethods = flags & 32 /* INCLUDE_METHODS */ && !describingClass;
                var obj = {};
                var variablesVal = obj[publicName("variables")] = flags & 8 /* INCLUDE_VARIABLES */ ? [] : null;
                var accessorsVal = obj[publicName("accessors")] = flags & 16 /* INCLUDE_ACCESSORS */ ? [] : null;
                var metadata = null;
                if (flags & 64 /* INCLUDE_METADATA */) {
                    if (!describingClass) {
                        metadata = describeMetadataMap(info.metadata) || [];
                    }
                    else {
                        metadata = [];
                    }
                }
                obj[metadataKey] = metadata;
                obj[publicName("constructor")] = null;
                if (flags & 4 /* INCLUDE_INTERFACES */) {
                    var interfacesVal = obj[publicName("interfaces")] = [];
                    if (!describingClass) {
                        for (var key in cls.implementedInterfaces) {
                            var ifaceName = cls.implementedInterfaces[key].getQualifiedClassName();
                            interfacesVal.push(ifaceName);
                        }
                    }
                }
                else {
                    obj[publicName("interfaces")] = null;
                }
                var methodsVal = obj[publicName("methods")] = includeMethods ? [] : null;
                var basesVal = obj[publicName("bases")] = includeBases ? [] : null;
                var encounteredKeys = {};
                var encounteredGetters = {};
                var encounteredSetters = {};
                var addBase = false;
                while (cls) {
                    var className = unmangledQualifiedName(cls.classInfo.instanceInfo.name);
                    if (includeBases && addBase && !describingClass) {
                        basesVal.push(className);
                    }
                    else {
                        addBase = true;
                    }
                    if (flags & 1024 /* HIDE_OBJECT */ && cls === AS.ASObject) {
                        break;
                    }
                    if (!describingClass) {
                        describeTraits(cls.classInfo.instanceInfo.traits);
                    }
                    else {
                        describeTraits(cls.classInfo.traits);
                    }
                    cls = cls.baseClass;
                }
                if (describingClass) {
                    if (flags & 16 /* INCLUDE_ACCESSORS */) {
                        var val = {};
                        val[nameKey] = 'prototype';
                        val[typeKey] = '*';
                        val[accessKey] = "readonly";
                        val[metadataKey] = null;
                        val[uriKey] = null;
                        val[declaredByKey] = 'Class';
                        accessorsVal.push(val);
                    }
                    if (includeBases) {
                        basesVal.pop();
                        basesVal.push('Class', 'Object');
                        cls = AS.ASClass;
                    }
                }
                function describeTraits(traits) {
                    release || assert(traits, "No traits array found on class" + cls.classInfo.instanceInfo.name);
                    for (var i = traits.length; i--;) {
                        var t = traits[i];
                        var ns = t.name.getNamespace();
                        if (!ns.isPublic() && !t.name.uri || (flags & 1 /* HIDE_NSURI_METHODS */ && ns.uri)) {
                            continue;
                        }
                        var name = unmangledQualifiedName(t.name);
                        if (encounteredGetters[name] !== encounteredSetters[name]) {
                            var val = encounteredKeys[name];
                            val[accessKey] = 'readwrite';
                            if (t.kind === 2 /* Getter */) {
                                val[typeKey] = t.methodInfo.returnType ? unmangledQualifiedName(t.methodInfo.returnType) : '*';
                            }
                            continue;
                        }
                        if (encounteredKeys[name]) {
                            continue;
                        }
                        var val = {};
                        encounteredKeys[name] = val;
                        switch (t.kind) {
                            case 6 /* Const */:
                            case 0 /* Slot */:
                                if (!(flags & 8 /* INCLUDE_VARIABLES */)) {
                                    continue;
                                }
                                val[nameKey] = name;
                                val[uriKey] = t.name.uri === undefined ? null : t.name.uri;
                                val[typeKey] = t.typeName ? unmangledQualifiedName(t.typeName) : '*';
                                val[accessKey] = "readwrite";
                                val[metadataKey] = flags & 64 /* INCLUDE_METADATA */ ? describeMetadataMap(t.metadata) : null;
                                variablesVal.push(val);
                                break;
                            case 1 /* Method */:
                                if (!includeMethods) {
                                    continue;
                                }
                                val[returnTypeKey] = t.methodInfo.returnType ? unmangledQualifiedName(t.methodInfo.returnType) : '*';
                                val[metadataKey] = flags & 64 /* INCLUDE_METADATA */ ? describeMetadataMap(t.metadata) : null;
                                val[nameKey] = name;
                                val[uriKey] = t.name.uri === undefined ? null : t.name.uri;
                                var parametersVal = val[parametersKey] = [];
                                var parameters = t.methodInfo.parameters;
                                for (var j = 0; j < parameters.length; j++) {
                                    var param = parameters[j];
                                    var paramVal = {};
                                    paramVal[typeKey] = param.type ? unmangledQualifiedName(param.type) : '*';
                                    paramVal[optionalKey] = 'value' in param;
                                    parametersVal.push(paramVal);
                                }
                                val[declaredByKey] = className;
                                methodsVal.push(val);
                                break;
                            case 2 /* Getter */:
                            case 3 /* Setter */:
                                if (!(flags & 16 /* INCLUDE_ACCESSORS */) || describingClass) {
                                    continue;
                                }
                                val[nameKey] = name;
                                if (t.kind === 2 /* Getter */) {
                                    val[typeKey] = t.methodInfo.returnType ? unmangledQualifiedName(t.methodInfo.returnType) : '*';
                                    encounteredGetters[name] = val;
                                }
                                else {
                                    var paramType = t.methodInfo.parameters[0].type;
                                    val[typeKey] = paramType ? unmangledQualifiedName(paramType) : '*';
                                    encounteredSetters[name] = val;
                                }
                                val[accessKey] = t.kind === 2 /* Getter */ ? "readonly" : "writeonly";
                                val[metadataKey] = flags & 64 /* INCLUDE_METADATA */ ? describeMetadataMap(t.metadata) : null;
                                val[uriKey] = t.name.uri === undefined ? null : t.name.uri;
                                val[declaredByKey] = className;
                                accessorsVal.push(val);
                                break;
                            default:
                                release || assert(false, "Unknown trait type: " + t.kind);
                                break;
                        }
                    }
                }
                return obj;
            }
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var assert = Shumway.Debug.assert;
            var flash;
            (function (flash) {
                var utils;
                (function (utils) {
                    var _asGetProperty = Object.prototype.asGetProperty;
                    var _asSetProperty = Object.prototype.asSetProperty;
                    var _asCallProperty = Object.prototype.asCallProperty;
                    var _asHasProperty = Object.prototype.asHasProperty;
                    var _asHasOwnProperty = Object.prototype.asHasOwnProperty;
                    var _asHasTraitProperty = Object.prototype.asHasTraitProperty;
                    var _asDeleteProperty = Object.prototype.asDeleteProperty;
                    var _asGetEnumerableKeys = Object.prototype.asGetEnumerableKeys;
                    var Dictionary = (function (_super) {
                        __extends(Dictionary, _super);
                        function Dictionary(weakKeys) {
                            if (weakKeys === void 0) { weakKeys = false; }
                            false && _super.call(this);
                        }
                        Dictionary.isTraitsOrDynamicPrototype = function (value) {
                            return value === Dictionary.traitsPrototype || value === Dictionary.dynamicPrototype;
                        };
                        Dictionary.makePrimitiveKey = function (key) {
                            if (typeof key === "string" || typeof key === "number") {
                                return key;
                            }
                            release || assert(typeof key === "object" || typeof key === "function", typeof key);
                            return undefined;
                        };
                        Dictionary.prototype.init = function (weakKeys) {
                            this.weakKeys = !!weakKeys;
                            this.map = new WeakMap();
                            if (!weakKeys) {
                                this.keys = [];
                            }
                            this.primitiveMap = Object.create(null);
                        };
                        Dictionary.prototype.asGetNumericProperty = function (name) {
                            return this.asGetProperty(null, name, 0);
                        };
                        Dictionary.prototype.asSetNumericProperty = function (name, value) {
                            this.asSetProperty(null, name, 0, value);
                        };
                        Dictionary.prototype.asGetProperty = function (namespaces, name, flags) {
                            if (Dictionary.isTraitsOrDynamicPrototype(this)) {
                                return _asGetProperty.call(this, namespaces, name, flags);
                            }
                            var key = Dictionary.makePrimitiveKey(name);
                            if (key !== undefined) {
                                return this.primitiveMap[key];
                            }
                            return this.map.get(Object(name));
                        };
                        Dictionary.prototype.asSetProperty = function (namespaces, name, flags, value) {
                            if (Dictionary.isTraitsOrDynamicPrototype(this)) {
                                return _asSetProperty.call(this, namespaces, name, flags, value);
                            }
                            var key = Dictionary.makePrimitiveKey(name);
                            if (key !== undefined) {
                                this.primitiveMap[key] = value;
                                return;
                            }
                            this.map.set(Object(name), value);
                            if (!this.weakKeys && this.keys.indexOf(name) < 0) {
                                this.keys.push(name);
                            }
                        };
                        Dictionary.prototype.asHasProperty = function (namespaces, name, flags) {
                            if (Dictionary.isTraitsOrDynamicPrototype(this)) {
                                return _asHasProperty.call(this, namespaces, name, flags);
                            }
                            var key = Dictionary.makePrimitiveKey(name);
                            if (key !== undefined) {
                                return key in this.primitiveMap;
                            }
                            return this.map.has(Object(name));
                        };
                        Dictionary.prototype.asDeleteProperty = function (namespaces, name, flags) {
                            if (Dictionary.isTraitsOrDynamicPrototype(this)) {
                                return _asDeleteProperty.call(this, namespaces, name, flags);
                            }
                            var key = Dictionary.makePrimitiveKey(name);
                            if (key !== undefined) {
                                delete this.primitiveMap[key];
                            }
                            this.map.delete(Object(name));
                            var i;
                            if (!this.weakKeys && (i = this.keys.indexOf(name)) >= 0) {
                                this.keys.splice(i, 1);
                            }
                            return true;
                        };
                        Dictionary.prototype.asGetEnumerableKeys = function () {
                            if (Dictionary.isTraitsOrDynamicPrototype(this)) {
                                return _asGetEnumerableKeys.call(this);
                            }
                            var primitiveMapKeys = [];
                            for (var k in this.primitiveMap) {
                                primitiveMapKeys.push(k);
                            }
                            if (this.weakKeys) {
                                return primitiveMapKeys;
                            }
                            return primitiveMapKeys.concat(this.keys);
                        };
                        Dictionary.protocol = Dictionary.prototype;
                        return Dictionary;
                    })(AS.ASNative);
                    utils.Dictionary = Dictionary;
                    utils.OriginalDictionary = Dictionary;
                })(utils = flash.utils || (flash.utils = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var notImplemented = Shumway.Debug.notImplemented;
            var Namespace = Shumway.AVM2.ABC.Namespace;
            var flash;
            (function (flash) {
                var utils;
                (function (utils) {
                    var _asGetProperty = Object.prototype.asGetProperty;
                    var _asSetProperty = Object.prototype.asSetProperty;
                    var _asCallProperty = Object.prototype.asCallProperty;
                    var _asHasProperty = Object.prototype.asHasProperty;
                    var _asHasOwnProperty = Object.prototype.asHasOwnProperty;
                    var _asHasTraitProperty = Object.prototype.asHasTraitProperty;
                    var _asDeleteProperty = Object.prototype.asDeleteProperty;
                    var Proxy = (function (_super) {
                        __extends(Proxy, _super);
                        function Proxy() {
                            _super.apply(this, arguments);
                        }
                        Proxy.prototype.asGetProperty = function (namespaces, name, flags) {
                            var self = this;
                            if (_asHasTraitProperty.call(self, namespaces, name, flags)) {
                                return _asGetProperty.call(self, namespaces, name, flags);
                            }
                            return _asCallProperty.call(self, [Namespace.PROXY], "getProperty", 0, false, [name]);
                        };
                        Proxy.prototype.asGetNumericProperty = function (name) {
                            return this.asGetProperty(null, name, 0);
                        };
                        Proxy.prototype.asSetNumericProperty = function (name, value) {
                            this.asSetProperty(null, name, 0, value);
                        };
                        Proxy.prototype.asSetProperty = function (namespaces, name, flags, value) {
                            var self = this;
                            if (_asHasTraitProperty.call(self, namespaces, name, flags)) {
                                _asSetProperty.call(self, namespaces, name, flags, value);
                                return;
                            }
                            _asCallProperty.call(self, [Namespace.PROXY], "setProperty", 0, false, [name, value]);
                        };
                        Proxy.prototype.asCallProperty = function (namespaces, name, flags, isLex, args) {
                            var self = this;
                            if (_asHasTraitProperty.call(self, namespaces, name, flags)) {
                                return _asCallProperty.call(self, namespaces, name, flags, false, args);
                            }
                            return _asCallProperty.call(self, [Namespace.PROXY], "callProperty", 0, false, [name].concat(args));
                        };
                        Proxy.prototype.asHasProperty = function (namespaces, name, flags) {
                            var self = this;
                            if (_asHasTraitProperty.call(self, namespaces, name, flags)) {
                                return _asHasProperty.call(self, namespaces, name, flags);
                            }
                            return _asCallProperty.call(self, [Namespace.PROXY], "hasProperty", 0, false, [name]);
                        };
                        Proxy.prototype.asHasOwnProperty = function (namespaces, name, flags) {
                            var self = this;
                            if (_asHasTraitProperty.call(self, namespaces, name, flags)) {
                                return _asHasOwnProperty.call(self, namespaces, name, flags);
                            }
                            return _asCallProperty.call(self, [Namespace.PROXY], "hasProperty", 0, false, [name]);
                        };
                        Proxy.prototype.asDeleteProperty = function (namespaces, name, flags) {
                            var self = this;
                            if (_asHasTraitProperty.call(self, namespaces, name, flags)) {
                                return _asDeleteProperty.call(self, namespaces, name, flags);
                            }
                            return _asCallProperty.call(self, [Namespace.PROXY], "deleteProperty", 0, false, [name]);
                        };
                        Proxy.prototype.asNextName = function (index) {
                            notImplemented("Proxy asNextName");
                        };
                        Proxy.prototype.asNextValue = function (index) {
                            notImplemented("Proxy asNextValue");
                        };
                        Proxy.prototype.asNextNameIndex = function (index) {
                            notImplemented("Proxy asNextNameIndex");
                            return;
                        };
                        Proxy.protocol = Proxy.prototype;
                        return Proxy;
                    })(AS.ASNative);
                    utils.Proxy = Proxy;
                    utils.OriginalProxy = Proxy;
                })(utils = flash.utils || (flash.utils = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var notImplemented = Shumway.Debug.notImplemented;
            var unexpected = Shumway.Debug.unexpected;
            var DataBuffer = Shumway.ArrayUtilities.DataBuffer;
            var assert = Shumway.Debug.assert;
            var flash;
            (function (flash) {
                var net;
                (function (net) {
                    var ObjectEncoding = (function (_super) {
                        __extends(ObjectEncoding, _super);
                        function ObjectEncoding() {
                            _super.apply(this, arguments);
                        }
                        Object.defineProperty(ObjectEncoding, "dynamicPropertyWriter", {
                            get: function () {
                                notImplemented("public flash.net.ObjectEncoding::get dynamicPropertyWriter");
                                return null;
                            },
                            set: function (value) {
                                notImplemented("public flash.net.ObjectEncoding::set dynamicPropertyWriter");
                            },
                            enumerable: true,
                            configurable: true
                        });
                        ObjectEncoding.AMF0 = 0;
                        ObjectEncoding.AMF3 = 3;
                        ObjectEncoding.DEFAULT = ObjectEncoding.AMF3;
                        return ObjectEncoding;
                    })(AS.ASNative);
                    net.ObjectEncoding = ObjectEncoding;
                })(net = flash.net || (flash.net = {}));
            })(flash = AS.flash || (AS.flash = {}));
            var flash;
            (function (flash) {
                var utils;
                (function (utils) {
                    var _asGetProperty = Object.prototype.asGetProperty;
                    var _asSetProperty = Object.prototype.asSetProperty;
                    var _asCallProperty = Object.prototype.asCallProperty;
                    var _asHasProperty = Object.prototype.asHasProperty;
                    var _asHasOwnProperty = Object.prototype.asHasOwnProperty;
                    var _asHasTraitProperty = Object.prototype.asHasTraitProperty;
                    var _asDeleteProperty = Object.prototype.asDeleteProperty;
                    var ByteArray = (function (_super) {
                        __extends(ByteArray, _super);
                        function ByteArray() {
                            false && _super.call(this);
                        }
                        Object.defineProperty(ByteArray, "defaultObjectEncoding", {
                            get: function () {
                                return this._defaultObjectEncoding;
                            },
                            set: function (version) {
                                version = version >>> 0;
                                this._defaultObjectEncoding = version;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        ByteArray.prototype.readObject = function () {
                            switch (this._objectEncoding) {
                                case flash.net.ObjectEncoding.AMF0:
                                    return AVM2.AMF0.read(this);
                                case flash.net.ObjectEncoding.AMF3:
                                    return AVM2.AMF3.read(this);
                                default:
                                    unexpected("Object Encoding");
                            }
                        };
                        ByteArray.prototype.writeObject = function (object) {
                            switch (this._objectEncoding) {
                                case flash.net.ObjectEncoding.AMF0:
                                    return AVM2.AMF0.write(this, object);
                                case flash.net.ObjectEncoding.AMF3:
                                    return AVM2.AMF3.write(this, object);
                                default:
                                    unexpected("Object Encoding");
                            }
                        };
                        ByteArray.instanceConstructor = DataBuffer;
                        ByteArray.staticNatives = [DataBuffer];
                        ByteArray.instanceNatives = [DataBuffer.prototype];
                        ByteArray.callableConstructor = null;
                        ByteArray.initializer = function (source) {
                            var self = this;
                            var buffer;
                            var length = 0;
                            if (source) {
                                if (source instanceof ArrayBuffer) {
                                    buffer = source.slice();
                                }
                                else if (Array.isArray(source)) {
                                    buffer = new Uint8Array(source).buffer;
                                }
                                else if ('buffer' in source) {
                                    if (source.buffer instanceof ArrayBuffer) {
                                        buffer = new Uint8Array(source).buffer;
                                    }
                                    else if (source.buffer instanceof Uint8Array) {
                                        var begin = source.buffer.byteOffset;
                                        buffer = source.buffer.buffer.slice(begin, begin + source.buffer.length);
                                    }
                                    else {
                                        release || assert(source.buffer instanceof ArrayBuffer);
                                        buffer = source.buffer.slice();
                                    }
                                }
                                else {
                                    Shumway.Debug.unexpected("Source type.");
                                }
                                length = buffer.byteLength;
                            }
                            else {
                                buffer = new ArrayBuffer(ByteArray.INITIAL_SIZE);
                            }
                            self._buffer = buffer;
                            self._length = length;
                            self._position = 0;
                            self._resetViews();
                            self._objectEncoding = ByteArray.defaultObjectEncoding;
                            self._littleEndian = false;
                            self._bitBuffer = 0;
                            self._bitLength = 0;
                        };
                        ByteArray.protocol = ByteArray.prototype;
                        ByteArray.INITIAL_SIZE = 128;
                        ByteArray._defaultObjectEncoding = flash.net.ObjectEncoding.DEFAULT;
                        return ByteArray;
                    })(AS.ASNative);
                    utils.ByteArray = ByteArray;
                    ByteArray.prototype.asGetNumericProperty = DataBuffer.prototype.getValue;
                    ByteArray.prototype.asSetNumericProperty = DataBuffer.prototype.setValue;
                    utils.OriginalByteArray = ByteArray;
                })(utils = flash.utils || (flash.utils = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var notImplemented = Shumway.Debug.notImplemented;
            var somewhatImplemented = Shumway.Debug.somewhatImplemented;
            var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
            var flash;
            (function (flash) {
                var system;
                (function (system) {
                    var IME = (function (_super) {
                        __extends(IME, _super);
                        function IME() {
                            false && _super.call(this);
                        }
                        Object.defineProperty(IME, "enabled", {
                            get: function () {
                                notImplemented("public flash.system.IME::static get enabled");
                                return;
                            },
                            set: function (enabled) {
                                enabled = !!enabled;
                                notImplemented("public flash.system.IME::static set enabled");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(IME, "conversionMode", {
                            get: function () {
                                notImplemented("public flash.system.IME::static get conversionMode");
                                return;
                            },
                            set: function (mode) {
                                mode = asCoerceString(mode);
                                notImplemented("public flash.system.IME::static set conversionMode");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        IME.setCompositionString = function (composition) {
                            composition = asCoerceString(composition);
                            notImplemented("public flash.system.IME::static setCompositionString");
                            return;
                        };
                        IME.doConversion = function () {
                            notImplemented("public flash.system.IME::static doConversion");
                            return;
                        };
                        IME.compositionSelectionChanged = function (start, end) {
                            start = start | 0;
                            end = end | 0;
                            notImplemented("public flash.system.IME::static compositionSelectionChanged");
                            return;
                        };
                        IME.compositionAbandoned = function () {
                            notImplemented("public flash.system.IME::static compositionAbandoned");
                            return;
                        };
                        Object.defineProperty(IME, "isSupported", {
                            get: function () {
                                somewhatImplemented("public flash.system.IME::static get isSupported");
                                return false;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        return IME;
                    })(AS.ASNative);
                    system.IME = IME;
                    var System = (function (_super) {
                        __extends(System, _super);
                        function System() {
                            _super.apply(this, arguments);
                        }
                        Object.defineProperty(System, "ime", {
                            get: function () {
                                notImplemented("public flash.system.System::get ime");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        System.setClipboard = function (string) {
                            string = asCoerceString(string);
                            if (Shumway.ClipboardService.instance === null) {
                                console.warn('setClipboard is only available in the Firefox extension');
                                return;
                            }
                            Shumway.ClipboardService.instance.setClipboard(string);
                        };
                        Object.defineProperty(System, "totalMemoryNumber", {
                            get: function () {
                                somewhatImplemented("public flash.system.System::get totalMemoryNumber");
                                return 1024 * 1024 * 2;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(System, "freeMemory", {
                            get: function () {
                                somewhatImplemented("public flash.system.System::get freeMemory");
                                return 1024 * 1024;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(System, "privateMemory", {
                            get: function () {
                                somewhatImplemented("public flash.system.System::get privateMemory");
                                return 1024 * 1024;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(System, "useCodePage", {
                            get: function () {
                                return System._useCodePage;
                            },
                            set: function (value) {
                                System._useCodePage = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(System, "vmVersion", {
                            get: function () {
                                return "1.0 Shumway - Mozilla Research";
                            },
                            enumerable: true,
                            configurable: true
                        });
                        System.pause = function () {
                        };
                        System.resume = function () {
                        };
                        System.exit = function (code) {
                        };
                        System.gc = function () {
                        };
                        System.pauseForGCIfCollectionImminent = function (imminence) {
                            if (imminence === void 0) { imminence = 0.75; }
                        };
                        System.disposeXML = function (node) {
                        };
                        Object.defineProperty(System, "swfVersion", {
                            get: function () {
                                return 19;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(System, "apiVersion", {
                            get: function () {
                                return 26;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        System.getArgv = function () {
                            return [];
                        };
                        System.getRunmode = function () {
                            return "mixed";
                        };
                        System._useCodePage = false;
                        return System;
                    })(AS.ASNative);
                    system.System = System;
                    system.OriginalSystem = System;
                })(system = flash.system || (flash.system = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var Verifier;
        (function (_Verifier) {
            var Multiname = Shumway.AVM2.ABC.Multiname;
            var ClassInfo = Shumway.AVM2.ABC.ClassInfo;
            var ScriptInfo = Shumway.AVM2.ABC.ScriptInfo;
            var InstanceInfo = Shumway.AVM2.ABC.InstanceInfo;
            var Info = Shumway.AVM2.ABC.Info;
            var MethodInfo = Shumway.AVM2.ABC.MethodInfo;
            var assert = Shumway.Debug.assert;
            var notImplemented = Shumway.Debug.notImplemented;
            var popManyIntoVoid = Shumway.ArrayUtilities.popManyIntoVoid;
            var VerifierError = (function () {
                function VerifierError(message) {
                    if (message === void 0) { message = ""; }
                    this.message = message;
                    this.name = "VerifierError";
                }
                return VerifierError;
            })();
            _Verifier.VerifierError = VerifierError;
            var TypeInformation = (function () {
                function TypeInformation() {
                }
                return TypeInformation;
            })();
            _Verifier.TypeInformation = TypeInformation;
            var Type = (function () {
                function Type() {
                }
                Type.from = function (info, domain) {
                    release || assert(info.hash);
                    var type = Type._cache[info.hash];
                    if (!type) {
                        type = Type._cache[info.hash] = new TraitsType(info, domain);
                    }
                    return type;
                };
                Type.fromSimpleName = function (name, domain) {
                    return Type.fromName(Multiname.fromSimpleName(name), domain);
                };
                Type.fromName = function (mn, domain) {
                    if (mn === undefined) {
                        return Type.Undefined;
                    }
                    else {
                        var qn = Multiname.isQName(mn) ? Multiname.getFullQualifiedName(mn) : undefined;
                        if (qn) {
                            var type = Type._cache.byQN[qn];
                            if (type) {
                                return type;
                            }
                        }
                        if (qn === Multiname.getPublicQualifiedName("void")) {
                            return Type.Void;
                        }
                        release || assert(domain, "An ApplicationDomain is needed.");
                        var info = domain.findClassInfo(mn);
                        var type = info ? Type.from(info, domain) : Type.Any;
                        if (mn.hasTypeParameter()) {
                            type = new ParameterizedType(type, Type.fromName(mn.typeParameter, domain));
                        }
                        return Type._cache.byQN[qn] = type;
                    }
                    return null;
                };
                Type.initializeTypes = function (domain) {
                    if (Type._typesInitialized) {
                        return;
                    }
                    Type.Any = new AtomType("any", "?");
                    Type.Null = new AtomType("Null", "X");
                    Type.Void = new AtomType("Void", "V");
                    Type.Undefined = new AtomType("Undefined", "_");
                    Type.Int = Type.fromSimpleName("int", domain).instanceType();
                    Type.Uint = Type.fromSimpleName("uint", domain).instanceType();
                    Type.Class = Type.fromSimpleName("Class", domain).instanceType();
                    Type.Array = Type.fromSimpleName("Array", domain).instanceType();
                    Type.Object = Type.fromSimpleName("Object", domain).instanceType();
                    Type.String = Type.fromSimpleName("String", domain).instanceType();
                    Type.Number = Type.fromSimpleName("Number", domain).instanceType();
                    Type.Boolean = Type.fromSimpleName("Boolean", domain).instanceType();
                    Type.Function = Type.fromSimpleName("Function", domain).instanceType();
                    Type.XML = Type.fromSimpleName("XML", domain).instanceType();
                    Type.XMLList = Type.fromSimpleName("XMLList", domain).instanceType();
                    Type.QName = Type.fromSimpleName("QName", domain).instanceType();
                    Type.Namespace = Type.fromSimpleName("Namespace", domain).instanceType();
                    Type.Dictionary = Type.fromSimpleName("flash.utils.Dictionary", domain).instanceType();
                    Type._typesInitialized = true;
                };
                Type.prototype.equals = function (other) {
                    return this === other;
                };
                Type.prototype.canBeXML = function () {
                    return this === Type.Any || this === Type.Object || this === Type.XML || this === Type.XMLList || this === Type.QName || this === Type.QName;
                };
                Type.prototype.isStrictComparableWith = function (other) {
                    return this === other && !this.canBeXML();
                };
                Type.prototype.merge = function (other) {
                    return Type.Any;
                };
                Type.prototype.instanceType = function () {
                    return Type.Any;
                };
                Type.prototype.classType = function () {
                    return Type.Any;
                };
                Type.prototype.super = function () {
                    release || Shumway.Debug.abstractMethod("super");
                    return null;
                };
                Type.prototype.applyType = function (parameter) {
                    return null;
                };
                Type.prototype.getTrait = function (mn, isSetter, followSuperType) {
                    return null;
                };
                Type.prototype.isNumeric = function () {
                    return this === Type.Int || this === Type.Uint || this === Type.Number;
                };
                Type.prototype.isString = function () {
                    return this === Type.String;
                };
                Type.prototype.isScriptInfo = function () {
                    return false;
                };
                Type.prototype.isClassInfo = function () {
                    return false;
                };
                Type.prototype.isInstanceInfo = function () {
                    return false;
                };
                Type.prototype.isMethodInfo = function () {
                    return false;
                };
                Type.prototype.isTraitsType = function () {
                    return this instanceof TraitsType;
                };
                Type.prototype.isParameterizedType = function () {
                    return this instanceof ParameterizedType;
                };
                Type.prototype.isMethodType = function () {
                    return this instanceof MethodType;
                };
                Type.prototype.isMultinameType = function () {
                    return this instanceof MultinameType;
                };
                Type.prototype.isConstantType = function () {
                    return this instanceof ConstantType;
                };
                Type.prototype.isSubtypeOf = function (other) {
                    if (this === other || this.equals(other)) {
                        return true;
                    }
                    return this.merge(other) === this;
                };
                Type.prototype.asTraitsType = function () {
                    release || assert(this.isTraitsType());
                    return this;
                };
                Type.prototype.asMethodType = function () {
                    release || assert(this.isMethodType());
                    return this;
                };
                Type.prototype.asMultinameType = function () {
                    release || assert(this.isMultinameType());
                    return this;
                };
                Type.prototype.asConstantType = function () {
                    release || assert(this.isConstantType());
                    return this;
                };
                Type.prototype.getConstantValue = function () {
                    release || assert(this.isConstantType());
                    return this.value;
                };
                Type.prototype.asParameterizedType = function () {
                    release || assert(this.isParameterizedType());
                    return this;
                };
                Type._cache = {
                    byQN: Object.create(null),
                    byHash: Object.create(null)
                };
                Type._typesInitialized = false;
                return Type;
            })();
            _Verifier.Type = Type;
            var AtomType = (function (_super) {
                __extends(AtomType, _super);
                function AtomType(name, symbol) {
                    _super.call(this);
                    this.name = name;
                    this.symbol = symbol;
                }
                AtomType.prototype.toString = function () {
                    return this.symbol;
                };
                AtomType.prototype.instanceType = function () {
                    return Type.Any;
                };
                return AtomType;
            })(Type);
            _Verifier.AtomType = AtomType;
            var TraitsType = (function (_super) {
                __extends(TraitsType, _super);
                function TraitsType(info, domain) {
                    _super.call(this);
                    this.info = info;
                    this.domain = domain;
                }
                TraitsType.prototype.instanceType = function () {
                    release || assert(this.info instanceof ClassInfo);
                    var classInfo = this.info;
                    return (this._cachedType || (this._cachedType = Type.from(classInfo.instanceInfo, this.domain)));
                };
                TraitsType.prototype.classType = function () {
                    release || assert(this.info instanceof InstanceInfo);
                    var instanceInfo = this.info;
                    return (this._cachedType || (this._cachedType = Type.from(instanceInfo.classInfo, this.domain)));
                };
                TraitsType.prototype.super = function () {
                    if (this.info instanceof ClassInfo) {
                        return Type.Class;
                    }
                    release || assert(this.info instanceof InstanceInfo);
                    var instanceInfo = this.info;
                    if (instanceInfo.superName) {
                        var result = Type.fromName(instanceInfo.superName, this.domain).instanceType();
                        release || assert(result instanceof TraitsType && result.info instanceof InstanceInfo);
                        return result;
                    }
                    return null;
                };
                TraitsType.prototype.findTraitByName = function (traits, mn, isSetter) {
                    var isGetter = !isSetter;
                    var trait;
                    if (!Multiname.isQName(mn)) {
                        release || assert(mn instanceof Multiname);
                        var multiname = mn;
                        var dy;
                        for (var i = 0; i < multiname.namespaces.length; i++) {
                            var qname = multiname.getQName(i);
                            if (mn.namespaces[i].isDynamic()) {
                                dy = qname;
                            }
                            else {
                                if ((trait = this.findTraitByName(traits, qname, isSetter))) {
                                    return trait;
                                }
                            }
                        }
                        if (dy) {
                            return this.findTraitByName(traits, dy, isSetter);
                        }
                    }
                    else {
                        var qn = Multiname.getQualifiedName(mn);
                        for (var i = 0; i < traits.length; i++) {
                            trait = traits[i];
                            if (Multiname.getQualifiedName(trait.name) === qn) {
                                if (isSetter && trait.isGetter() || isGetter && trait.isSetter()) {
                                    continue;
                                }
                                return trait;
                            }
                        }
                    }
                };
                TraitsType.prototype.getTrait = function (mn, isSetter, followSuperType) {
                    if (mn.isMultinameType()) {
                        return null;
                    }
                    var mnValue = mn.getConstantValue();
                    if (mnValue.isAttribute()) {
                        return null;
                    }
                    if (followSuperType && (this.isInstanceInfo() || this.isClassInfo())) {
                        var node = this;
                        do {
                            var trait = node.getTrait(mn, isSetter, false);
                            if (!trait) {
                                node = node.super();
                            }
                        } while (!trait && node);
                        return trait;
                    }
                    else {
                        return this.findTraitByName(this.info.traits, mnValue, isSetter);
                    }
                };
                TraitsType.prototype.getTraitAt = function (slotId) {
                    var traits = this.info.traits;
                    for (var i = traits.length - 1; i >= 0; i--) {
                        if (traits[i].slotId === slotId) {
                            return traits[i];
                        }
                    }
                    Shumway.Debug.unexpected("Cannot find trait with slotId: " + slotId + " in " + traits);
                };
                TraitsType.prototype.equals = function (other) {
                    return other.isTraitsType() && this.info.traits === other.info.traits;
                };
                TraitsType.prototype.merge = function (other) {
                    if (other.isTraitsType()) {
                        if (this.equals(other)) {
                            return this;
                        }
                        if (this.isNumeric() && other.isNumeric()) {
                            return Type.Number;
                        }
                        if (this.isInstanceInfo() && other.isInstanceInfo()) {
                            var path = [];
                            for (var curr = this; curr; curr = curr.super()) {
                                path.push(curr);
                            }
                            for (var curr = other; curr; curr = curr.super()) {
                                for (var i = 0; i < path.length; i++) {
                                    if (path[i].equals(curr)) {
                                        return curr;
                                    }
                                }
                            }
                            return Type.Object;
                        }
                    }
                    return Type.Any;
                };
                TraitsType.prototype.isScriptInfo = function () {
                    return this.info instanceof ScriptInfo;
                };
                TraitsType.prototype.isClassInfo = function () {
                    return this.info instanceof ClassInfo;
                };
                TraitsType.prototype.isMethodInfo = function () {
                    return this.info instanceof MethodInfo;
                };
                TraitsType.prototype.isInstanceInfo = function () {
                    return this.info instanceof InstanceInfo;
                };
                TraitsType.prototype.isInstanceOrClassInfo = function () {
                    return this.isInstanceInfo() || this.isClassInfo();
                };
                TraitsType.prototype.applyType = function (parameter) {
                    return new ParameterizedType(this, parameter);
                };
                TraitsType.prototype._getInfoName = function () {
                    if (this.info instanceof ScriptInfo) {
                        return "SI";
                    }
                    else if (this.info instanceof ClassInfo) {
                        var classInfo = this.info;
                        return "CI:" + classInfo.instanceInfo.name.name;
                    }
                    else if (this.info instanceof InstanceInfo) {
                        var instanceInfo = this.info;
                        return "II:" + instanceInfo.name.name;
                    }
                    else if (this.info instanceof MethodInfo) {
                        return "MI";
                    }
                    release || assert(false);
                };
                TraitsType.prototype.toString = function () {
                    switch (this) {
                        case Type.Int:
                            return "I";
                        case Type.Uint:
                            return "U";
                        case Type.Array:
                            return "A";
                        case Type.Object:
                            return "O";
                        case Type.String:
                            return "S";
                        case Type.Number:
                            return "N";
                        case Type.Boolean:
                            return "B";
                        case Type.Function:
                            return "F";
                    }
                    return this._getInfoName();
                };
                return TraitsType;
            })(Type);
            _Verifier.TraitsType = TraitsType;
            var MethodType = (function (_super) {
                __extends(MethodType, _super);
                function MethodType(methodInfo, domain) {
                    _super.call(this, Type.Function.info, domain);
                    this.methodInfo = methodInfo;
                }
                MethodType.prototype.toString = function () {
                    return "MT " + this.methodInfo;
                };
                MethodType.prototype.returnType = function () {
                    return this._cachedType || (this._cachedType = Type.fromName(this.methodInfo.returnType, this.domain));
                };
                return MethodType;
            })(TraitsType);
            _Verifier.MethodType = MethodType;
            var MultinameType = (function (_super) {
                __extends(MultinameType, _super);
                function MultinameType(namespaces, name, flags) {
                    _super.call(this);
                    this.namespaces = namespaces;
                    this.name = name;
                    this.flags = flags;
                }
                MultinameType.prototype.toString = function () {
                    return "MN";
                };
                return MultinameType;
            })(Type);
            _Verifier.MultinameType = MultinameType;
            var ParameterizedType = (function (_super) {
                __extends(ParameterizedType, _super);
                function ParameterizedType(type, parameter) {
                    _super.call(this, type.info, type.domain);
                    this.type = type;
                    this.parameter = parameter;
                }
                return ParameterizedType;
            })(TraitsType);
            _Verifier.ParameterizedType = ParameterizedType;
            var ConstantType = (function (_super) {
                __extends(ConstantType, _super);
                function ConstantType(value) {
                    _super.call(this);
                    this.value = value;
                }
                ConstantType.prototype.toString = function () {
                    return String(this.value);
                };
                ConstantType.from = function (value) {
                    return new ConstantType(value);
                };
                ConstantType.fromArray = function (array) {
                    return array.map(function (value) { return new ConstantType(value); });
                };
                return ConstantType;
            })(Type);
            _Verifier.ConstantType = ConstantType;
            var State = (function () {
                function State() {
                    this.id = State.id += 1;
                    this.stack = [];
                    this.scope = [];
                    this.local = [];
                }
                State.prototype.clone = function () {
                    var s = new State();
                    s.originalId = this.id;
                    s.stack = this.stack.slice(0);
                    s.scope = this.scope.slice(0);
                    s.local = this.local.slice(0);
                    return s;
                };
                State.prototype.trace = function (writer) {
                    writer.writeLn(this.toString());
                };
                State.prototype.toString = function () {
                    return "<" + this.id + (this.originalId ? ":" + this.originalId : "") + ", L[" + this.local.join(", ") + "]" + ", S[" + this.stack.join(", ") + "]" + ", $[" + this.scope.join(", ") + "]>";
                };
                State.prototype.equals = function (other) {
                    return State._arrayEquals(this.stack, other.stack) && State._arrayEquals(this.scope, other.scope) && State._arrayEquals(this.local, other.local);
                };
                State._arrayEquals = function (a, b) {
                    if (a.length != b.length) {
                        return false;
                    }
                    for (var i = a.length - 1; i >= 0; i--) {
                        if (!a[i].equals(b[i])) {
                            return false;
                        }
                    }
                    return true;
                };
                State.prototype.isSubset = function (other) {
                    return State._arraySubset(this.stack, other.stack) && State._arraySubset(this.scope, other.scope) && State._arraySubset(this.local, other.local);
                };
                State._arraySubset = function (a, b) {
                    if (a.length != b.length) {
                        return false;
                    }
                    for (var i = a.length - 1; i >= 0; i--) {
                        if (a[i] === b[i] || a[i].equals(b[i])) {
                            continue;
                        }
                        if (a[i].merge(b[i]) !== a[i]) {
                            return false;
                        }
                    }
                    return true;
                };
                State.prototype.merge = function (other) {
                    State._mergeArrays(this.local, other.local);
                    State._mergeArrays(this.stack, other.stack);
                    State._mergeArrays(this.scope, other.scope);
                };
                State._mergeArrays = function (a, b) {
                    release || assert(a.length === b.length, "a: " + a + " b: " + b);
                    for (var i = a.length - 1; i >= 0; i--) {
                        release || assert((a[i] !== undefined) && (b[i] !== undefined));
                        if (a[i] === b[i]) {
                            continue;
                        }
                        a[i] = a[i].merge(b[i]);
                    }
                };
                State.id = 0;
                return State;
            })();
            _Verifier.State = State;
            var Verification = (function () {
                function Verification(methodInfo, domain, savedScope) {
                    this.methodInfo = methodInfo;
                    this.domain = domain;
                    this.savedScope = savedScope;
                    this.writer = new Shumway.IndentingWriter();
                    this.pushCount = 0;
                    this.pushAnyCount = 0;
                    Type.initializeTypes(domain);
                    this.writer = Shumway.AVM2.Verifier.traceLevel.value ? new Shumway.IndentingWriter() : null;
                    this.multinames = methodInfo.abc.constantPool.multinames;
                    this.returnType = Type.Undefined;
                }
                Verification.prototype.verify = function () {
                    var methodInfo = this.methodInfo;
                    if (this.writer) {
                        this.methodInfo.trace(this.writer);
                    }
                    release || assert(methodInfo.localCount >= methodInfo.parameters.length + 1);
                    this._verifyBlocks(this._prepareEntryState());
                };
                Verification.prototype._prepareEntryState = function () {
                    var writer = this.writer;
                    var entryState = new State();
                    var methodInfo = this.methodInfo;
                    this.thisType = methodInfo.holder ? Type.from(methodInfo.holder, this.domain) : Type.Any;
                    entryState.local.push(this.thisType);
                    var parameters = methodInfo.parameters;
                    for (var i = 0; i < parameters.length; i++) {
                        entryState.local.push(Type.fromName(parameters[i].type, this.domain).instanceType());
                    }
                    var remainingLocals = methodInfo.localCount - methodInfo.parameters.length - 1;
                    if (methodInfo.needsRest() || methodInfo.needsArguments()) {
                        entryState.local.push(Type.Array);
                        remainingLocals -= 1;
                    }
                    for (var i = 0; i < remainingLocals; i++) {
                        entryState.local.push(Type.Undefined);
                    }
                    release || assert(entryState.local.length === methodInfo.localCount);
                    return entryState;
                };
                Verification.prototype._verifyBlocks = function (entryState) {
                    var writer = this.writer;
                    var blocks = this.methodInfo.analysis.blocks;
                    blocks.forEach(function (x) {
                        x.verifierEntryState = x.verifierExitState = null;
                    });
                    for (var i = 0; i < blocks.length; i++) {
                        blocks[i].bdo = i;
                    }
                    var worklist = new Shumway.SortedList(function compare(a, b) {
                        return a.bdo - b.bdo;
                    });
                    blocks[0].verifierEntryState = entryState;
                    worklist.push(blocks[0]);
                    while (!worklist.isEmpty()) {
                        var block = worklist.pop();
                        var exitState = block.verifierExitState = block.verifierEntryState.clone();
                        this._verifyBlock(block, exitState);
                        block.succs.forEach(function (successor) {
                            if (worklist.contains(successor)) {
                                if (writer) {
                                    writer.writeLn("Forward Merged Block: " + successor.bid + " " + exitState.toString() + " with " + successor.verifierEntryState.toString());
                                }
                                successor.verifierEntryState.merge(exitState);
                                if (writer) {
                                    writer.writeLn("Merged State: " + successor.verifierEntryState);
                                }
                                return;
                            }
                            if (successor.verifierEntryState) {
                                if (!successor.verifierEntryState.isSubset(exitState)) {
                                    if (writer) {
                                        writer.writeLn("Backward Merged Block: " + block.bid + " with " + successor.bid + " " + exitState.toString() + " with " + successor.verifierEntryState.toString());
                                    }
                                    successor.verifierEntryState.merge(exitState);
                                    worklist.push(successor);
                                    if (writer) {
                                        writer.writeLn("Merged State: " + successor.verifierEntryState);
                                    }
                                }
                                return;
                            }
                            successor.verifierEntryState = exitState.clone();
                            worklist.push(successor);
                            if (writer) {
                                writer.writeLn("Added Block: " + successor.bid + " to worklist: " + successor.verifierEntryState.toString());
                            }
                        });
                    }
                    if (writer) {
                        writer.writeLn("Inferred return type: " + this.returnType);
                        writer.writeLn("Quality pushCount: " + this.pushCount + ", pushAnyCount: " + this.pushAnyCount);
                    }
                    this.methodInfo.inferredReturnType = this.returnType;
                };
                Verification.prototype._verifyBlock = function (block, state) {
                    var self = this;
                    var writer = this.writer;
                    var methodInfo = this.methodInfo;
                    var bytecodes = (methodInfo.analysis.bytecodes);
                    var local = state.local;
                    var stack = state.stack;
                    var scope = state.scope;
                    var bc;
                    function ti() {
                        return bc.ti || (bc.ti = new TypeInformation());
                    }
                    function push(x) {
                        release || assert(x);
                        ti().type = x;
                        stack.push(x);
                        self.pushCount++;
                        if (x === Type.Any) {
                            self.pushAnyCount++;
                        }
                    }
                    function pop(expectedType) {
                        return stack.pop();
                    }
                    function notImplementedBC() {
                        notImplemented('Bytecode not implemented in verifier: ' + bc);
                    }
                    function popMultiname() {
                        var mn = self.multinames[bc.index];
                        if (mn.isRuntime()) {
                            var name;
                            if (mn.isRuntimeName()) {
                                name = pop();
                            }
                            else {
                                name = ConstantType.from(mn.name);
                            }
                            var namespaces;
                            if (mn.isRuntimeNamespace()) {
                                namespaces = [pop()];
                            }
                            else {
                                namespaces = ConstantType.fromArray(mn.namespaces);
                            }
                            return new MultinameType(namespaces, name, mn.flags);
                        }
                        return ConstantType.from(mn);
                    }
                    function isNumericMultiname(mn) {
                        if (mn.isMultinameType() && mn.asMultinameType().name.isNumeric()) {
                            return true;
                        }
                        if (mn.isConstantType() && Multiname.isNumeric(mn.getConstantValue())) {
                            return true;
                        }
                        return false;
                    }
                    function getProperty(object, mn) {
                        if (object.isTraitsType() || object.isParameterizedType()) {
                            var traitsType = object;
                            var trait = traitsType.getTrait(mn, false, true);
                            if (trait) {
                                writer && writer.debugLn("getProperty(" + mn + ") -> " + trait);
                                ti().trait = trait;
                                if (trait.isSlot() || trait.isConst()) {
                                    return Type.fromName(trait.typeName, self.domain).instanceType();
                                }
                                else if (trait.isGetter()) {
                                    return Type.fromName(trait.methodInfo.returnType, self.domain).instanceType();
                                }
                                else if (trait.isClass()) {
                                    return Type.from(trait.classInfo, self.domain);
                                }
                                else if (trait.isMethod()) {
                                    return new MethodType(trait.methodInfo, self.domain);
                                }
                            }
                            else if (isNumericMultiname(mn) && traitsType.isParameterizedType()) {
                                var parameter = traitsType.asParameterizedType().parameter;
                                writer && writer.debugLn("getProperty(" + mn + ") -> " + parameter);
                                return parameter;
                            }
                            else if (traitsType === Type.Array) {
                            }
                            else {
                                writer && writer.warnLn("getProperty(" + mn + ")");
                            }
                        }
                        return Type.Any;
                    }
                    function setProperty(object, mn, value) {
                        if (object.isTraitsType() || object.isParameterizedType()) {
                            var traitsType = object;
                            var trait = traitsType.getTrait(mn, true, true);
                            if (trait) {
                                writer && writer.debugLn("setProperty(" + mn + ") -> " + trait);
                                ti().trait = trait;
                            }
                            else if (isNumericMultiname(mn) && traitsType.isParameterizedType()) {
                            }
                            else if (traitsType === Type.Array) {
                            }
                            else {
                                writer && writer.warnLn("setProperty(" + mn + ")");
                            }
                        }
                    }
                    function findProperty(mn, strict) {
                        if (mn.isMultinameType()) {
                            return Type.Any;
                        }
                        var savedScope = self.savedScope;
                        for (var i = scope.length - 1; i >= -savedScope.length; i--) {
                            var type = i >= 0 ? scope[i] : savedScope[savedScope.length + i];
                            if (type.isTraitsType()) {
                                var traitsType = type;
                                var trait = traitsType.getTrait(mn, false, true);
                                if (trait) {
                                    ti().scopeDepth = scope.length - i - 1;
                                    if (traitsType.isClassInfo() || traitsType.isScriptInfo()) {
                                        ti().object = AVM2.Runtime.LazyInitializer.create(traitsType.info);
                                    }
                                    writer && writer.debugLn("findProperty(" + mn + ") -> " + traitsType);
                                    return traitsType;
                                }
                            }
                            else {
                                writer && writer.warnLn("findProperty(" + mn + ")");
                                return Type.Any;
                            }
                        }
                        var resolved = self.domain.findDefiningScript(mn.getConstantValue(), false);
                        if (resolved) {
                            ti().object = AVM2.Runtime.LazyInitializer.create(resolved.script);
                            var type = Type.from(resolved.script, self.domain);
                            writer && writer.debugLn("findProperty(" + mn + ") -> " + type);
                            return type;
                        }
                        if (mn.isConstantType()) {
                            if (mn.getConstantValue().name === "unsafeJSNative") {
                                return Type.Any;
                            }
                        }
                        writer && writer.warnLn("findProperty(" + mn + ")");
                        return Type.Any;
                    }
                    function accessSlot(object) {
                        if (object instanceof TraitsType) {
                            var traitsType = object;
                            var trait = traitsType.getTraitAt(bc.index);
                            writer && writer.debugLn("accessSlot() -> " + trait);
                            if (trait) {
                                ti().trait = trait;
                                if (trait.isSlot()) {
                                    return Type.fromName(trait.typeName, self.domain).instanceType();
                                }
                                else if (trait.isClass()) {
                                    return Type.from(trait.classInfo, self.domain);
                                }
                            }
                        }
                        return Type.Any;
                    }
                    function construct(object) {
                        if (object.isTraitsType() || object.isParameterizedType()) {
                            if (object === Type.Function || object === Type.Class || object === Type.Object) {
                                return Type.Object;
                            }
                            return object.instanceType();
                        }
                        else {
                            writer && writer.warnLn("construct(" + object + ")");
                            return Type.Any;
                        }
                    }
                    var globalScope = this.savedScope[0];
                    var value, object, a, b, object, mn, type, returnType;
                    for (var bci = block.position, end = block.end.position; bci <= end; bci++) {
                        bc = bytecodes[bci];
                        var op = bc.op;
                        if (op === 240 /* debugline */ || op === 241 /* debugfile */) {
                            continue;
                        }
                        if (writer && Shumway.AVM2.Verifier.traceLevel.value > 1) {
                            writer.writeLn(("stateBefore: " + state.toString() + " $$[" + this.savedScope.join(", ") + "]").padRight(' ', 100) + " : " + bci + ", " + bc.toString(methodInfo.abc));
                        }
                        switch (op) {
                            case 1 /* bkpt */:
                                break;
                            case 3 /* throw */:
                                pop();
                                break;
                            case 4 /* getsuper */:
                                mn = popMultiname();
                                object = pop();
                                release || assert(object.super());
                                ti().baseClass = AVM2.Runtime.LazyInitializer.create(this.thisType.asTraitsType().super().classType().info);
                                push(getProperty(object.super(), mn));
                                break;
                            case 5 /* setsuper */:
                                value = pop();
                                mn = popMultiname();
                                object = pop();
                                release || assert(object.super());
                                ti().baseClass = AVM2.Runtime.LazyInitializer.create(this.thisType.asTraitsType().super().classType().info);
                                setProperty(object.super(), mn, value);
                                break;
                            case 6 /* dxns */:
                                notImplementedBC();
                                break;
                            case 7 /* dxnslate */:
                                notImplementedBC();
                                break;
                            case 8 /* kill */:
                                state.local[bc.index] = Type.Undefined;
                                break;
                            case 10 /* lf32x4 */:
                                notImplementedBC();
                                break;
                            case 11 /* sf32x4 */:
                                notImplementedBC();
                                break;
                            case 12 /* ifnlt */:
                            case 24 /* ifge */:
                            case 13 /* ifnle */:
                            case 23 /* ifgt */:
                            case 14 /* ifngt */:
                            case 22 /* ifle */:
                            case 15 /* ifnge */:
                            case 21 /* iflt */:
                            case 19 /* ifeq */:
                            case 20 /* ifne */:
                            case 25 /* ifstricteq */:
                            case 26 /* ifstrictne */:
                                pop();
                                pop();
                                break;
                            case 16 /* jump */:
                                break;
                            case 17 /* iftrue */:
                            case 18 /* iffalse */:
                                pop();
                                break;
                            case 27 /* lookupswitch */:
                                pop(Type.Int);
                                break;
                            case 29 /* popscope */:
                                scope.pop();
                                break;
                            case 30 /* nextname */:
                            case 35 /* nextvalue */:
                                pop(Type.Int);
                                pop();
                                push(Type.Any);
                                break;
                            case 31 /* hasnext */:
                                push(Type.Boolean);
                                break;
                            case 50 /* hasnext2 */:
                                push(Type.Boolean);
                                break;
                            case 32 /* pushnull */:
                                push(Type.Null);
                                break;
                            case 33 /* pushundefined */:
                                push(Type.Undefined);
                                break;
                            case 34 /* pushfloat */:
                                notImplementedBC();
                                break;
                            case 36 /* pushbyte */:
                                push(Type.Int);
                                break;
                            case 37 /* pushshort */:
                                push(Type.Int);
                                break;
                            case 44 /* pushstring */:
                                push(Type.String);
                                break;
                            case 45 /* pushint */:
                                push(Type.Int);
                                break;
                            case 46 /* pushuint */:
                                push(Type.Uint);
                                break;
                            case 47 /* pushdouble */:
                                push(Type.Number);
                                break;
                            case 38 /* pushtrue */:
                                push(Type.Boolean);
                                break;
                            case 39 /* pushfalse */:
                                push(Type.Boolean);
                                break;
                            case 40 /* pushnan */:
                                push(Type.Number);
                                break;
                            case 41 /* pop */:
                                pop();
                                break;
                            case 42 /* dup */:
                                value = pop();
                                push(value);
                                push(value);
                                break;
                            case 43 /* swap */:
                                a = pop();
                                b = pop();
                                push(a);
                                push(b);
                                break;
                            case 28 /* pushwith */:
                                pop();
                                scope.push(Type.Any);
                                break;
                            case 48 /* pushscope */:
                                scope.push(pop());
                                break;
                            case 49 /* pushnamespace */:
                                notImplementedBC();
                                break;
                            case 53 /* li8 */:
                            case 54 /* li16 */:
                            case 55 /* li32 */:
                                push(Type.Int);
                                break;
                            case 56 /* lf32 */:
                            case 57 /* lf64 */:
                                push(Type.Number);
                                break;
                            case 58 /* si8 */:
                            case 59 /* si16 */:
                            case 60 /* si32 */:
                                pop(Type.Int);
                                break;
                            case 61 /* sf32 */:
                            case 62 /* sf64 */:
                                pop(Type.Number);
                                break;
                            case 64 /* newfunction */:
                                push(Type.Function);
                                break;
                            case 65 /* call */:
                                popManyIntoVoid(stack, bc.argCount);
                                object = pop();
                                pop();
                                push(Type.Any);
                                break;
                            case 67 /* callmethod */:
                                throw new VerifierError("callmethod");
                            case 68 /* callstatic */:
                                notImplementedBC();
                                break;
                            case 69 /* callsuper */:
                            case 78 /* callsupervoid */:
                            case 79 /* callpropvoid */:
                            case 70 /* callproperty */:
                            case 76 /* callproplex */:
                                popManyIntoVoid(stack, bc.argCount);
                                mn = popMultiname();
                                object = pop();
                                if (op === 69 /* callsuper */ || op === 78 /* callsupervoid */) {
                                    object = this.thisType.super();
                                    ti().baseClass = AVM2.Runtime.LazyInitializer.create(this.thisType.asTraitsType().super().classType().info);
                                }
                                type = getProperty(object, mn);
                                if (op === 79 /* callpropvoid */ || op === 78 /* callsupervoid */) {
                                    break;
                                }
                                if (type.isMethodType()) {
                                    returnType = type.asMethodType().returnType().instanceType();
                                }
                                else if (type.isTraitsType() && type.isClassInfo()) {
                                    returnType = type.instanceType();
                                }
                                else {
                                    returnType = Type.Any;
                                }
                                push(returnType);
                                break;
                            case 71 /* returnvoid */:
                                this.returnType.merge(Type.Undefined);
                                break;
                            case 72 /* returnvalue */:
                                type = pop();
                                if (methodInfo.returnType) {
                                    var coerceType = Type.fromName(methodInfo.returnType, this.domain).instanceType();
                                    if (coerceType.isSubtypeOf(type)) {
                                        ti().noCoercionNeeded = true;
                                    }
                                }
                                break;
                            case 73 /* constructsuper */:
                                popManyIntoVoid(stack, bc.argCount);
                                stack.pop();
                                if (this.thisType.isInstanceInfo() && this.thisType.super() === Type.Object) {
                                    ti().noCallSuperNeeded = true;
                                }
                                else {
                                    ti().baseClass = AVM2.Runtime.LazyInitializer.create(this.thisType.asTraitsType().super().classType().info);
                                }
                                break;
                            case 66 /* construct */:
                                popManyIntoVoid(stack, bc.argCount);
                                push(construct(pop()));
                                break;
                            case 74 /* constructprop */:
                                popManyIntoVoid(stack, bc.argCount);
                                mn = popMultiname();
                                push(construct(getProperty(stack.pop(), mn)));
                                break;
                            case 75 /* callsuperid */:
                                notImplementedBC();
                                break;
                            case 77 /* callinterface */:
                                notImplementedBC();
                                break;
                            case 80 /* sxi1 */:
                            case 81 /* sxi8 */:
                            case 82 /* sxi16 */:
                                break;
                            case 83 /* applytype */:
                                release || assert(bc.argCount === 1);
                                value = pop();
                                object = pop();
                                if (object === Type.Any) {
                                    push(Type.Any);
                                }
                                else {
                                    push(object.applyType(value));
                                }
                                break;
                            case 84 /* pushfloat4 */:
                                notImplementedBC();
                                break;
                            case 85 /* newobject */:
                                popManyIntoVoid(stack, bc.argCount * 2);
                                push(Type.Object);
                                break;
                            case 86 /* newarray */:
                                popManyIntoVoid(stack, bc.argCount);
                                push(Type.Array);
                                break;
                            case 87 /* newactivation */:
                                push(Type.from(this.methodInfo, this.domain));
                                break;
                            case 88 /* newclass */:
                                push(Type.Any);
                                break;
                            case 89 /* getdescendants */:
                                popMultiname();
                                pop();
                                push(Type.XMLList);
                                break;
                            case 90 /* newcatch */:
                                push(Type.Any);
                                break;
                            case 93 /* findpropstrict */:
                                push(findProperty(popMultiname(), true));
                                break;
                            case 94 /* findproperty */:
                                push(findProperty(popMultiname(), false));
                                break;
                            case 95 /* finddef */:
                                notImplementedBC();
                                break;
                            case 96 /* getlex */:
                                mn = popMultiname();
                                push(getProperty(findProperty(mn, true), mn));
                                break;
                            case 104 /* initproperty */:
                            case 97 /* setproperty */:
                                value = pop();
                                mn = popMultiname();
                                object = pop();
                                setProperty(object, mn, value);
                                break;
                            case 98 /* getlocal */:
                                push(local[bc.index]);
                                break;
                            case 99 /* setlocal */:
                                local[bc.index] = pop();
                                break;
                            case 100 /* getglobalscope */:
                                push(globalScope);
                                ti().object = AVM2.Runtime.LazyInitializer.create(globalScope.asTraitsType().info);
                                break;
                            case 101 /* getscopeobject */:
                                push(scope[bc.index]);
                                break;
                            case 102 /* getproperty */:
                                mn = popMultiname();
                                object = pop();
                                push(getProperty(object, mn));
                                break;
                            case 103 /* getouterscope */:
                                notImplementedBC();
                                break;
                            case 105 /* setpropertylate */:
                                notImplementedBC();
                                break;
                            case 106 /* deleteproperty */:
                                popMultiname();
                                pop();
                                push(Type.Boolean);
                                break;
                            case 107 /* deletepropertylate */:
                                notImplementedBC();
                                break;
                            case 108 /* getslot */:
                                push(accessSlot(pop()));
                                break;
                            case 109 /* setslot */:
                                value = pop();
                                object = pop();
                                accessSlot(object);
                                break;
                            case 110 /* getglobalslot */:
                                notImplementedBC();
                                break;
                            case 111 /* setglobalslot */:
                                notImplementedBC();
                                break;
                            case 112 /* convert_s */:
                                pop();
                                push(Type.String);
                                break;
                            case 113 /* esc_xelem */:
                                pop();
                                push(Type.String);
                                break;
                            case 114 /* esc_xattr */:
                                pop();
                                push(Type.String);
                                break;
                            case 131 /* coerce_i */:
                            case 115 /* convert_i */:
                                pop();
                                push(Type.Int);
                                break;
                            case 136 /* coerce_u */:
                            case 116 /* convert_u */:
                                pop();
                                push(Type.Uint);
                                break;
                            case 132 /* coerce_d */:
                            case 117 /* convert_d */:
                                pop();
                                push(Type.Number);
                                break;
                            case 129 /* coerce_b */:
                            case 118 /* convert_b */:
                                pop();
                                push(Type.Boolean);
                                break;
                            case 119 /* convert_o */:
                                notImplementedBC();
                                break;
                            case 120 /* checkfilter */:
                                break;
                            case 121 /* convert_f */:
                                pop();
                                push(Type.Number);
                                break;
                            case 122 /* unplus */:
                                notImplementedBC();
                                break;
                            case 123 /* convert_f4 */:
                                notImplementedBC();
                                break;
                            case 128 /* coerce */:
                                type = pop();
                                var coerceType = Type.fromName(this.multinames[bc.index], this.domain).instanceType();
                                if (coerceType.isSubtypeOf(type)) {
                                    ti().noCoercionNeeded = true;
                                }
                                push(coerceType);
                                break;
                            case 130 /* coerce_a */:
                                break;
                            case 133 /* coerce_s */:
                                pop();
                                push(Type.String);
                                break;
                            case 134 /* astype */:
                                type = pop();
                                var asType = Type.fromName(this.multinames[bc.index], this.domain).instanceType();
                                if (asType.isSubtypeOf(type)) {
                                    ti().noCoercionNeeded = true;
                                }
                                push(asType);
                                break;
                            case 135 /* astypelate */:
                                type = pop();
                                pop();
                                if (type === Type.Class) {
                                    push(type);
                                }
                                else if (type.isTraitsType()) {
                                    push(type.instanceType());
                                }
                                else {
                                    push(Type.Any);
                                }
                                break;
                            case 137 /* coerce_o */:
                                notImplementedBC();
                                break;
                            case 144 /* negate */:
                            case 145 /* increment */:
                            case 147 /* decrement */:
                                pop();
                                push(Type.Number);
                                break;
                            case 146 /* inclocal */:
                            case 148 /* declocal */:
                                local[bc.index] = Type.Number;
                                break;
                            case 149 /* typeof */:
                                pop();
                                push(Type.String);
                                break;
                            case 150 /* not */:
                                pop();
                                push(Type.Boolean);
                                break;
                            case 160 /* add */:
                                b = pop();
                                a = pop();
                                if (a.isNumeric() && b.isNumeric()) {
                                    push(Type.Number);
                                }
                                else if (a === Type.String || b === Type.String) {
                                    push(Type.String);
                                }
                                else {
                                    push(Type.Any);
                                }
                                break;
                            case 161 /* subtract */:
                            case 162 /* multiply */:
                            case 163 /* divide */:
                            case 164 /* modulo */:
                                pop();
                                pop();
                                push(Type.Number);
                                break;
                            case 168 /* bitand */:
                            case 169 /* bitor */:
                            case 170 /* bitxor */:
                            case 165 /* lshift */:
                            case 166 /* rshift */:
                            case 167 /* urshift */:
                                pop();
                                pop();
                                push(Type.Int);
                                break;
                            case 151 /* bitnot */:
                                pop();
                                push(Type.Int);
                                break;
                            case 171 /* equals */:
                            case 172 /* strictequals */:
                            case 173 /* lessthan */:
                            case 174 /* lessequals */:
                            case 175 /* greaterthan */:
                            case 176 /* greaterequals */:
                            case 177 /* instanceof */:
                            case 180 /* in */:
                                pop();
                                pop();
                                push(Type.Boolean);
                                break;
                            case 178 /* istype */:
                                pop();
                                push(Type.Boolean);
                                break;
                            case 179 /* istypelate */:
                                pop();
                                pop();
                                push(Type.Boolean);
                                break;
                            case 194 /* inclocal_i */:
                            case 195 /* declocal_i */:
                                local[bc.index] = Type.Int;
                                break;
                            case 193 /* decrement_i */:
                            case 192 /* increment_i */:
                            case 196 /* negate_i */:
                                pop();
                                push(Type.Int);
                                break;
                            case 197 /* add_i */:
                            case 198 /* subtract_i */:
                            case 199 /* multiply_i */:
                                pop();
                                pop();
                                push(Type.Int);
                                break;
                            case 208 /* getlocal0 */:
                            case 209 /* getlocal1 */:
                            case 210 /* getlocal2 */:
                            case 211 /* getlocal3 */:
                                push(local[op - 208 /* getlocal0 */]);
                                break;
                            case 212 /* setlocal0 */:
                            case 213 /* setlocal1 */:
                            case 214 /* setlocal2 */:
                            case 215 /* setlocal3 */:
                                local[op - 212 /* setlocal0 */] = pop();
                                break;
                            case 239 /* debug */:
                                break;
                            case 242 /* bkptline */:
                                break;
                            case 243 /* timestamp */:
                                break;
                            default:
                                console.info("Not Implemented: " + bc);
                        }
                    }
                };
                return Verification;
            })();
            var Verifier = (function () {
                function Verifier() {
                }
                Verifier.prototype._prepareScopeObjects = function (methodInfo, scope) {
                    var domain = methodInfo.abc.applicationDomain;
                    var scopeObjects = scope.getScopeObjects();
                    return scopeObjects.map(function (object) {
                        if (object instanceof Info) {
                            return Type.from(object, domain);
                        }
                        if (object instanceof Shumway.AVM2.Runtime.Global) {
                            return Type.from(object.scriptInfo, domain);
                        }
                        if (object instanceof Shumway.AVM2.AS.ASClass) {
                            return Type.from(object.classInfo, domain);
                        }
                        if (object instanceof Shumway.AVM2.Runtime.ActivationInfo) {
                            return Type.from(object.methodInfo, domain);
                        }
                        if (object.class) {
                            return Type.from(object.class.classInfo.instanceInfo, domain);
                        }
                        release || assert(false, object.toString());
                        return Type.Any;
                    });
                };
                Verifier.prototype.verifyMethod = function (methodInfo, scope) {
                    var scopeTypes = this._prepareScopeObjects(methodInfo, scope);
                    new Verification(methodInfo, methodInfo.abc.applicationDomain, scopeTypes).verify();
                };
                return Verifier;
            })();
            _Verifier.Verifier = Verifier;
        })(Verifier = AVM2.Verifier || (AVM2.Verifier = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var Compiler;
        (function (Compiler) {
            var IR;
            (function (IR) {
                var assert = Shumway.Debug.assert;
                var Multiname = Shumway.AVM2.ABC.Multiname;
                var unexpected = Shumway.Debug.unexpected;
                function visitArrayInputs(array, visitor) {
                    for (var i = 0; i < array.length; i++) {
                        visitor(array[i]);
                    }
                }
                (function (Flags) {
                    Flags[Flags["NumericProperty"] = 0x01] = "NumericProperty";
                    Flags[Flags["RESOLVED"] = 0x02] = "RESOLVED";
                    Flags[Flags["PRISTINE"] = 0x04] = "PRISTINE";
                    Flags[Flags["IS_METHOD"] = 0x08] = "IS_METHOD";
                    Flags[Flags["AS_CALL"] = 0x10] = "AS_CALL";
                })(IR.Flags || (IR.Flags = {}));
                var Flags = IR.Flags;
                var Node = (function () {
                    function Node() {
                        this.id = Node.getNextID();
                    }
                    Node.getNextID = function () {
                        return Node._nextID[Node._nextID.length - 1] += 1;
                    };
                    Node.prototype.visitInputs = function (visitor) {
                    };
                    Node.startNumbering = function () {
                        Node._nextID.push(0);
                    };
                    Node.stopNumbering = function () {
                        Node._nextID.pop();
                    };
                    Node.prototype.toString = function (brief) {
                        if (brief) {
                            return nameOf(this);
                        }
                        var inputs = [];
                        this.visitInputs(function (input) {
                            inputs.push(nameOf(input));
                        });
                        var result = nameOf(this) + " = " + this.nodeName.toUpperCase();
                        if (inputs.length) {
                            result += " " + inputs.join(", ");
                        }
                        return result;
                    };
                    Node.prototype.visitInputsNoConstants = function (visitor) {
                        this.visitInputs(function (node) {
                            if (IR.isConstant(node)) {
                                return;
                            }
                            visitor(node);
                        });
                    };
                    Node.prototype.replaceInput = function (oldInput, newInput) {
                        var count = 0;
                        for (var k in this) {
                            var v = this[k];
                            if (v instanceof Node) {
                                if (v === oldInput) {
                                    this[k] = newInput;
                                    count++;
                                }
                            }
                            if (v instanceof Array) {
                                count += v.replace(oldInput, newInput);
                            }
                        }
                        return count;
                    };
                    Node._nextID = [];
                    return Node;
                })();
                IR.Node = Node;
                Node.prototype.nodeName = "Node";
                var Control = (function (_super) {
                    __extends(Control, _super);
                    function Control() {
                        _super.call(this);
                    }
                    return Control;
                })(Node);
                IR.Control = Control;
                Control.prototype.nodeName = "Control";
                var Region = (function (_super) {
                    __extends(Region, _super);
                    function Region(control) {
                        _super.call(this);
                        this.predecessors = control ? [control] : [];
                    }
                    Region.prototype.visitInputs = function (visitor) {
                        visitArrayInputs(this.predecessors, visitor);
                    };
                    return Region;
                })(Control);
                IR.Region = Region;
                Region.prototype.nodeName = "Region";
                var Start = (function (_super) {
                    __extends(Start, _super);
                    function Start() {
                        _super.call(this, null);
                        this.control = this;
                    }
                    Start.prototype.visitInputs = function (visitor) {
                        visitArrayInputs(this.predecessors, visitor);
                        visitor(this.scope);
                    };
                    return Start;
                })(Region);
                IR.Start = Start;
                Start.prototype.nodeName = "Start";
                var End = (function (_super) {
                    __extends(End, _super);
                    function End(control) {
                        _super.call(this);
                        this.control = control;
                    }
                    End.prototype.visitInputs = function (visitor) {
                        visitor(this.control);
                    };
                    return End;
                })(Control);
                IR.End = End;
                End.prototype.nodeName = "End";
                var Stop = (function (_super) {
                    __extends(Stop, _super);
                    function Stop(control, store, argument) {
                        _super.call(this, control);
                        this.store = store;
                        this.argument = argument;
                    }
                    Stop.prototype.visitInputs = function (visitor) {
                        visitor(this.control);
                        visitor(this.store);
                        visitor(this.argument);
                    };
                    return Stop;
                })(End);
                IR.Stop = Stop;
                Stop.prototype.nodeName = "Stop";
                var If = (function (_super) {
                    __extends(If, _super);
                    function If(control, predicate) {
                        _super.call(this, control);
                        this.predicate = predicate;
                    }
                    If.prototype.visitInputs = function (visitor) {
                        visitor(this.control);
                        visitor(this.predicate);
                    };
                    return If;
                })(End);
                IR.If = If;
                If.prototype.nodeName = "If";
                var Switch = (function (_super) {
                    __extends(Switch, _super);
                    function Switch(control, determinant) {
                        _super.call(this, control);
                        this.determinant = determinant;
                    }
                    Switch.prototype.visitInputs = function (visitor) {
                        visitor(this.control);
                        visitor(this.determinant);
                    };
                    return Switch;
                })(End);
                IR.Switch = Switch;
                Switch.prototype.nodeName = "Switch";
                var Jump = (function (_super) {
                    __extends(Jump, _super);
                    function Jump(control) {
                        _super.call(this, control);
                    }
                    Jump.prototype.visitInputs = function (visitor) {
                        visitor(this.control);
                    };
                    return Jump;
                })(End);
                IR.Jump = Jump;
                Jump.prototype.nodeName = "Jump";
                var Value = (function (_super) {
                    __extends(Value, _super);
                    function Value() {
                        _super.call(this);
                    }
                    return Value;
                })(Node);
                IR.Value = Value;
                Value.prototype.nodeName = "Value";
                var Store = (function (_super) {
                    __extends(Store, _super);
                    function Store() {
                        _super.call(this);
                    }
                    return Store;
                })(Value);
                IR.Store = Store;
                Store.prototype.nodeName = "Store";
                var StoreDependent = (function (_super) {
                    __extends(StoreDependent, _super);
                    function StoreDependent(control, store) {
                        _super.call(this);
                        this.control = control;
                        this.store = store;
                    }
                    StoreDependent.prototype.visitInputs = function (visitor) {
                        this.control && visitor(this.control);
                        this.store && visitor(this.store);
                        this.loads && visitArrayInputs(this.loads, visitor);
                    };
                    return StoreDependent;
                })(Value);
                IR.StoreDependent = StoreDependent;
                StoreDependent.prototype.nodeName = "StoreDependent";
                var Call = (function (_super) {
                    __extends(Call, _super);
                    function Call(control, store, callee, object, args, flags) {
                        _super.call(this, control, store);
                        this.callee = callee;
                        this.object = object;
                        this.args = args;
                        this.flags = flags;
                    }
                    Call.prototype.visitInputs = function (visitor) {
                        this.control && visitor(this.control);
                        this.store && visitor(this.store);
                        this.loads && visitArrayInputs(this.loads, visitor);
                        visitor(this.callee);
                        this.object && visitor(this.object);
                        visitArrayInputs(this.args, visitor);
                    };
                    return Call;
                })(StoreDependent);
                IR.Call = Call;
                Call.prototype.nodeName = "Call";
                var New = (function (_super) {
                    __extends(New, _super);
                    function New(control, store, callee, args) {
                        _super.call(this, control, store);
                        this.callee = callee;
                        this.args = args;
                    }
                    New.prototype.visitInputs = function (visitor) {
                        this.control && visitor(this.control);
                        this.store && visitor(this.store);
                        this.loads && visitArrayInputs(this.loads, visitor);
                        visitor(this.callee);
                        visitArrayInputs(this.args, visitor);
                    };
                    return New;
                })(StoreDependent);
                IR.New = New;
                New.prototype.nodeName = "New";
                var GetProperty = (function (_super) {
                    __extends(GetProperty, _super);
                    function GetProperty(control, store, object, name) {
                        _super.call(this, control, store);
                        this.object = object;
                        this.name = name;
                    }
                    GetProperty.prototype.visitInputs = function (visitor) {
                        this.control && visitor(this.control);
                        this.store && visitor(this.store);
                        this.loads && visitArrayInputs(this.loads, visitor);
                        visitor(this.object);
                        visitor(this.name);
                    };
                    return GetProperty;
                })(StoreDependent);
                IR.GetProperty = GetProperty;
                GetProperty.prototype.nodeName = "GetProperty";
                var SetProperty = (function (_super) {
                    __extends(SetProperty, _super);
                    function SetProperty(control, store, object, name, value) {
                        _super.call(this, control, store);
                        this.object = object;
                        this.name = name;
                        this.value = value;
                    }
                    SetProperty.prototype.visitInputs = function (visitor) {
                        this.control && visitor(this.control);
                        this.store && visitor(this.store);
                        this.loads && visitArrayInputs(this.loads, visitor);
                        visitor(this.object);
                        visitor(this.name);
                        visitor(this.value);
                    };
                    return SetProperty;
                })(StoreDependent);
                IR.SetProperty = SetProperty;
                SetProperty.prototype.nodeName = "SetProperty";
                var DeleteProperty = (function (_super) {
                    __extends(DeleteProperty, _super);
                    function DeleteProperty(control, store, object, name) {
                        _super.call(this, control, store);
                        this.object = object;
                        this.name = name;
                    }
                    DeleteProperty.prototype.visitInputs = function (visitor) {
                        this.control && visitor(this.control);
                        this.store && visitor(this.store);
                        this.loads && visitArrayInputs(this.loads, visitor);
                        visitor(this.object);
                        visitor(this.name);
                    };
                    return DeleteProperty;
                })(StoreDependent);
                IR.DeleteProperty = DeleteProperty;
                DeleteProperty.prototype.nodeName = "DeleteProperty";
                var CallProperty = (function (_super) {
                    __extends(CallProperty, _super);
                    function CallProperty(control, store, object, name, args, flags) {
                        _super.call(this, control, store);
                        this.object = object;
                        this.name = name;
                        this.args = args;
                        this.flags = flags;
                    }
                    CallProperty.prototype.visitInputs = function (visitor) {
                        this.control && visitor(this.control);
                        this.store && visitor(this.store);
                        this.loads && visitArrayInputs(this.loads, visitor);
                        visitor(this.object);
                        visitor(this.name);
                        visitArrayInputs(this.args, visitor);
                    };
                    return CallProperty;
                })(StoreDependent);
                IR.CallProperty = CallProperty;
                CallProperty.prototype.nodeName = "CallProperty";
                var Phi = (function (_super) {
                    __extends(Phi, _super);
                    function Phi(control, value) {
                        _super.call(this);
                        this.control = control;
                        this.control = control;
                        this.args = value ? [value] : [];
                    }
                    Phi.prototype.visitInputs = function (visitor) {
                        this.control && visitor(this.control);
                        visitArrayInputs(this.args, visitor);
                    };
                    Phi.prototype.seal = function () {
                        this.sealed = true;
                    };
                    Phi.prototype.pushValue = function (x) {
                        release || assert(!this.sealed);
                        this.args.push(x);
                    };
                    return Phi;
                })(Value);
                IR.Phi = Phi;
                Phi.prototype.nodeName = "Phi";
                var Variable = (function (_super) {
                    __extends(Variable, _super);
                    function Variable(name) {
                        _super.call(this);
                        this.name = name;
                    }
                    return Variable;
                })(Value);
                IR.Variable = Variable;
                Variable.prototype.nodeName = "Variable";
                var Copy = (function (_super) {
                    __extends(Copy, _super);
                    function Copy(argument) {
                        _super.call(this);
                        this.argument = argument;
                    }
                    Copy.prototype.visitInputs = function (visitor) {
                        visitor(this.argument);
                    };
                    return Copy;
                })(Value);
                IR.Copy = Copy;
                Copy.prototype.nodeName = "Copy";
                var Move = (function (_super) {
                    __extends(Move, _super);
                    function Move(to, from) {
                        _super.call(this);
                        this.to = to;
                        this.from = from;
                    }
                    Move.prototype.visitInputs = function (visitor) {
                        visitor(this.to);
                        visitor(this.from);
                    };
                    return Move;
                })(Value);
                IR.Move = Move;
                Move.prototype.nodeName = "Move";
                (function (ProjectionType) {
                    ProjectionType[ProjectionType["CASE"] = 0] = "CASE";
                    ProjectionType[ProjectionType["TRUE"] = 1] = "TRUE";
                    ProjectionType[ProjectionType["FALSE"] = 2] = "FALSE";
                    ProjectionType[ProjectionType["STORE"] = 3] = "STORE";
                    ProjectionType[ProjectionType["SCOPE"] = 4] = "SCOPE";
                })(IR.ProjectionType || (IR.ProjectionType = {}));
                var ProjectionType = IR.ProjectionType;
                var Projection = (function (_super) {
                    __extends(Projection, _super);
                    function Projection(argument, type, selector) {
                        _super.call(this);
                        this.argument = argument;
                        this.type = type;
                        this.selector = selector;
                    }
                    Projection.prototype.visitInputs = function (visitor) {
                        visitor(this.argument);
                    };
                    Projection.prototype.project = function () {
                        return this.argument;
                    };
                    return Projection;
                })(Value);
                IR.Projection = Projection;
                Projection.prototype.nodeName = "Projection";
                var Latch = (function (_super) {
                    __extends(Latch, _super);
                    function Latch(control, condition, left, right) {
                        _super.call(this);
                        this.control = control;
                        this.condition = condition;
                        this.left = left;
                        this.right = right;
                    }
                    Latch.prototype.visitInputs = function (visitor) {
                        this.control && visitor(this.control);
                        visitor(this.condition);
                        visitor(this.left);
                        visitor(this.right);
                    };
                    return Latch;
                })(Value);
                IR.Latch = Latch;
                Latch.prototype.nodeName = "Latch";
                var Operator = (function () {
                    function Operator(name, evaluate, isBinary) {
                        this.name = name;
                        this.evaluate = evaluate;
                        this.isBinary = isBinary;
                        Operator.byName[name] = this;
                    }
                    Operator.linkOpposites = function (a, b) {
                        a.not = b;
                        b.not = a;
                    };
                    Operator.fromName = function (name) {
                        return Operator.byName[name];
                    };
                    Operator.byName = Object.create(null);
                    Operator.ADD = new Operator("+", function (l, r) { return l + r; }, true);
                    Operator.SUB = new Operator("-", function (l, r) { return l - r; }, true);
                    Operator.MUL = new Operator("*", function (l, r) { return l * r; }, true);
                    Operator.DIV = new Operator("/", function (l, r) { return l / r; }, true);
                    Operator.MOD = new Operator("%", function (l, r) { return l % r; }, true);
                    Operator.AND = new Operator("&", function (l, r) { return l & r; }, true);
                    Operator.OR = new Operator("|", function (l, r) { return l | r; }, true);
                    Operator.XOR = new Operator("^", function (l, r) { return l ^ r; }, true);
                    Operator.LSH = new Operator("<<", function (l, r) { return l << r; }, true);
                    Operator.RSH = new Operator(">>", function (l, r) { return l >> r; }, true);
                    Operator.URSH = new Operator(">>>", function (l, r) { return l >>> r; }, true);
                    Operator.SEQ = new Operator("===", function (l, r) { return l === r; }, true);
                    Operator.SNE = new Operator("!==", function (l, r) { return l !== r; }, true);
                    Operator.EQ = new Operator("==", function (l, r) { return l == r; }, true);
                    Operator.NE = new Operator("!=", function (l, r) { return l != r; }, true);
                    Operator.LE = new Operator("<=", function (l, r) { return l <= r; }, true);
                    Operator.GT = new Operator(">", function (l, r) { return l > r; }, true);
                    Operator.LT = new Operator("<", function (l, r) { return l < r; }, true);
                    Operator.GE = new Operator(">=", function (l, r) { return l >= r; }, true);
                    Operator.PLUS = new Operator("+", function (a) { return +a; }, false);
                    Operator.NEG = new Operator("-", function (a) { return -a; }, false);
                    Operator.TRUE = new Operator("!!", function (a) { return !!a; }, false);
                    Operator.FALSE = new Operator("!", function (a) { return !a; }, false);
                    Operator.TYPE_OF = new Operator("typeof", function (a) { return typeof a; }, false);
                    Operator.BITWISE_NOT = new Operator("~", function (a) { return ~a; }, false);
                    Operator.AS_ADD = new Operator("+", function (l, r) {
                        if (typeof l === "string" || typeof r === "string") {
                            return String(l) + String(r);
                        }
                        return l + r;
                    }, true);
                    return Operator;
                })();
                IR.Operator = Operator;
                Operator.linkOpposites(Operator.SEQ, Operator.SNE);
                Operator.linkOpposites(Operator.EQ, Operator.NE);
                Operator.linkOpposites(Operator.TRUE, Operator.FALSE);
                var Binary = (function (_super) {
                    __extends(Binary, _super);
                    function Binary(operator, left, right) {
                        _super.call(this);
                        this.operator = operator;
                        this.left = left;
                        this.right = right;
                    }
                    Binary.prototype.visitInputs = function (visitor) {
                        visitor(this.left);
                        visitor(this.right);
                    };
                    return Binary;
                })(Value);
                IR.Binary = Binary;
                Binary.prototype.nodeName = "Binary";
                var Unary = (function (_super) {
                    __extends(Unary, _super);
                    function Unary(operator, argument) {
                        _super.call(this);
                        this.operator = operator;
                        this.argument = argument;
                    }
                    Unary.prototype.visitInputs = function (visitor) {
                        visitor(this.argument);
                    };
                    return Unary;
                })(Value);
                IR.Unary = Unary;
                Unary.prototype.nodeName = "Unary";
                var Constant = (function (_super) {
                    __extends(Constant, _super);
                    function Constant(value) {
                        _super.call(this);
                        this.value = value;
                    }
                    return Constant;
                })(Value);
                IR.Constant = Constant;
                Constant.prototype.nodeName = "Constant";
                var GlobalProperty = (function (_super) {
                    __extends(GlobalProperty, _super);
                    function GlobalProperty(name) {
                        _super.call(this);
                        this.name = name;
                    }
                    return GlobalProperty;
                })(Value);
                IR.GlobalProperty = GlobalProperty;
                GlobalProperty.prototype.nodeName = "GlobalProperty";
                var This = (function (_super) {
                    __extends(This, _super);
                    function This(control) {
                        _super.call(this);
                        this.control = control;
                    }
                    This.prototype.visitInputs = function (visitor) {
                        visitor(this.control);
                    };
                    return This;
                })(Value);
                IR.This = This;
                This.prototype.nodeName = "This";
                var Throw = (function (_super) {
                    __extends(Throw, _super);
                    function Throw(control, argument) {
                        _super.call(this);
                        this.control = control;
                        this.argument = argument;
                    }
                    Throw.prototype.visitInputs = function (visitor) {
                        visitor(this.control);
                        visitor(this.argument);
                    };
                    return Throw;
                })(Value);
                IR.Throw = Throw;
                Throw.prototype.nodeName = "Throw";
                var Arguments = (function (_super) {
                    __extends(Arguments, _super);
                    function Arguments(control) {
                        _super.call(this);
                        this.control = control;
                    }
                    Arguments.prototype.visitInputs = function (visitor) {
                        visitor(this.control);
                    };
                    return Arguments;
                })(Value);
                IR.Arguments = Arguments;
                Arguments.prototype.nodeName = "Arguments";
                var Parameter = (function (_super) {
                    __extends(Parameter, _super);
                    function Parameter(control, index, name) {
                        _super.call(this);
                        this.control = control;
                        this.index = index;
                        this.name = name;
                    }
                    Parameter.prototype.visitInputs = function (visitor) {
                        visitor(this.control);
                    };
                    return Parameter;
                })(Value);
                IR.Parameter = Parameter;
                Parameter.prototype.nodeName = "Parameter";
                var NewArray = (function (_super) {
                    __extends(NewArray, _super);
                    function NewArray(control, elements) {
                        _super.call(this);
                        this.control = control;
                        this.elements = elements;
                    }
                    NewArray.prototype.visitInputs = function (visitor) {
                        visitor(this.control);
                        visitArrayInputs(this.elements, visitor);
                    };
                    return NewArray;
                })(Value);
                IR.NewArray = NewArray;
                NewArray.prototype.nodeName = "NewArray";
                var NewObject = (function (_super) {
                    __extends(NewObject, _super);
                    function NewObject(control, properties) {
                        _super.call(this);
                        this.control = control;
                        this.properties = properties;
                    }
                    NewObject.prototype.visitInputs = function (visitor) {
                        visitor(this.control);
                        visitArrayInputs(this.properties, visitor);
                    };
                    return NewObject;
                })(Value);
                IR.NewObject = NewObject;
                NewObject.prototype.nodeName = "NewObject";
                var KeyValuePair = (function (_super) {
                    __extends(KeyValuePair, _super);
                    function KeyValuePair(key, value) {
                        _super.call(this);
                        this.key = key;
                        this.value = value;
                    }
                    KeyValuePair.prototype.visitInputs = function (visitor) {
                        visitor(this.key);
                        visitor(this.value);
                    };
                    return KeyValuePair;
                })(Value);
                IR.KeyValuePair = KeyValuePair;
                KeyValuePair.prototype.mustFloat = true;
                KeyValuePair.prototype.nodeName = "KeyValuePair";
                function nameOf(node) {
                    var useColors = false;
                    var result;
                    var m = Shumway.StringUtilities;
                    if (node instanceof Constant) {
                        if (node.value instanceof Multiname) {
                            return node.value.name;
                        }
                        return node.value;
                    }
                    else if (node instanceof Variable) {
                        return node.name;
                    }
                    else if (node instanceof Phi) {
                        return result = m.concat3("|", node.id, "|"), useColors ? m.concat3(Shumway.IndentingWriter.PURPLE, result, Shumway.IndentingWriter.ENDC) : result;
                    }
                    else if (node instanceof Control) {
                        return result = m.concat3("{", node.id, "}"), useColors ? m.concat3(Shumway.IndentingWriter.RED, result, Shumway.IndentingWriter.ENDC) : result;
                    }
                    else if (node instanceof Projection) {
                        if (node.type === 3 /* STORE */) {
                            return result = m.concat5("[", node.id, "->", node.argument.id, "]"), useColors ? m.concat3(Shumway.IndentingWriter.YELLOW, result, Shumway.IndentingWriter.ENDC) : result;
                        }
                        return result = m.concat3("(", node.id, ")"), useColors ? m.concat3(Shumway.IndentingWriter.GREEN, result, Shumway.IndentingWriter.ENDC) : result;
                    }
                    else if (node instanceof Value) {
                        return result = m.concat3("(", node.id, ")"), useColors ? m.concat3(Shumway.IndentingWriter.GREEN, result, Shumway.IndentingWriter.ENDC) : result;
                    }
                    else if (node instanceof Node) {
                        return node.id;
                    }
                    unexpected(node + " " + typeof node);
                }
                IR.nameOf = nameOf;
            })(IR = Compiler.IR || (Compiler.IR = {}));
        })(Compiler = AVM2.Compiler || (AVM2.Compiler = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var Compiler;
        (function (Compiler) {
            var IR;
            (function (IR) {
                var assert = Shumway.Debug.assert;
                var unexpected = Shumway.Debug.unexpected;
                var Multiname = Shumway.AVM2.ABC.Multiname;
                var top = Shumway.ArrayUtilities.top;
                var bitCount = Shumway.IntegerUtilities.bitCount;
                var IndentingWriter = Shumway.IndentingWriter;
                var pushUnique = Shumway.ArrayUtilities.pushUnique;
                var unique = Shumway.ArrayUtilities.unique;
                var debug = false;
                function toID(node) {
                    return node.id;
                }
                function visitNothing() {
                }
                function isNotPhi(phi) {
                    return !isPhi(phi);
                }
                IR.isNotPhi = isNotPhi;
                function isPhi(phi) {
                    return phi instanceof IR.Phi;
                }
                IR.isPhi = isPhi;
                function isScope(scope) {
                    return isPhi(scope) || scope instanceof IR.ASScope || isProjection(scope, 4 /* SCOPE */);
                }
                IR.isScope = isScope;
                function isMultinameConstant(node) {
                    return node instanceof IR.Constant && node.value instanceof Multiname;
                }
                IR.isMultinameConstant = isMultinameConstant;
                function isMultiname(name) {
                    return isMultinameConstant(name) || name instanceof IR.ASMultiname;
                }
                IR.isMultiname = isMultiname;
                function isStore(store) {
                    return isPhi(store) || store instanceof IR.Store || isProjection(store, 3 /* STORE */);
                }
                IR.isStore = isStore;
                function isConstant(constant) {
                    return constant instanceof IR.Constant;
                }
                IR.isConstant = isConstant;
                function isBoolean(value) {
                    return value === true || value === false;
                }
                function isControlOrNull(control) {
                    return isControl(control) || control === null;
                }
                IR.isControlOrNull = isControlOrNull;
                function isStoreOrNull(store) {
                    return isStore(store) || store === null;
                }
                IR.isStoreOrNull = isStoreOrNull;
                function isControl(control) {
                    return control instanceof IR.Control;
                }
                IR.isControl = isControl;
                function isValueOrNull(value) {
                    return isValue(value) || value === null;
                }
                IR.isValueOrNull = isValueOrNull;
                function isValue(value) {
                    return value instanceof IR.Value;
                }
                IR.isValue = isValue;
                function isProjection(node, type) {
                    return node instanceof IR.Projection && (!type || node.type === type);
                }
                IR.isProjection = isProjection;
                function followProjection(node) {
                    return node instanceof IR.Projection ? node.project() : node;
                }
                IR.Null = new IR.Constant(null);
                IR.Undefined = new IR.Constant(undefined);
                IR.True = new IR.Constant(true);
                IR.False = new IR.Constant(false);
                var Block = (function () {
                    function Block(id, start, end) {
                        this.id = id;
                        this.nodes = [start, end];
                        this.region = start;
                        this.successors = [];
                        this.predecessors = [];
                    }
                    Block.prototype.pushSuccessorAt = function (successor, index, pushPredecessor) {
                        release || assert(successor);
                        release || assert(!this.successors[index]);
                        this.successors[index] = successor;
                        if (pushPredecessor) {
                            successor.pushPredecessor(this);
                        }
                    };
                    Block.prototype.pushSuccessor = function (successor, pushPredecessor) {
                        release || assert(successor);
                        this.successors.push(successor);
                        if (pushPredecessor) {
                            successor.pushPredecessor(this);
                        }
                    };
                    Block.prototype.pushPredecessor = function (predecessor) {
                        release || assert(predecessor);
                        this.predecessors.push(predecessor);
                    };
                    Block.prototype.visitNodes = function (fn) {
                        var nodes = this.nodes;
                        for (var i = 0, j = nodes.length; i < j; i++) {
                            fn(nodes[i]);
                        }
                    };
                    Block.prototype.visitSuccessors = function (fn) {
                        var successors = this.successors;
                        for (var i = 0, j = successors.length; i < j; i++) {
                            fn(successors[i]);
                        }
                    };
                    Block.prototype.visitPredecessors = function (fn) {
                        var predecessors = this.predecessors;
                        for (var i = 0, j = predecessors.length; i < j; i++) {
                            fn(predecessors[i]);
                        }
                    };
                    Block.prototype.append = function (node) {
                        release || assert(this.nodes.length >= 2);
                        release || assert(isValue(node), node);
                        release || assert(isNotPhi(node));
                        release || assert(this.nodes.indexOf(node) < 0);
                        if (node.mustFloat) {
                            return;
                        }
                        this.nodes.splice(this.nodes.length - 1, 0, node);
                    };
                    Block.prototype.toString = function () {
                        return "B" + this.id + (this.name ? " (" + this.name + ")" : "");
                    };
                    Block.prototype.trace = function (writer) {
                        writer.writeLn(this.toString());
                    };
                    return Block;
                })();
                IR.Block = Block;
                var DFG = (function () {
                    function DFG(exit) {
                        this.exit = exit;
                        this.exit = exit;
                    }
                    DFG.prototype.buildCFG = function () {
                        return CFG.fromDFG(this);
                    };
                    DFG.preOrderDepthFirstSearch = function (root, visitChildren, pre) {
                        var visited = [];
                        var worklist = [root];
                        var push = worklist.push.bind(worklist);
                        var node;
                        while ((node = worklist.pop())) {
                            if (visited[node.id] === 1) {
                                continue;
                            }
                            visited[node.id] = 1;
                            pre(node);
                            worklist.push(node);
                            visitChildren(node, push);
                        }
                    };
                    DFG.postOrderDepthFirstSearch = function (root, visitChildren, post) {
                        var ONE_TIME = 1, MANY_TIMES = 2;
                        var visited = [];
                        var worklist = [root];
                        function visitChild(child) {
                            if (!visited[child.id]) {
                                worklist.push(child);
                            }
                        }
                        var node;
                        while ((node = top(worklist))) {
                            if (visited[node.id]) {
                                if (visited[node.id] === ONE_TIME) {
                                    visited[node.id] = MANY_TIMES;
                                    post(node);
                                }
                                worklist.pop();
                                continue;
                            }
                            visited[node.id] = ONE_TIME;
                            visitChildren(node, visitChild);
                        }
                    };
                    DFG.prototype.forEachInPreOrderDepthFirstSearch = function (visitor) {
                        var visited = new Array(1024);
                        var worklist = [this.exit];
                        function push(node) {
                            if (isConstant(node)) {
                                return;
                            }
                            release || assert(node instanceof IR.Node);
                            worklist.push(node);
                        }
                        var node;
                        while ((node = worklist.pop())) {
                            if (visited[node.id]) {
                                continue;
                            }
                            visited[node.id] = 1;
                            visitor && visitor(node);
                            worklist.push(node);
                            node.visitInputs(push);
                        }
                    };
                    DFG.prototype.forEach = function (visitor, postOrder) {
                        var search = postOrder ? DFG.postOrderDepthFirstSearch : DFG.preOrderDepthFirstSearch;
                        search(this.exit, function (node, v) {
                            node.visitInputsNoConstants(v);
                        }, visitor);
                    };
                    DFG.prototype.traceMetrics = function (writer) {
                        var counter = new Shumway.Metrics.Counter(true);
                        DFG.preOrderDepthFirstSearch(this.exit, function (node, visitor) {
                            node.visitInputsNoConstants(visitor);
                        }, function (node) {
                            AVM2.countTimeline(node.nodeName);
                        });
                        counter.trace(writer);
                    };
                    DFG.prototype.trace = function (writer) {
                        var nodes = [];
                        var visited = {};
                        function colorOf(node) {
                            if (node instanceof IR.Control) {
                                return "yellow";
                            }
                            else if (node instanceof IR.Phi) {
                                return "purple";
                            }
                            else if (node instanceof IR.Value) {
                                return "green";
                            }
                            return "white";
                        }
                        var blocks = [];
                        function followProjection(node) {
                            return node instanceof IR.Projection ? node.project() : node;
                        }
                        function next(node) {
                            node = followProjection(node);
                            if (!visited[node.id]) {
                                visited[node.id] = true;
                                if (node.block) {
                                    blocks.push(node.block);
                                }
                                nodes.push(node);
                                node.visitInputsNoConstants(next);
                            }
                        }
                        next(this.exit);
                        writer.writeLn("");
                        writer.enter("digraph DFG {");
                        writer.writeLn("graph [bgcolor = gray10];");
                        writer.writeLn("edge [color = white];");
                        writer.writeLn("node [shape = box, fontname = Consolas, fontsize = 11, color = white, fontcolor = white];");
                        writer.writeLn("rankdir = BT;");
                        function writeNode(node) {
                            writer.writeLn("N" + node.id + " [label = \"" + node.toString() + "\", color = \"" + colorOf(node) + "\"];");
                        }
                        function defineNode(node) {
                            writer.writeLn("N" + node.id + ";");
                        }
                        blocks.forEach(function (block) {
                            writer.enter("subgraph cluster" + block.nodes[0].id + " { bgcolor = gray20;");
                            block.visitNodes(function (node) {
                                defineNode(followProjection(node));
                            });
                            writer.leave("}");
                        });
                        nodes.forEach(writeNode);
                        nodes.forEach(function (node) {
                            node.visitInputsNoConstants(function (input) {
                                input = followProjection(input);
                                writer.writeLn("N" + node.id + " -> " + "N" + input.id + " [color=" + colorOf(input) + "];");
                            });
                        });
                        writer.leave("}");
                        writer.writeLn("");
                    };
                    return DFG;
                })();
                IR.DFG = DFG;
                var Uses = (function () {
                    function Uses() {
                        this.entries = [];
                    }
                    Uses.prototype.addUse = function (def, use) {
                        var entry = this.entries[def.id];
                        if (!entry) {
                            entry = this.entries[def.id] = { def: def, uses: [] };
                        }
                        pushUnique(entry.uses, use);
                    };
                    Uses.prototype.trace = function (writer) {
                        writer.enter("> Uses");
                        this.entries.forEach(function (entry) {
                            writer.writeLn(entry.def.id + " -> [" + entry.uses.map(toID).join(", ") + "] " + entry.def);
                        });
                        writer.leave("<");
                    };
                    Uses.prototype.replace = function (def, value) {
                        var entry = this.entries[def.id];
                        if (entry.uses.length === 0) {
                            return false;
                        }
                        var count = 0;
                        entry.uses.forEach(function (use) {
                            count += use.replaceInput(def, value);
                        });
                        release || assert(count >= entry.uses.length);
                        entry.uses = [];
                        return true;
                    };
                    Uses.prototype.updateUses = function (def, value, useEntries, writer) {
                        debug && writer.writeLn("Update " + def + " with " + value);
                        var entry = useEntries[def.id];
                        if (entry.uses.length === 0) {
                            return false;
                        }
                        debug && writer.writeLn("Replacing: " + def.id + " in [" + entry.uses.map(toID).join(", ") + "] with " + value.id);
                        var count = 0;
                        entry.uses.forEach(function (use) {
                            count += use.replaceInput(def, value);
                        });
                        release || assert(count >= entry.uses.length);
                        entry.uses = [];
                        return true;
                    };
                    return Uses;
                })();
                IR.Uses = Uses;
                var CFG = (function () {
                    function CFG() {
                        this.nextBlockID = 0;
                        this.blocks = [];
                    }
                    CFG.fromDFG = function (dfg) {
                        var cfg = new CFG();
                        release || assert(dfg && dfg instanceof DFG);
                        cfg.dfg = dfg;
                        var visited = [];
                        function buildEnd(end) {
                            if (end instanceof IR.Projection) {
                                end = end.project();
                            }
                            release || assert(end instanceof IR.End || end instanceof IR.Start, end);
                            if (visited[end.id]) {
                                return;
                            }
                            visited[end.id] = true;
                            var start = end.control;
                            if (!(start instanceof IR.Region)) {
                                start = end.control = new IR.Region(start);
                            }
                            var block = start.block = cfg.buildBlock(start, end);
                            if (start instanceof IR.Start) {
                                cfg.root = block;
                            }
                            for (var i = 0; i < start.predecessors.length; i++) {
                                var c = start.predecessors[i];
                                var d;
                                var trueProjection = false;
                                if (c instanceof IR.Projection) {
                                    d = c.project();
                                    trueProjection = c.type === 1 /* TRUE */;
                                }
                                else {
                                    d = c;
                                }
                                if (d instanceof IR.Region) {
                                    d = new IR.Jump(c);
                                    d = new IR.Projection(d, 1 /* TRUE */);
                                    start.predecessors[i] = d;
                                    d = d.project();
                                    trueProjection = true;
                                }
                                buildEnd(d);
                                var controlBlock = d.control.block;
                                if (d instanceof IR.Switch) {
                                    release || assert(isProjection(c, 0 /* CASE */));
                                    controlBlock.pushSuccessorAt(block, c.selector.value, true);
                                }
                                else if (trueProjection && controlBlock.successors.length > 0) {
                                    controlBlock.pushSuccessor(block, true);
                                    controlBlock.hasFlippedSuccessors = true;
                                }
                                else {
                                    controlBlock.pushSuccessor(block, true);
                                }
                            }
                        }
                        buildEnd(dfg.exit);
                        cfg.splitCriticalEdges();
                        cfg.exit = dfg.exit.control.block;
                        cfg.computeDominators(true);
                        return cfg;
                    };
                    CFG.prototype.buildRootAndExit = function () {
                        release || assert(!this.root && !this.exit);
                        if (this.blocks[0].predecessors.length > 0) {
                            this.root = new Block(this.nextBlockID++);
                            this.blocks.push(this.root);
                            this.root.pushSuccessor(this.blocks[0], true);
                        }
                        else {
                            this.root = this.blocks[0];
                        }
                        var exitBlocks = [];
                        for (var i = 0; i < this.blocks.length; i++) {
                            var block = this.blocks[i];
                            if (block.successors.length === 0) {
                                exitBlocks.push(block);
                            }
                        }
                        if (exitBlocks.length === 0) {
                            unexpected("Must have an exit block.");
                        }
                        else if (exitBlocks.length === 1 && exitBlocks[0] !== this.root) {
                            this.exit = exitBlocks[0];
                        }
                        else {
                            this.exit = new Block(this.nextBlockID++);
                            this.blocks.push(this.exit);
                            for (var i = 0; i < exitBlocks.length; i++) {
                                exitBlocks[i].pushSuccessor(this.exit, true);
                            }
                        }
                        release || assert(this.root && this.exit);
                        release || assert(this.root !== this.exit);
                    };
                    CFG.prototype.fromString = function (list, rootName) {
                        var cfg = this;
                        var names = cfg.blockNames || (cfg.blockNames = {});
                        var blocks = cfg.blocks;
                        var sets = list.replace(/\ /g, "").split(",");
                        sets.forEach(function (set) {
                            var edgeList = set.split("->");
                            var last = null;
                            for (var i = 0; i < edgeList.length; i++) {
                                var next = edgeList[i];
                                if (last) {
                                    buildEdge(last, next);
                                }
                                else {
                                    buildBlock(next);
                                }
                                last = next;
                            }
                        });
                        function buildBlock(name) {
                            var block = names[name];
                            if (block) {
                                return block;
                            }
                            names[name] = block = new Block(cfg.nextBlockID++);
                            block.name = name;
                            blocks.push(block);
                            return block;
                        }
                        function buildEdge(from, to) {
                            buildBlock(from).pushSuccessor(buildBlock(to), true);
                        }
                        release || assert(rootName && names[rootName]);
                        this.root = names[rootName];
                    };
                    CFG.prototype.buildBlock = function (start, end) {
                        var block = new Block(this.nextBlockID++, start, end);
                        this.blocks.push(block);
                        return block;
                    };
                    CFG.prototype.createBlockSet = function () {
                        if (!this.setConstructor) {
                            this.setConstructor = Shumway.BitSets.BitSetFunctor(this.blocks.length);
                        }
                        return new this.setConstructor();
                    };
                    CFG.prototype.computeReversePostOrder = function () {
                        if (this.order) {
                            return this.order;
                        }
                        var order = this.order = [];
                        this.depthFirstSearch(null, order.push.bind(order));
                        order.reverse();
                        for (var i = 0; i < order.length; i++) {
                            order[i].rpo = i;
                        }
                        return order;
                    };
                    CFG.prototype.depthFirstSearch = function (preFn, postFn) {
                        var visited = this.createBlockSet();
                        function visit(node) {
                            visited.set(node.id);
                            if (preFn)
                                preFn(node);
                            var successors = node.successors;
                            for (var i = 0, j = successors.length; i < j; i++) {
                                var s = successors[i];
                                if (!visited.get(s.id)) {
                                    visit(s);
                                }
                            }
                            if (postFn)
                                postFn(node);
                        }
                        visit(this.root);
                    };
                    CFG.prototype.computeDominators = function (apply) {
                        release || assert(this.root.predecessors.length === 0, "Root node " + this.root + " must not have predecessors.");
                        var dom = new Int32Array(this.blocks.length);
                        for (var i = 0; i < dom.length; i++) {
                            dom[i] = -1;
                        }
                        var map = this.createBlockSet();
                        function computeCommonDominator(a, b) {
                            map.clearAll();
                            while (a >= 0) {
                                map.set(a);
                                a = dom[a];
                            }
                            while (b >= 0 && !map.get(b)) {
                                b = dom[b];
                            }
                            return b;
                        }
                        function computeDominator(blockID, parentID) {
                            if (dom[blockID] < 0) {
                                dom[blockID] = parentID;
                            }
                            else {
                                dom[blockID] = computeCommonDominator(dom[blockID], parentID);
                            }
                        }
                        this.depthFirstSearch(function visit(block) {
                            var s = block.successors;
                            for (var i = 0, j = s.length; i < j; i++) {
                                computeDominator(s[i].id, block.id);
                            }
                        });
                        if (apply) {
                            for (var i = 0, j = this.blocks.length; i < j; i++) {
                                this.blocks[i].dominator = this.blocks[dom[i]];
                            }
                            function computeDominatorDepth(block) {
                                var dominatorDepth;
                                if (block.dominatorDepth !== undefined) {
                                    return block.dominatorDepth;
                                }
                                else if (!block.dominator) {
                                    dominatorDepth = 0;
                                }
                                else {
                                    dominatorDepth = computeDominatorDepth(block.dominator) + 1;
                                }
                                return block.dominatorDepth = dominatorDepth;
                            }
                            for (var i = 0, j = this.blocks.length; i < j; i++) {
                                computeDominatorDepth(this.blocks[i]);
                            }
                        }
                        return dom;
                    };
                    CFG.prototype.computeLoops = function () {
                        var active = this.createBlockSet();
                        var visited = this.createBlockSet();
                        var nextLoop = 0;
                        function makeLoopHeader(block) {
                            if (!block.isLoopHeader) {
                                release || assert(nextLoop < 32, "Can't handle too many loops, fall back on BitMaps if it's a problem.");
                                block.isLoopHeader = true;
                                block.loops = 1 << nextLoop;
                                nextLoop += 1;
                            }
                            release || assert(bitCount(block.loops) === 1);
                        }
                        function visit(block) {
                            if (visited.get(block.id)) {
                                if (active.get(block.id)) {
                                    makeLoopHeader(block);
                                }
                                return block.loops;
                            }
                            visited.set(block.id);
                            active.set(block.id);
                            var loops = 0;
                            for (var i = 0, j = block.successors.length; i < j; i++) {
                                loops |= visit(block.successors[i]);
                            }
                            if (block.isLoopHeader) {
                                release || assert(bitCount(block.loops) === 1);
                                loops &= ~block.loops;
                            }
                            block.loops = loops;
                            active.clear(block.id);
                            return loops;
                        }
                        var loop = visit(this.root);
                        release || assert(loop === 0);
                    };
                    CFG.prototype.computeUses = function () {
                        AVM2.enterTimeline("computeUses");
                        var writer = debug && new IndentingWriter();
                        debug && writer.enter("> Compute Uses");
                        var dfg = this.dfg;
                        var uses = new Uses();
                        dfg.forEachInPreOrderDepthFirstSearch(function (use) {
                            use.visitInputs(function (def) {
                                uses.addUse(def, use);
                            });
                        });
                        if (debug) {
                            writer.enter("> Uses");
                            uses.entries.forEach(function (entry) {
                                writer.writeLn(entry.def.id + " -> [" + entry.uses.map(toID).join(", ") + "] " + entry.def);
                            });
                            writer.leave("<");
                            writer.leave("<");
                        }
                        AVM2.leaveTimeline();
                        return uses;
                    };
                    CFG.prototype.verify = function () {
                        var writer = debug && new IndentingWriter();
                        debug && writer.enter("> Verify");
                        var order = this.computeReversePostOrder();
                        order.forEach(function (block) {
                            if (block.phis) {
                                block.phis.forEach(function (phi) {
                                    release || assert(phi.control === block.region);
                                    release || assert(phi.args.length === block.predecessors.length);
                                });
                            }
                        });
                        debug && writer.leave("<");
                    };
                    CFG.prototype.optimizePhis = function () {
                        var writer = debug && new IndentingWriter();
                        debug && writer.enter("> Optimize Phis");
                        var phis = [];
                        var useEntries = this.computeUses().entries;
                        useEntries.forEach(function (entry) {
                            if (isPhi(entry.def)) {
                                phis.push(entry.def);
                            }
                        });
                        debug && writer.writeLn("Trying to optimize " + phis.length + " phis.");
                        function updateUses(def, value) {
                            debug && writer.writeLn("Update " + def + " with " + value);
                            var entry = useEntries[def.id];
                            if (entry.uses.length === 0) {
                                return false;
                            }
                            debug && writer.writeLn("Replacing: " + def.id + " in [" + entry.uses.map(toID).join(", ") + "] with " + value.id);
                            var count = 0;
                            var entryUses = entry.uses;
                            for (var i = 0, j = entryUses.length; i < j; i++) {
                                count += entryUses[i].replaceInput(def, value);
                            }
                            release || assert(count >= entry.uses.length);
                            entry.uses = [];
                            return true;
                        }
                        function simplify(phi, args) {
                            args = unique(args);
                            if (args.length === 1) {
                                return args[0];
                            }
                            else {
                                if (args.length === 2) {
                                    if (args[0] === phi) {
                                        return args[1];
                                    }
                                    else if (args[1] === phi) {
                                        return args[0];
                                    }
                                    return phi;
                                }
                            }
                            return phi;
                        }
                        var count = 0;
                        var iterations = 0;
                        var changed = true;
                        while (changed) {
                            iterations++;
                            changed = false;
                            phis.forEach(function (phi) {
                                var value = simplify(phi, phi.args);
                                if (value !== phi) {
                                    if (updateUses(phi, value)) {
                                        changed = true;
                                        count++;
                                    }
                                }
                            });
                        }
                        if (debug) {
                            writer.writeLn("Simplified " + count + " phis, in " + iterations + " iterations.");
                            writer.leave("<");
                        }
                    };
                    CFG.prototype.splitCriticalEdges = function () {
                        var writer = debug && new IndentingWriter();
                        var blocks = this.blocks;
                        var criticalEdges = [];
                        debug && writer.enter("> Splitting Critical Edges");
                        for (var i = 0; i < blocks.length; i++) {
                            var successors = blocks[i].successors;
                            if (successors.length > 1) {
                                for (var j = 0; j < successors.length; j++) {
                                    if (successors[j].predecessors.length > 1) {
                                        criticalEdges.push({ from: blocks[i], to: successors[j] });
                                    }
                                }
                            }
                        }
                        var criticalEdgeCount = criticalEdges.length;
                        if (criticalEdgeCount && debug) {
                            writer.writeLn("Splitting: " + criticalEdgeCount);
                            this.trace(writer);
                        }
                        var edge;
                        while ((edge = criticalEdges.pop())) {
                            var fromIndex = edge.from.successors.indexOf(edge.to);
                            var toIndex = edge.to.predecessors.indexOf(edge.from);
                            release || assert(fromIndex >= 0 && toIndex >= 0);
                            debug && writer.writeLn("Splitting critical edge: " + edge.from + " -> " + edge.to);
                            var toBlock = edge.to;
                            var toRegion = toBlock.region;
                            var control = toRegion.predecessors[toIndex];
                            var region = new IR.Region(control);
                            var jump = new IR.Jump(region);
                            var block = this.buildBlock(region, jump);
                            toRegion.predecessors[toIndex] = new IR.Projection(jump, 1 /* TRUE */);
                            var fromBlock = edge.from;
                            fromBlock.successors[fromIndex] = block;
                            block.pushPredecessor(fromBlock);
                            block.pushSuccessor(toBlock);
                            toBlock.predecessors[toIndex] = block;
                        }
                        if (criticalEdgeCount && debug) {
                            this.trace(writer);
                        }
                        if (criticalEdgeCount && !release) {
                            release || assert(this.splitCriticalEdges() === 0);
                        }
                        debug && writer.leave("<");
                        return criticalEdgeCount;
                    };
                    CFG.prototype.allocateVariables = function () {
                        var writer = debug && new IndentingWriter();
                        debug && writer.enter("> Allocating Virtual Registers");
                        var order = this.computeReversePostOrder();
                        function allocate(node) {
                            if (isProjection(node, 3 /* STORE */)) {
                                return;
                            }
                            if (node instanceof IR.SetProperty) {
                                return;
                            }
                            if (node instanceof IR.Value) {
                                node.variable = new IR.Variable("v" + node.id);
                                debug && writer.writeLn("Allocated: " + node.variable + " to " + node);
                            }
                        }
                        order.forEach(function (block) {
                            block.nodes.forEach(allocate);
                            if (block.phis) {
                                block.phis.forEach(allocate);
                            }
                        });
                        var blockMoves = [];
                        for (var i = 0; i < order.length; i++) {
                            var block = order[i];
                            var phis = block.phis;
                            var predecessors = block.predecessors;
                            if (phis) {
                                for (var j = 0; j < phis.length; j++) {
                                    var phi = phis[j];
                                    debug && writer.writeLn("Emitting moves for: " + phi);
                                    var phiArguments = phi.args;
                                    release || assert(predecessors.length === phiArguments.length);
                                    for (var k = 0; k < predecessors.length; k++) {
                                        var predecessor = predecessors[k];
                                        var argument = phiArguments[k];
                                        if (argument.abstract || isProjection(argument, 3 /* STORE */)) {
                                            continue;
                                        }
                                        var moves = blockMoves[predecessor.id] || (blockMoves[predecessor.id] = []);
                                        argument = argument.variable || argument;
                                        if (phi.variable !== argument) {
                                            moves.push(new IR.Move(phi.variable, argument));
                                        }
                                    }
                                }
                            }
                        }
                        var blocks = this.blocks;
                        blockMoves.forEach(function (moves, blockID) {
                            var block = blocks[blockID];
                            var temporary = 0;
                            debug && writer.writeLn(block + " Moves: " + moves);
                            while (moves.length) {
                                for (var i = 0; i < moves.length; i++) {
                                    var move = moves[i];
                                    for (var j = 0; j < moves.length; j++) {
                                        if (i === j) {
                                            continue;
                                        }
                                        if (moves[j].from === move.to) {
                                            move = null;
                                            break;
                                        }
                                    }
                                    if (move) {
                                        moves.splice(i--, 1);
                                        block.append(move);
                                    }
                                }
                                if (moves.length) {
                                    debug && writer.writeLn("Breaking Cycle");
                                    var move = moves[0];
                                    var temp = new IR.Variable("t" + temporary++);
                                    blocks[blockID].append(new IR.Move(temp, move.to));
                                    for (var i = 1; i < moves.length; i++) {
                                        if (moves[i].from === move.to) {
                                            moves[i].from = temp;
                                        }
                                    }
                                }
                            }
                        });
                        debug && writer.leave("<");
                    };
                    CFG.prototype.scheduleEarly = function () {
                        var debugScheduler = false;
                        var writer = debugScheduler && new IndentingWriter();
                        debugScheduler && writer.enter("> Schedule Early");
                        var cfg = this;
                        var dfg = this.dfg;
                        var scheduled = [];
                        var roots = [];
                        dfg.forEachInPreOrderDepthFirstSearch(function (node) {
                            if (node instanceof IR.Region || node instanceof IR.Jump) {
                                return;
                            }
                            if (node.control) {
                                roots.push(node);
                            }
                            if (isPhi(node)) {
                                node.args.forEach(function (input) {
                                    if (shouldFloat(input)) {
                                        input.mustNotFloat = true;
                                    }
                                });
                            }
                        });
                        if (debugScheduler) {
                            roots.forEach(function (node) {
                                writer && writer.writeLn("Root: " + node);
                            });
                        }
                        for (var i = 0; i < roots.length; i++) {
                            var root = roots[i];
                            if (root instanceof IR.Phi) {
                                var block = root.control.block;
                                (block.phis || (block.phis = [])).push(root);
                            }
                            if (root.control) {
                                schedule(root);
                            }
                        }
                        function isScheduled(node) {
                            return scheduled[node.id];
                        }
                        function shouldFloat(node) {
                            if (node.mustNotFloat || node.shouldNotFloat) {
                                return false;
                            }
                            if (node.mustFloat || node.shouldFloat) {
                                return true;
                            }
                            if (node instanceof IR.Parameter || node instanceof IR.This || node instanceof IR.Arguments) {
                                return true;
                            }
                            return node instanceof IR.Binary || node instanceof IR.Unary || node instanceof IR.Parameter;
                        }
                        function append(node) {
                            release || assert(!isScheduled(node), "Already scheduled " + node);
                            scheduled[node.id] = true;
                            release || assert(node.control, node);
                            if (shouldFloat(node)) {
                            }
                            else {
                                node.control.block.append(node);
                            }
                        }
                        function scheduleIn(node, region) {
                            release || assert(!node.control, node);
                            release || assert(!isScheduled(node));
                            release || assert(region);
                            debugScheduler && writer.writeLn("Scheduled: " + node + " in " + region);
                            node.control = region;
                            append(node);
                        }
                        function schedule(node) {
                            debugScheduler && writer.enter("> Schedule: " + node);
                            var inputs = [];
                            node.visitInputs(function (input) {
                                if (isConstant(input)) {
                                    {
                                        return;
                                    }
                                }
                                if (isValue(input)) {
                                    inputs.push(followProjection(input));
                                }
                            });
                            debugScheduler && writer.writeLn("Inputs: [" + inputs.map(toID) + "], length: " + inputs.length);
                            for (var i = 0; i < inputs.length; i++) {
                                var input = inputs[i];
                                if (isNotPhi(input) && !isScheduled(input)) {
                                    schedule(input);
                                }
                            }
                            if (node.control) {
                                if (node instanceof IR.End || node instanceof IR.Phi || node instanceof IR.Start || isScheduled(node)) {
                                }
                                else {
                                    append(node);
                                }
                            }
                            else {
                                if (inputs.length) {
                                    var x = inputs[0].control;
                                    for (var i = 1; i < inputs.length; i++) {
                                        var y = inputs[i].control;
                                        if (x.block.dominatorDepth < y.block.dominatorDepth) {
                                            x = y;
                                        }
                                    }
                                    scheduleIn(node, x);
                                }
                                else {
                                    scheduleIn(node, cfg.root.region);
                                }
                            }
                            debugScheduler && writer.leave("<");
                        }
                        debugScheduler && writer.leave("<");
                        roots.forEach(function (node) {
                            node = followProjection(node);
                            if (node === dfg.start || node instanceof IR.Region) {
                                return;
                            }
                            release || assert(node.control, "Node is not scheduled: " + node);
                        });
                    };
                    CFG.prototype.trace = function (writer) {
                        var visited = [];
                        var blocks = [];
                        function next(block) {
                            if (!visited[block.id]) {
                                visited[block.id] = true;
                                blocks.push(block);
                                block.visitSuccessors(next);
                            }
                        }
                        var root = this.root;
                        var exit = this.exit;
                        next(root);
                        function colorOf(block) {
                            return "black";
                        }
                        function styleOf(block) {
                            return "filled";
                        }
                        function shapeOf(block) {
                            release || assert(block);
                            if (block === root) {
                                return "house";
                            }
                            else if (block === exit) {
                                return "invhouse";
                            }
                            return "box";
                        }
                        writer.writeLn("");
                        writer.enter("digraph CFG {");
                        writer.writeLn("graph [bgcolor = gray10];");
                        writer.writeLn("edge [fontname = Consolas, fontsize = 11, color = white, fontcolor = white];");
                        writer.writeLn("node [shape = box, fontname = Consolas, fontsize = 11, color = white, fontcolor = white, style = filled];");
                        writer.writeLn("rankdir = TB;");
                        blocks.forEach(function (block) {
                            var loopInfo = "";
                            var blockInfo = "";
                            var intervalInfo = "";
                            if (block.loops !== undefined) {
                            }
                            if (block.name !== undefined) {
                                blockInfo += " " + block.name;
                            }
                            if (block.rpo !== undefined) {
                                blockInfo += " O: " + block.rpo;
                            }
                            writer.writeLn("B" + block.id + " [label = \"B" + block.id + blockInfo + loopInfo + "\", fillcolor = \"" + colorOf(block) + "\", shape=" + shapeOf(block) + ", style=" + styleOf(block) + "];");
                        });
                        blocks.forEach(function (block) {
                            block.visitSuccessors(function (successor) {
                                writer.writeLn("B" + block.id + " -> " + "B" + successor.id);
                            });
                            if (block.dominator) {
                                writer.writeLn("B" + block.id + " -> " + "B" + block.dominator.id + " [color = orange];");
                            }
                            if (block.follow) {
                                writer.writeLn("B" + block.id + " -> " + "B" + block.follow.id + " [color = purple];");
                            }
                        });
                        writer.leave("}");
                        writer.writeLn("");
                    };
                    return CFG;
                })();
                IR.CFG = CFG;
                var PeepholeOptimizer = (function () {
                    function PeepholeOptimizer() {
                    }
                    PeepholeOptimizer.prototype.foldUnary = function (node, truthy) {
                        release || assert(node instanceof IR.Unary);
                        if (isConstant(node.argument)) {
                            return new IR.Constant(node.operator.evaluate(node.argument.value));
                        }
                        if (truthy) {
                            var argument = this.fold(node.argument, true);
                            if (node.operator === IR.Operator.TRUE) {
                                return argument;
                            }
                            if (argument instanceof IR.Unary) {
                                if (node.operator === IR.Operator.FALSE && argument.operator === IR.Operator.FALSE) {
                                    return argument.argument;
                                }
                            }
                            else {
                                return new IR.Unary(node.operator, argument);
                            }
                        }
                        return node;
                    };
                    PeepholeOptimizer.prototype.foldBinary = function (node, truthy) {
                        release || assert(node instanceof IR.Binary);
                        if (isConstant(node.left) && isConstant(node.right)) {
                            return new IR.Constant(node.operator.evaluate(node.left.value, node.right.value));
                        }
                        return node;
                    };
                    PeepholeOptimizer.prototype.fold = function (node, truthy) {
                        if (node instanceof IR.Unary) {
                            return this.foldUnary(node, truthy);
                        }
                        else if (node instanceof IR.Binary) {
                            return this.foldBinary(node, truthy);
                        }
                        return node;
                    };
                    return PeepholeOptimizer;
                })();
                IR.PeepholeOptimizer = PeepholeOptimizer;
            })(IR = Compiler.IR || (Compiler.IR = {}));
        })(Compiler = AVM2.Compiler || (AVM2.Compiler = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var Compiler;
        (function (Compiler) {
            var Multiname = Shumway.AVM2.ABC.Multiname;
            var InstanceInfo = Shumway.AVM2.ABC.InstanceInfo;
            var notImplemented = Shumway.Debug.notImplemented;
            var assert = Shumway.Debug.assert;
            var assertUnreachable = Shumway.Debug.assertUnreachable;
            var top = Shumway.ArrayUtilities.top;
            var unique = Shumway.ArrayUtilities.unique;
            var Runtime = Shumway.AVM2.Runtime;
            var GlobalMultinameResolver = Shumway.AVM2.Runtime.GlobalMultinameResolver;
            var counter = Shumway.Metrics.Counter.instance;
            var Node = Compiler.IR.Node;
            var Start = Compiler.IR.Start;
            var Region = Compiler.IR.Region;
            var Null = Compiler.IR.Null;
            var Undefined = Compiler.IR.Undefined;
            var True = Compiler.IR.True;
            var False = Compiler.IR.False;
            var This = Compiler.IR.This;
            var Projection = Compiler.IR.Projection;
            var ProjectionType = Compiler.IR.ProjectionType;
            var Binary = Compiler.IR.Binary;
            var Unary = Compiler.IR.Unary;
            var Constant = Compiler.IR.Constant;
            var Call = Compiler.IR.Call;
            var Phi = Compiler.IR.Phi;
            var Stop = Compiler.IR.Stop;
            var Operator = Compiler.IR.Operator;
            var Parameter = Compiler.IR.Parameter;
            var NewArray = Compiler.IR.NewArray;
            var NewObject = Compiler.IR.NewObject;
            var KeyValuePair = Compiler.IR.KeyValuePair;
            var isConstant = Compiler.IR.isConstant;
            var writer = new Shumway.IndentingWriter();
            var peepholeOptimizer = new Compiler.IR.PeepholeOptimizer();
            var useTypeOfForDefaultArgumentChecking = false;
            var emitCoerceNonPrimitiveParameters = false;
            var emitCoerceNonPrimitive = false;
            var emitAsType = true;
            var emitAsTypeLate = true;
            var State = (function () {
                function State(index) {
                    if (index === void 0) { index = 0; }
                    this.id = State._nextID += 1;
                    this.index = index;
                    this.local = [];
                    this.stack = [];
                    this.scope = [];
                    this.store = Undefined;
                    this.loads = [];
                    this.saved = Undefined;
                }
                State.prototype.clone = function (index) {
                    var s = new State();
                    s.index = index !== undefined ? index : this.index;
                    s.local = this.local.slice(0);
                    s.stack = this.stack.slice(0);
                    s.scope = this.scope.slice(0);
                    s.loads = this.loads.slice(0);
                    s.saved = this.saved;
                    s.store = this.store;
                    return s;
                };
                State.prototype.matches = function (other) {
                    return this.stack.length === other.stack.length && this.scope.length === other.scope.length && this.local.length === other.local.length;
                };
                State.prototype.makeLoopPhis = function (control, dirtyLocals) {
                    var s = new State();
                    release || assert(control);
                    function makePhi(x) {
                        var phi = new Phi(control, x);
                        phi.isLoop = true;
                        return phi;
                    }
                    s.index = this.index;
                    s.local = this.local.map(function (v, i) {
                        if (dirtyLocals[i]) {
                            return makePhi(v);
                        }
                        return v;
                    });
                    s.stack = this.stack.map(makePhi);
                    s.scope = this.scope.map(makePhi);
                    s.loads = this.loads.slice(0);
                    s.saved = this.saved;
                    s.store = makePhi(this.store);
                    return s;
                };
                State.tryOptimizePhi = function (x) {
                    if (x instanceof Phi) {
                        var phi = x;
                        if (phi.isLoop) {
                            return phi;
                        }
                        var args = unique(phi.args);
                        if (args.length === 1) {
                            phi.seal();
                            AVM2.countTimeline("Builder: OptimizedPhi");
                            return args[0];
                        }
                    }
                    return x;
                };
                State.prototype.optimize = function () {
                    this.local = this.local.map(State.tryOptimizePhi);
                    this.stack = this.stack.map(State.tryOptimizePhi);
                    this.scope = this.scope.map(State.tryOptimizePhi);
                    this.saved = State.tryOptimizePhi(this.saved);
                    this.store = State.tryOptimizePhi(this.store);
                };
                State.mergeValue = function (control, a, b) {
                    var phi = (a instanceof Phi && a.control === control ? a : new Phi(control, a));
                    phi.pushValue(b);
                    return phi;
                };
                State.mergeValues = function (control, a, b) {
                    for (var i = 0; i < a.length; i++) {
                        a[i] = State.mergeValue(control, a[i], b[i]);
                    }
                };
                State.prototype.merge = function (control, other) {
                    release || assert(control);
                    release || assert(this.matches(other), this + " !== " + other);
                    State.mergeValues(control, this.local, other.local);
                    State.mergeValues(control, this.stack, other.stack);
                    State.mergeValues(control, this.scope, other.scope);
                    this.store = State.mergeValue(control, this.store, other.store);
                    this.store.abstract = true;
                };
                State.prototype.trace = function (writer) {
                    writer.writeLn(this.toString());
                };
                State.toBriefString = function (x) {
                    if (x instanceof Node) {
                        return x.toString(true);
                    }
                    return x;
                };
                State.prototype.toString = function () {
                    return "<" + String(this.id + " @ " + this.index).padRight(' ', 10) + (" M: " + State.toBriefString(this.store)).padRight(' ', 14) + (" X: " + State.toBriefString(this.saved)).padRight(' ', 14) + (" $: " + this.scope.map(State.toBriefString).join(", ")).padRight(' ', 20) + (" L: " + this.local.map(State.toBriefString).join(", ")).padRight(' ', 40) + (" S: " + this.stack.map(State.toBriefString).join(", ")).padRight(' ', 60);
                };
                State._nextID = 0;
                return State;
            })();
            function asConstant(node) {
                release || assert(node instanceof Constant);
                return node;
            }
            function isNumericConstant(node) {
                return node instanceof Constant && Shumway.isNumeric(node.value);
            }
            function isStringConstant(node) {
                return node instanceof Constant && Shumway.isString(node.value);
            }
            function isMultinameConstant(node) {
                return node instanceof Constant && node.value instanceof Multiname;
            }
            function hasNumericType(node) {
                if (isNumericConstant(node)) {
                    return true;
                }
                return node.ty && node.ty.isNumeric();
            }
            function typesAreEqual(a, b) {
                if (hasNumericType(a) && hasNumericType(b) || hasStringType(a) && hasStringType(b)) {
                    return true;
                }
                return false;
            }
            function hasStringType(node) {
                if (isStringConstant(node)) {
                    return true;
                }
                return node.ty && node.ty.isString();
            }
            function constant(value) {
                return new Constant(value);
            }
            function qualifiedNameConstant(name) {
                return constant(Multiname.getQualifiedName(name));
            }
            function operatorFromOP(op) {
                switch (op) {
                    case 161 /* subtract */:
                        return Operator.SUB;
                    case 162 /* multiply */:
                        return Operator.MUL;
                    case 163 /* divide */:
                        return Operator.DIV;
                    case 164 /* modulo */:
                        return Operator.MOD;
                    case 165 /* lshift */:
                        return Operator.LSH;
                    case 166 /* rshift */:
                        return Operator.RSH;
                    case 167 /* urshift */:
                        return Operator.URSH;
                    case 168 /* bitand */:
                        return Operator.AND;
                    case 169 /* bitor */:
                        return Operator.OR;
                    case 170 /* bitxor */:
                        return Operator.XOR;
                    case 20 /* ifne */:
                        return Operator.NE;
                    case 26 /* ifstrictne */:
                        return Operator.SNE;
                    case 19 /* ifeq */:
                    case 171 /* equals */:
                        return Operator.EQ;
                    case 25 /* ifstricteq */:
                    case 172 /* strictequals */:
                        return Operator.SEQ;
                    case 21 /* iflt */:
                    case 173 /* lessthan */:
                        return Operator.LT;
                    case 22 /* ifle */:
                    case 174 /* lessequals */:
                        return Operator.LE;
                    case 23 /* ifgt */:
                    case 175 /* greaterthan */:
                        return Operator.GT;
                    case 24 /* ifge */:
                    case 176 /* greaterequals */:
                        return Operator.GE;
                    case 144 /* negate */:
                        return Operator.NEG;
                    case 196 /* negate_i */:
                        return Operator.NEG;
                    case 197 /* add_i */:
                        return Operator.ADD;
                    case 198 /* subtract_i */:
                        return Operator.SUB;
                    case 199 /* multiply_i */:
                        return Operator.MUL;
                    case 17 /* iftrue */:
                        return Operator.TRUE;
                    case 18 /* iffalse */:
                        return Operator.FALSE;
                    case 150 /* not */:
                        return Operator.FALSE;
                    case 151 /* bitnot */:
                        return Operator.BITWISE_NOT;
                    default:
                        assertUnreachable('Invalid operator op: ' + op);
                }
            }
            function getJSPropertyWithState(state, object, path) {
                release || assert(Shumway.isString(path));
                var names = path.split(".");
                var node = object;
                for (var i = 0; i < names.length; i++) {
                    node = new Compiler.IR.GetProperty(null, state.store, node, constant(names[i]));
                    node.shouldFloat = true;
                    state.loads.push(node);
                }
                return node;
            }
            function globalProperty(name) {
                var node = new Compiler.IR.GlobalProperty(name);
                node.mustFloat = true;
                return node;
            }
            function warn(message) {
            }
            function unary(operator, argument) {
                var node = new Unary(operator, argument);
                if (peepholeOptimizer) {
                    node = peepholeOptimizer.fold(node);
                }
                return node;
            }
            function binary(operator, left, right) {
                var node = new Binary(operator, left, right);
                if ((operator === Operator.EQ || operator === Operator.NE)) {
                    if (left.ty && left.ty.isStrictComparableWith(right.ty)) {
                        node.operator = operator === Operator.EQ ? Operator.SEQ : Operator.SNE;
                    }
                    else if ((!left.ty || left.ty.canBeXML()) || (!right.ty || right.ty.canBeXML())) {
                        node = new Call(null, null, globalProperty("asEquals"), null, [left, right], 0);
                        if (operator === Operator.NE) {
                            node = unary(Operator.FALSE, node);
                        }
                    }
                }
                if (peepholeOptimizer) {
                    node = peepholeOptimizer.fold(node);
                }
                return node;
            }
            function coerceInt(value) {
                return binary(Operator.OR, value, constant(0));
            }
            function coerceUint(value) {
                return binary(Operator.URSH, value, constant(0));
            }
            function coerceNumber(value) {
                if (hasNumericType(value)) {
                    return value;
                }
                return unary(Operator.PLUS, value);
            }
            function coerceBoolean(value) {
                return unary(Operator.FALSE, unary(Operator.FALSE, value));
            }
            function shouldNotFloat(node) {
                node.shouldNotFloat = true;
                return node;
            }
            function shouldFloat(node) {
                release || assert(!(node instanceof Compiler.IR.GetProperty), "Cannot float node : " + node);
                node.shouldFloat = true;
                return node;
            }
            function mustFloat(node) {
                node.mustFloat = true;
                return node;
            }
            function callPure(callee, object, args) {
                return new Call(null, null, callee, object, args, 4 /* PRISTINE */);
            }
            function callGlobalProperty(name, value) {
                return callPure(globalProperty(name), null, [value]);
            }
            function convertString(value) {
                if (isStringConstant(value)) {
                    return value;
                }
                return callPure(globalProperty("String"), null, [value]);
            }
            function coerceString(value) {
                if (isStringConstant(value)) {
                    return value;
                }
                else if (isConstant(value)) {
                    return new Constant(Runtime.asCoerceString(asConstant(value).value));
                }
                return callPure(globalProperty("asCoerceString"), null, [value]);
            }
            function escapeXMLAttribute(value) {
                if (isConstant(value)) {
                    return new Constant(Runtime.escapeXMLAttribute(asConstant(value).value));
                }
                return callPure(globalProperty("escapeXMLAttribute"), null, [value]);
            }
            function escapeXMLElement(value) {
                if (isConstant(value)) {
                    return new Constant(Runtime.escapeXMLElement(asConstant(value).value));
                }
                return callPure(globalProperty("escapeXMLElement"), null, [value]);
            }
            var coerceObject = callGlobalProperty.bind(null, "asCoerceObject");
            var coercers = Object.create(null);
            coercers[Multiname.Int] = coerceInt;
            coercers[Multiname.Uint] = coerceUint;
            coercers[Multiname.Number] = coerceNumber;
            coercers[Multiname.String] = coerceString;
            coercers[Multiname.Object] = coerceObject;
            coercers[Multiname.Boolean] = coerceBoolean;
            function getCoercerForType(multiname) {
                release || assert(multiname instanceof Multiname);
                return coercers[Multiname.getQualifiedName(multiname)];
            }
            var callableConstructors = Object.create(null);
            callableConstructors[Multiname.Int] = coerceInt;
            callableConstructors[Multiname.Uint] = coerceUint;
            callableConstructors[Multiname.Number] = callGlobalProperty.bind(null, "Number");
            callableConstructors[Multiname.String] = callGlobalProperty.bind(null, "String");
            callableConstructors[Multiname.Object] = callGlobalProperty.bind(null, "Object");
            callableConstructors[Multiname.Boolean] = callGlobalProperty.bind(null, "Boolean");
            function getCallableConstructorForType(multiname) {
                release || assert(multiname instanceof Multiname);
                return callableConstructors[Multiname.getQualifiedName(multiname)];
            }
            var callObject = callGlobalProperty.bind(null, "Object");
            var BlockBuilder = (function () {
                function BlockBuilder(builder, region, block, state) {
                    this.builder = builder;
                    this.region = region;
                    this.block = block;
                    this.state = state;
                    this.abc = builder.abc;
                    this.methodInfoConstant = builder.methodInfoConstant;
                    this.bytecodes = builder.methodInfo.analysis.bytecodes;
                    this.constantPool = builder.abc.constantPool;
                    this.traceBuilder = builder.traceBuilder;
                    this.methodInfo = builder.methodInfo;
                }
                BlockBuilder.prototype.popMultiname = function () {
                    var multiname = this.constantPool.multinames[this.bc.index];
                    var namespaces, name, flags;
                    if (multiname.isRuntimeName()) {
                        name = this.state.stack.pop();
                        flags = constant(0);
                    }
                    else {
                        name = constant(multiname.name);
                        flags = constant(multiname.flags);
                    }
                    if (multiname.isRuntimeNamespace()) {
                        namespaces = shouldFloat(new NewArray(this.region, [this.state.stack.pop()]));
                    }
                    else {
                        namespaces = constant(multiname.namespaces);
                    }
                    return new Compiler.IR.ASMultiname(namespaces, name, flags);
                };
                BlockBuilder.prototype.setIfStops = function (predicate) {
                    release || assert(!this.stops);
                    var _if = new Compiler.IR.If(this.region, predicate);
                    this.stops = [{
                        control: new Projection(_if, 2 /* FALSE */),
                        target: this.bytecodes[this.bc.position + 1],
                        state: this.state
                    }, {
                        control: new Projection(_if, 1 /* TRUE */),
                        target: this.bc.target,
                        state: this.state
                    }];
                };
                BlockBuilder.prototype.setJumpStop = function () {
                    release || assert(!this.stops);
                    this.stops = [{
                        control: this.region,
                        target: this.bc.target,
                        state: this.state
                    }];
                };
                BlockBuilder.prototype.setThrowStop = function () {
                    release || assert(!this.stops);
                    this.stops = [];
                };
                BlockBuilder.prototype.setReturnStop = function () {
                    release || assert(!this.stops);
                    this.stops = [];
                };
                BlockBuilder.prototype.setSwitchStops = function (determinant) {
                    release || assert(!this.stops);
                    if (this.bc.targets.length > 2) {
                        this.stops = [];
                        var _switch = new Compiler.IR.Switch(this.region, determinant);
                        for (var i = 0; i < this.bc.targets.length; i++) {
                            this.stops.push({
                                control: new Projection(_switch, 0 /* CASE */, constant(i)),
                                target: this.bc.targets[i],
                                state: this.state
                            });
                        }
                    }
                    else {
                        release || assert(this.bc.targets.length === 2);
                        var predicate = binary(Operator.SEQ, determinant, constant(0));
                        var _if = new Compiler.IR.If(this.region, predicate);
                        this.stops = [{
                            control: new Projection(_if, 2 /* FALSE */),
                            target: this.bc.targets[1],
                            state: this.state
                        }, {
                            control: new Projection(_if, 1 /* TRUE */),
                            target: this.bc.targets[0],
                            state: this.state
                        }];
                    }
                };
                BlockBuilder.prototype.savedScope = function () {
                    return this.state.saved;
                };
                BlockBuilder.prototype.topScope = function (depth) {
                    var scope = this.state.scope;
                    if (depth !== undefined) {
                        if (depth < scope.length) {
                            return scope[scope.length - 1 - depth];
                        }
                        else if (depth === scope.length) {
                            return this.savedScope();
                        }
                        else {
                            var s = this.savedScope();
                            var savedScopeDepth = depth - scope.length;
                            for (var i = 0; i < savedScopeDepth; i++) {
                                s = getJSPropertyWithState(this.state, s, "parent");
                            }
                            return s;
                        }
                    }
                    if (scope.length > 0) {
                        return top(scope);
                    }
                    return this.savedScope();
                };
                BlockBuilder.prototype.getGlobalScope = function () {
                    var ti = this.bc.ti;
                    if (ti && ti.object) {
                        return constant(ti.object);
                    }
                    return new Compiler.IR.ASGlobal(null, this.savedScope());
                };
                BlockBuilder.prototype.getScopeObject = function (scope) {
                    if (scope instanceof Compiler.IR.ASScope) {
                        return scope.object;
                    }
                    return getJSPropertyWithState(this.state, scope, "object");
                };
                BlockBuilder.prototype.findProperty = function (multiname, strict) {
                    var ti = this.bc.ti;
                    var slowPath = new Compiler.IR.ASFindProperty(this.region, this.state.store, this.topScope(), multiname, this.methodInfoConstant, strict);
                    if (ti) {
                        if (ti.object) {
                            if (ti.object instanceof Shumway.AVM2.Runtime.Global && !ti.object.isExecuting()) {
                                warn("Can't optimize findProperty " + multiname + ", global object is not yet executed or executing.");
                                return slowPath;
                            }
                            return constant(ti.object);
                        }
                        else if (ti.scopeDepth !== undefined) {
                            return this.getScopeObject(this.topScope(ti.scopeDepth));
                        }
                    }
                    warn("Can't optimize findProperty " + multiname);
                    return slowPath;
                };
                BlockBuilder.prototype.coerce = function (multiname, value) {
                    if (false && isConstant(value)) {
                        return constant(Runtime.asCoerceByMultiname(this.methodInfo, multiname, value.value));
                    }
                    else {
                        var coercer = getCoercerForType(multiname);
                        if (coercer) {
                            return coercer(value);
                        }
                    }
                    if (emitCoerceNonPrimitive) {
                        return this.call(globalProperty("asCoerceByMultiname"), null, [this.methodInfoConstant, constant(multiname), value]);
                    }
                    return value;
                };
                BlockBuilder.prototype.store = function (node) {
                    var state = this.state;
                    state.store = new Projection(node, 3 /* STORE */);
                    node.loads = state.loads.slice(0);
                    state.loads.length = 0;
                    return node;
                };
                BlockBuilder.prototype.load = function (node) {
                    var state = this.state;
                    state.loads.push(node);
                    return node;
                };
                BlockBuilder.prototype.call = function (callee, object, args) {
                    return this.store(new Call(this.region, this.state.store, callee, object, args, 4 /* PRISTINE */));
                };
                BlockBuilder.prototype.callCall = function (callee, object, args) {
                    return this.store(new Call(this.region, this.state.store, callee, object, args, 16 /* AS_CALL */));
                };
                BlockBuilder.prototype.callProperty = function (object, multiname, args, isLex) {
                    var ti = this.bc.ti;
                    var region = this.region;
                    var state = this.state;
                    if (ti && ti.trait) {
                        if (ti.trait.isMethod()) {
                            var openQn;
                            if (ti.trait.holder instanceof InstanceInfo && ti.trait.holder.isInterface()) {
                                openQn = Multiname.getPublicQualifiedName(Multiname.getName(ti.trait.name));
                            }
                            else {
                                openQn = Multiname.getQualifiedName(ti.trait.name);
                            }
                            openQn = Runtime.VM_OPEN_METHOD_PREFIX + openQn;
                            return this.store(new Compiler.IR.CallProperty(region, state.store, object, constant(openQn), args, 4 /* PRISTINE */));
                        }
                        else if (ti.trait.isClass()) {
                            var constructor = getCallableConstructorForType(ti.trait.name);
                            if (constructor) {
                                return constructor(args[0]);
                            }
                            var qn = Multiname.getQualifiedName(ti.trait.name);
                            return this.store(new Compiler.IR.CallProperty(region, state.store, object, constant(qn), args, 16 /* AS_CALL */));
                        }
                    }
                    var mn = this.resolveMultinameGlobally(multiname);
                    if (mn) {
                        return this.store(new Compiler.IR.ASCallProperty(region, state.store, object, constant(Multiname.getQualifiedName(mn)), args, 4 /* PRISTINE */ | 2 /* RESOLVED */, isLex));
                    }
                    return this.store(new Compiler.IR.ASCallProperty(region, state.store, object, multiname, args, 4 /* PRISTINE */, isLex));
                };
                BlockBuilder.prototype.getProperty = function (object, multiname, getOpenMethod) {
                    var ti = this.bc.ti;
                    var region = this.region;
                    var state = this.state;
                    release || assert(multiname instanceof Compiler.IR.ASMultiname);
                    getOpenMethod = !!getOpenMethod;
                    if (ti) {
                        if (ti.trait) {
                            if (ti.trait.isConst() && ti.trait.hasDefaultValue) {
                                return constant(ti.trait.value);
                            }
                            var get = new Compiler.IR.GetProperty(region, state.store, object, qualifiedNameConstant(ti.trait.name));
                            return ti.trait.isGetter() ? this.store(get) : this.load(get);
                        }
                    }
                    if (hasNumericType(multiname.name)) {
                        return this.store(new Compiler.IR.ASGetProperty(region, state.store, object, multiname, 1 /* NumericProperty */));
                    }
                    warn("Can't optimize getProperty " + multiname.name + " " + multiname.name.ty);
                    var qn = this.resolveMultinameGlobally(multiname);
                    if (qn) {
                        return this.store(new Compiler.IR.ASGetProperty(region, state.store, object, constant(Multiname.getQualifiedName(qn)), 2 /* RESOLVED */ | (getOpenMethod ? 8 /* IS_METHOD */ : 0)));
                    }
                    AVM2.countTimeline("Compiler: Slow ASGetProperty");
                    return this.store(new Compiler.IR.ASGetProperty(region, state.store, object, multiname, (getOpenMethod ? 8 /* IS_METHOD */ : 0)));
                };
                BlockBuilder.prototype.setProperty = function (object, multiname, value) {
                    var ti = this.bc.ti;
                    var region = this.region;
                    var state = this.state;
                    release || assert(multiname instanceof Compiler.IR.ASMultiname);
                    if (ti) {
                        if (ti.trait) {
                            var coercer = ti.trait.typeName ? getCoercerForType(ti.trait.typeName) : null;
                            if (coercer) {
                                value = coercer(value);
                            }
                            this.store(new Compiler.IR.SetProperty(region, state.store, object, qualifiedNameConstant(ti.trait.name), value));
                            return;
                        }
                    }
                    if (hasNumericType(multiname.name)) {
                        return this.store(new Compiler.IR.ASSetProperty(region, state.store, object, multiname, value, 1 /* NumericProperty */));
                    }
                    warn("Can't optimize setProperty " + multiname);
                    var qn = this.resolveMultinameGlobally(multiname);
                    if (qn) {
                    }
                    return this.store(new Compiler.IR.ASSetProperty(region, state.store, object, multiname, value, 0));
                };
                BlockBuilder.prototype.callSuper = function (scope, object, multiname, args) {
                    var ti = this.bc.ti;
                    var region = this.region;
                    var state = this.state;
                    if (ti && ti.trait && ti.trait.isMethod() && ti.baseClass) {
                        var qn = Runtime.VM_OPEN_METHOD_PREFIX + Multiname.getQualifiedName(ti.trait.name);
                        var callee = this.getJSProperty(constant(ti.baseClass), "traitsPrototype." + qn);
                        return this.call(callee, object, args);
                    }
                    return this.store(new Compiler.IR.ASCallSuper(region, state.store, object, multiname, args, 4 /* PRISTINE */, scope));
                };
                BlockBuilder.prototype.getSuper = function (scope, object, multiname) {
                    var ti = this.bc.ti;
                    var region = this.region;
                    var state = this.state;
                    if (ti && ti.trait && ti.trait.isGetter() && ti.baseClass) {
                        var qn = Runtime.VM_OPEN_GET_METHOD_PREFIX + Multiname.getQualifiedName(ti.trait.name);
                        var callee = this.getJSProperty(constant(ti.baseClass), "traitsPrototype." + qn);
                        return this.call(callee, object, []);
                    }
                    return this.store(new Compiler.IR.ASGetSuper(region, state.store, object, multiname, scope));
                };
                BlockBuilder.prototype.setSuper = function (scope, object, multiname, value) {
                    var ti = this.bc.ti;
                    var region = this.region;
                    var state = this.state;
                    if (ti && ti.trait && ti.trait.isSetter() && ti.baseClass) {
                        var qn = Runtime.VM_OPEN_SET_METHOD_PREFIX + Multiname.getQualifiedName(ti.trait.name);
                        var callee = this.getJSProperty(constant(ti.baseClass), "traitsPrototype." + qn);
                        return this.call(callee, object, [value]);
                    }
                    return this.store(new Compiler.IR.ASSetSuper(region, state.store, object, multiname, value, scope));
                };
                BlockBuilder.prototype.constructSuper = function (scope, object, args) {
                    var ti = this.bc.ti;
                    var region = this.region;
                    var state = this.state;
                    if (ti) {
                        if (ti.noCallSuperNeeded) {
                            return;
                        }
                        else if (ti.baseClass) {
                            var callee = this.getJSProperty(constant(ti.baseClass), "instanceConstructorNoInitialize");
                            this.call(callee, object, args);
                            return;
                        }
                    }
                    callee = this.getJSProperty(scope, "object.baseClass.instanceConstructorNoInitialize");
                    this.call(callee, object, args);
                    return;
                };
                BlockBuilder.prototype.getSlot = function (object, index) {
                    var ti = this.bc.ti;
                    var region = this.region;
                    var state = this.state;
                    if (ti) {
                        var trait = ti.trait;
                        if (trait) {
                            if (trait.isConst() && ti.trait.hasDefaultValue) {
                                return constant(trait.value);
                            }
                            var slotQn = Multiname.getQualifiedName(trait.name);
                            return this.store(new Compiler.IR.GetProperty(region, state.store, object, constant(slotQn)));
                        }
                    }
                    warn("Can't optimize getSlot " + index);
                    return this.store(new Compiler.IR.ASGetSlot(null, state.store, object, index));
                };
                BlockBuilder.prototype.setSlot = function (object, index, value) {
                    var ti = this.bc.ti;
                    var region = this.region;
                    var state = this.state;
                    if (ti) {
                        var trait = ti.trait;
                        if (trait) {
                            var slotQn = Multiname.getQualifiedName(trait.name);
                            this.store(new Compiler.IR.SetProperty(region, state.store, object, constant(slotQn), value));
                            return;
                        }
                    }
                    warn("Can't optimize setSlot " + index);
                    this.store(new Compiler.IR.ASSetSlot(region, state.store, object, index, value));
                };
                BlockBuilder.prototype.resolveMultinameGlobally = function (multiname) {
                    var namespaces = multiname.namespaces;
                    var name = multiname.name;
                    if (!Shumway.AVM2.Runtime.globalMultinameAnalysis.value) {
                        return;
                    }
                    if (!isConstant(namespaces) || !isConstant(name) || multiname.isAttribute()) {
                        AVM2.countTimeline("GlobalMultinameResolver: Cannot resolve runtime multiname or attribute.");
                        return;
                    }
                    if (Shumway.isNumeric(name.value) || !Shumway.isString(name.value) || !name.value) {
                        AVM2.countTimeline("GlobalMultinameResolver: Cannot resolve numeric or any names.");
                        return;
                    }
                    return GlobalMultinameResolver.resolveMultiname(new Multiname(namespaces.value, name.value, multiname.flags));
                };
                BlockBuilder.prototype.getJSProperty = function (object, path) {
                    return getJSPropertyWithState(this.state, object, path);
                };
                BlockBuilder.prototype.setJSProperty = function (object, name, value) {
                    this.store(new Compiler.IR.SetProperty(null, this.state.store, object, constant(name), value));
                };
                BlockBuilder.prototype.simplifyName = function (name) {
                    if (isMultinameConstant(name) && Multiname.isQName(name.value)) {
                        return constant(Multiname.getQualifiedName(name.value));
                    }
                    return name;
                };
                BlockBuilder.prototype.getDescendants = function (object, name) {
                    var ti = this.bc.ti;
                    var region = this.region;
                    var state = this.state;
                    name = this.simplifyName(name);
                    return new Compiler.IR.ASGetDescendants(region, state.store, object, name);
                };
                BlockBuilder.prototype.truthyCondition = function (operator) {
                    var stack = this.state.stack;
                    var right;
                    if (operator.isBinary) {
                        right = stack.pop();
                    }
                    var left = stack.pop();
                    var node;
                    if (right) {
                        node = binary(operator, left, right);
                    }
                    else {
                        node = unary(operator, left);
                    }
                    if (peepholeOptimizer) {
                        node = peepholeOptimizer.fold(node, true);
                    }
                    return node;
                };
                BlockBuilder.prototype.negatedTruthyCondition = function (operator) {
                    var node = unary(Operator.FALSE, this.truthyCondition(operator));
                    if (peepholeOptimizer) {
                        node = peepholeOptimizer.fold(node, true);
                    }
                    return node;
                };
                BlockBuilder.prototype.pushExpression = function (operator, toInt) {
                    var stack = this.state.stack;
                    var left, right;
                    if (operator.isBinary) {
                        right = stack.pop();
                        left = stack.pop();
                        if (toInt) {
                            right = coerceInt(right);
                            left = coerceInt(left);
                        }
                        this.push(binary(operator, left, right));
                    }
                    else {
                        left = stack.pop();
                        if (toInt) {
                            left = coerceInt(left);
                        }
                        this.push(unary(operator, left));
                    }
                };
                BlockBuilder.prototype.push = function (x) {
                    var bc = this.bc;
                    release || assert(x instanceof Compiler.IR.Node);
                    if (bc.ti) {
                        if (x.ty) {
                        }
                        else {
                            x.ty = bc.ti.type;
                        }
                    }
                    this.state.stack.push(x);
                };
                BlockBuilder.prototype.pushLocal = function (index) {
                    var local = this.state.local;
                    this.push(local[index]);
                };
                BlockBuilder.prototype.popLocal = function (index) {
                    var state = this.state;
                    state.local[index] = shouldNotFloat(state.stack.pop());
                };
                BlockBuilder.prototype.build = function () {
                    var block = this.block;
                    var state = this.state;
                    var local = this.state.local;
                    var stack = this.state.stack;
                    var scope = this.state.scope;
                    var region = this.region;
                    var bytecodes = this.bytecodes;
                    var left, right, index;
                    var value, object, callee;
                    var multiname, type, args;
                    var operator;
                    var push = this.push.bind(this);
                    function pop() {
                        return stack.pop();
                    }
                    function popMany(count) {
                        return Shumway.ArrayUtilities.popMany(stack, count);
                    }
                    this.stops = null;
                    if (this.traceBuilder) {
                        writer.writeLn("Processing Region: " + region + ", Block: " + block.bid);
                        writer.enter(("> state: " + region.entryState.toString()).padRight(' ', 100));
                    }
                    var bc;
                    for (var bci = block.position, end = block.end.position; bci <= end; bci++) {
                        this.bc = bc = bytecodes[bci];
                        var op = bc.op;
                        state.index = bci;
                        switch (op) {
                            case 3 /* throw */:
                                this.store(new Compiler.IR.Throw(region, pop()));
                                this.builder.stopPoints.push({
                                    region: region,
                                    store: state.store,
                                    value: Undefined
                                });
                                this.setThrowStop();
                                break;
                            case 98 /* getlocal */:
                                this.pushLocal(bc.index);
                                break;
                            case 208 /* getlocal0 */:
                            case 209 /* getlocal1 */:
                            case 210 /* getlocal2 */:
                            case 211 /* getlocal3 */:
                                this.pushLocal(op - 208 /* getlocal0 */);
                                break;
                            case 99 /* setlocal */:
                                this.popLocal(bc.index);
                                break;
                            case 212 /* setlocal0 */:
                            case 213 /* setlocal1 */:
                            case 214 /* setlocal2 */:
                            case 215 /* setlocal3 */:
                                this.popLocal(op - 212 /* setlocal0 */);
                                break;
                            case 28 /* pushwith */:
                            case 48 /* pushscope */:
                                scope.push(new Compiler.IR.ASScope(this.topScope(), pop(), op === 28 /* pushwith */));
                                break;
                            case 29 /* popscope */:
                                scope.pop();
                                break;
                            case 100 /* getglobalscope */:
                                push(this.getGlobalScope());
                                break;
                            case 101 /* getscopeobject */:
                                push(this.getScopeObject(state.scope[bc.index]));
                                break;
                            case 94 /* findproperty */:
                            case 93 /* findpropstrict */:
                                push(this.findProperty(this.popMultiname(), op === 93 /* findpropstrict */));
                                break;
                            case 102 /* getproperty */:
                                multiname = this.popMultiname();
                                object = pop();
                                push(this.getProperty(object, multiname, false));
                                break;
                            case 89 /* getdescendants */:
                                multiname = this.popMultiname();
                                object = pop();
                                push(this.getDescendants(object, multiname));
                                break;
                            case 96 /* getlex */:
                                multiname = this.popMultiname();
                                push(this.getProperty(this.findProperty(multiname, true), multiname, false));
                                break;
                            case 104 /* initproperty */:
                            case 97 /* setproperty */:
                                value = pop();
                                multiname = this.popMultiname();
                                object = pop();
                                this.setProperty(object, multiname, value);
                                break;
                            case 106 /* deleteproperty */:
                                multiname = this.popMultiname();
                                object = pop();
                                push(this.store(new Compiler.IR.ASDeleteProperty(region, state.store, object, multiname)));
                                break;
                            case 108 /* getslot */:
                                object = pop();
                                push(this.getSlot(object, constant(bc.index)));
                                break;
                            case 109 /* setslot */:
                                value = pop();
                                object = pop();
                                this.setSlot(object, constant(bc.index), value);
                                break;
                            case 4 /* getsuper */:
                                multiname = this.popMultiname();
                                object = pop();
                                push(this.getSuper(this.savedScope(), object, multiname));
                                break;
                            case 5 /* setsuper */:
                                value = pop();
                                multiname = this.popMultiname();
                                object = pop();
                                this.setSuper(this.savedScope(), object, multiname, value);
                                break;
                            case 241 /* debugfile */:
                            case 240 /* debugline */:
                                break;
                            case 64 /* newfunction */:
                                push(callPure(this.builder.createFunctionCallee, null, [constant(this.abc.methods[bc.index]), this.topScope(), constant(true)]));
                                break;
                            case 65 /* call */:
                                args = popMany(bc.argCount);
                                object = pop();
                                callee = pop();
                                push(this.callCall(callee, object, args));
                                break;
                            case 70 /* callproperty */:
                            case 79 /* callpropvoid */:
                            case 76 /* callproplex */:
                                args = popMany(bc.argCount);
                                multiname = this.popMultiname();
                                object = pop();
                                value = this.callProperty(object, multiname, args, op === 76 /* callproplex */);
                                if (op !== 79 /* callpropvoid */) {
                                    push(value);
                                }
                                break;
                            case 69 /* callsuper */:
                            case 78 /* callsupervoid */:
                                multiname = this.popMultiname();
                                args = popMany(bc.argCount);
                                object = pop();
                                value = this.callSuper(this.savedScope(), object, multiname, args);
                                if (op !== 78 /* callsupervoid */) {
                                    push(value);
                                }
                                break;
                            case 66 /* construct */:
                                args = popMany(bc.argCount);
                                object = pop();
                                push(this.store(new Compiler.IR.ASNew(region, state.store, object, args)));
                                break;
                            case 73 /* constructsuper */:
                                args = popMany(bc.argCount);
                                object = pop();
                                this.constructSuper(this.savedScope(), object, args);
                                break;
                            case 74 /* constructprop */:
                                args = popMany(bc.argCount);
                                multiname = this.popMultiname();
                                object = pop();
                                callee = this.getProperty(object, multiname, false);
                                push(this.store(new Compiler.IR.ASNew(region, state.store, callee, args)));
                                break;
                            case 128 /* coerce */:
                                if (bc.ti && bc.ti.noCoercionNeeded) {
                                    AVM2.countTimeline("Compiler: NoCoercionNeeded");
                                    break;
                                }
                                else {
                                    AVM2.countTimeline("Compiler: CoercionNeeded");
                                }
                                value = pop();
                                push(this.coerce(this.constantPool.multinames[bc.index], value));
                                break;
                            case 131 /* coerce_i */:
                            case 115 /* convert_i */:
                                push(coerceInt(pop()));
                                break;
                            case 136 /* coerce_u */:
                            case 116 /* convert_u */:
                                push(coerceUint(pop()));
                                break;
                            case 132 /* coerce_d */:
                            case 117 /* convert_d */:
                                push(coerceNumber(pop()));
                                break;
                            case 129 /* coerce_b */:
                            case 118 /* convert_b */:
                                push(coerceBoolean(pop()));
                                break;
                            case 120 /* checkfilter */:
                                push(this.call(globalProperty("checkFilter"), null, [pop()]));
                                break;
                            case 130 /* coerce_a */:
                                break;
                            case 133 /* coerce_s */:
                                push(coerceString(pop()));
                                break;
                            case 112 /* convert_s */:
                                push(convertString(pop()));
                                break;
                            case 114 /* esc_xattr */:
                                push(escapeXMLAttribute(pop()));
                                break;
                            case 113 /* esc_xelem */:
                                push(escapeXMLElement(pop()));
                                break;
                            case 134 /* astype */:
                                if (bc.ti && bc.ti.noCoercionNeeded) {
                                    AVM2.countTimeline("Compiler: NoCoercionNeeded");
                                    break;
                                }
                                else {
                                    AVM2.countTimeline("Compiler: CoercionNeeded");
                                }
                                if (emitAsType) {
                                    value = pop();
                                    var typeName = this.constantPool.multinames[bc.index];
                                    multiname = new Compiler.IR.ASMultiname(constant(typeName.namespaces), constant(typeName.name), constant(typeName.flags));
                                    type = this.getProperty(this.findProperty(multiname, false), multiname);
                                    push(this.call(globalProperty("asAsType"), null, [type, value]));
                                }
                                break;
                            case 135 /* astypelate */:
                                type = pop();
                                if (emitAsTypeLate) {
                                    value = pop();
                                    push(this.call(globalProperty("asAsType"), null, [type, value]));
                                }
                                break;
                            case 72 /* returnvalue */:
                            case 71 /* returnvoid */:
                                value = Undefined;
                                if (op === 72 /* returnvalue */) {
                                    value = pop();
                                    if (this.methodInfo.returnType) {
                                        if (!(bc.ti && bc.ti.noCoercionNeeded)) {
                                            value = this.coerce(this.methodInfo.returnType, value);
                                        }
                                    }
                                }
                                this.builder.stopPoints.push({
                                    region: region,
                                    store: state.store,
                                    value: value
                                });
                                this.setReturnStop();
                                break;
                            case 30 /* nextname */:
                            case 35 /* nextvalue */:
                                index = pop();
                                object = pop();
                                push(new Compiler.IR.CallProperty(region, state.store, object, constant(op === 30 /* nextname */ ? "asNextName" : "asNextValue"), [index], 4 /* PRISTINE */));
                                break;
                            case 50 /* hasnext2 */:
                                var hasNext2 = new Compiler.IR.ASNewHasNext2();
                                this.setJSProperty(hasNext2, "object", local[bc.object]);
                                this.setJSProperty(hasNext2, "index", local[bc.index]);
                                this.store(new Compiler.IR.CallProperty(region, state.store, callObject(local[bc.object]), constant("asHasNext2"), [hasNext2], 4 /* PRISTINE */));
                                local[bc.object] = this.getJSProperty(hasNext2, "object");
                                push(local[bc.index] = this.getJSProperty(hasNext2, "index"));
                                break;
                            case 32 /* pushnull */:
                                push(Null);
                                break;
                            case 33 /* pushundefined */:
                                push(Undefined);
                                break;
                            case 38 /* pushtrue */:
                                push(True);
                                break;
                            case 39 /* pushfalse */:
                                push(False);
                                break;
                            case 40 /* pushnan */:
                                push(constant(NaN));
                                break;
                            case 34 /* pushfloat */:
                                notImplemented(String(bc));
                                break;
                            case 36 /* pushbyte */:
                            case 37 /* pushshort */:
                                push(constant(bc.value));
                                break;
                            case 44 /* pushstring */:
                                push(constant(this.constantPool.strings[bc.index]));
                                break;
                            case 45 /* pushint */:
                                push(constant(this.constantPool.ints[bc.index]));
                                break;
                            case 46 /* pushuint */:
                                push(constant(this.constantPool.uints[bc.index]));
                                break;
                            case 47 /* pushdouble */:
                                push(constant(this.constantPool.doubles[bc.index]));
                                break;
                            case 41 /* pop */:
                                pop();
                                break;
                            case 42 /* dup */:
                                value = shouldNotFloat(pop());
                                push(value);
                                push(value);
                                break;
                            case 43 /* swap */:
                                state.stack.push(pop(), pop());
                                break;
                            case 239 /* debug */:
                            case 240 /* debugline */:
                            case 241 /* debugfile */:
                                break;
                            case 16 /* jump */:
                                this.setJumpStop();
                                break;
                            case 12 /* ifnlt */:
                                this.setIfStops(this.negatedTruthyCondition(Operator.LT));
                                break;
                            case 15 /* ifnge */:
                                this.setIfStops(this.negatedTruthyCondition(Operator.GE));
                                break;
                            case 14 /* ifngt */:
                                this.setIfStops(this.negatedTruthyCondition(Operator.GT));
                                break;
                            case 13 /* ifnle */:
                                this.setIfStops(this.negatedTruthyCondition(Operator.LE));
                                break;
                            case 24 /* ifge */:
                            case 23 /* ifgt */:
                            case 22 /* ifle */:
                            case 21 /* iflt */:
                            case 17 /* iftrue */:
                            case 18 /* iffalse */:
                            case 19 /* ifeq */:
                            case 20 /* ifne */:
                            case 25 /* ifstricteq */:
                            case 26 /* ifstrictne */:
                                this.setIfStops(this.truthyCondition(operatorFromOP(op)));
                                break;
                            case 27 /* lookupswitch */:
                                this.setSwitchStops(pop());
                                break;
                            case 160 /* add */:
                                right = pop();
                                left = pop();
                                if (typesAreEqual(left, right)) {
                                    operator = Operator.ADD;
                                }
                                else if (Shumway.AVM2.Runtime.useAsAdd) {
                                    operator = Operator.AS_ADD;
                                }
                                else {
                                    operator = Operator.ADD;
                                }
                                push(binary(operator, left, right));
                                break;
                            case 161 /* subtract */:
                            case 162 /* multiply */:
                            case 163 /* divide */:
                            case 164 /* modulo */:
                            case 165 /* lshift */:
                            case 166 /* rshift */:
                            case 167 /* urshift */:
                            case 168 /* bitand */:
                            case 169 /* bitor */:
                            case 170 /* bitxor */:
                            case 171 /* equals */:
                            case 172 /* strictequals */:
                            case 173 /* lessthan */:
                            case 174 /* lessequals */:
                            case 175 /* greaterthan */:
                            case 176 /* greaterequals */:
                            case 144 /* negate */:
                            case 150 /* not */:
                            case 151 /* bitnot */:
                                this.pushExpression(operatorFromOP(op));
                                break;
                            case 196 /* negate_i */:
                            case 197 /* add_i */:
                            case 198 /* subtract_i */:
                            case 199 /* multiply_i */:
                                this.pushExpression(operatorFromOP(op), true);
                                break;
                            case 145 /* increment */:
                            case 192 /* increment_i */:
                            case 147 /* decrement */:
                            case 193 /* decrement_i */:
                                push(constant(1));
                                if (op === 145 /* increment */ || op === 147 /* decrement */) {
                                    push(coerceNumber(pop()));
                                }
                                else {
                                    push(coerceInt(pop()));
                                }
                                if (op === 145 /* increment */ || op === 192 /* increment_i */) {
                                    this.pushExpression(Operator.ADD);
                                }
                                else {
                                    this.pushExpression(Operator.SUB);
                                }
                                break;
                            case 146 /* inclocal */:
                            case 194 /* inclocal_i */:
                            case 148 /* declocal */:
                            case 195 /* declocal_i */:
                                push(constant(1));
                                if (op === 146 /* inclocal */ || op === 148 /* declocal */) {
                                    push(coerceNumber(local[bc.index]));
                                }
                                else {
                                    push(coerceInt(local[bc.index]));
                                }
                                if (op === 146 /* inclocal */ || op === 194 /* inclocal_i */) {
                                    this.pushExpression(Operator.ADD);
                                }
                                else {
                                    this.pushExpression(Operator.SUB);
                                }
                                this.popLocal(bc.index);
                                break;
                            case 177 /* instanceof */:
                                type = pop();
                                value = pop();
                                push(this.call(this.getJSProperty(type, "isInstanceOf"), null, [value]));
                                break;
                            case 178 /* istype */:
                                value = pop();
                                multiname = this.popMultiname();
                                type = this.getProperty(this.findProperty(multiname, false), multiname);
                                push(this.call(globalProperty("asIsType"), null, [type, value]));
                                break;
                            case 179 /* istypelate */:
                                type = pop();
                                value = pop();
                                push(this.call(globalProperty("asIsType"), null, [type, value]));
                                break;
                            case 180 /* in */:
                                object = pop();
                                value = pop();
                                multiname = new Compiler.IR.ASMultiname(Undefined, value, constant(0));
                                push(this.store(new Compiler.IR.ASHasProperty(region, state.store, object, multiname)));
                                break;
                            case 149 /* typeof */:
                                push(this.call(globalProperty("asTypeOf"), null, [pop()]));
                                break;
                            case 8 /* kill */:
                                push(Undefined);
                                this.popLocal(bc.index);
                                break;
                            case 83 /* applytype */:
                                args = popMany(bc.argCount);
                                type = pop();
                                callee = globalProperty("applyType");
                                push(this.call(callee, null, [this.methodInfoConstant, type, new NewArray(region, args)]));
                                break;
                            case 86 /* newarray */:
                                args = popMany(bc.argCount);
                                push(new NewArray(region, args));
                                break;
                            case 85 /* newobject */:
                                var properties = [];
                                for (var i = 0; i < bc.argCount; i++) {
                                    var value = pop();
                                    var key = pop();
                                    release || assert(isConstant(key) && Shumway.isString(key.value));
                                    key = constant(Multiname.getPublicQualifiedName(key.value));
                                    properties.push(new KeyValuePair(key, value));
                                }
                                push(new NewObject(region, properties));
                                break;
                            case 87 /* newactivation */:
                                push(new Compiler.IR.ASNewActivation(constant(this.methodInfo)));
                                break;
                            case 88 /* newclass */:
                                callee = globalProperty("createClass");
                                push(this.call(callee, null, [constant(this.abc.classes[bc.index]), pop(), this.topScope()]));
                                break;
                            default:
                                notImplemented(String(bc));
                        }
                        if (op === 239 /* debug */ || op === 241 /* debugfile */ || op === 240 /* debugline */) {
                            continue;
                        }
                        if (this.traceBuilder) {
                            writer.writeLn(("state: " + state.toString()).padRight(' ', 100) + " : " + bci + ", " + bc.toString(this.abc));
                        }
                    }
                    if (this.traceBuilder) {
                        writer.leave(("< state: " + state.toString()).padRight(' ', 100));
                    }
                };
                return BlockBuilder;
            })();
            var Builder = (function () {
                function Builder(methodInfo, scope, hasDynamicScope) {
                    release || assert(methodInfo && methodInfo.abc && scope);
                    this.abc = methodInfo.abc;
                    this.methodInfoConstant = new Constant(methodInfo);
                    this.scope = scope;
                    this.methodInfo = methodInfo;
                    this.hasDynamicScope = hasDynamicScope;
                    this.traceBuilder = Shumway.AVM2.Compiler.traceLevel.value > 3;
                    this.createFunctionCallee = globalProperty("createFunction");
                    this.stopPoints = [];
                    this.bytecodes = this.methodInfo.analysis.bytecodes;
                }
                Builder.prototype.buildStart = function (start) {
                    var mi = this.methodInfo;
                    var state = start.entryState = new State(0);
                    state.local.push(new This(start));
                    var parameterIndexOffset = this.hasDynamicScope ? 1 : 0;
                    var parameterCount = mi.parameters.length;
                    for (var i = 0; i < parameterCount; i++) {
                        state.local.push(new Parameter(start, parameterIndexOffset + i, mi.parameters[i].name));
                    }
                    for (var i = parameterCount; i < mi.localCount; i++) {
                        state.local.push(Undefined);
                    }
                    state.store = new Projection(start, 3 /* STORE */);
                    if (this.hasDynamicScope) {
                        start.scope = new Parameter(start, 0, Runtime.SAVED_SCOPE_NAME);
                    }
                    else {
                        start.scope = new Constant(this.scope);
                    }
                    state.saved = new Projection(start, 4 /* SCOPE */);
                    var args = new Compiler.IR.Arguments(start);
                    if (mi.needsRest() || mi.needsArguments()) {
                        var offset = constant(parameterIndexOffset + (mi.needsRest() ? parameterCount : 0));
                        state.local[parameterCount + 1] = new Call(start, state.store, globalProperty("sliceArguments"), null, [args, offset], 4 /* PRISTINE */);
                    }
                    var argumentsLength = getJSPropertyWithState(state, args, "length");
                    for (var i = 0; i < parameterCount; i++) {
                        var parameter = mi.parameters[i];
                        var index = i + 1;
                        var local = state.local[index];
                        if (parameter.value !== undefined) {
                            var condition;
                            if (useTypeOfForDefaultArgumentChecking) {
                                condition = new Compiler.IR.Binary(Operator.SEQ, new Compiler.IR.Unary(Operator.TYPE_OF, local), constant("undefined"));
                            }
                            else {
                                condition = new Compiler.IR.Binary(Operator.LT, argumentsLength, constant(parameterIndexOffset + i + 1));
                            }
                            local = new Compiler.IR.Latch(null, condition, constant(parameter.value), local);
                        }
                        if (parameter.type && !parameter.type.isAnyName()) {
                            var coercer = getCoercerForType(parameter.type);
                            if (coercer) {
                                local = coercer(local);
                            }
                            else if (emitCoerceNonPrimitiveParameters) {
                                local = new Call(start, state.store, globalProperty("asCoerceByMultiname"), null, [this.methodInfoConstant, constant(parameter.type), local], 0);
                            }
                        }
                        state.local[index] = local;
                    }
                    return start;
                };
                Builder.prototype.buildGraph = function () {
                    var analysis = this.methodInfo.analysis;
                    var blocks = analysis.blocks;
                    var methodInfo = this.methodInfo;
                    var traceBuilder = this.traceBuilder;
                    for (var i = 0; i < blocks.length; i++) {
                        blocks[i].bdo = i;
                        blocks[i].region = null;
                    }
                    var worklist = new Shumway.SortedList(function compare(a, b) {
                        return a.block.bdo - b.block.bdo;
                    });
                    var start = new Start();
                    this.buildStart(start);
                    worklist.push({ region: start, block: blocks[0] });
                    var next;
                    while ((next = worklist.pop())) {
                        this.buildBlock(next.region, next.block, next.region.entryState.clone()).forEach(function (stop) {
                            var target = stop.target;
                            var region = target.region;
                            if (region) {
                                traceBuilder && writer.enter("Merging into region: " + region + " @ " + target.position + ", block " + target.bid + " {");
                                traceBuilder && writer.writeLn("  R " + region.entryState);
                                traceBuilder && writer.writeLn("+ I " + stop.state);
                                region.entryState.merge(region, stop.state);
                                region.predecessors.push(stop.control);
                                traceBuilder && writer.writeLn("  = " + region.entryState);
                                traceBuilder && writer.leave("}");
                            }
                            else {
                                region = target.region = new Region(stop.control);
                                var dirtyLocals = null;
                                if (target.loop) {
                                    dirtyLocals = Compiler.enableDirtyLocals.value && target.loop.getDirtyLocals();
                                    traceBuilder && writer.writeLn("Adding PHIs to loop region. " + dirtyLocals);
                                }
                                region.entryState = target.loop ? stop.state.makeLoopPhis(region, dirtyLocals) : stop.state.clone(target.position);
                                traceBuilder && writer.writeLn("Adding new region: " + region + " @ " + target.position + " to worklist.");
                                worklist.push({ region: region, block: target });
                            }
                        });
                        traceBuilder && writer.enter("Worklist: {");
                        worklist.forEach(function (item) {
                            traceBuilder && writer.writeLn(item.region + " " + item.block.bdo + " " + item.region.entryState);
                        });
                        traceBuilder && writer.leave("}");
                    }
                    traceBuilder && writer.writeLn("Done");
                    var stop;
                    if (this.stopPoints.length > 1) {
                        var stopRegion = new Region(null);
                        var stopValuePhi = new Phi(stopRegion, null);
                        var stopStorePhi = new Phi(stopRegion, null);
                        this.stopPoints.forEach(function (stopPoint) {
                            stopRegion.predecessors.push(stopPoint.region);
                            stopValuePhi.pushValue(stopPoint.value);
                            stopStorePhi.pushValue(stopPoint.store);
                        });
                        stop = new Stop(stopRegion, stopStorePhi, stopValuePhi);
                    }
                    else {
                        stop = new Stop(this.stopPoints[0].region, this.stopPoints[0].store, this.stopPoints[0].value);
                    }
                    return new Compiler.IR.DFG(stop);
                };
                Builder.prototype.buildBlock = function (region, block, state) {
                    release || assert(region && block && state);
                    state.optimize();
                    var typeState = block.verifierEntryState;
                    if (typeState) {
                        this.traceBuilder && writer.writeLn("Type State: " + typeState);
                        for (var i = 0; i < typeState.local.length; i++) {
                            var type = typeState.local[i];
                            var local = state.local[i];
                            if (local.ty) {
                            }
                            else {
                                local.ty = type;
                            }
                        }
                    }
                    var blockBuilder = new BlockBuilder(this, region, block, state);
                    blockBuilder.build();
                    var stops = blockBuilder.stops;
                    if (!stops) {
                        stops = [];
                        if (blockBuilder.bc.position + 1 <= this.bytecodes.length) {
                            stops.push({
                                control: region,
                                target: this.bytecodes[blockBuilder.bc.position + 1],
                                state: state
                            });
                        }
                    }
                    return stops;
                };
                Builder.buildMethod = function (verifier, methodInfo, scope, hasDynamicScope) {
                    release || assert(scope);
                    release || assert(methodInfo.analysis);
                    release || assert(!methodInfo.hasExceptions());
                    AVM2.countTimeline("Compiler: Compiled Methods");
                    AVM2.enterTimeline("Compiler");
                    AVM2.enterTimeline("Mark Loops");
                    methodInfo.analysis.markLoops();
                    AVM2.leaveTimeline();
                    if (Shumway.AVM2.Verifier.enabled.value) {
                        AVM2.enterTimeline("Verify");
                        verifier.verifyMethod(methodInfo, scope);
                        AVM2.leaveTimeline();
                    }
                    var traceTiming = Shumway.AVM2.Compiler.traceLevel.value > 0;
                    var traceSource = Shumway.AVM2.Compiler.traceLevel.value > 1;
                    var traceIR = Shumway.AVM2.Compiler.traceLevel.value > 2;
                    if (traceTiming) {
                        var startTime = window.performance.now();
                    }
                    AVM2.enterTimeline("Build IR");
                    Node.startNumbering();
                    var dfg = new Builder(methodInfo, scope, hasDynamicScope).buildGraph();
                    AVM2.leaveTimeline();
                    traceIR && dfg.trace(writer);
                    AVM2.enterTimeline("Build CFG");
                    var cfg = dfg.buildCFG();
                    AVM2.leaveTimeline();
                    AVM2.enterTimeline("Optimize Phis");
                    cfg.optimizePhis();
                    AVM2.leaveTimeline();
                    AVM2.enterTimeline("Schedule Nodes");
                    cfg.scheduleEarly();
                    AVM2.leaveTimeline();
                    traceIR && cfg.trace(writer);
                    AVM2.enterTimeline("Verify IR");
                    cfg.verify();
                    AVM2.leaveTimeline();
                    AVM2.enterTimeline("Allocate Variables");
                    cfg.allocateVariables();
                    AVM2.leaveTimeline();
                    AVM2.enterTimeline("Generate Source");
                    var result = Shumway.AVM2.Compiler.Backend.generate(cfg);
                    AVM2.leaveTimeline();
                    traceSource && writer.writeLn(result.body);
                    Node.stopNumbering();
                    AVM2.leaveTimeline();
                    if (traceTiming) {
                        var name = methodInfo.name ? 'function ' + methodInfo.name : 'anonymous function';
                        writer.writeLn('Compiled ' + name + ' in ' + (window.performance.now() - startTime).toPrecision(2) + 'ms');
                    }
                    return result;
                };
                return Builder;
            })();
            var verifier = new Shumway.AVM2.Verifier.Verifier();
            function compileMethod(methodInfo, scope, hasDynamicScope) {
                return Builder.buildMethod(verifier, methodInfo, scope, hasDynamicScope);
            }
            Compiler.compileMethod = compileMethod;
        })(Compiler = AVM2.Compiler || (AVM2.Compiler = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var Compiler;
        (function (Compiler) {
            var Scope = Shumway.AVM2.Runtime.Scope;
            var canCompile = Shumway.AVM2.Runtime.canCompile;
            var ensureFunctionIsInitialized = Shumway.AVM2.Runtime.ensureFunctionIsInitialized;
            var createCompiledFunction = Shumway.AVM2.Runtime.createCompiledFunction;
            var LazyInitializer = Shumway.AVM2.Runtime.LazyInitializer;
            var hasUsedConstants = false;
            jsGlobal.objectConstantName = function (object) {
                if (object.hash) {
                    return "$(" + object.hash + ")";
                }
                else if (object instanceof LazyInitializer) {
                    return object.getName();
                }
                else {
                    hasUsedConstants = true;
                }
            };
            function compileAbc(abc, writer) {
                writer.enter("{");
                writer.enter("methods: {");
                for (var i = 0; i < abc.scripts.length; i++) {
                    compileScript(abc.scripts[i], writer);
                }
                writer.leave("}");
                writer.leave("}");
            }
            Compiler.compileAbc = compileAbc;
            function compileScript(script, writer) {
                var globalScope = new Scope(null, script);
                var domain = script.abc.applicationDomain;
                var closures = [];
                compileMethod(script.init, writer, globalScope, closures, false);
                script.traits.forEach(function (trait) {
                    if (trait.isClass()) {
                        var inheritance = [];
                        var current = trait.classInfo;
                        while (current) {
                            inheritance.unshift(current);
                            if (current.instanceInfo.superName) {
                                current = domain.findClassInfo(current.instanceInfo.superName);
                            }
                            else {
                                break;
                            }
                        }
                        var classScope = globalScope;
                        inheritance.forEach(function (classInfo) {
                            classScope = new Scope(classScope, classInfo);
                        });
                        compileClass(trait.classInfo, writer, classScope, closures);
                    }
                    else if (trait.isMethod() || trait.isGetter() || trait.isSetter()) {
                        compileTrait(trait, writer, globalScope, closures);
                    }
                });
                closures.forEach(function (closure) {
                    compileMethod(closure.methodInfo, writer, closure.scope, null, true);
                });
            }
            function compileMethod(methodInfo, writer, scope, closures, hasDynamicScope) {
                if (canCompile(methodInfo)) {
                    ensureFunctionIsInitialized(methodInfo);
                    try {
                        hasUsedConstants = false;
                        var method = createCompiledFunction(methodInfo, scope, hasDynamicScope, false, false);
                        writer.enter(methodInfo.index + ": ");
                        if (!hasUsedConstants) {
                            writer.writeLns(method.toSource());
                        }
                        else {
                            writer.writeLn("undefined");
                        }
                        writer.leave(",");
                        if (closures) {
                            scanMethod(methodInfo, writer, scope, closures);
                        }
                    }
                    catch (x) {
                        writer.writeLn("// " + x);
                    }
                }
                else {
                    writer.writeLn("// Can't compile method: " + methodInfo.index);
                }
            }
            function scanMethod(methodInfo, writer, scope, innerMethods) {
                var bytecodes = methodInfo.analysis.bytecodes;
                var methods = methodInfo.abc.methods;
                for (var i = 0; i < bytecodes.length; i++) {
                    var bc = bytecodes[i];
                    if (bc.op === 64 /* newfunction */) {
                        var innerMethodInfo = methods[bc.index];
                        ensureFunctionIsInitialized(innerMethodInfo);
                        var innerScope = new Scope(scope, methodInfo);
                        innerMethods.push({
                            scope: innerScope,
                            methodInfo: innerMethodInfo
                        });
                        scanMethod(innerMethodInfo, writer, innerScope, innerMethods);
                    }
                }
            }
            function compileTrait(trait, writer, scope, closures) {
                if (trait.isMethod() || trait.isGetter() || trait.isSetter()) {
                    if (trait.methodInfo.hasBody) {
                        writer.writeLn("// " + trait);
                        compileMethod(trait.methodInfo, writer, scope, closures, false);
                    }
                }
            }
            function compileTraits(traits, writer, scope, closures) {
                traits.forEach(function (trait) {
                    compileTrait(trait, writer, scope, closures);
                });
            }
            function compileClass(classInfo, writer, scope, closures) {
                compileMethod(classInfo.init, writer, scope, closures, false);
                compileTraits(classInfo.traits, writer, scope, closures);
                compileMethod(classInfo.instanceInfo.init, writer, scope, closures, false);
                compileTraits(classInfo.instanceInfo.traits, writer, scope, closures);
            }
        })(Compiler = AVM2.Compiler || (AVM2.Compiler = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var Compiler;
        (function (Compiler) {
            var AST;
            (function (AST) {
                var assertUnreachable = Shumway.Debug.assertUnreachable;
                var json = false;
                var escapeless = false;
                var hexadecimal = false;
                var renumber = false;
                var quotes = "double";
                function stringToArray(str) {
                    var length = str.length, result = [], i;
                    for (i = 0; i < length; ++i) {
                        result[i] = str.charAt(i);
                    }
                    return result;
                }
                function escapeAllowedCharacter(ch, next) {
                    var code = ch.charCodeAt(0), hex = code.toString(16), result = '\\';
                    switch (ch) {
                        case '\b':
                            result += 'b';
                            break;
                        case '\f':
                            result += 'f';
                            break;
                        case '\t':
                            result += 't';
                            break;
                        default:
                            if (json || code > 0xff) {
                                result += 'u' + '0000'.slice(hex.length) + hex;
                            }
                            else if (ch === '\u0000' && '0123456789'.indexOf(next) < 0) {
                                result += '0';
                            }
                            else if (ch === '\x0B') {
                                result += 'x0B';
                            }
                            else {
                                result += 'x' + '00'.slice(hex.length) + hex;
                            }
                            break;
                    }
                    return result;
                }
                function escapeDisallowedCharacter(ch) {
                    var result = '\\';
                    switch (ch) {
                        case '\\':
                            result += '\\';
                            break;
                        case '\n':
                            result += 'n';
                            break;
                        case '\r':
                            result += 'r';
                            break;
                        case '\u2028':
                            result += 'u2028';
                            break;
                        case '\u2029':
                            result += 'u2029';
                            break;
                        default:
                            throw new Error('Incorrectly classified character');
                    }
                    return result;
                }
                var escapeStringCacheCount = 0;
                var escapeStringCache = Object.create(null);
                function escapeString(str) {
                    var result, i, len, ch, singleQuotes = 0, doubleQuotes = 0, single, original = str;
                    result = escapeStringCache[original];
                    if (result) {
                        return result;
                    }
                    if (escapeStringCacheCount === 1024) {
                        escapeStringCache = Object.create(null);
                        escapeStringCacheCount = 0;
                    }
                    result = '';
                    if (typeof str[0] === 'undefined') {
                        str = stringToArray(str);
                    }
                    for (i = 0, len = str.length; i < len; ++i) {
                        ch = str[i];
                        if (ch === '\'') {
                            ++singleQuotes;
                        }
                        else if (ch === '"') {
                            ++doubleQuotes;
                        }
                        else if (ch === '/' && json) {
                            result += '\\';
                        }
                        else if ('\\\n\r\u2028\u2029'.indexOf(ch) >= 0) {
                            result += escapeDisallowedCharacter(ch);
                            continue;
                        }
                        else if ((json && ch < ' ') || !(json || escapeless || (ch >= ' ' && ch <= '~'))) {
                            result += escapeAllowedCharacter(ch, str[i + 1]);
                            continue;
                        }
                        result += ch;
                    }
                    single = !(quotes === 'double' || (quotes === 'auto' && doubleQuotes < singleQuotes));
                    str = result;
                    result = single ? '\'' : '"';
                    if (typeof str[0] === 'undefined') {
                        str = stringToArray(str);
                    }
                    for (i = 0, len = str.length; i < len; ++i) {
                        ch = str[i];
                        if ((ch === '\'' && single) || (ch === '"' && !single)) {
                            result += '\\';
                        }
                        result += ch;
                    }
                    result += (single ? '\'' : '"');
                    escapeStringCache[original] = result;
                    escapeStringCacheCount++;
                    return result;
                }
                var generateNumberCacheCount = 0;
                var generateNumberCache = Object.create(null);
                function generateNumber(value) {
                    var result, point, temp, exponent, pos;
                    if (value !== value) {
                        throw new Error('Numeric literal whose value is NaN');
                    }
                    if (value < 0 || (value === 0 && 1 / value < 0)) {
                        throw new Error('Numeric literal whose value is negative');
                    }
                    if (value === 1 / 0) {
                        return json ? 'null' : renumber ? '1e400' : '1e+400';
                    }
                    result = generateNumberCache[value];
                    if (result) {
                        return result;
                    }
                    if (generateNumberCacheCount === 1024) {
                        generateNumberCache = Object.create(null);
                        generateNumberCacheCount = 0;
                    }
                    result = '' + value;
                    if (!renumber || result.length < 3) {
                        generateNumberCache[value] = result;
                        generateNumberCacheCount++;
                        return result;
                    }
                    point = result.indexOf('.');
                    if (!json && result.charAt(0) === '0' && point === 1) {
                        point = 0;
                        result = result.slice(1);
                    }
                    temp = result;
                    result = result.replace('e+', 'e');
                    exponent = 0;
                    if ((pos = temp.indexOf('e')) > 0) {
                        exponent = +temp.slice(pos + 1);
                        temp = temp.slice(0, pos);
                    }
                    if (point >= 0) {
                        exponent -= temp.length - point - 1;
                        temp = +(temp.slice(0, point) + temp.slice(point + 1)) + '';
                    }
                    pos = 0;
                    while (temp.charAt(temp.length + pos - 1) === '0') {
                        --pos;
                    }
                    if (pos !== 0) {
                        exponent -= pos;
                        temp = temp.slice(0, pos);
                    }
                    if (exponent !== 0) {
                        temp += 'e' + exponent;
                    }
                    if ((temp.length < result.length || (hexadecimal && value > 1e12 && Math.floor(value) === value && (temp = '0x' + value.toString(16)).length < result.length)) && +temp === value) {
                        result = temp;
                    }
                    generateNumberCache[value] = result;
                    generateNumberCacheCount++;
                    return result;
                }
                var Precedence = {
                    Default: 0,
                    Sequence: 0,
                    Assignment: 1,
                    Conditional: 2,
                    ArrowFunction: 2,
                    LogicalOR: 3,
                    LogicalAND: 4,
                    BitwiseOR: 5,
                    BitwiseXOR: 6,
                    BitwiseAND: 7,
                    Equality: 8,
                    Relational: 9,
                    BitwiseSHIFT: 10,
                    Additive: 11,
                    Multiplicative: 12,
                    Unary: 13,
                    Postfix: 14,
                    Call: 15,
                    New: 16,
                    Member: 17,
                    Primary: 18
                };
                var BinaryPrecedence = {
                    '||': Precedence.LogicalOR,
                    '&&': Precedence.LogicalAND,
                    '|': Precedence.BitwiseOR,
                    '^': Precedence.BitwiseXOR,
                    '&': Precedence.BitwiseAND,
                    '==': Precedence.Equality,
                    '!=': Precedence.Equality,
                    '===': Precedence.Equality,
                    '!==': Precedence.Equality,
                    'is': Precedence.Equality,
                    'isnt': Precedence.Equality,
                    '<': Precedence.Relational,
                    '>': Precedence.Relational,
                    '<=': Precedence.Relational,
                    '>=': Precedence.Relational,
                    'in': Precedence.Relational,
                    'instanceof': Precedence.Relational,
                    '<<': Precedence.BitwiseSHIFT,
                    '>>': Precedence.BitwiseSHIFT,
                    '>>>': Precedence.BitwiseSHIFT,
                    '+': Precedence.Additive,
                    '-': Precedence.Additive,
                    '*': Precedence.Multiplicative,
                    '%': Precedence.Multiplicative,
                    '/': Precedence.Multiplicative
                };
                function toLiteralSource(value) {
                    if (value === null) {
                        return 'null';
                    }
                    if (typeof value === 'string') {
                        return escapeString(value);
                    }
                    if (typeof value === 'number') {
                        return generateNumber(value);
                    }
                    if (typeof value === 'boolean') {
                        return value ? 'true' : 'false';
                    }
                    assertUnreachable(value);
                }
                function nodesToSource(nodes, precedence, separator) {
                    var result = "";
                    for (var i = 0; i < nodes.length; i++) {
                        result += nodes[i].toSource(precedence);
                        if (separator && (i < nodes.length - 1)) {
                            result += separator;
                        }
                    }
                    return result;
                }
                function alwaysParenthesize(text) {
                    return '(' + text + ')';
                }
                function parenthesize(text, current, should) {
                    if (current < should) {
                        return '(' + text + ')';
                    }
                    return text;
                }
                var Node = (function () {
                    function Node() {
                        this.type = 'Node';
                    }
                    Node.prototype.toSource = function (precedence) {
                        assertUnreachable('toSource called on abstract base class Node with type ' + this.type);
                        return "";
                    };
                    return Node;
                })();
                AST.Node = Node;
                var Statement = (function (_super) {
                    __extends(Statement, _super);
                    function Statement() {
                        _super.apply(this, arguments);
                        this.type = 'Statement';
                    }
                    return Statement;
                })(Node);
                AST.Statement = Statement;
                var Expression = (function (_super) {
                    __extends(Expression, _super);
                    function Expression() {
                        _super.apply(this, arguments);
                        this.type = 'Expression';
                    }
                    return Expression;
                })(Node);
                AST.Expression = Expression;
                var Program = (function (_super) {
                    __extends(Program, _super);
                    function Program(body) {
                        _super.call(this);
                        this.body = body;
                        this.type = 'Program';
                    }
                    return Program;
                })(Node);
                AST.Program = Program;
                var EmptyStatement = (function (_super) {
                    __extends(EmptyStatement, _super);
                    function EmptyStatement() {
                        _super.apply(this, arguments);
                        this.type = 'EmptyStatement';
                    }
                    return EmptyStatement;
                })(Statement);
                AST.EmptyStatement = EmptyStatement;
                var BlockStatement = (function (_super) {
                    __extends(BlockStatement, _super);
                    function BlockStatement(body) {
                        _super.call(this);
                        this.body = body;
                        this.type = 'BlockStatement';
                    }
                    BlockStatement.prototype.toSource = function (precedence) {
                        return "{\n" + nodesToSource(this.body, precedence) + "}";
                    };
                    return BlockStatement;
                })(Statement);
                AST.BlockStatement = BlockStatement;
                var ExpressionStatement = (function (_super) {
                    __extends(ExpressionStatement, _super);
                    function ExpressionStatement(expression) {
                        _super.call(this);
                        this.expression = expression;
                        this.type = 'ExpressionStatement';
                    }
                    ExpressionStatement.prototype.toSource = function (precedence) {
                        return this.expression.toSource(Precedence.Sequence) + ";\n";
                    };
                    return ExpressionStatement;
                })(Statement);
                AST.ExpressionStatement = ExpressionStatement;
                var IfStatement = (function (_super) {
                    __extends(IfStatement, _super);
                    function IfStatement(test, consequent, alternate) {
                        _super.call(this);
                        this.test = test;
                        this.consequent = consequent;
                        this.alternate = alternate;
                        this.type = 'IfStatement';
                    }
                    IfStatement.prototype.toSource = function (precedence) {
                        var result = "if(" + this.test.toSource(Precedence.Sequence) + "){" + this.consequent.toSource(Precedence.Sequence) + "}";
                        if (this.alternate) {
                            result += "else{" + this.alternate.toSource(Precedence.Sequence) + "}";
                        }
                        return result;
                    };
                    return IfStatement;
                })(Statement);
                AST.IfStatement = IfStatement;
                var LabeledStatement = (function (_super) {
                    __extends(LabeledStatement, _super);
                    function LabeledStatement(label, body) {
                        _super.call(this);
                        this.label = label;
                        this.body = body;
                        this.type = 'LabeledStatement';
                    }
                    return LabeledStatement;
                })(Statement);
                AST.LabeledStatement = LabeledStatement;
                var BreakStatement = (function (_super) {
                    __extends(BreakStatement, _super);
                    function BreakStatement(label) {
                        _super.call(this);
                        this.label = label;
                        this.type = 'BreakStatement';
                    }
                    BreakStatement.prototype.toSource = function (precedence) {
                        var result = "break";
                        if (this.label) {
                            result += " " + this.label.toSource(Precedence.Default);
                        }
                        return result + ";";
                    };
                    return BreakStatement;
                })(Statement);
                AST.BreakStatement = BreakStatement;
                var ContinueStatement = (function (_super) {
                    __extends(ContinueStatement, _super);
                    function ContinueStatement(label) {
                        _super.call(this);
                        this.label = label;
                        this.type = 'ContinueStatement';
                    }
                    ContinueStatement.prototype.toSource = function (precedence) {
                        var result = "continue";
                        if (this.label) {
                            result += " " + this.label.toSource(Precedence.Default);
                        }
                        return result + ";";
                    };
                    return ContinueStatement;
                })(Statement);
                AST.ContinueStatement = ContinueStatement;
                var WithStatement = (function (_super) {
                    __extends(WithStatement, _super);
                    function WithStatement(object, body) {
                        _super.call(this);
                        this.object = object;
                        this.body = body;
                        this.type = 'WithStatement';
                    }
                    return WithStatement;
                })(Statement);
                AST.WithStatement = WithStatement;
                var SwitchStatement = (function (_super) {
                    __extends(SwitchStatement, _super);
                    function SwitchStatement(discriminant, cases, lexical) {
                        _super.call(this);
                        this.discriminant = discriminant;
                        this.cases = cases;
                        this.lexical = lexical;
                        this.type = 'SwitchStatement';
                    }
                    SwitchStatement.prototype.toSource = function (precedence) {
                        return "switch(" + this.discriminant.toSource(Precedence.Sequence) + "){" + nodesToSource(this.cases, Precedence.Default, ";") + "};";
                    };
                    return SwitchStatement;
                })(Statement);
                AST.SwitchStatement = SwitchStatement;
                var ReturnStatement = (function (_super) {
                    __extends(ReturnStatement, _super);
                    function ReturnStatement(argument) {
                        _super.call(this);
                        this.argument = argument;
                        this.type = 'ReturnStatement';
                    }
                    ReturnStatement.prototype.toSource = function (precedence) {
                        var result = "return ";
                        if (this.argument) {
                            result += this.argument.toSource(Precedence.Sequence);
                        }
                        return result + ";\n";
                    };
                    return ReturnStatement;
                })(Statement);
                AST.ReturnStatement = ReturnStatement;
                var ThrowStatement = (function (_super) {
                    __extends(ThrowStatement, _super);
                    function ThrowStatement(argument) {
                        _super.call(this);
                        this.argument = argument;
                        this.type = 'ThrowStatement';
                    }
                    ThrowStatement.prototype.toSource = function (precedence) {
                        return "throw " + this.argument.toSource(Precedence.Sequence) + ";\n";
                    };
                    return ThrowStatement;
                })(Statement);
                AST.ThrowStatement = ThrowStatement;
                var TryStatement = (function (_super) {
                    __extends(TryStatement, _super);
                    function TryStatement(block, handlers, guardedHandlers, finalizer) {
                        _super.call(this);
                        this.block = block;
                        this.handlers = handlers;
                        this.guardedHandlers = guardedHandlers;
                        this.finalizer = finalizer;
                        this.type = 'TryStatement';
                    }
                    return TryStatement;
                })(Statement);
                AST.TryStatement = TryStatement;
                var WhileStatement = (function (_super) {
                    __extends(WhileStatement, _super);
                    function WhileStatement(test, body) {
                        _super.call(this);
                        this.test = test;
                        this.body = body;
                        this.type = 'WhileStatement';
                    }
                    WhileStatement.prototype.toSource = function (precedence) {
                        return "while(" + this.test.toSource(Precedence.Sequence) + "){" + this.body.toSource(Precedence.Sequence) + "}";
                    };
                    return WhileStatement;
                })(Statement);
                AST.WhileStatement = WhileStatement;
                var DoWhileStatement = (function (_super) {
                    __extends(DoWhileStatement, _super);
                    function DoWhileStatement(body, test) {
                        _super.call(this);
                        this.body = body;
                        this.test = test;
                        this.type = 'DoWhileStatement';
                    }
                    return DoWhileStatement;
                })(Statement);
                AST.DoWhileStatement = DoWhileStatement;
                var ForStatement = (function (_super) {
                    __extends(ForStatement, _super);
                    function ForStatement(init, test, update, body) {
                        _super.call(this);
                        this.init = init;
                        this.test = test;
                        this.update = update;
                        this.body = body;
                        this.type = 'ForStatement';
                    }
                    return ForStatement;
                })(Statement);
                AST.ForStatement = ForStatement;
                var ForInStatement = (function (_super) {
                    __extends(ForInStatement, _super);
                    function ForInStatement(left, right, body, each) {
                        _super.call(this);
                        this.left = left;
                        this.right = right;
                        this.body = body;
                        this.each = each;
                        this.type = 'ForInStatement';
                    }
                    return ForInStatement;
                })(Statement);
                AST.ForInStatement = ForInStatement;
                var DebuggerStatement = (function (_super) {
                    __extends(DebuggerStatement, _super);
                    function DebuggerStatement() {
                        _super.apply(this, arguments);
                        this.type = 'DebuggerStatement';
                    }
                    return DebuggerStatement;
                })(Statement);
                AST.DebuggerStatement = DebuggerStatement;
                var Declaration = (function (_super) {
                    __extends(Declaration, _super);
                    function Declaration() {
                        _super.apply(this, arguments);
                        this.type = 'Declaration';
                    }
                    return Declaration;
                })(Statement);
                AST.Declaration = Declaration;
                var FunctionDeclaration = (function (_super) {
                    __extends(FunctionDeclaration, _super);
                    function FunctionDeclaration(id, params, defaults, rest, body, generator, expression) {
                        _super.call(this);
                        this.id = id;
                        this.params = params;
                        this.defaults = defaults;
                        this.rest = rest;
                        this.body = body;
                        this.generator = generator;
                        this.expression = expression;
                        this.type = 'FunctionDeclaration';
                    }
                    return FunctionDeclaration;
                })(Declaration);
                AST.FunctionDeclaration = FunctionDeclaration;
                var VariableDeclaration = (function (_super) {
                    __extends(VariableDeclaration, _super);
                    function VariableDeclaration(declarations, kind) {
                        _super.call(this);
                        this.declarations = declarations;
                        this.kind = kind;
                        this.type = 'VariableDeclaration';
                    }
                    VariableDeclaration.prototype.toSource = function (precedence) {
                        return this.kind + " " + nodesToSource(this.declarations, precedence, ",") + ";\n";
                    };
                    return VariableDeclaration;
                })(Declaration);
                AST.VariableDeclaration = VariableDeclaration;
                var VariableDeclarator = (function (_super) {
                    __extends(VariableDeclarator, _super);
                    function VariableDeclarator(id, init) {
                        _super.call(this);
                        this.id = id;
                        this.init = init;
                        this.type = 'VariableDeclarator';
                    }
                    VariableDeclarator.prototype.toSource = function (precedence) {
                        var result = this.id.toSource(Precedence.Assignment);
                        if (this.init) {
                            result += "=" + this.init.toSource(Precedence.Assignment);
                        }
                        return result;
                    };
                    return VariableDeclarator;
                })(Node);
                AST.VariableDeclarator = VariableDeclarator;
                var Identifier = (function (_super) {
                    __extends(Identifier, _super);
                    function Identifier(name) {
                        _super.call(this);
                        this.name = name;
                        this.type = 'Identifier';
                    }
                    Identifier.prototype.toSource = function (precedence) {
                        return this.name;
                    };
                    return Identifier;
                })(Expression);
                AST.Identifier = Identifier;
                var Literal = (function (_super) {
                    __extends(Literal, _super);
                    function Literal(value) {
                        _super.call(this);
                        this.value = value;
                        this.type = 'Literal';
                    }
                    Literal.prototype.toSource = function (precedence) {
                        return toLiteralSource(this.value);
                    };
                    return Literal;
                })(Expression);
                AST.Literal = Literal;
                var ThisExpression = (function (_super) {
                    __extends(ThisExpression, _super);
                    function ThisExpression() {
                        _super.apply(this, arguments);
                        this.type = 'ThisExpression';
                    }
                    ThisExpression.prototype.toSource = function (precedence) {
                        return "this";
                    };
                    return ThisExpression;
                })(Expression);
                AST.ThisExpression = ThisExpression;
                var ArrayExpression = (function (_super) {
                    __extends(ArrayExpression, _super);
                    function ArrayExpression(elements) {
                        _super.call(this);
                        this.elements = elements;
                        this.type = 'ArrayExpression';
                    }
                    ArrayExpression.prototype.toSource = function (precedence) {
                        return "[" + nodesToSource(this.elements, Precedence.Assignment, ",") + "]";
                    };
                    return ArrayExpression;
                })(Expression);
                AST.ArrayExpression = ArrayExpression;
                var ObjectExpression = (function (_super) {
                    __extends(ObjectExpression, _super);
                    function ObjectExpression(properties) {
                        _super.call(this);
                        this.properties = properties;
                        this.type = 'ObjectExpression';
                    }
                    ObjectExpression.prototype.toSource = function (precedence) {
                        return "{" + nodesToSource(this.properties, Precedence.Sequence, ",") + "}";
                    };
                    return ObjectExpression;
                })(Expression);
                AST.ObjectExpression = ObjectExpression;
                var FunctionExpression = (function (_super) {
                    __extends(FunctionExpression, _super);
                    function FunctionExpression(id, params, defaults, rest, body, generator, expression) {
                        _super.call(this);
                        this.id = id;
                        this.params = params;
                        this.defaults = defaults;
                        this.rest = rest;
                        this.body = body;
                        this.generator = generator;
                        this.expression = expression;
                        this.type = 'FunctionExpression';
                    }
                    return FunctionExpression;
                })(Expression);
                AST.FunctionExpression = FunctionExpression;
                var SequenceExpression = (function (_super) {
                    __extends(SequenceExpression, _super);
                    function SequenceExpression(expressions) {
                        _super.call(this);
                        this.expressions = expressions;
                        this.type = 'SequenceExpression';
                    }
                    return SequenceExpression;
                })(Expression);
                AST.SequenceExpression = SequenceExpression;
                var UnaryExpression = (function (_super) {
                    __extends(UnaryExpression, _super);
                    function UnaryExpression(operator, prefix, argument) {
                        _super.call(this);
                        this.operator = operator;
                        this.prefix = prefix;
                        this.argument = argument;
                        this.type = 'UnaryExpression';
                    }
                    UnaryExpression.prototype.toSource = function (precedence) {
                        var argument = this.argument.toSource(Precedence.Unary);
                        var result = this.prefix ? this.operator + argument : argument + this.operator;
                        result = " " + result;
                        result = parenthesize(result, Precedence.Unary, precedence);
                        return result;
                    };
                    return UnaryExpression;
                })(Expression);
                AST.UnaryExpression = UnaryExpression;
                var BinaryExpression = (function (_super) {
                    __extends(BinaryExpression, _super);
                    function BinaryExpression(operator, left, right) {
                        _super.call(this);
                        this.operator = operator;
                        this.left = left;
                        this.right = right;
                        this.type = 'BinaryExpression';
                    }
                    BinaryExpression.prototype.toSource = function (precedence) {
                        var currentPrecedence = BinaryPrecedence[this.operator];
                        var result = this.left.toSource(currentPrecedence) + this.operator + this.right.toSource(currentPrecedence + 1);
                        return parenthesize(result, currentPrecedence, precedence);
                    };
                    return BinaryExpression;
                })(Expression);
                AST.BinaryExpression = BinaryExpression;
                var AssignmentExpression = (function (_super) {
                    __extends(AssignmentExpression, _super);
                    function AssignmentExpression(operator, left, right) {
                        _super.call(this);
                        this.operator = operator;
                        this.left = left;
                        this.right = right;
                        this.type = 'AssignmentExpression';
                    }
                    AssignmentExpression.prototype.toSource = function (precedence) {
                        var result = this.left.toSource(Precedence.Assignment) + this.operator + this.right.toSource(Precedence.Assignment);
                        return parenthesize(result, Precedence.Assignment, precedence);
                    };
                    return AssignmentExpression;
                })(Expression);
                AST.AssignmentExpression = AssignmentExpression;
                var UpdateExpression = (function (_super) {
                    __extends(UpdateExpression, _super);
                    function UpdateExpression(operator, argument, prefix) {
                        _super.call(this);
                        this.operator = operator;
                        this.argument = argument;
                        this.prefix = prefix;
                        this.type = 'UpdateExpression';
                    }
                    return UpdateExpression;
                })(Expression);
                AST.UpdateExpression = UpdateExpression;
                var LogicalExpression = (function (_super) {
                    __extends(LogicalExpression, _super);
                    function LogicalExpression(operator, left, right) {
                        _super.call(this, operator, left, right);
                        this.type = 'LogicalExpression';
                    }
                    return LogicalExpression;
                })(BinaryExpression);
                AST.LogicalExpression = LogicalExpression;
                var ConditionalExpression = (function (_super) {
                    __extends(ConditionalExpression, _super);
                    function ConditionalExpression(test, consequent, alternate) {
                        _super.call(this);
                        this.test = test;
                        this.consequent = consequent;
                        this.alternate = alternate;
                        this.type = 'ConditionalExpression';
                    }
                    ConditionalExpression.prototype.toSource = function (precedence) {
                        return this.test.toSource(Precedence.LogicalOR) + "?" + this.consequent.toSource(Precedence.Assignment) + ":" + this.alternate.toSource(Precedence.Assignment);
                    };
                    return ConditionalExpression;
                })(Expression);
                AST.ConditionalExpression = ConditionalExpression;
                var NewExpression = (function (_super) {
                    __extends(NewExpression, _super);
                    function NewExpression(callee, _arguments) {
                        _super.call(this);
                        this.callee = callee;
                        this.type = 'NewExpression';
                        this.arguments = _arguments;
                    }
                    NewExpression.prototype.toSource = function (precedence) {
                        return "new " + this.callee.toSource(precedence) + "(" + nodesToSource(this.arguments, precedence, ",") + ")";
                    };
                    return NewExpression;
                })(Expression);
                AST.NewExpression = NewExpression;
                var CallExpression = (function (_super) {
                    __extends(CallExpression, _super);
                    function CallExpression(callee, _arguments) {
                        _super.call(this);
                        this.callee = callee;
                        this.type = 'CallExpression';
                        this.arguments = _arguments;
                    }
                    CallExpression.prototype.toSource = function (precedence) {
                        return this.callee.toSource(precedence) + "(" + nodesToSource(this.arguments, precedence, ",") + ")";
                    };
                    return CallExpression;
                })(Expression);
                AST.CallExpression = CallExpression;
                var MemberExpression = (function (_super) {
                    __extends(MemberExpression, _super);
                    function MemberExpression(object, property, computed) {
                        _super.call(this);
                        this.object = object;
                        this.property = property;
                        this.computed = computed;
                        this.type = 'MemberExpression';
                    }
                    MemberExpression.prototype.toSource = function (precedence) {
                        var result = this.object.toSource(Precedence.Call);
                        if (this.object instanceof Literal) {
                            result = alwaysParenthesize(result);
                        }
                        var property = this.property.toSource(Precedence.Sequence);
                        if (this.computed) {
                            result += "[" + property + "]";
                        }
                        else {
                            result += "." + property;
                        }
                        return parenthesize(result, Precedence.Member, precedence);
                    };
                    return MemberExpression;
                })(Expression);
                AST.MemberExpression = MemberExpression;
                var Property = (function (_super) {
                    __extends(Property, _super);
                    function Property(key, value, kind) {
                        _super.call(this);
                        this.key = key;
                        this.value = value;
                        this.kind = kind;
                        this.type = 'Property';
                    }
                    Property.prototype.toSource = function (precedence) {
                        return this.key.toSource(precedence) + ":" + this.value.toSource(precedence);
                    };
                    return Property;
                })(Node);
                AST.Property = Property;
                var SwitchCase = (function (_super) {
                    __extends(SwitchCase, _super);
                    function SwitchCase(test, consequent) {
                        _super.call(this);
                        this.test = test;
                        this.consequent = consequent;
                        this.type = 'SwitchCase';
                    }
                    SwitchCase.prototype.toSource = function (precedence) {
                        var result = this.test ? "case " + this.test.toSource(precedence) : "default";
                        return result + ": " + nodesToSource(this.consequent, precedence, ";");
                    };
                    return SwitchCase;
                })(Node);
                AST.SwitchCase = SwitchCase;
                var CatchClause = (function (_super) {
                    __extends(CatchClause, _super);
                    function CatchClause(param, guard, body) {
                        _super.call(this);
                        this.param = param;
                        this.guard = guard;
                        this.body = body;
                        this.type = 'CatchClause';
                    }
                    return CatchClause;
                })(Node);
                AST.CatchClause = CatchClause;
            })(AST = Compiler.AST || (Compiler.AST = {}));
        })(Compiler = AVM2.Compiler || (AVM2.Compiler = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var Compiler;
        (function (Compiler) {
            var IR;
            (function (IR) {
                var ASScope = (function (_super) {
                    __extends(ASScope, _super);
                    function ASScope(parent, object, isWith) {
                        _super.call(this);
                        this.parent = parent;
                        this.object = object;
                        this.isWith = isWith;
                    }
                    ASScope.prototype.visitInputs = function (visitor) {
                        visitor(this.parent);
                        visitor(this.object);
                    };
                    return ASScope;
                })(IR.Value);
                IR.ASScope = ASScope;
                ASScope.prototype.nodeName = "ASScope";
                var ASMultiname = (function (_super) {
                    __extends(ASMultiname, _super);
                    function ASMultiname(namespaces, name, flags) {
                        _super.call(this);
                        this.namespaces = namespaces;
                        this.name = name;
                        this.flags = flags;
                    }
                    ASMultiname.prototype.visitInputs = function (visitor) {
                        visitor(this.namespaces);
                        visitor(this.name);
                        visitor(this.flags);
                    };
                    return ASMultiname;
                })(IR.Value);
                IR.ASMultiname = ASMultiname;
                ASMultiname.prototype.mustFloat = true;
                ASMultiname.prototype.nodeName = "ASMultiname";
                var ASCallProperty = (function (_super) {
                    __extends(ASCallProperty, _super);
                    function ASCallProperty(control, store, object, name, args, flags, isLex) {
                        _super.call(this, control, store, object, name, args, flags);
                        this.isLex = isLex;
                    }
                    return ASCallProperty;
                })(IR.CallProperty);
                IR.ASCallProperty = ASCallProperty;
                ASCallProperty.prototype.nodeName = "ASCallProperty";
                var ASCallSuper = (function (_super) {
                    __extends(ASCallSuper, _super);
                    function ASCallSuper(control, store, object, name, args, flags, scope) {
                        _super.call(this, control, store, object, name, args, flags);
                        this.scope = scope;
                    }
                    ASCallSuper.prototype.visitInputs = function (visitor) {
                        _super.prototype.visitInputs.call(this, visitor);
                        visitor(this.scope);
                    };
                    return ASCallSuper;
                })(IR.CallProperty);
                IR.ASCallSuper = ASCallSuper;
                ASCallSuper.prototype.nodeName = "ASCallSuper";
                var ASNew = (function (_super) {
                    __extends(ASNew, _super);
                    function ASNew(control, store, callee, args) {
                        _super.call(this, control, store, callee, args);
                    }
                    return ASNew;
                })(IR.New);
                IR.ASNew = ASNew;
                ASNew.prototype.nodeName = "ASNew";
                var ASGetProperty = (function (_super) {
                    __extends(ASGetProperty, _super);
                    function ASGetProperty(control, store, object, name, flags) {
                        _super.call(this, control, store, object, name);
                        this.flags = flags;
                    }
                    return ASGetProperty;
                })(IR.GetProperty);
                IR.ASGetProperty = ASGetProperty;
                ASGetProperty.prototype.nodeName = "ASGetProperty";
                var ASGetDescendants = (function (_super) {
                    __extends(ASGetDescendants, _super);
                    function ASGetDescendants(control, store, object, name) {
                        _super.call(this, control, store, object, name);
                    }
                    return ASGetDescendants;
                })(IR.GetProperty);
                IR.ASGetDescendants = ASGetDescendants;
                ASGetDescendants.prototype.nodeName = "ASGetDescendants";
                var ASHasProperty = (function (_super) {
                    __extends(ASHasProperty, _super);
                    function ASHasProperty(control, store, object, name) {
                        _super.call(this, control, store, object, name);
                    }
                    return ASHasProperty;
                })(IR.GetProperty);
                IR.ASHasProperty = ASHasProperty;
                ASHasProperty.prototype.nodeName = "ASHasProperty";
                var ASGetSlot = (function (_super) {
                    __extends(ASGetSlot, _super);
                    function ASGetSlot(control, store, object, name) {
                        _super.call(this, control, store, object, name);
                    }
                    return ASGetSlot;
                })(IR.GetProperty);
                IR.ASGetSlot = ASGetSlot;
                ASGetSlot.prototype.nodeName = "ASGetSlot";
                var ASGetSuper = (function (_super) {
                    __extends(ASGetSuper, _super);
                    function ASGetSuper(control, store, object, name, scope) {
                        _super.call(this, control, store, object, name);
                        this.scope = scope;
                    }
                    ASGetSuper.prototype.visitInputs = function (visitor) {
                        _super.prototype.visitInputs.call(this, visitor);
                        visitor(this.scope);
                    };
                    return ASGetSuper;
                })(IR.GetProperty);
                IR.ASGetSuper = ASGetSuper;
                ASGetSuper.prototype.nodeName = "ASGetSuper";
                var ASSetProperty = (function (_super) {
                    __extends(ASSetProperty, _super);
                    function ASSetProperty(control, store, object, name, value, flags) {
                        _super.call(this, control, store, object, name, value);
                        this.flags = flags;
                    }
                    return ASSetProperty;
                })(IR.SetProperty);
                IR.ASSetProperty = ASSetProperty;
                ASSetProperty.prototype.nodeName = "ASSetProperty";
                var ASSetSlot = (function (_super) {
                    __extends(ASSetSlot, _super);
                    function ASSetSlot(control, store, object, name, value) {
                        _super.call(this, control, store, object, name, value);
                    }
                    return ASSetSlot;
                })(IR.SetProperty);
                IR.ASSetSlot = ASSetSlot;
                ASSetSlot.prototype.nodeName = "ASSetSlot";
                var ASSetSuper = (function (_super) {
                    __extends(ASSetSuper, _super);
                    function ASSetSuper(control, store, object, name, value, scope) {
                        _super.call(this, control, store, object, name, value);
                        this.scope = scope;
                    }
                    ASSetSuper.prototype.visitInputs = function (visitor) {
                        _super.prototype.visitInputs.call(this, visitor);
                        visitor(this.scope);
                    };
                    return ASSetSuper;
                })(IR.SetProperty);
                IR.ASSetSuper = ASSetSuper;
                ASSetSuper.prototype.nodeName = "ASSetSuper";
                var ASDeleteProperty = (function (_super) {
                    __extends(ASDeleteProperty, _super);
                    function ASDeleteProperty(control, store, object, name) {
                        _super.call(this, control, store, object, name);
                    }
                    return ASDeleteProperty;
                })(IR.DeleteProperty);
                IR.ASDeleteProperty = ASDeleteProperty;
                ASDeleteProperty.prototype.nodeName = "ASDeleteProperty";
                var ASFindProperty = (function (_super) {
                    __extends(ASFindProperty, _super);
                    function ASFindProperty(control, store, scope, name, methodInfo, strict) {
                        _super.call(this, control, store);
                        this.scope = scope;
                        this.name = name;
                        this.methodInfo = methodInfo;
                        this.strict = strict;
                    }
                    ASFindProperty.prototype.visitInputs = function (visitor) {
                        _super.prototype.visitInputs.call(this, visitor);
                        visitor(this.scope);
                        visitor(this.name);
                    };
                    return ASFindProperty;
                })(IR.StoreDependent);
                IR.ASFindProperty = ASFindProperty;
                ASFindProperty.prototype.nodeName = "ASFindProperty";
                var ASGlobal = (function (_super) {
                    __extends(ASGlobal, _super);
                    function ASGlobal(control, scope) {
                        _super.call(this);
                        this.control = control;
                        this.scope = scope;
                    }
                    ASGlobal.prototype.visitInputs = function (visitor) {
                        this.control && visitor(this.control);
                        visitor(this.scope);
                    };
                    return ASGlobal;
                })(IR.Value);
                IR.ASGlobal = ASGlobal;
                ASGlobal.prototype.nodeName = "ASGlobal";
                var ASNewActivation = (function (_super) {
                    __extends(ASNewActivation, _super);
                    function ASNewActivation(methodInfo) {
                        _super.call(this);
                        this.methodInfo = methodInfo;
                    }
                    return ASNewActivation;
                })(IR.Value);
                IR.ASNewActivation = ASNewActivation;
                ASNewActivation.prototype.nodeName = "ASNewActivation";
                var ASNewHasNext2 = (function (_super) {
                    __extends(ASNewHasNext2, _super);
                    function ASNewHasNext2() {
                        _super.call(this);
                    }
                    return ASNewHasNext2;
                })(IR.Value);
                IR.ASNewHasNext2 = ASNewHasNext2;
                ASNewActivation.prototype.nodeName = "ASNewHasNext2";
            })(IR = Compiler.IR || (Compiler.IR = {}));
        })(Compiler = AVM2.Compiler || (AVM2.Compiler = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var Compiler;
        (function (Compiler) {
            var Looper;
            (function (Looper) {
                var top = Shumway.ArrayUtilities.top;
                var peek = Shumway.ArrayUtilities.peek;
                var assert = Shumway.Debug.assert;
                var Control;
                (function (Control) {
                    (function (Kind) {
                        Kind[Kind["SEQ"] = 1] = "SEQ";
                        Kind[Kind["LOOP"] = 2] = "LOOP";
                        Kind[Kind["IF"] = 3] = "IF";
                        Kind[Kind["CASE"] = 4] = "CASE";
                        Kind[Kind["SWITCH"] = 5] = "SWITCH";
                        Kind[Kind["LABEL_CASE"] = 6] = "LABEL_CASE";
                        Kind[Kind["LABEL_SWITCH"] = 7] = "LABEL_SWITCH";
                        Kind[Kind["EXIT"] = 8] = "EXIT";
                        Kind[Kind["BREAK"] = 9] = "BREAK";
                        Kind[Kind["CONTINUE"] = 10] = "CONTINUE";
                        Kind[Kind["TRY"] = 11] = "TRY";
                        Kind[Kind["CATCH"] = 12] = "CATCH";
                    })(Control.Kind || (Control.Kind = {}));
                    var Kind = Control.Kind;
                    var ControlNode = (function () {
                        function ControlNode(kind) {
                            this.kind = kind;
                        }
                        return ControlNode;
                    })();
                    Control.ControlNode = ControlNode;
                    var Seq = (function (_super) {
                        __extends(Seq, _super);
                        function Seq(body) {
                            _super.call(this, 1 /* SEQ */);
                            this.body = body;
                        }
                        Seq.prototype.trace = function (writer) {
                            var body = this.body;
                            for (var i = 0, j = body.length; i < j; i++) {
                                body[i].trace(writer);
                            }
                        };
                        Seq.prototype.first = function () {
                            return this.body[0];
                        };
                        Seq.prototype.slice = function (begin, end) {
                            return new Seq(this.body.slice(begin, end));
                        };
                        return Seq;
                    })(ControlNode);
                    Control.Seq = Seq;
                    var Loop = (function (_super) {
                        __extends(Loop, _super);
                        function Loop(body) {
                            _super.call(this, 2 /* LOOP */);
                            this.body = body;
                        }
                        Loop.prototype.trace = function (writer) {
                            writer.enter("loop {");
                            this.body.trace(writer);
                            writer.leave("}");
                        };
                        return Loop;
                    })(ControlNode);
                    Control.Loop = Loop;
                    var If = (function (_super) {
                        __extends(If, _super);
                        function If(cond, then, els, nothingThrownLabel) {
                            _super.call(this, 3 /* IF */);
                            this.cond = cond;
                            this.then = then;
                            this.nothingThrownLabel = nothingThrownLabel;
                            this.negated = false;
                            this.else = els;
                        }
                        If.prototype.trace = function (writer) {
                            this.cond.trace(writer);
                            if (this.nothingThrownLabel) {
                                writer.enter("if (label is " + this.nothingThrownLabel + ") {");
                            }
                            writer.enter("if" + (this.negated ? " not" : "") + " {");
                            this.then && this.then.trace(writer);
                            if (this.else) {
                                writer.outdent();
                                writer.enter("} else {");
                                this.else.trace(writer);
                            }
                            writer.leave("}");
                            if (this.nothingThrownLabel) {
                                writer.leave("}");
                            }
                        };
                        return If;
                    })(ControlNode);
                    Control.If = If;
                    var Case = (function (_super) {
                        __extends(Case, _super);
                        function Case(index, body) {
                            _super.call(this, 4 /* CASE */);
                            this.index = index;
                            this.body = body;
                        }
                        Case.prototype.trace = function (writer) {
                            if (this.index >= 0) {
                                writer.writeLn("case " + this.index + ":");
                            }
                            else {
                                writer.writeLn("default:");
                            }
                            writer.indent();
                            this.body && this.body.trace(writer);
                            writer.outdent();
                        };
                        return Case;
                    })(ControlNode);
                    Control.Case = Case;
                    var Switch = (function (_super) {
                        __extends(Switch, _super);
                        function Switch(determinant, cases, nothingThrownLabel) {
                            _super.call(this, 5 /* SWITCH */);
                            this.determinant = determinant;
                            this.cases = cases;
                            this.nothingThrownLabel = nothingThrownLabel;
                        }
                        Switch.prototype.trace = function (writer) {
                            if (this.nothingThrownLabel) {
                                writer.enter("if (label is " + this.nothingThrownLabel + ") {");
                            }
                            this.determinant.trace(writer);
                            writer.writeLn("switch {");
                            for (var i = 0, j = this.cases.length; i < j; i++) {
                                this.cases[i].trace(writer);
                            }
                            writer.writeLn("}");
                            if (this.nothingThrownLabel) {
                                writer.leave("}");
                            }
                        };
                        return Switch;
                    })(ControlNode);
                    Control.Switch = Switch;
                    var LabelCase = (function (_super) {
                        __extends(LabelCase, _super);
                        function LabelCase(labels, body) {
                            _super.call(this, 6 /* LABEL_CASE */);
                            this.labels = labels;
                            this.body = body;
                        }
                        LabelCase.prototype.trace = function (writer) {
                            writer.enter("if (label is " + this.labels.join(" or ") + ") {");
                            this.body && this.body.trace(writer);
                            writer.leave("}");
                        };
                        return LabelCase;
                    })(ControlNode);
                    Control.LabelCase = LabelCase;
                    var LabelSwitch = (function (_super) {
                        __extends(LabelSwitch, _super);
                        function LabelSwitch(cases) {
                            _super.call(this, 7 /* LABEL_SWITCH */);
                            this.cases = cases;
                            var labelMap = {};
                            for (var i = 0, j = cases.length; i < j; i++) {
                                var c = cases[i];
                                if (!c.labels) {
                                }
                                for (var k = 0, l = c.labels.length; k < l; k++) {
                                    labelMap[c.labels[k]] = c;
                                }
                            }
                            this.labelMap = labelMap;
                        }
                        LabelSwitch.prototype.trace = function (writer) {
                            for (var i = 0, j = this.cases.length; i < j; i++) {
                                this.cases[i].trace(writer);
                            }
                        };
                        return LabelSwitch;
                    })(ControlNode);
                    Control.LabelSwitch = LabelSwitch;
                    var Exit = (function (_super) {
                        __extends(Exit, _super);
                        function Exit(label) {
                            _super.call(this, 8 /* EXIT */);
                            this.label = label;
                        }
                        Exit.prototype.trace = function (writer) {
                            writer.writeLn("label = " + this.label);
                        };
                        return Exit;
                    })(ControlNode);
                    Control.Exit = Exit;
                    var Break = (function (_super) {
                        __extends(Break, _super);
                        function Break(label, head) {
                            _super.call(this, 9 /* BREAK */);
                            this.label = label;
                            this.head = head;
                        }
                        Break.prototype.trace = function (writer) {
                            this.label && writer.writeLn("label = " + this.label);
                            writer.writeLn("break");
                        };
                        return Break;
                    })(ControlNode);
                    Control.Break = Break;
                    var Continue = (function (_super) {
                        __extends(Continue, _super);
                        function Continue(label, head) {
                            _super.call(this, 10 /* CONTINUE */);
                            this.label = label;
                            this.head = head;
                            this.necessary = true;
                        }
                        Continue.prototype.trace = function (writer) {
                            this.label && writer.writeLn("label = " + this.label);
                            this.necessary && writer.writeLn("continue");
                        };
                        return Continue;
                    })(ControlNode);
                    Control.Continue = Continue;
                    var Try = (function (_super) {
                        __extends(Try, _super);
                        function Try(body, catches) {
                            _super.call(this, 11 /* TRY */);
                            this.body = body;
                            this.catches = catches;
                        }
                        Try.prototype.trace = function (writer) {
                            writer.enter("try {");
                            this.body.trace(writer);
                            writer.writeLn("label = " + this.nothingThrownLabel);
                            for (var i = 0, j = this.catches.length; i < j; i++) {
                                this.catches[i].trace(writer);
                            }
                            writer.leave("}");
                        };
                        return Try;
                    })(ControlNode);
                    Control.Try = Try;
                    var Catch = (function (_super) {
                        __extends(Catch, _super);
                        function Catch(varName, typeName, body) {
                            _super.call(this, 12 /* CATCH */);
                            this.varName = varName;
                            this.typeName = typeName;
                            this.body = body;
                        }
                        Catch.prototype.trace = function (writer) {
                            writer.outdent();
                            writer.enter("} catch (" + (this.varName || "e") + (this.typeName ? (" : " + this.typeName) : "") + ") {");
                            this.body.trace(writer);
                        };
                        return Catch;
                    })(ControlNode);
                    Control.Catch = Catch;
                })(Control = Looper.Control || (Looper.Control = {}));
                var BITS_PER_WORD = Shumway.BitSets.BITS_PER_WORD;
                var ADDRESS_BITS_PER_WORD = Shumway.BitSets.ADDRESS_BITS_PER_WORD;
                var BIT_INDEX_MASK = Shumway.BitSets.BIT_INDEX_MASK;
                var BlockSet = (function (_super) {
                    __extends(BlockSet, _super);
                    function BlockSet(length, blockById) {
                        _super.call(this, length);
                        this.blockById = blockById;
                    }
                    BlockSet.prototype.forEachBlock = function (fn) {
                        release || assert(fn);
                        var byId = this.blockById;
                        var bits = this.bits;
                        for (var i = 0, j = bits.length; i < j; i++) {
                            var word = bits[i];
                            if (word) {
                                for (var k = 0; k < BITS_PER_WORD; k++) {
                                    if (word & (1 << k)) {
                                        fn(byId[i * BITS_PER_WORD + k]);
                                    }
                                }
                            }
                        }
                    };
                    BlockSet.prototype.choose = function () {
                        var byId = this.blockById;
                        var bits = this.bits;
                        for (var i = 0, j = bits.length; i < j; i++) {
                            var word = bits[i];
                            if (word) {
                                for (var k = 0; k < BITS_PER_WORD; k++) {
                                    if (word & (1 << k)) {
                                        return byId[i * BITS_PER_WORD + k];
                                    }
                                }
                            }
                        }
                    };
                    BlockSet.prototype.members = function () {
                        var byId = this.blockById;
                        var set = [];
                        var bits = this.bits;
                        for (var i = 0, j = bits.length; i < j; i++) {
                            var word = bits[i];
                            if (word) {
                                for (var k = 0; k < BITS_PER_WORD; k++) {
                                    if (word & (1 << k)) {
                                        set.push(byId[i * BITS_PER_WORD + k]);
                                    }
                                }
                            }
                        }
                        return set;
                    };
                    BlockSet.prototype.setBlocks = function (bs) {
                        var bits = this.bits;
                        for (var i = 0, j = bs.length; i < j; i++) {
                            var id = bs[i].id;
                            bits[id >> ADDRESS_BITS_PER_WORD] |= 1 << (id & BIT_INDEX_MASK);
                        }
                    };
                    return BlockSet;
                })(Shumway.BitSets.Uint32ArrayBitSet);
                Looper.BlockSet = BlockSet;
                var Analysis = (function () {
                    function Analysis(cfg) {
                        this.makeBlockSetFactory(cfg.blocks.length, cfg.blocks);
                        this.hasExceptions = false;
                        this.normalizeReachableBlocks(cfg.root);
                    }
                    Analysis.prototype.makeBlockSetFactory = function (length, blockById) {
                        release || assert(!this.boundBlockSet);
                        this.boundBlockSet = (function blockSet() {
                            return new BlockSet(length, blockById);
                        });
                    };
                    Analysis.prototype.normalizeReachableBlocks = function (root) {
                        release || assert(root.predecessors.length === 0);
                        var ONCE = 1;
                        var BUNCH_OF_TIMES = 2;
                        var BlockSet = this.boundBlockSet;
                        var blocks = [];
                        var visited = {};
                        var ancestors = {};
                        var worklist = [root];
                        var node;
                        ancestors[root.id] = true;
                        while ((node = top(worklist))) {
                            if (visited[node.id]) {
                                if (visited[node.id] === ONCE) {
                                    visited[node.id] = BUNCH_OF_TIMES;
                                    blocks.push(node);
                                }
                                ancestors[node.id] = false;
                                worklist.pop();
                                continue;
                            }
                            visited[node.id] = ONCE;
                            ancestors[node.id] = true;
                            var successors = node.successors;
                            for (var i = 0, j = successors.length; i < j; i++) {
                                var s = successors[i];
                                if (ancestors[s.id]) {
                                    if (!node.spbacks) {
                                        node.spbacks = new BlockSet();
                                    }
                                    node.spbacks.set(s.id);
                                }
                                !visited[s.id] && worklist.push(s);
                            }
                        }
                        this.blocks = blocks.reverse();
                    };
                    Analysis.prototype.computeDominance = function () {
                        function intersectDominators(doms, b1, b2) {
                            var finger1 = b1;
                            var finger2 = b2;
                            while (finger1 !== finger2) {
                                while (finger1 > finger2) {
                                    finger1 = doms[finger1];
                                }
                                while (finger2 > finger1) {
                                    finger2 = doms[finger2];
                                }
                            }
                            return finger1;
                        }
                        var blocks = this.blocks;
                        var n = blocks.length;
                        var doms = new Array(n);
                        doms[0] = 0;
                        var rpo = [];
                        for (var b = 0; b < n; b++) {
                            rpo[blocks[b].id] = b;
                            blocks[b].dominatees = [];
                        }
                        var changed = true;
                        while (changed) {
                            changed = false;
                            for (var b = 1; b < n; b++) {
                                var predecessors = blocks[b].predecessors;
                                var j = predecessors.length;
                                var newIdom = rpo[predecessors[0].id];
                                if (!(newIdom in doms)) {
                                    for (var i = 1; i < j; i++) {
                                        newIdom = rpo[predecessors[i].id];
                                        if (newIdom in doms) {
                                            break;
                                        }
                                    }
                                }
                                release || assert(newIdom in doms);
                                for (var i = 0; i < j; i++) {
                                    var p = rpo[predecessors[i].id];
                                    if (p === newIdom) {
                                        continue;
                                    }
                                    if (p in doms) {
                                        newIdom = intersectDominators(doms, p, newIdom);
                                    }
                                }
                                if (doms[b] !== newIdom) {
                                    doms[b] = newIdom;
                                    changed = true;
                                }
                            }
                        }
                        blocks[0].dominator = blocks[0];
                        var block;
                        for (var b = 1; b < n; b++) {
                            block = blocks[b];
                            var idom = blocks[doms[b]];
                            block.dominator = idom;
                            idom.dominatees.push(block);
                            block.npredecessors = block.predecessors.length;
                        }
                        var worklist = [blocks[0]];
                        blocks[0].level || (blocks[0].level = 0);
                        while ((block = worklist.shift())) {
                            var dominatees = block.dominatees;
                            for (var i = 0; i < dominatees.length; i++) {
                                dominatees[i].level = block.level + 1;
                            }
                            worklist.push.apply(worklist, dominatees);
                        }
                    };
                    Analysis.prototype.computeFrontiers = function () {
                        var BlockSet = this.boundBlockSet;
                        var blocks = this.blocks;
                        for (var b = 0, n = blocks.length; b < n; b++) {
                            blocks[b].frontier = new BlockSet();
                        }
                        for (var b = 1, n = blocks.length; b < n; b++) {
                            var block = blocks[b];
                            var predecessors = block.predecessors;
                            if (predecessors.length >= 2) {
                                var idom = block.dominator;
                                for (var i = 0, j = predecessors.length; i < j; i++) {
                                    var runner = predecessors[i];
                                    while (runner !== idom) {
                                        runner.frontier.set(block.id);
                                        runner = runner.dominator;
                                    }
                                }
                            }
                        }
                    };
                    Analysis.prototype.analyzeControlFlow = function () {
                        this.computeDominance();
                        this.analyzedControlFlow = true;
                        return true;
                    };
                    Analysis.prototype.markLoops = function () {
                        if (!this.analyzedControlFlow && !this.analyzeControlFlow()) {
                            return false;
                        }
                        var BlockSet = this.boundBlockSet;
                        function findSCCs(root) {
                            var preorderId = 1;
                            var preorder = {};
                            var assigned = {};
                            var unconnectedNodes = [];
                            var pendingNodes = [];
                            var sccs = [];
                            var level = root.level + 1;
                            var worklist = [root];
                            var node;
                            var u, s;
                            while ((node = top(worklist))) {
                                if (preorder[node.id]) {
                                    if (peek(pendingNodes) === node) {
                                        pendingNodes.pop();
                                        var scc = [];
                                        do {
                                            u = unconnectedNodes.pop();
                                            assigned[u.id] = true;
                                            scc.push(u);
                                        } while (u !== node);
                                        if (scc.length > 1 || (u.spbacks && u.spbacks.get(u.id))) {
                                            sccs.push(scc);
                                        }
                                    }
                                    worklist.pop();
                                    continue;
                                }
                                preorder[node.id] = preorderId++;
                                unconnectedNodes.push(node);
                                pendingNodes.push(node);
                                var successors = node.successors;
                                for (var i = 0, j = successors.length; i < j; i++) {
                                    s = successors[i];
                                    if (s.level < level) {
                                        continue;
                                    }
                                    var sid = s.id;
                                    if (!preorder[sid]) {
                                        worklist.push(s);
                                    }
                                    else if (!assigned[sid]) {
                                        while (preorder[peek(pendingNodes).id] > preorder[sid]) {
                                            pendingNodes.pop();
                                        }
                                    }
                                }
                            }
                            return sccs;
                        }
                        function findLoopHeads(blocks) {
                            var heads = new BlockSet();
                            for (var i = 0, j = blocks.length; i < j; i++) {
                                var block = blocks[i];
                                var spbacks = block.spbacks;
                                if (!spbacks) {
                                    continue;
                                }
                                var successors = block.successors;
                                for (var k = 0, l = successors.length; k < l; k++) {
                                    var s = successors[k];
                                    if (spbacks.get(s.id)) {
                                        heads.set(s.dominator.id);
                                    }
                                }
                            }
                            return heads.members();
                        }
                        function LoopInfo(scc, loopId) {
                            var body = new BlockSet();
                            body.setBlocks(scc);
                            body.recount();
                            this.id = loopId;
                            this.body = body;
                            this.exit = new BlockSet();
                            this.save = {};
                            this.head = new BlockSet();
                            this.npredecessors = 0;
                        }
                        var heads = findLoopHeads(this.blocks);
                        if (heads.length <= 0) {
                            this.markedLoops = true;
                            return true;
                        }
                        var worklist = heads.sort(function (a, b) {
                            return a.level - b.level;
                        });
                        var loopId = 0;
                        for (var n = worklist.length - 1; n >= 0; n--) {
                            var t = worklist[n];
                            var sccs = findSCCs(t);
                            if (sccs.length === 0) {
                                continue;
                            }
                            for (var i = 0, j = sccs.length; i < j; i++) {
                                var scc = sccs[i];
                                var loop = new LoopInfo(scc, loopId++);
                                for (var k = 0, l = scc.length; k < l; k++) {
                                    var h = scc[k];
                                    if (h.level === t.level + 1 && !h.loop) {
                                        h.loop = loop;
                                        loop.head.set(h.id);
                                        var predecessors = h.predecessors;
                                        for (var pi = 0, pj = predecessors.length; pi < pj; pi++) {
                                            loop.body.get(predecessors[pi].id) && h.npredecessors--;
                                        }
                                        loop.npredecessors += h.npredecessors;
                                    }
                                }
                                for (var k = 0, l = scc.length; k < l; k++) {
                                    var h = scc[k];
                                    if (h.level === t.level + 1) {
                                        h.npredecessors = loop.npredecessors;
                                    }
                                }
                                loop.head.recount();
                            }
                        }
                        this.markedLoops = true;
                        return true;
                    };
                    Analysis.prototype.induceControlTree = function () {
                        var hasExceptions = this.hasExceptions;
                        var BlockSet = this.boundBlockSet;
                        function maybe(exit, save) {
                            exit.recount();
                            if (exit.count === 0) {
                                return null;
                            }
                            exit.save = save;
                            return exit;
                        }
                        var exceptionId = this.blocks.length;
                        function induce(head, exit, save, loop, inLoopHead, lookupSwitch, fallthrough) {
                            var v = [];
                            while (head) {
                                if (head.count > 1) {
                                    var exit2 = new BlockSet();
                                    var save2 = {};
                                    var cases = [];
                                    var heads = head.members();
                                    for (var i = 0, j = heads.length; i < j; i++) {
                                        var h = heads[i];
                                        var bid = h.id;
                                        var c;
                                        if (h.loop && head.contains(h.loop.head)) {
                                            var loop2 = h.loop;
                                            if (!loop2.induced) {
                                                var lheads = loop2.head.members();
                                                var lheadsave = 0;
                                                for (k = 0, l = lheads.length; k < l; k++) {
                                                    lheadsave += head.save[lheads[k].id];
                                                }
                                                if (h.npredecessors - lheadsave > 0) {
                                                    h.npredecessors -= head.save[bid];
                                                    h.save = head.save[bid];
                                                    c = induce(h, exit2, save2, loop);
                                                    cases.push(new Control.LabelCase([bid], c));
                                                }
                                                else {
                                                    for (k = 0, l = lheads.length; k < l; k++) {
                                                        var lh = lheads[k];
                                                        lh.npredecessors -= lheadsave;
                                                        lh.save = lheadsave;
                                                    }
                                                    c = induce(h, exit2, save2, loop);
                                                    cases.push(new Control.LabelCase(loop2.head.toArray(), c));
                                                    loop2.induced = true;
                                                }
                                            }
                                        }
                                        else {
                                            h.npredecessors -= head.save[bid];
                                            h.save = head.save[bid];
                                            c = induce(h, exit2, save2, loop);
                                            cases.push(new Control.LabelCase([bid], c));
                                        }
                                    }
                                    var pruned = [];
                                    var k = 0;
                                    var c;
                                    for (var i = 0; i < cases.length; i++) {
                                        c = cases[i];
                                        var labels = c.labels;
                                        var lk = 0;
                                        for (var ln = 0, nlabels = labels.length; ln < nlabels; ln++) {
                                            var bid = labels[ln];
                                            if (exit2.get(bid) && heads[i].npredecessors - head.save[bid] > 0) {
                                                pruned.push(bid);
                                            }
                                            else {
                                                labels[lk++] = bid;
                                            }
                                        }
                                        labels.length = lk;
                                        if (labels.length > 0) {
                                            cases[k++] = c;
                                        }
                                    }
                                    cases.length = k;
                                    if (cases.length === 0) {
                                        for (var i = 0; i < pruned.length; i++) {
                                            var bid = pruned[i];
                                            save[bid] = (save[bid] || 0) + head.save[bid];
                                            exit.set(bid);
                                        }
                                        break;
                                    }
                                    v.push(new Control.LabelSwitch(cases));
                                    head = maybe(exit2, save2);
                                    continue;
                                }
                                var h, bid, c;
                                if (head.count === 1) {
                                    h = head.choose();
                                    bid = h.id;
                                    h.npredecessors -= head.save[bid];
                                    h.save = head.save[bid];
                                }
                                else {
                                    h = head;
                                    bid = h.id;
                                }
                                if (inLoopHead) {
                                    inLoopHead = false;
                                }
                                else {
                                    if (loop && !loop.body.get(bid)) {
                                        h.npredecessors += h.save;
                                        loop.exit.set(bid);
                                        loop.save[bid] = (loop.save[bid] || 0) + h.save;
                                        v.push(new Control.Break(bid, loop));
                                        break;
                                    }
                                    if (loop && h.loop === loop) {
                                        h.npredecessors += h.save;
                                        v.push(new Control.Continue(bid, loop));
                                        break;
                                    }
                                    if (h === fallthrough) {
                                        break;
                                    }
                                    if (h.npredecessors > 0) {
                                        h.npredecessors += h.save;
                                        save[bid] = (save[bid] || 0) + h.save;
                                        exit.set(bid);
                                        v.push(lookupSwitch ? new Control.Break(bid, lookupSwitch) : new Control.Exit(bid));
                                        break;
                                    }
                                    if (h.loop) {
                                        var l = h.loop;
                                        var body;
                                        if (l.head.count === 1) {
                                            body = induce(l.head.choose(), null, null, l, true);
                                        }
                                        else {
                                            var lcases = [];
                                            var lheads = l.head.members();
                                            for (var i = 0, j = lheads.length; i < j; i++) {
                                                var lh = lheads[i];
                                                var lbid = lh.id;
                                                var c = induce(lh, null, null, l, true);
                                                lcases.push(new Control.LabelCase([lbid], c));
                                            }
                                            body = new Control.LabelSwitch(lcases);
                                        }
                                        v.push(new Control.Loop(body));
                                        head = maybe(l.exit, l.save);
                                        continue;
                                    }
                                }
                                var sv;
                                var successors;
                                var exit2 = new BlockSet();
                                var save2 = {};
                                if (hasExceptions && h.hasCatches) {
                                    var allsuccessors = h.successors;
                                    var catchsuccessors = [];
                                    successors = [];
                                    for (var i = 0, j = allsuccessors.length; i < j; i++) {
                                        var s = allsuccessors[i];
                                        (s.exception ? catchsuccessors : successors).push(s);
                                    }
                                    var catches = [];
                                    for (var i = 0; i < catchsuccessors.length; i++) {
                                        var t = catchsuccessors[i];
                                        t.npredecessors -= 1;
                                        t.save = 1;
                                        var c = induce(t, exit2, save2, loop);
                                        var ex = t.exception;
                                        catches.push(new Control.Catch(ex.varName, ex.typeName, c));
                                    }
                                    sv = new Control.Try(h, catches);
                                }
                                else {
                                    successors = h.successors;
                                    sv = h;
                                }
                                if (successors.length > 2) {
                                    var cases = [];
                                    var targets = successors;
                                    for (var i = targets.length - 1; i >= 0; i--) {
                                        var t = targets[i];
                                        t.npredecessors -= 1;
                                        t.save = 1;
                                        c = induce(t, exit2, save2, loop, null, h, targets[i + 1]);
                                        cases.unshift(new Control.Case(i, c));
                                    }
                                    top(cases).index = undefined;
                                    if (hasExceptions && h.hasCatches) {
                                        sv.nothingThrownLabel = exceptionId;
                                        sv = new Control.Switch(sv, cases, exceptionId++);
                                    }
                                    else {
                                        sv = new Control.Switch(sv, cases);
                                    }
                                    head = maybe(exit2, save2);
                                }
                                else if (successors.length === 2) {
                                    var branch1 = h.hasFlippedSuccessors ? successors[1] : successors[0];
                                    var branch2 = h.hasFlippedSuccessors ? successors[0] : successors[1];
                                    branch1.npredecessors -= 1;
                                    branch1.save = 1;
                                    var c1 = induce(branch1, exit2, save2, loop);
                                    branch2.npredecessors -= 1;
                                    branch2.save = 1;
                                    var c2 = induce(branch2, exit2, save2, loop);
                                    if (hasExceptions && h.hasCatches) {
                                        sv.nothingThrownLabel = exceptionId;
                                        sv = new Control.If(sv, c1, c2, exceptionId++);
                                    }
                                    else {
                                        sv = new Control.If(sv, c1, c2);
                                    }
                                    head = maybe(exit2, save2);
                                }
                                else {
                                    c = successors[0];
                                    if (c) {
                                        if (hasExceptions && h.hasCatches) {
                                            sv.nothingThrownLabel = c.id;
                                            save2[c.id] = (save2[c.id] || 0) + 1;
                                            exit2.set(c.id);
                                            head = maybe(exit2, save2);
                                        }
                                        else {
                                            c.npredecessors -= 1;
                                            c.save = 1;
                                            head = c;
                                        }
                                    }
                                    else {
                                        if (hasExceptions && h.hasCatches) {
                                            sv.nothingThrownLabel = -1;
                                            head = maybe(exit2, save2);
                                        }
                                        else {
                                            head = c;
                                        }
                                    }
                                }
                                v.push(sv);
                            }
                            if (v.length > 1) {
                                return new Control.Seq(v);
                            }
                            return v[0];
                        }
                        var root = this.blocks[0];
                        this.controlTree = induce(root, new BlockSet(), {});
                    };
                    Analysis.prototype.restructureControlFlow = function () {
                        AVM2.enterTimeline("Restructure Control Flow");
                        if (!this.markedLoops && !this.markLoops()) {
                            AVM2.leaveTimeline();
                            return false;
                        }
                        this.induceControlTree();
                        this.restructuredControlFlow = true;
                        AVM2.leaveTimeline();
                        return true;
                    };
                    return Analysis;
                })();
                Looper.Analysis = Analysis;
                function analyze(cfg) {
                    var analysis = new Analysis(cfg);
                    analysis.restructureControlFlow();
                    return analysis.controlTree;
                }
                Looper.analyze = analyze;
            })(Looper = Compiler.Looper || (Compiler.Looper = {}));
        })(Compiler = AVM2.Compiler || (AVM2.Compiler = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var Compiler;
        (function (Compiler) {
            var Backend;
            (function (Backend) {
                var assert = Shumway.Debug.assert;
                var unexpected = Shumway.Debug.unexpected;
                var notImplemented = Shumway.Debug.notImplemented;
                var pushUnique = Shumway.ArrayUtilities.pushUnique;
                var AST = Shumway.AVM2.Compiler.AST;
                var Literal = AST.Literal;
                var Identifier = AST.Identifier;
                var VariableDeclaration = AST.VariableDeclaration;
                var VariableDeclarator = AST.VariableDeclarator;
                var MemberExpression = AST.MemberExpression;
                var BinaryExpression = AST.BinaryExpression;
                var CallExpression = AST.CallExpression;
                var AssignmentExpression = AST.AssignmentExpression;
                var ExpressionStatement = AST.ExpressionStatement;
                var ReturnStatement = AST.ReturnStatement;
                var ConditionalExpression = AST.ConditionalExpression;
                var ObjectExpression = AST.ObjectExpression;
                var ArrayExpression = AST.ArrayExpression;
                var UnaryExpression = AST.UnaryExpression;
                var NewExpression = AST.NewExpression;
                var Property = AST.Property;
                var BlockStatement = AST.BlockStatement;
                var ThisExpression = AST.ThisExpression;
                var ThrowStatement = AST.ThrowStatement;
                var IfStatement = AST.IfStatement;
                var WhileStatement = AST.WhileStatement;
                var BreakStatement = AST.BreakStatement;
                var ContinueStatement = AST.ContinueStatement;
                var SwitchStatement = AST.SwitchStatement;
                var SwitchCase = AST.SwitchCase;
                var Start = Compiler.IR.Start;
                var Variable = Compiler.IR.Variable;
                var Constant = Compiler.IR.Constant;
                var Operator = Compiler.IR.Operator;
                var Control = Shumway.AVM2.Compiler.Looper.Control;
                var last = Shumway.ArrayUtilities.last;
                Control.Break.prototype.compile = function (cx) {
                    return cx.compileBreak(this);
                };
                Control.Continue.prototype.compile = function (cx) {
                    return cx.compileContinue(this);
                };
                Control.Exit.prototype.compile = function (cx) {
                    return cx.compileExit(this);
                };
                Control.LabelSwitch.prototype.compile = function (cx) {
                    return cx.compileLabelSwitch(this);
                };
                Control.Seq.prototype.compile = function (cx) {
                    return cx.compileSequence(this);
                };
                Control.Loop.prototype.compile = function (cx) {
                    return cx.compileLoop(this);
                };
                Control.Switch.prototype.compile = function (cx) {
                    return cx.compileSwitch(this);
                };
                Control.If.prototype.compile = function (cx) {
                    return cx.compileIf(this);
                };
                Control.Try.prototype.compile = function (cx) {
                    notImplemented("try");
                    return null;
                };
                var F = new Identifier("$F");
                var C = new Identifier("$C");
                function isLazyConstant(value) {
                    return value instanceof Shumway.AVM2.Runtime.LazyInitializer;
                }
                function constant(value, cx) {
                    if (typeof value === "string" || value === null || value === true || value === false) {
                        return new Literal(value);
                    }
                    else if (value === undefined) {
                        return new Identifier("undefined");
                    }
                    else if (typeof value === "object" || typeof value === "function") {
                        if (isLazyConstant(value)) {
                            return call(propertyFromString(F, "C"), [new Literal(cx.useConstant(value))]);
                        }
                        else {
                            return new MemberExpression(C, new Literal(cx.useConstant(value)), true);
                        }
                    }
                    else if (typeof value === "number" && isNaN(value)) {
                        return new Identifier("NaN");
                    }
                    else if (value === Infinity) {
                        return new Identifier("Infinity");
                    }
                    else if (value === -Infinity) {
                        return new UnaryExpression("-", true, new Identifier("Infinity"));
                    }
                    else if (typeof value === "number" && (1 / value) < 0) {
                        return new UnaryExpression("-", true, new Literal(Math.abs(value)));
                    }
                    else if (typeof value === "number") {
                        return new Literal(value);
                    }
                    else {
                        unexpected("Cannot emit constant for value: " + value);
                    }
                }
                function id(name) {
                    release || assert(typeof name === "string");
                    return new Identifier(name);
                }
                function isIdentifierStart(c) {
                    return (c === '$') || (c === '_') || (c === '\\') || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
                }
                function isIdentifierPart(c) {
                    return (c === '$') || (c === '_') || (c === '\\') || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || ((c >= '0') && (c <= '9'));
                }
                function isIdentifierName(s) {
                    if (!isIdentifierStart(s[0])) {
                        return false;
                    }
                    for (var i = 1; i < s.length; i++) {
                        if (!isIdentifierPart(s[i])) {
                            return false;
                        }
                    }
                    return true;
                }
                function propertyFromString(obj, name) {
                    if (isIdentifierName(name)) {
                        return new MemberExpression(obj, new Identifier(name), false);
                    }
                    return new MemberExpression(obj, new Literal(name), true);
                }
                function propertyFromLiteral(obj, nameLiteral) {
                    if (isIdentifierName(nameLiteral.value)) {
                        return new MemberExpression(obj, new Identifier(nameLiteral.value), false);
                    }
                    return new MemberExpression(obj, nameLiteral, true);
                }
                function call(callee, args) {
                    release || assert(args instanceof Array);
                    release || args.forEach(function (x) {
                        release || assert(!(x instanceof Array));
                        release || assert(x !== undefined);
                    });
                    return new CallExpression(callee, args);
                }
                function callAsCall(callee, object, args) {
                    return call(propertyFromString(callee, "asCall"), [object].concat(args));
                }
                function callCall(callee, object, args) {
                    return call(propertyFromString(callee, "call"), [object].concat(args));
                }
                function assignment(left, right) {
                    release || assert(left && right);
                    return new AssignmentExpression("=", left, right);
                }
                function variableDeclaration(declarations) {
                    return new VariableDeclaration(declarations, "var");
                }
                function negate(node) {
                    if (node instanceof Constant) {
                        if (node.value === true || node.value === false) {
                            return constant(!node.value);
                        }
                    }
                    else if (node instanceof Identifier) {
                        return new UnaryExpression(Operator.FALSE.name, true, node);
                    }
                    release || assert(node instanceof BinaryExpression || node instanceof UnaryExpression, node);
                    var left = node instanceof BinaryExpression ? node.left : node.argument;
                    var right = node.right;
                    var operator = Operator.fromName(node.operator);
                    if (operator === Operator.EQ && right instanceof Literal && right.value === false) {
                        return left;
                    }
                    if (operator === Operator.FALSE) {
                        return left;
                    }
                    if (operator.not) {
                        if (node instanceof BinaryExpression) {
                            return new BinaryExpression(operator.not.name, left, right);
                        }
                        else {
                            return new UnaryExpression(operator.not.name, true, left);
                        }
                    }
                    return new UnaryExpression(Operator.FALSE.name, true, node);
                }
                var Context = (function () {
                    function Context() {
                        this.label = new Variable("$L");
                        this.variables = [];
                        this.constants = [];
                        this.lazyConstants = [];
                        this.parameters = [];
                    }
                    Context.prototype.useConstant = function (constant) {
                        var index;
                        if (isLazyConstant(constant)) {
                            index = pushUnique(this.lazyConstants, constant);
                            this.constants[index] = null;
                        }
                        else {
                            index = pushUnique(this.constants, constant);
                            this.lazyConstants[index] = null;
                        }
                        return index;
                    };
                    Context.prototype.useVariable = function (variable) {
                        release || assert(variable);
                        return pushUnique(this.variables, variable);
                    };
                    Context.prototype.useParameter = function (parameter) {
                        return this.parameters[parameter.index] = parameter;
                    };
                    Context.prototype.compileLabelBody = function (node) {
                        var body = [];
                        if (node.label !== undefined) {
                            this.useVariable(this.label);
                            body.push(new ExpressionStatement(assignment(id(this.label.name), new Literal(node.label))));
                        }
                        return body;
                    };
                    Context.prototype.compileBreak = function (node) {
                        var body = this.compileLabelBody(node);
                        body.push(new BreakStatement(null));
                        return new BlockStatement(body);
                    };
                    Context.prototype.compileContinue = function (node) {
                        var body = this.compileLabelBody(node);
                        body.push(new ContinueStatement(null));
                        return new BlockStatement(body);
                    };
                    Context.prototype.compileExit = function (node) {
                        return new BlockStatement(this.compileLabelBody(node));
                    };
                    Context.prototype.compileIf = function (node) {
                        var cr = node.cond.compile(this);
                        var tr = null, er = null;
                        if (node.then) {
                            tr = node.then.compile(this);
                        }
                        if (node.else) {
                            er = node.else.compile(this);
                        }
                        var condition = compileValue(cr.end.predicate, this);
                        condition = node.negated ? negate(condition) : condition;
                        cr.body.push(new IfStatement(condition, tr || new BlockStatement([]), er || null));
                        return cr;
                    };
                    Context.prototype.compileSwitch = function (node) {
                        var dr = node.determinant.compile(this);
                        var cases = [];
                        node.cases.forEach(function (x) {
                            var br;
                            if (x.body) {
                                br = x.body.compile(this);
                            }
                            var test = typeof x.index === "number" ? new Literal(x.index) : undefined;
                            cases.push(new SwitchCase(test, br ? [br] : []));
                        }, this);
                        var determinant = compileValue(dr.end.determinant, this);
                        dr.body.push(new SwitchStatement(determinant, cases, false));
                        return dr;
                    };
                    Context.prototype.compileLabelSwitch = function (node) {
                        var statement = null;
                        var labelName = id(this.label.name);
                        function compileLabelTest(labelID) {
                            release || assert(typeof labelID === "number");
                            return new BinaryExpression("===", labelName, new Literal(labelID));
                        }
                        for (var i = node.cases.length - 1; i >= 0; i--) {
                            var c = node.cases[i];
                            var labels = c.labels;
                            var labelTest = compileLabelTest(labels[0]);
                            for (var j = 1; j < labels.length; j++) {
                                labelTest = new BinaryExpression("||", labelTest, compileLabelTest(labels[j]));
                            }
                            statement = new IfStatement(labelTest, c.body ? c.body.compile(this) : new BlockStatement([]), statement);
                        }
                        return statement;
                    };
                    Context.prototype.compileLoop = function (node) {
                        var br = node.body.compile(this);
                        return new WhileStatement(constant(true), br);
                    };
                    Context.prototype.compileSequence = function (node) {
                        var cx = this;
                        var body = [];
                        node.body.forEach(function (x) {
                            var result = x.compile(cx);
                            if (result instanceof BlockStatement) {
                                body = body.concat(result.body);
                            }
                            else {
                                body.push(result);
                            }
                        });
                        return new BlockStatement(body);
                    };
                    Context.prototype.compileBlock = function (block) {
                        var body = [];
                        for (var i = 1; i < block.nodes.length - 1; i++) {
                            var node = block.nodes[i];
                            var statement;
                            var to;
                            var from;
                            if (node instanceof Compiler.IR.Throw) {
                                statement = compileValue(node, this, true);
                            }
                            else {
                                if (node instanceof Compiler.IR.Move) {
                                    to = id(node.to.name);
                                    this.useVariable(node.to);
                                    from = compileValue(node.from, this);
                                }
                                else {
                                    if (node.variable) {
                                        to = id(node.variable.name);
                                        this.useVariable(node.variable);
                                    }
                                    else {
                                        to = null;
                                    }
                                    from = compileValue(node, this, true);
                                }
                                if (to) {
                                    statement = new ExpressionStatement(assignment(to, from));
                                }
                                else {
                                    statement = new ExpressionStatement(from);
                                }
                            }
                            body.push(statement);
                        }
                        var end = last(block.nodes);
                        if (end instanceof Compiler.IR.Stop) {
                            body.push(new ReturnStatement(compileValue(end.argument, this)));
                        }
                        var result = new BlockStatement(body);
                        result.end = last(block.nodes);
                        release || assert(result.end instanceof Compiler.IR.End);
                        return result;
                    };
                    return Context;
                })();
                Backend.Context = Context;
                function compileValue(value, cx, noVariable) {
                    release || assert(value);
                    release || assert(value.compile, "Implement |compile| for " + value + " (" + value.nodeName + ")");
                    release || assert(cx instanceof Context);
                    release || assert(!isArray(value));
                    if (noVariable || !value.variable) {
                        var node = value.compile(cx);
                        return node;
                    }
                    release || assert(value.variable, "Value has no variable: " + value);
                    return id(value.variable.name);
                }
                function compileMultiname(name, cx) {
                    return [
                        compileValue(name.namespaces, cx),
                        compileValue(name.name, cx),
                        compileValue(name.flags, cx)
                    ];
                }
                function isArray(array) {
                    return array instanceof Array;
                }
                function compileValues(values, cx) {
                    release || assert(isArray(values));
                    return values.map(function (value) {
                        return compileValue(value, cx);
                    });
                }
                Compiler.IR.Parameter.prototype.compile = function (cx) {
                    cx.useParameter(this);
                    return id(this.name);
                };
                Compiler.IR.Constant.prototype.compile = function (cx) {
                    return constant(this.value, cx);
                };
                Compiler.IR.Variable.prototype.compile = function (cx) {
                    return id(this.name);
                };
                Compiler.IR.Phi.prototype.compile = function (cx) {
                    release || assert(this.variable);
                    return compileValue(this.variable, cx);
                };
                Compiler.IR.ASScope.prototype.compile = function (cx) {
                    var parent = compileValue(this.parent, cx);
                    var object = compileValue(this.object, cx);
                    var isWith = new Literal(this.isWith);
                    return new NewExpression(id("Scope"), [parent, object, isWith]);
                };
                Compiler.IR.ASFindProperty.prototype.compile = function (cx) {
                    var scope = compileValue(this.scope, cx);
                    var name = compileMultiname(this.name, cx);
                    var methodInfo = compileValue(this.methodInfo, cx);
                    var strict = new Literal(this.strict);
                    return call(propertyFromString(scope, "findScopeProperty"), name.concat([methodInfo, strict]));
                };
                Compiler.IR.ASGetProperty.prototype.compile = function (cx) {
                    var object = compileValue(this.object, cx);
                    if (this.flags & 1 /* NumericProperty */) {
                        release || assert(!(this.flags & 8 /* IS_METHOD */));
                        return call(propertyFromString(object, "asGetNumericProperty"), [compileValue(this.name.name, cx)]);
                    }
                    else if (this.flags & 2 /* RESOLVED */) {
                        return call(propertyFromString(object, "asGetResolvedStringProperty"), [compileValue(this.name, cx)]);
                    }
                    var name = compileMultiname(this.name, cx);
                    var isMethod = new Literal(this.flags & 8 /* IS_METHOD */);
                    return call(propertyFromString(object, "asGetProperty"), name.concat(isMethod));
                };
                Compiler.IR.ASGetSuper.prototype.compile = function (cx) {
                    var scope = compileValue(this.scope, cx);
                    var object = compileValue(this.object, cx);
                    var name = compileMultiname(this.name, cx);
                    return call(propertyFromString(object, "asGetSuper"), [scope].concat(name));
                };
                Compiler.IR.Latch.prototype.compile = function (cx) {
                    return new ConditionalExpression(compileValue(this.condition, cx), compileValue(this.left, cx), compileValue(this.right, cx));
                };
                Compiler.IR.Unary.prototype.compile = function (cx) {
                    return new UnaryExpression(this.operator.name, true, compileValue(this.argument, cx));
                };
                Compiler.IR.Copy.prototype.compile = function (cx) {
                    return compileValue(this.argument, cx);
                };
                Compiler.IR.Binary.prototype.compile = function (cx) {
                    var left = compileValue(this.left, cx);
                    var right = compileValue(this.right, cx);
                    if (this.operator === Compiler.IR.Operator.AS_ADD) {
                        return call(id("asAdd"), [left, right]);
                    }
                    return new BinaryExpression(this.operator.name, left, right);
                };
                Compiler.IR.CallProperty.prototype.compile = function (cx) {
                    var object = compileValue(this.object, cx);
                    var name = compileValue(this.name, cx);
                    var callee = propertyFromLiteral(object, name);
                    var args = this.args.map(function (arg) {
                        return compileValue(arg, cx);
                    });
                    if (this.flags & 16 /* AS_CALL */) {
                        return callAsCall(callee, object, args);
                    }
                    else if (this.flags & 4 /* PRISTINE */) {
                        return call(callee, args);
                    }
                    else {
                        return callCall(callee, object, args);
                    }
                };
                Compiler.IR.ASCallProperty.prototype.compile = function (cx) {
                    var object = compileValue(this.object, cx);
                    var args = this.args.map(function (arg) {
                        return compileValue(arg, cx);
                    });
                    if (this.flags & 2 /* RESOLVED */) {
                        return call(propertyFromString(object, "asCallResolvedStringProperty"), [compileValue(this.name, cx), new Literal(this.isLex), new ArrayExpression(args)]);
                    }
                    var name = compileMultiname(this.name, cx);
                    return call(propertyFromString(object, "asCallProperty"), name.concat([new Literal(this.isLex), new ArrayExpression(args)]));
                };
                Compiler.IR.ASCallSuper.prototype.compile = function (cx) {
                    var scope = compileValue(this.scope, cx);
                    var object = compileValue(this.object, cx);
                    var args = this.args.map(function (arg) {
                        return compileValue(arg, cx);
                    });
                    var name = compileMultiname(this.name, cx);
                    return call(propertyFromString(object, "asCallSuper"), [scope].concat(name).concat(new ArrayExpression(args)));
                };
                Compiler.IR.Call.prototype.compile = function (cx) {
                    var args = this.args.map(function (arg) {
                        return compileValue(arg, cx);
                    });
                    var callee = compileValue(this.callee, cx);
                    var object;
                    if (this.object) {
                        object = compileValue(this.object, cx);
                    }
                    else {
                        object = new Literal(null);
                    }
                    if (this.flags & 16 /* AS_CALL */) {
                        return callAsCall(callee, object, args);
                    }
                    else if (false && this.pristine && (this.callee instanceof Compiler.IR.GetProperty && this.callee.object === this.object) || this.object === null) {
                        return call(callee, args);
                    }
                    else {
                        return callCall(callee, object, args);
                    }
                };
                Compiler.IR.ASNew.prototype.compile = function (cx) {
                    var args = this.args.map(function (arg) {
                        return compileValue(arg, cx);
                    });
                    var callee = compileValue(this.callee, cx);
                    callee = propertyFromString(callee, "instanceConstructor");
                    return new NewExpression(callee, args);
                };
                Compiler.IR.This.prototype.compile = function (cx) {
                    return new ThisExpression();
                };
                Compiler.IR.Throw.prototype.compile = function (cx) {
                    var argument = compileValue(this.argument, cx);
                    return new ThrowStatement(argument);
                };
                Compiler.IR.Arguments.prototype.compile = function (cx) {
                    return id("arguments");
                };
                Compiler.IR.ASGlobal.prototype.compile = function (cx) {
                    var scope = compileValue(this.scope, cx);
                    return propertyFromString(propertyFromString(scope, "global"), "object");
                };
                Compiler.IR.ASSetProperty.prototype.compile = function (cx) {
                    var object = compileValue(this.object, cx);
                    var value = compileValue(this.value, cx);
                    if (this.flags & 1 /* NumericProperty */) {
                        return call(propertyFromString(object, "asSetNumericProperty"), [compileValue(this.name.name, cx), value]);
                    }
                    var name = compileMultiname(this.name, cx);
                    return call(propertyFromString(object, "asSetProperty"), name.concat(value));
                };
                Compiler.IR.ASSetSuper.prototype.compile = function (cx) {
                    var scope = compileValue(this.scope, cx);
                    var object = compileValue(this.object, cx);
                    var name = compileMultiname(this.name, cx);
                    var value = compileValue(this.value, cx);
                    return call(propertyFromString(object, "asSetSuper"), [scope].concat(name).concat([value]));
                };
                Compiler.IR.ASDeleteProperty.prototype.compile = function (cx) {
                    var object = compileValue(this.object, cx);
                    var name = compileMultiname(this.name, cx);
                    return call(propertyFromString(object, "asDeleteProperty"), name);
                };
                Compiler.IR.ASHasProperty.prototype.compile = function (cx) {
                    var object = compileValue(this.object, cx);
                    var name = compileMultiname(this.name, cx);
                    return call(propertyFromString(object, "asHasProperty"), name);
                };
                Compiler.IR.GlobalProperty.prototype.compile = function (cx) {
                    return id(this.name);
                };
                Compiler.IR.GetProperty.prototype.compile = function (cx) {
                    var object = compileValue(this.object, cx);
                    var name = compileValue(this.name, cx);
                    return propertyFromLiteral(object, name);
                };
                Compiler.IR.SetProperty.prototype.compile = function (cx) {
                    var object = compileValue(this.object, cx);
                    var name = compileValue(this.name, cx);
                    var value = compileValue(this.value, cx);
                    return assignment(propertyFromLiteral(object, name), value);
                };
                Compiler.IR.ASGetDescendants.prototype.compile = function (cx) {
                    var object = compileValue(this.object, cx);
                    var name = compileValue(this.name, cx);
                    return call(id("getDescendants"), [object, name]);
                };
                Compiler.IR.ASSetSlot.prototype.compile = function (cx) {
                    var object = compileValue(this.object, cx);
                    var name = compileValue(this.name, cx);
                    var value = compileValue(this.value, cx);
                    return (call(id("asSetSlot"), [object, name, value]));
                };
                Compiler.IR.ASGetSlot.prototype.compile = function (cx) {
                    var object = compileValue(this.object, cx);
                    var name = compileValue(this.name, cx);
                    return (call(id("asGetSlot"), [object, name]));
                };
                Compiler.IR.Projection.prototype.compile = function (cx) {
                    release || assert(this.type === 4 /* SCOPE */);
                    release || assert(this.argument instanceof Start);
                    return compileValue(this.argument.scope, cx);
                };
                Compiler.IR.NewArray.prototype.compile = function (cx) {
                    return new ArrayExpression(compileValues(this.elements, cx));
                };
                Compiler.IR.NewObject.prototype.compile = function (cx) {
                    var properties = this.properties.map(function (property) {
                        var key = compileValue(property.key, cx);
                        var value = compileValue(property.value, cx);
                        return new Property(key, value, "init");
                    });
                    return new ObjectExpression(properties);
                };
                Compiler.IR.ASNewActivation.prototype.compile = function (cx) {
                    var methodInfo = compileValue(this.methodInfo, cx);
                    return call(id("asCreateActivation"), [methodInfo]);
                };
                Compiler.IR.ASNewHasNext2.prototype.compile = function (cx) {
                    return new NewExpression(id("HasNext2Info"), []);
                };
                Compiler.IR.ASMultiname.prototype.compile = function (cx) {
                    var namespaces = compileValue(this.namespaces, cx);
                    var name = compileValue(this.name, cx);
                    var flags = compileValue(this.flags, cx);
                    return call(id("createName"), [namespaces, name, flags]);
                };
                Compiler.IR.Block.prototype.compile = function (cx) {
                    return cx.compileBlock(this);
                };
                function generateSource(node) {
                    return node.toSource();
                }
                var Compilation = (function () {
                    function Compilation(parameters, body, constants, lazyConstants) {
                        this.parameters = parameters;
                        this.body = body;
                        this.constants = constants;
                        this.lazyConstants = lazyConstants;
                    }
                    Compilation.prototype.C = function (index) {
                        var value = this.constants[index];
                        if (value === null) {
                            value = this.constants[index] = this.lazyConstants[index].resolve();
                            this.lazyConstants[index] = null;
                        }
                        return this.constants[index];
                    };
                    Compilation.id = 0;
                    return Compilation;
                })();
                Backend.Compilation = Compilation;
                function generate(cfg) {
                    AVM2.enterTimeline("Looper");
                    var root = Compiler.Looper.analyze(cfg);
                    AVM2.leaveTimeline();
                    var writer = new Shumway.IndentingWriter();
                    var cx = new Context();
                    AVM2.enterTimeline("Construct AST");
                    var code = root.compile(cx);
                    AVM2.leaveTimeline();
                    var parameters = [];
                    for (var i = 0; i < cx.parameters.length; i++) {
                        var name = cx.parameters[i] ? cx.parameters[i].name : "_" + i;
                        parameters.push(id(name));
                    }
                    var compilationId = Compilation.id++;
                    var compilationGlobalPropertyName = "$$F" + compilationId;
                    if (cx.constants.length) {
                        var compilation = new Identifier(compilationGlobalPropertyName);
                        var constants = new MemberExpression(compilation, new Identifier("constants"), false);
                        code.body.unshift(variableDeclaration([
                            new VariableDeclarator(id("$F"), compilation),
                            new VariableDeclarator(id("$C"), constants)
                        ]));
                    }
                    if (cx.variables.length) {
                        AVM2.countTimeline("Backend: Locals", cx.variables.length);
                        var variables = variableDeclaration(cx.variables.map(function (variable) {
                            return new VariableDeclarator(id(variable.name));
                        }));
                        code.body.unshift(variables);
                    }
                    AVM2.enterTimeline("Serialize AST");
                    var source = generateSource(code);
                    AVM2.leaveTimeline();
                    return jsGlobal[compilationGlobalPropertyName] = new Compilation(parameters.map(function (p) {
                        return p.name;
                    }), source, cx.constants, cx.lazyConstants);
                }
                Backend.generate = generate;
            })(Backend = Compiler.Backend || (Compiler.Backend = {}));
        })(Compiler = AVM2.Compiler || (AVM2.Compiler = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (_AVM2) {
        var Runtime;
        (function (Runtime) {
            var AbcFile = Shumway.AVM2.ABC.AbcFile;
            var Multiname = Shumway.AVM2.ABC.Multiname;
            var Callback = Shumway.Callback;
            var counter = Shumway.Metrics.Counter.instance;
            var assert = Shumway.Debug.assert;
            var IndentingWriter = Shumway.IndentingWriter;
            function createNewCompartment() {
                return newGlobal('new-compartment');
            }
            function executeScript(script) {
                _AVM2.enterTimeline("executeScript", { name: script.name });
                var abc = script.abc;
                release || assert(!script.executing && !script.executed);
                var global = new Runtime.Global(script);
                if (abc.applicationDomain.allowNatives) {
                    global[Multiname.getPublicQualifiedName("unsafeJSNative")] = Shumway.AVM2.AS.getNative;
                }
                script.executing = true;
                var scope = new Runtime.Scope(null, script.global);
                Runtime.createFunction(script.init, scope, false, false).call(script.global, false);
                script.executed = true;
                _AVM2.leaveTimeline();
            }
            Runtime.executeScript = executeScript;
            function ensureScriptIsExecuted(script, reason) {
                if (reason === void 0) { reason = ""; }
                if (!script.executed && !script.executing) {
                    if (Shumway.AVM2.Runtime.traceExecution.value >= 2) {
                        console.log("Executing Script For: " + reason);
                    }
                    executeScript(script);
                }
            }
            Runtime.ensureScriptIsExecuted = ensureScriptIsExecuted;
            (function (Glue) {
                Glue[Glue["PUBLIC_PROPERTIES"] = 0x1] = "PUBLIC_PROPERTIES";
                Glue[Glue["PUBLIC_METHODS"] = 0x2] = "PUBLIC_METHODS";
                Glue[Glue["ALL"] = 1 /* PUBLIC_PROPERTIES */ | 2 /* PUBLIC_METHODS */] = "ALL";
            })(Runtime.Glue || (Runtime.Glue = {}));
            var Glue = Runtime.Glue;
            Runtime.playerglobalLoadedPromise;
            Runtime.playerglobal;
            function grabAbc(abcName) {
                var entry = Runtime.playerglobal.scripts[abcName];
                if (!entry) {
                    return null;
                }
                var offset = entry.offset;
                var length = entry.length;
                return new AbcFile(new Uint8Array(Runtime.playerglobal.abcs, offset, length), abcName);
            }
            function findDefiningAbc(mn) {
                if (!Runtime.playerglobal) {
                    return null;
                }
                for (var i = 0; i < mn.namespaces.length; i++) {
                    var name = mn.namespaces[i].uri + ":" + mn.name;
                    var abcName = Runtime.playerglobal.map[name];
                    if (abcName) {
                        break;
                    }
                }
                if (abcName) {
                    return grabAbc(abcName);
                }
                return null;
            }
            function promiseFile(path, responseType) {
                return new Promise(function (resolve, reject) {
                    var xhr = new XMLHttpRequest();
                    xhr.open('GET', path);
                    xhr.responseType = responseType;
                    xhr.onload = function () {
                        var response = xhr.response;
                        if (response) {
                            if (responseType === 'json' && xhr.responseType !== 'json') {
                                response = JSON.parse(response);
                            }
                            resolve(response);
                        }
                        else {
                            reject('Unable to load ' + path + ': ' + xhr.statusText);
                        }
                    };
                    xhr.send();
                });
            }
            var AVM2 = (function () {
                function AVM2(sysMode, appMode) {
                    this.systemDomain = new ApplicationDomain(this, null, sysMode, true);
                    this.applicationDomain = new ApplicationDomain(this, this.systemDomain, appMode, false);
                    this.findDefiningAbc = findDefiningAbc;
                    this.exception = { value: undefined };
                    this.exceptions = [];
                    this.globals = Object.create(null);
                }
                AVM2.initialize = function (sysMode, appMode) {
                    release || assert(!AVM2.instance);
                    AVM2.instance = new AVM2(sysMode, appMode);
                };
                AVM2.currentAbc = function () {
                    var caller = arguments.callee;
                    var maxDepth = 20;
                    var abc = null;
                    for (var i = 0; i < maxDepth && caller; i++) {
                        var mi = caller.methodInfo;
                        if (mi) {
                            abc = mi.abc;
                            break;
                        }
                        caller = caller.caller;
                    }
                    return abc;
                };
                AVM2.currentDomain = function () {
                    var abc = AVM2.currentAbc();
                    if (abc === null) {
                        return AVM2.instance.systemDomain;
                    }
                    release || assert(abc && abc.applicationDomain, "No domain environment was found on the stack, increase STACK_DEPTH or " + "make sure that a compiled / interpreted function is on the call stack.");
                    return abc.applicationDomain;
                };
                AVM2.isPlayerglobalLoaded = function () {
                    return !!Runtime.playerglobal;
                };
                AVM2.loadPlayerglobal = function (abcsPath, catalogPath) {
                    if (Runtime.playerglobalLoadedPromise) {
                        return Promise.reject('Playerglobal is already loaded');
                    }
                    Runtime.playerglobalLoadedPromise = Promise.all([
                        promiseFile(abcsPath, 'arraybuffer'),
                        promiseFile(catalogPath, 'json')
                    ]).then(function (result) {
                        Runtime.playerglobal = {
                            abcs: result[0],
                            map: Object.create(null),
                            scripts: Object.create(null)
                        };
                        var catalog = result[1];
                        for (var i = 0; i < catalog.length; i++) {
                            var abc = catalog[i];
                            Runtime.playerglobal.scripts[abc.name] = abc;
                            if (typeof abc.defs === 'string') {
                                Runtime.playerglobal.map[abc.defs] = abc.name;
                            }
                            else {
                                for (var j = 0; j < abc.defs.length; j++) {
                                    var def = abc.defs[j];
                                    Runtime.playerglobal.map[def] = abc.name;
                                }
                            }
                        }
                    }, function (e) {
                        console.error(e);
                    });
                    return Runtime.playerglobalLoadedPromise;
                };
                return AVM2;
            })();
            Runtime.AVM2 = AVM2;
            var ApplicationDomain = (function () {
                function ApplicationDomain(vm, base, mode, allowNatives) {
                    release || assert(vm instanceof AVM2);
                    release || assert(Shumway.isNullOrUndefined(base) || base instanceof ApplicationDomain);
                    this.vm = vm;
                    this.abcs = [];
                    this.loadedAbcs = {};
                    this.loadedClasses = [];
                    this.classCache = Object.create(null);
                    this.scriptCache = Object.create(null);
                    this.classInfoCache = Object.create(null);
                    this.base = base;
                    this.allowNatives = allowNatives;
                    this.mode = mode;
                    this.onMessage = new Callback();
                    if (base) {
                        this.system = base.system;
                    }
                    else {
                        this.system = this;
                    }
                }
                ApplicationDomain.passthroughCallable = function (f) {
                    return {
                        call: function ($this) {
                            Array.prototype.shift.call(arguments);
                            return f.asApply($this, arguments);
                        },
                        apply: function ($this, args) {
                            return f.asApply($this, args);
                        }
                    };
                };
                ApplicationDomain.coerceCallable = function (type) {
                    return {
                        call: function ($this, value) {
                            return Runtime.asCoerce(type, value);
                        },
                        apply: function ($this, args) {
                            return Runtime.asCoerce(type, args[0]);
                        }
                    };
                };
                ApplicationDomain.prototype.getType = function (multiname) {
                    return this.getProperty(multiname, true, true);
                };
                ApplicationDomain.prototype.getProperty = function (multiname, strict, execute) {
                    var resolved = this.findDefiningScript(multiname, execute);
                    if (resolved) {
                        if (!resolved.script.executing) {
                            return undefined;
                        }
                        return resolved.script.global[Multiname.getQualifiedName(resolved.trait.name)];
                    }
                    if (strict) {
                        return Shumway.Debug.unexpected("Cannot find property " + multiname);
                    }
                    return undefined;
                };
                ApplicationDomain.prototype.getClass = function (simpleName, strict) {
                    if (strict === void 0) { strict = true; }
                    var cache = this.classCache;
                    var cls = cache[simpleName];
                    if (!cls) {
                        cls = cache[simpleName] = this.getProperty(Multiname.fromSimpleName(simpleName), strict, true);
                    }
                    release || (cls && assert(cls instanceof Shumway.AVM2.AS.ASClass));
                    return cls;
                };
                ApplicationDomain.prototype.findDomainProperty = function (multiname, strict, execute) {
                    if (Shumway.AVM2.Runtime.traceDomain.value) {
                        console.log("ApplicationDomain.findDomainProperty: " + multiname);
                    }
                    var resolved = this.findDefiningScript(multiname, execute);
                    if (resolved) {
                        return resolved.script.global;
                    }
                    if (strict) {
                        return Shumway.Debug.unexpected("Cannot find property " + multiname);
                    }
                    else {
                        return undefined;
                    }
                    return undefined;
                };
                ApplicationDomain.prototype.findClassInfo = function (mn) {
                    var originalQn;
                    if (Multiname.isQName(mn)) {
                        originalQn = Multiname.getQualifiedName(mn);
                        var ci = this.classInfoCache[originalQn];
                        if (ci) {
                            return ci;
                        }
                    }
                    else {
                        var ci = this.classInfoCache[mn.runtimeId];
                        if (ci) {
                            return ci;
                        }
                    }
                    if (this.base) {
                        ci = this.base.findClassInfo(mn);
                        if (ci) {
                            return ci;
                        }
                    }
                    return this.findClassInfoSlow(mn, originalQn);
                };
                ApplicationDomain.prototype.findClassInfoSlow = function (mn, originalQn) {
                    var abcs = this.abcs;
                    for (var i = 0; i < abcs.length; i++) {
                        var abc = abcs[i];
                        var scripts = abc.scripts;
                        for (var j = 0; j < scripts.length; j++) {
                            var script = scripts[j];
                            var traits = script.traits;
                            for (var k = 0; k < traits.length; k++) {
                                var trait = traits[k];
                                if (trait.isClass()) {
                                    var traitName = Multiname.getQualifiedName(trait.name);
                                    if (originalQn) {
                                        if (traitName === originalQn) {
                                            return (this.classInfoCache[originalQn] = trait.classInfo);
                                        }
                                    }
                                    else {
                                        for (var m = 0, n = mn.namespaces.length; m < n; m++) {
                                            var qn = mn.getQName(m);
                                            if (traitName === Multiname.getQualifiedName(qn)) {
                                                return (this.classInfoCache[qn] = trait.classInfo);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (!this.base && this.vm.findDefiningAbc) {
                        var abc = this.vm.findDefiningAbc(mn);
                        if (abc !== null && !this.loadedAbcs[abc.name]) {
                            this.loadedAbcs[abc.name] = true;
                            this.loadAbc(abc);
                            return this.findClassInfo(mn);
                        }
                    }
                    return undefined;
                };
                ApplicationDomain.prototype.findDefiningScript = function (mn, execute) {
                    var resolved = this.scriptCache[mn.runtimeId];
                    if (resolved && (resolved.script.executed || !execute)) {
                        return resolved;
                    }
                    if (this.base) {
                        resolved = this.base.findDefiningScript(mn, execute);
                        if (resolved) {
                            return resolved;
                        }
                    }
                    return this.findDefiningScriptSlow(mn, execute);
                };
                ApplicationDomain.prototype.findDefiningScriptSlow = function (mn, execute) {
                    _AVM2.countTimeline("ApplicationDomain: findDefiningScriptSlow");
                    var abcs = this.abcs;
                    for (var i = 0; i < abcs.length; i++) {
                        var abc = abcs[i];
                        var scripts = abc.scripts;
                        for (var j = 0; j < scripts.length; j++) {
                            var script = scripts[j];
                            var traits = script.traits;
                            if (mn instanceof Multiname) {
                                for (var k = 0; k < traits.length; k++) {
                                    var trait = traits[k];
                                    if (mn.hasQName(trait.name)) {
                                        if (execute) {
                                            ensureScriptIsExecuted(script, String(trait.name));
                                        }
                                        return (this.scriptCache[mn.runtimeId] = { script: script, trait: trait });
                                    }
                                }
                            }
                            else {
                                release || Shumway.Debug.unexpected();
                            }
                        }
                    }
                    if (!this.base && this.vm.findDefiningAbc) {
                        var abc = this.vm.findDefiningAbc(mn);
                        if (abc !== null && !this.loadedAbcs[abc.name]) {
                            this.loadedAbcs[abc.name] = true;
                            this.loadAbc(abc);
                            return this.findDefiningScript(mn, execute);
                        }
                    }
                    return undefined;
                };
                ApplicationDomain.prototype.compileAbc = function (abc, writer) {
                    Shumway.AVM2.Compiler.compileAbc(abc, writer);
                };
                ApplicationDomain.prototype.executeAbc = function (abc) {
                    this.loadAbc(abc);
                    executeScript(abc.lastScript);
                };
                ApplicationDomain.prototype.loadAbc = function (abc) {
                    if (Shumway.AVM2.Runtime.traceExecution.value) {
                        console.log("Loading: " + abc.name);
                    }
                    abc.applicationDomain = this;
                    Runtime.GlobalMultinameResolver.loadAbc(abc);
                    this.abcs.push(abc);
                    if (!this.base) {
                        _AVM2.AS.initialize(this);
                        Shumway.AVM2.Verifier.Type.initializeTypes(this);
                    }
                };
                ApplicationDomain.prototype.broadcastMessage = function (type, message, origin) {
                    try {
                        this.onMessage.notify1(type, {
                            data: message,
                            origin: origin,
                            source: this
                        });
                    }
                    catch (e) {
                        var avm2 = AVM2.instance;
                        avm2.exceptions.push({ source: type, message: e.message, stack: e.stack });
                        throw e;
                    }
                };
                ApplicationDomain.prototype.traceLoadedClasses = function (lastOnly) {
                    var writer = new IndentingWriter();
                    lastOnly || writer.enter("Loaded Classes And Interfaces");
                    var classes = lastOnly ? [Shumway.ArrayUtilities.last(this.loadedClasses)] : this.loadedClasses;
                    classes.forEach(function (cls) {
                        if (cls !== Shumway.AVM2.AS.ASClass) {
                            cls.trace(writer);
                        }
                    });
                    lastOnly || writer.leave("");
                };
                return ApplicationDomain;
            })();
            Runtime.ApplicationDomain = ApplicationDomain;
            var SecurityDomain = (function () {
                function SecurityDomain(compartmentPath) {
                    this.compartment = createNewCompartment();
                    this.compartment.homePath = homePath;
                    this.compartment.release = release;
                    this.compartment.eval(snarf(compartmentPath));
                }
                SecurityDomain.prototype.initializeShell = function (sysMode, appMode) {
                    var compartment = this.compartment;
                    compartment.AVM2.initialize(sysMode, appMode);
                    compartment.AVM2.instance.systemDomain.executeAbc(compartment.grabAbc(homePath + "src/avm2/generated/builtin/builtin.abc"));
                    compartment.AVM2.instance.systemDomain.executeAbc(compartment.grabAbc(homePath + "src/avm2/generated/shell/shell.abc"));
                    this.systemDomain = compartment.AVM2.instance.systemDomain;
                    this.applicationDomain = compartment.AVM2.instance.applicationDomain;
                };
                return SecurityDomain;
            })();
            Runtime.SecurityDomain = SecurityDomain;
        })(Runtime = _AVM2.Runtime || (_AVM2.Runtime = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Glue = Shumway.AVM2.Runtime.Glue;
var ApplicationDomain = Shumway.AVM2.Runtime.ApplicationDomain;
var AVM2 = Shumway.AVM2.Runtime.AVM2;
var EXECUTION_MODE = Shumway.AVM2.Runtime.ExecutionMode;
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var Runtime;
        (function (Runtime) {
            var Multiname = Shumway.AVM2.ABC.Multiname;
            var ClassInfo = Shumway.AVM2.ABC.ClassInfo;
            var InstanceInfo = Shumway.AVM2.ABC.InstanceInfo;
            var assert = Shumway.Debug.assert;
            var defineReadOnlyProperty = Shumway.ObjectUtilities.defineReadOnlyProperty;
            var bindSafely = Shumway.FunctionUtilities.bindSafely;
            var counter = Shumway.Metrics.Counter.instance;
            var vmNextTrampolineId = 1;
            var vmNextMemoizerId = 1;
            function getMethodOverrideKey(methodInfo) {
                var key;
                if (methodInfo.holder instanceof ClassInfo) {
                    key = "static " + methodInfo.holder.instanceInfo.name.getOriginalName() + "::" + methodInfo.name.getOriginalName();
                }
                else if (methodInfo.holder instanceof InstanceInfo) {
                    key = methodInfo.holder.name.getOriginalName() + "::" + methodInfo.name.getOriginalName();
                }
                else {
                    key = methodInfo.name.getOriginalName();
                }
                return key;
            }
            Runtime.getMethodOverrideKey = getMethodOverrideKey;
            function checkMethodOverrides(methodInfo) {
                if (methodInfo.name) {
                    var key = getMethodOverrideKey(methodInfo);
                    if (key in Runtime.VM_METHOD_OVERRIDES) {
                        Shumway.Debug.warning("Overriding Method: " + key);
                        return Runtime.VM_METHOD_OVERRIDES[key];
                    }
                }
            }
            Runtime.checkMethodOverrides = checkMethodOverrides;
            var patterns = [
                [208, 48, 71],
                [208, 48, 208, 73, 0, 71]
            ];
            function checkCommonMethodPatterns(methodInfo) {
                if (methodInfo.code) {
                    if (Shumway.ArrayUtilities.equals(methodInfo.code, patterns[0])) {
                        return function () {
                        };
                    }
                    else if (Shumway.ArrayUtilities.equals(methodInfo.code, patterns[1])) {
                        if (methodInfo.holder instanceof InstanceInfo) {
                            var instanceInfo = methodInfo.holder;
                            if (Multiname.getQualifiedName(instanceInfo.superName) === Multiname.Object) {
                                return function () {
                                };
                            }
                        }
                    }
                    else if (methodInfo.code.length < 10) {
                    }
                }
                return null;
            }
            Runtime.checkCommonMethodPatterns = checkCommonMethodPatterns;
            function makeTrampoline(trait, scope, natives, patchTargets, parameterLength, description) {
                return (function trampolineContext() {
                    var target = null;
                    var trampoline = function execute() {
                        AVM2.countTimeline("Executing Trampoline");
                        if (!release && Shumway.AVM2.Runtime.traceExecution.value >= 1) {
                            Runtime.callWriter.writeLn("Trampoline: " + description);
                            Shumway.AVM2.Runtime.traceExecution.value >= 3 && console.log("Trampolining");
                        }
                        if (!target) {
                            target = Runtime.getTraitFunction(trait, scope, natives);
                            Runtime.patch(patchTargets, target);
                            trait = scope = natives = patchTargets = null;
                            release || assert(target);
                        }
                        return target.asApply(this, arguments);
                    };
                    trampoline.trigger = function trigger() {
                        AVM2.countTimeline("Triggering Trampoline");
                        if (!target) {
                            target = Runtime.getTraitFunction(trait, scope, natives);
                            Runtime.patch(patchTargets, target);
                            trait = scope = natives = patchTargets = null;
                            release || assert(target);
                        }
                    };
                    trampoline.isTrampoline = true;
                    trampoline.debugName = "Trampoline #" + vmNextTrampolineId++;
                    defineReadOnlyProperty(trampoline, Runtime.VM_LENGTH, parameterLength);
                    return trampoline;
                })();
            }
            Runtime.makeTrampoline = makeTrampoline;
            function makeMemoizer(qn, target) {
                function memoizer() {
                    AVM2.countTimeline("Runtime: Memoizing");
                    if (!release && Shumway.AVM2.Runtime.traceExecution.value >= 3) {
                        console.log("Memoizing: " + qn);
                    }
                    Shumway.AVM2.Runtime.traceCallExecution.value > 1 && Runtime.callWriter.writeLn("Memoizing: " + qn);
                    if (Runtime.isNativePrototype(this)) {
                        AVM2.countTimeline("Runtime: Method Closures");
                        return bindSafely(target.value, this);
                    }
                    if (isTrampoline(target.value)) {
                        target.value.trigger();
                    }
                    release || assert(!isTrampoline(target.value), "We should avoid binding trampolines.");
                    var mc = null;
                    if (this instanceof Shumway.AVM2.AS.ASClass) {
                        AVM2.countTimeline("Runtime: Static Method Closures");
                        mc = bindSafely(target.value, this);
                        defineReadOnlyProperty(this, qn, mc);
                        return mc;
                    }
                    if (Object.prototype.hasOwnProperty.call(this, qn)) {
                        var pd = Object.getOwnPropertyDescriptor(this, qn);
                        if (pd.get) {
                            AVM2.countTimeline("Runtime: Method Closures");
                            return bindSafely(target.value, this);
                        }
                        AVM2.countTimeline("Runtime: Unpatched Memoizer");
                        return this[qn];
                    }
                    mc = bindSafely(target.value, this);
                    mc.methodInfo = target.value.methodInfo;
                    defineReadOnlyProperty(mc, Multiname.getPublicQualifiedName("prototype"), null);
                    defineReadOnlyProperty(this, qn, mc);
                    return mc;
                }
                var m = memoizer;
                AVM2.countTimeline("Runtime: Memoizers");
                m.isMemoizer = true;
                m.debugName = "Memoizer #" + vmNextMemoizerId++;
                return m;
            }
            Runtime.makeMemoizer = makeMemoizer;
            function isTrampoline(fn) {
                release || assert(fn && typeof fn === "function");
                return fn.isTrampoline;
            }
            function isMemoizer(fn) {
                release || assert(fn && typeof fn === "function");
                return fn.isMemoizer;
            }
            Runtime.isMemoizer = isMemoizer;
        })(Runtime = AVM2.Runtime || (AVM2.Runtime = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var Scope = Shumway.AVM2.Runtime.Scope;
        var asCoerceByMultiname = Shumway.AVM2.Runtime.asCoerceByMultiname;
        var asGetSlot = Shumway.AVM2.Runtime.asGetSlot;
        var asSetSlot = Shumway.AVM2.Runtime.asSetSlot;
        var asCoerce = Shumway.AVM2.Runtime.asCoerce;
        var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
        var asAsType = Shumway.AVM2.Runtime.asAsType;
        var asTypeOf = Shumway.AVM2.Runtime.asTypeOf;
        var asIsInstanceOf = Shumway.AVM2.Runtime.asIsInstanceOf;
        var asIsType = Shumway.AVM2.Runtime.asIsType;
        var applyType = Shumway.AVM2.Runtime.applyType;
        var createFunction = Shumway.AVM2.Runtime.createFunction;
        var createClass = Shumway.AVM2.Runtime.createClass;
        var getDescendants = Shumway.AVM2.Runtime.getDescendants;
        var checkFilter = Shumway.AVM2.Runtime.checkFilter;
        var asAdd = Shumway.AVM2.Runtime.asAdd;
        var translateError = Shumway.AVM2.Runtime.translateError;
        var asCreateActivation = Shumway.AVM2.Runtime.asCreateActivation;
        var sliceArguments = Shumway.AVM2.Runtime.sliceArguments;
        var boxValue = Shumway.ObjectUtilities.boxValue;
        var popManyInto = Shumway.ArrayUtilities.popManyInto;
        var construct = Shumway.AVM2.Runtime.construct;
        var Multiname = Shumway.AVM2.ABC.Multiname;
        var assert = Shumway.Debug.assert;
        var HasNext2Info = Shumway.AVM2.Runtime.HasNext2Info;
        var counter = Shumway.Metrics.Counter.instance;
        var ScopeStack = (function () {
            function ScopeStack(parent) {
                this.parent = parent;
                this.stack = [];
                this.isWith = [];
            }
            ScopeStack.prototype.push = function (object, isWith) {
                this.stack.push(object);
                this.isWith.push(!!isWith);
            };
            ScopeStack.prototype.get = function (index) {
                return this.stack[index];
            };
            ScopeStack.prototype.clear = function () {
                this.stack.length = 0;
                this.isWith.length = 0;
            };
            ScopeStack.prototype.pop = function () {
                this.isWith.pop();
                this.stack.pop();
            };
            ScopeStack.prototype.topScope = function () {
                if (!this.scopes) {
                    this.scopes = [];
                }
                var parent = this.parent;
                for (var i = 0; i < this.stack.length; i++) {
                    var object = this.stack[i], isWith = this.isWith[i], scope = this.scopes[i];
                    if (!scope || scope.parent !== parent || scope.object !== object || scope.isWith !== isWith) {
                        scope = this.scopes[i] = new Scope(parent, object, isWith);
                    }
                    parent = scope;
                }
                return parent;
            };
            return ScopeStack;
        })();
        function popNameInto(stack, mn, out) {
            out.flags = mn.flags;
            if (mn.isRuntimeName()) {
                out.name = stack.pop();
            }
            else {
                out.name = mn.name;
            }
            if (mn.isRuntimeNamespace()) {
                out.namespaces = [stack.pop()];
            }
            else {
                out.namespaces = mn.namespaces;
            }
        }
        var Interpreter = (function () {
            function Interpreter() {
            }
            Interpreter.interpretMethod = function ($this, method, savedScope, methodArgs) {
                release || assert(method.analysis);
                AVM2.countTimeline("Interpret Method");
                var abc = method.abc;
                var ints = abc.constantPool.ints;
                var uints = abc.constantPool.uints;
                var doubles = abc.constantPool.doubles;
                var strings = abc.constantPool.strings;
                var methods = abc.methods;
                var multinames = abc.constantPool.multinames;
                var domain = abc.applicationDomain;
                var exceptions = method.exceptions;
                var locals = [$this];
                var stack = [], scopeStack = new ScopeStack(savedScope);
                var parameterCount = method.parameters.length;
                var argCount = methodArgs.length;
                var value;
                for (var i = 0; i < parameterCount; i++) {
                    var parameter = method.parameters[i];
                    if (i < argCount) {
                        value = methodArgs[i];
                    }
                    else {
                        value = parameter.value;
                    }
                    if (parameter.type && !parameter.type.isAnyName()) {
                        value = asCoerceByMultiname(method, parameter.type, value);
                    }
                    locals.push(value);
                }
                if (method.needsRest()) {
                    locals.push(sliceArguments(methodArgs, parameterCount));
                }
                else if (method.needsArguments()) {
                    locals.push(sliceArguments(methodArgs, 0));
                }
                var bytecodes = method.analysis.bytecodes;
                var object, index, multiname, result, a, b, args = [], mn = Multiname.TEMPORARY;
                var hasNext2Infos = [];
                interpretLabel: for (var pc = 0, end = bytecodes.length; pc < end;) {
                    try {
                        var bc = bytecodes[pc];
                        var op = bc.op;
                        switch (op | 0) {
                            case 3 /* throw */:
                                throw stack.pop();
                            case 4 /* getsuper */:
                                popNameInto(stack, multinames[bc.index], mn);
                                stack.push(stack.pop().asGetSuper(savedScope, mn.namespaces, mn.name, mn.flags));
                                break;
                            case 5 /* setsuper */:
                                value = stack.pop();
                                popNameInto(stack, multinames[bc.index], mn);
                                stack.pop().asSetSuper(savedScope, mn.namespaces, mn.name, mn.flags, value);
                                break;
                            case 8 /* kill */:
                                locals[bc.index] = undefined;
                                break;
                            case 12 /* ifnlt */:
                                b = stack.pop();
                                a = stack.pop();
                                pc = !(a < b) ? bc.offset : pc + 1;
                                continue;
                            case 24 /* ifge */:
                                b = stack.pop();
                                a = stack.pop();
                                pc = a >= b ? bc.offset : pc + 1;
                                continue;
                            case 13 /* ifnle */:
                                b = stack.pop();
                                a = stack.pop();
                                pc = !(a <= b) ? bc.offset : pc + 1;
                                continue;
                            case 23 /* ifgt */:
                                b = stack.pop();
                                a = stack.pop();
                                pc = a > b ? bc.offset : pc + 1;
                                continue;
                            case 14 /* ifngt */:
                                b = stack.pop();
                                a = stack.pop();
                                pc = !(a > b) ? bc.offset : pc + 1;
                                continue;
                            case 22 /* ifle */:
                                b = stack.pop();
                                a = stack.pop();
                                pc = a <= b ? bc.offset : pc + 1;
                                continue;
                            case 15 /* ifnge */:
                                b = stack.pop();
                                a = stack.pop();
                                pc = !(a >= b) ? bc.offset : pc + 1;
                                continue;
                            case 21 /* iflt */:
                                b = stack.pop();
                                a = stack.pop();
                                pc = a < b ? bc.offset : pc + 1;
                                continue;
                            case 16 /* jump */:
                                pc = bc.offset;
                                continue;
                            case 17 /* iftrue */:
                                pc = !!stack.pop() ? bc.offset : pc + 1;
                                continue;
                            case 18 /* iffalse */:
                                pc = !stack.pop() ? bc.offset : pc + 1;
                                continue;
                            case 19 /* ifeq */:
                                b = stack.pop();
                                a = stack.pop();
                                pc = asEquals(a, b) ? bc.offset : pc + 1;
                                continue;
                            case 20 /* ifne */:
                                b = stack.pop();
                                a = stack.pop();
                                pc = !asEquals(a, b) ? bc.offset : pc + 1;
                                continue;
                            case 25 /* ifstricteq */:
                                b = stack.pop();
                                a = stack.pop();
                                pc = a === b ? bc.offset : pc + 1;
                                continue;
                            case 26 /* ifstrictne */:
                                b = stack.pop();
                                a = stack.pop();
                                pc = a !== b ? bc.offset : pc + 1;
                                continue;
                            case 27 /* lookupswitch */:
                                index = stack.pop();
                                if (index < 0 || index >= bc.offsets.length) {
                                    index = bc.offsets.length - 1;
                                }
                                pc = bc.offsets[index];
                                continue;
                            case 28 /* pushwith */:
                                scopeStack.push(boxValue(stack.pop()), true);
                                break;
                            case 29 /* popscope */:
                                scopeStack.pop();
                                break;
                            case 30 /* nextname */:
                                index = stack.pop();
                                stack[stack.length - 1] = boxValue(stack[stack.length - 1]).asNextName(index);
                                break;
                            case 35 /* nextvalue */:
                                index = stack.pop();
                                stack[stack.length - 1] = boxValue(stack[stack.length - 1]).asNextValue(index);
                                break;
                            case 50 /* hasnext2 */:
                                var hasNext2Info = hasNext2Infos[pc] || (hasNext2Infos[pc] = new HasNext2Info(null, 0));
                                object = locals[bc.object];
                                index = locals[bc.index];
                                hasNext2Info.object = object;
                                hasNext2Info.index = index;
                                Object(object).asHasNext2(hasNext2Info);
                                locals[bc.object] = hasNext2Info.object;
                                locals[bc.index] = hasNext2Info.index;
                                stack.push(!!hasNext2Info.index);
                                break;
                            case 32 /* pushnull */:
                                stack.push(null);
                                break;
                            case 33 /* pushundefined */:
                                stack.push(undefined);
                                break;
                            case 36 /* pushbyte */:
                            case 37 /* pushshort */:
                                stack.push(bc.value);
                                break;
                            case 44 /* pushstring */:
                                stack.push(strings[bc.index]);
                                break;
                            case 45 /* pushint */:
                                stack.push(ints[bc.index]);
                                break;
                            case 46 /* pushuint */:
                                stack.push(uints[bc.index]);
                                break;
                            case 47 /* pushdouble */:
                                stack.push(doubles[bc.index]);
                                break;
                            case 38 /* pushtrue */:
                                stack.push(true);
                                break;
                            case 39 /* pushfalse */:
                                stack.push(false);
                                break;
                            case 40 /* pushnan */:
                                stack.push(NaN);
                                break;
                            case 41 /* pop */:
                                stack.pop();
                                break;
                            case 42 /* dup */:
                                stack.push(stack[stack.length - 1]);
                                break;
                            case 43 /* swap */:
                                object = stack[stack.length - 1];
                                stack[stack.length - 1] = stack[stack.length - 2];
                                stack[stack.length - 2] = object;
                                break;
                            case 48 /* pushscope */:
                                scopeStack.push(boxValue(stack.pop()), false);
                                break;
                            case 64 /* newfunction */:
                                stack.push(createFunction(methods[bc.index], scopeStack.topScope(), true, false));
                                break;
                            case 65 /* call */:
                                popManyInto(stack, bc.argCount, args);
                                object = stack.pop();
                                stack[stack.length - 1] = stack[stack.length - 1].asApply(object, args);
                                break;
                            case 66 /* construct */:
                                popManyInto(stack, bc.argCount, args);
                                stack[stack.length - 1] = construct(stack[stack.length - 1], args);
                                break;
                            case 71 /* returnvoid */:
                                return;
                            case 72 /* returnvalue */:
                                if (method.returnType) {
                                    return asCoerceByMultiname(method, method.returnType, stack.pop());
                                }
                                return stack.pop();
                            case 73 /* constructsuper */:
                                popManyInto(stack, bc.argCount, args);
                                object = stack.pop();
                                savedScope.object.baseClass.instanceConstructorNoInitialize.apply(object, args);
                                break;
                            case 74 /* constructprop */:
                                popManyInto(stack, bc.argCount, args);
                                popNameInto(stack, multinames[bc.index], mn);
                                object = boxValue(stack[stack.length - 1]);
                                object = object.asConstructProperty(mn.namespaces, mn.name, mn.flags, args);
                                stack[stack.length - 1] = object;
                                break;
                            case 75 /* callsuperid */:
                                Shumway.Debug.notImplemented("OP.callsuperid");
                                break;
                            case 76 /* callproplex */:
                            case 70 /* callproperty */:
                            case 79 /* callpropvoid */:
                                popManyInto(stack, bc.argCount, args);
                                popNameInto(stack, multinames[bc.index], mn);
                                result = boxValue(stack.pop()).asCallProperty(mn.namespaces, mn.name, mn.flags, op === 76 /* callproplex */, args);
                                if (op !== 79 /* callpropvoid */) {
                                    stack.push(result);
                                }
                                break;
                            case 69 /* callsuper */:
                            case 78 /* callsupervoid */:
                                popManyInto(stack, bc.argCount, args);
                                popNameInto(stack, multinames[bc.index], mn);
                                result = stack.pop().asCallSuper(savedScope, mn.namespaces, mn.name, mn.flags, args);
                                if (op !== 78 /* callsupervoid */) {
                                    stack.push(result);
                                }
                                break;
                            case 83 /* applytype */:
                                popManyInto(stack, bc.argCount, args);
                                stack[stack.length - 1] = applyType(method, stack[stack.length - 1], args);
                                break;
                            case 85 /* newobject */:
                                object = {};
                                for (var i = 0; i < bc.argCount; i++) {
                                    value = stack.pop();
                                    object[Multiname.getPublicQualifiedName(stack.pop())] = value;
                                }
                                stack.push(object);
                                break;
                            case 86 /* newarray */:
                                object = [];
                                popManyInto(stack, bc.argCount, args);
                                object.push.apply(object, args);
                                stack.push(object);
                                break;
                            case 87 /* newactivation */:
                                release || assert(method.needsActivation());
                                stack.push(asCreateActivation(method));
                                break;
                            case 88 /* newclass */:
                                stack[stack.length - 1] = createClass(abc.classes[bc.index], stack[stack.length - 1], scopeStack.topScope());
                                break;
                            case 89 /* getdescendants */:
                                popNameInto(stack, multinames[bc.index], mn);
                                if (mn.name === undefined) {
                                    mn.name = '*';
                                }
                                stack.push(getDescendants(stack.pop(), mn));
                                break;
                            case 90 /* newcatch */:
                                release || assert(exceptions[bc.index].scopeObject);
                                stack.push(exceptions[bc.index].scopeObject);
                                break;
                            case 94 /* findproperty */:
                            case 93 /* findpropstrict */:
                                popNameInto(stack, multinames[bc.index], mn);
                                stack.push(scopeStack.topScope().findScopeProperty(mn.namespaces, mn.name, mn.flags, method, op === 93 /* findpropstrict */, false));
                                break;
                            case 96 /* getlex */:
                                multiname = multinames[bc.index];
                                object = scopeStack.topScope().findScopeProperty(multiname.namespaces, multiname.name, multiname.flags, method, true, false);
                                stack.push(object.asGetProperty(multiname.namespaces, multiname.name, multiname.flags));
                                break;
                            case 104 /* initproperty */:
                            case 97 /* setproperty */:
                                value = stack.pop();
                                popNameInto(stack, multinames[bc.index], mn);
                                boxValue(stack.pop()).asSetProperty(mn.namespaces, mn.name, mn.flags, value);
                                break;
                            case 98 /* getlocal */:
                                stack.push(locals[bc.index]);
                                break;
                            case 99 /* setlocal */:
                                locals[bc.index] = stack.pop();
                                break;
                            case 100 /* getglobalscope */:
                                stack.push(savedScope.global.object);
                                break;
                            case 101 /* getscopeobject */:
                                stack.push(scopeStack.get(bc.index));
                                break;
                            case 102 /* getproperty */:
                                popNameInto(stack, multinames[bc.index], mn);
                                stack[stack.length - 1] = boxValue(stack[stack.length - 1]).asGetProperty(mn.namespaces, mn.name, mn.flags);
                                break;
                            case 106 /* deleteproperty */:
                                popNameInto(stack, multinames[bc.index], mn);
                                stack[stack.length - 1] = boxValue(stack[stack.length - 1]).asDeleteProperty(mn.namespaces, mn.name, mn.flags);
                                break;
                            case 108 /* getslot */:
                                stack[stack.length - 1] = asGetSlot(stack[stack.length - 1], bc.index);
                                break;
                            case 109 /* setslot */:
                                value = stack.pop();
                                object = stack.pop();
                                asSetSlot(object, bc.index, value);
                                break;
                            case 112 /* convert_s */:
                                stack[stack.length - 1] = asCoerceString(stack[stack.length - 1]);
                                break;
                            case 114 /* esc_xattr */:
                                stack[stack.length - 1] = AVM2.Runtime.escapeXMLAttribute(stack[stack.length - 1]);
                                break;
                            case 113 /* esc_xelem */:
                                stack[stack.length - 1] = AVM2.Runtime.escapeXMLElement(stack[stack.length - 1]);
                                break;
                            case 131 /* coerce_i */:
                            case 115 /* convert_i */:
                                stack[stack.length - 1] |= 0;
                                break;
                            case 136 /* coerce_u */:
                            case 116 /* convert_u */:
                                stack[stack.length - 1] >>>= 0;
                                break;
                            case 132 /* coerce_d */:
                            case 117 /* convert_d */:
                                stack[stack.length - 1] = +stack[stack.length - 1];
                                break;
                            case 129 /* coerce_b */:
                            case 118 /* convert_b */:
                                stack[stack.length - 1] = !!stack[stack.length - 1];
                                break;
                            case 120 /* checkfilter */:
                                stack[stack.length - 1] = checkFilter(stack[stack.length - 1]);
                                break;
                            case 128 /* coerce */:
                                stack[stack.length - 1] = asCoerce(domain.getType(multinames[bc.index]), stack[stack.length - 1]);
                                break;
                            case 130 /* coerce_a */:
                                break;
                            case 133 /* coerce_s */:
                                stack[stack.length - 1] = asCoerceString(stack[stack.length - 1]);
                                break;
                            case 134 /* astype */:
                                stack[stack.length - 2] = asAsType(domain.getType(multinames[bc.index]), stack[stack.length - 1]);
                                break;
                            case 135 /* astypelate */:
                                stack[stack.length - 2] = asAsType(stack.pop(), stack[stack.length - 1]);
                                break;
                            case 137 /* coerce_o */:
                                object = stack[stack.length - 1];
                                stack[stack.length - 1] = object == undefined ? null : object;
                                break;
                            case 144 /* negate */:
                                stack[stack.length - 1] = -stack[stack.length - 1];
                                break;
                            case 145 /* increment */:
                                ++stack[stack.length - 1];
                                break;
                            case 146 /* inclocal */:
                                ++locals[bc.index];
                                break;
                            case 147 /* decrement */:
                                --stack[stack.length - 1];
                                break;
                            case 148 /* declocal */:
                                --locals[bc.index];
                                break;
                            case 149 /* typeof */:
                                stack[stack.length - 1] = asTypeOf(stack[stack.length - 1]);
                                break;
                            case 150 /* not */:
                                stack[stack.length - 1] = !stack[stack.length - 1];
                                break;
                            case 151 /* bitnot */:
                                stack[stack.length - 1] = ~stack[stack.length - 1];
                                break;
                            case 160 /* add */:
                                stack[stack.length - 2] = asAdd(stack[stack.length - 2], stack.pop());
                                break;
                            case 161 /* subtract */:
                                stack[stack.length - 2] -= stack.pop();
                                break;
                            case 162 /* multiply */:
                                stack[stack.length - 2] *= stack.pop();
                                break;
                            case 163 /* divide */:
                                stack[stack.length - 2] /= stack.pop();
                                break;
                            case 164 /* modulo */:
                                stack[stack.length - 2] %= stack.pop();
                                break;
                            case 165 /* lshift */:
                                stack[stack.length - 2] <<= stack.pop();
                                break;
                            case 166 /* rshift */:
                                stack[stack.length - 2] >>= stack.pop();
                                break;
                            case 167 /* urshift */:
                                stack[stack.length - 2] >>>= stack.pop();
                                break;
                            case 168 /* bitand */:
                                stack[stack.length - 2] &= stack.pop();
                                break;
                            case 169 /* bitor */:
                                stack[stack.length - 2] |= stack.pop();
                                break;
                            case 170 /* bitxor */:
                                stack[stack.length - 2] ^= stack.pop();
                                break;
                            case 171 /* equals */:
                                stack[stack.length - 2] = asEquals(stack[stack.length - 2], stack.pop());
                                break;
                            case 172 /* strictequals */:
                                stack[stack.length - 2] = stack[stack.length - 2] === stack.pop();
                                break;
                            case 173 /* lessthan */:
                                stack[stack.length - 2] = stack[stack.length - 2] < stack.pop();
                                break;
                            case 174 /* lessequals */:
                                stack[stack.length - 2] = stack[stack.length - 2] <= stack.pop();
                                break;
                            case 175 /* greaterthan */:
                                stack[stack.length - 2] = stack[stack.length - 2] > stack.pop();
                                break;
                            case 176 /* greaterequals */:
                                stack[stack.length - 2] = stack[stack.length - 2] >= stack.pop();
                                break;
                            case 177 /* instanceof */:
                                stack[stack.length - 2] = asIsInstanceOf(stack.pop(), stack[stack.length - 1]);
                                break;
                            case 178 /* istype */:
                                stack[stack.length - 1] = asIsType(domain.getType(multinames[bc.index]), stack[stack.length - 1]);
                                break;
                            case 179 /* istypelate */:
                                stack[stack.length - 2] = asIsType(stack.pop(), stack[stack.length - 1]);
                                break;
                            case 180 /* in */:
                                stack[stack.length - 2] = boxValue(stack.pop()).asHasProperty(null, stack[stack.length - 1]);
                                break;
                            case 192 /* increment_i */:
                                stack[stack.length - 1] = (stack[stack.length - 1] | 0) + 1;
                                break;
                            case 193 /* decrement_i */:
                                stack[stack.length - 1] = (stack[stack.length - 1] | 0) - 1;
                                break;
                            case 194 /* inclocal_i */:
                                locals[bc.index] = (locals[bc.index] | 0) + 1;
                                break;
                            case 195 /* declocal_i */:
                                locals[bc.index] = (locals[bc.index] | 0) - 1;
                                break;
                            case 196 /* negate_i */:
                                stack[stack.length - 1] = ~stack[stack.length - 1];
                                break;
                            case 197 /* add_i */:
                                stack[stack.length - 2] = stack[stack.length - 2] + stack.pop() | 0;
                                break;
                            case 198 /* subtract_i */:
                                stack[stack.length - 2] = stack[stack.length - 2] - stack.pop() | 0;
                                break;
                            case 199 /* multiply_i */:
                                stack[stack.length - 2] = stack[stack.length - 2] * stack.pop() | 0;
                                break;
                            case 208 /* getlocal0 */:
                            case 209 /* getlocal1 */:
                            case 210 /* getlocal2 */:
                            case 211 /* getlocal3 */:
                                stack.push(locals[op - 208 /* getlocal0 */]);
                                break;
                            case 212 /* setlocal0 */:
                            case 213 /* setlocal1 */:
                            case 214 /* setlocal2 */:
                            case 215 /* setlocal3 */:
                                locals[op - 212 /* setlocal0 */] = stack.pop();
                                break;
                            case 6 /* dxns */:
                                Shumway.AVM2.AS.ASXML.defaultNamespace = strings[bc.index];
                                break;
                            case 7 /* dxnslate */:
                                Shumway.AVM2.AS.ASXML.defaultNamespace = stack.pop();
                                break;
                            case 239 /* debug */:
                            case 240 /* debugline */:
                            case 241 /* debugfile */:
                                break;
                            default:
                                Shumway.Debug.notImplemented(Shumway.AVM2.opcodeName(op));
                        }
                        pc++;
                    }
                    catch (e) {
                        if (exceptions.length < 1) {
                            throw e;
                        }
                        e = translateError(domain, e);
                        for (var i = 0, j = exceptions.length; i < j; i++) {
                            var handler = exceptions[i];
                            if (pc >= handler.start && pc <= handler.end && (!handler.typeName || domain.getType(handler.typeName).isType(e))) {
                                stack.length = 0;
                                stack.push(e);
                                scopeStack.clear();
                                pc = handler.offset;
                                continue interpretLabel;
                            }
                        }
                        throw e;
                    }
                }
            };
            return Interpreter;
        })();
        AVM2.Interpreter = Interpreter;
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var Runtime;
        (function (Runtime) {
            Runtime.VM_METHOD_OVERRIDES["static mochi.as3.MochiServices::connect"] = function () {
                return;
            };
            Runtime.VM_METHOD_OVERRIDES["static MochiBot::track"] = function () {
                return;
            };
            Runtime.VM_METHOD_OVERRIDES["com.midasplayer.debug.DebugLog::trace"] = function (msg) {
                console.log(msg);
            };
            Runtime.VM_METHOD_OVERRIDES["com.midasplayer.engine.comm.DebugGameComm::getGameData"] = function () {
                return '<gamedata randomseed="554884453" version="1">\n<musicOn>true</musicOn>\n<soundOn>true</soundOn>\n<isShortGame>false</isShortGame>\n<booster_1>0</booster_1>\n<booster_2>0</booster_2>\n<booster_3>0</booster_3>\n<booster_4>0</booster_4>\n<booster_5>0</booster_5>\n<bestScore>0</bestScore>\n<bestChain>0</bestChain>\n<bestLevel>0</bestLevel>\n<bestCrushed>0</bestCrushed>\n<bestMixed>0</bestMixed>\n<text id="outro.crushed">Candy crushed</text>\n<text id="outro.bestever">best ever</text>\n<text id="outro.trophy.two">scored {0} in one game</text>\n<text id="outro.combo_color_color">All Clear Created</text>\n<text id="outro.trophy.one">crushed {0} candy in one game</text>\n<text id="outro.score">Score</text>\n<text id="outro.opengame">Please register to play the full game</text>\n<text id="outro.chain">Longest chain</text>\n<text id="outro.time">Game ends in {0} seconds</text>\n<text id="outro.combo_color_line">Super Stripes Created</text>\n<text id="game.nomoves">No more moves!</text>\n<text id="outro.combo_wrapper_line">Mega-Candy Created</text>\n<text id="intro.time">Game starts in {0} seconds</text>\n<text id="outro.now">now</text>\n<text id="outro.level">Level reached</text>\n<text id="outro.title">Game Over</text>\n<text id="intro.info1">Match 3 Candy of the same colour to crush them. Matching 4 or 5 in different formations generates special sweets that are extra tasty.</text>\n<text id="intro.info2">You can also combine the special sweets for additional effects by switching them with each other. Try these combinations for a taste you will not forget: </text>\n<text id="outro.combo_color_wrapper">Double Colour Bombs Created</text>\n<text id="outro.trophy.three">made {0} combined candy in one game</text>\n<text id="intro.title">Play like this:</text>\n</gamedata>';
            };
            Runtime.VM_METHOD_OVERRIDES["com.antkarlov.Preloader::com.antkarlov:Preloader.isUrl"] = function () {
                return true;
            };
            Runtime.VM_METHOD_OVERRIDES["static com.demonsters.debugger.MonsterDebugger::initialize"] = function () {
            };
            Runtime.VM_METHOD_OVERRIDES["com.spilgames.api.core.tracking.TrackConfig::getTrackers"] = function () {
                return [];
            };
            Runtime.VM_METHOD_OVERRIDES["org.robotlegs.base.CommandMap::org.robotlegs.base:CommandMap.verifyCommandClass"] = function () {
                return;
            };
            Runtime.VM_METHOD_OVERRIDES["org.swiftsuspenders.injectionpoints.PropertyInjectionPoint::org.swiftsuspenders.injectionpoints:PropertyInjectionPoint.initializeInjection"] = function () {
                return;
            };
            Runtime.VM_METHOD_OVERRIDES["org.swiftsuspenders.injectionpoints.NoParamsConstructorInjectionPoint::applyInjection"] = function () {
                return;
            };
            Runtime.VM_METHOD_OVERRIDES["org.swiftsuspenders.injectionpoints.PropertyInjectionPoint::applyInjection"] = function () {
                return;
            };
            Runtime.VM_METHOD_OVERRIDES["com.spilgames.api.components.TextFields.AutoFitTextFieldEx::com.spilgames.api.components.TextFields:AutoFitTextFieldEx.updateProperties"] = Runtime.VM_METHOD_OVERRIDES["com.spilgames.api.components.TextFields.AutoFitTextFieldEx::com.spilgames.api.components.TextFields:AutoFitTextFieldEx.updateTextSize"] = function () {
            };
            Runtime.VM_METHOD_OVERRIDES["Preloader::isNeedSite"] = function () {
                return true;
            };
            Runtime.VM_METHOD_OVERRIDES["facebook.utils.FBURI::isFacebookURI"] = function () {
                return true;
            };
            Runtime.VM_METHOD_OVERRIDES["facebook.utils.FBURI::is_facebook_cdn_url"] = function () {
                return !!this.asGetPublicProperty('authority');
            };
        })(Runtime = AVM2.Runtime || (AVM2.Runtime = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var Multiname = Shumway.AVM2.ABC.Multiname;
        var forEachPublicProperty = Shumway.AVM2.Runtime.forEachPublicProperty;
        var construct = Shumway.AVM2.Runtime.construct;
        (function (AMF0Marker) {
            AMF0Marker[AMF0Marker["NUMBER"] = 0x00] = "NUMBER";
            AMF0Marker[AMF0Marker["BOOLEAN"] = 0x01] = "BOOLEAN";
            AMF0Marker[AMF0Marker["STRING"] = 0x02] = "STRING";
            AMF0Marker[AMF0Marker["OBJECT"] = 0x03] = "OBJECT";
            AMF0Marker[AMF0Marker["NULL"] = 0x05] = "NULL";
            AMF0Marker[AMF0Marker["UNDEFINED"] = 0x06] = "UNDEFINED";
            AMF0Marker[AMF0Marker["REFERENCE"] = 0x07] = "REFERENCE";
            AMF0Marker[AMF0Marker["ECMA_ARRAY"] = 0x08] = "ECMA_ARRAY";
            AMF0Marker[AMF0Marker["OBJECT_END"] = 0x09] = "OBJECT_END";
            AMF0Marker[AMF0Marker["STRICT_ARRAY"] = 0x0A] = "STRICT_ARRAY";
            AMF0Marker[AMF0Marker["DATE"] = 0x0B] = "DATE";
            AMF0Marker[AMF0Marker["LONG_STRING"] = 0x0C] = "LONG_STRING";
            AMF0Marker[AMF0Marker["XML"] = 0x0F] = "XML";
            AMF0Marker[AMF0Marker["TYPED_OBJECT"] = 0x10] = "TYPED_OBJECT";
            AMF0Marker[AMF0Marker["AVMPLUS"] = 0x11] = "AVMPLUS";
        })(AVM2.AMF0Marker || (AVM2.AMF0Marker = {}));
        var AMF0Marker = AVM2.AMF0Marker;
        function writeString(ba, s) {
            if (s.length > 0xFFFF) {
                throw 'AMF short string exceeded';
            }
            if (!s.length) {
                ba.writeByte(0x00);
                ba.writeByte(0x00);
                return;
            }
            var bytes = Shumway.StringUtilities.utf8decode(s);
            ba.writeByte((bytes.length >> 8) & 255);
            ba.writeByte(bytes.length & 255);
            for (var i = 0; i < bytes.length; i++) {
                ba.writeByte(bytes[i]);
            }
        }
        function readString(ba) {
            var byteLength = (ba.readByte() << 8) | ba.readByte();
            if (!byteLength) {
                return '';
            }
            var buffer = new Uint8Array(byteLength);
            for (var i = 0; i < byteLength; i++) {
                buffer[i] = ba.readByte();
            }
            return Shumway.StringUtilities.utf8encode(buffer);
        }
        function writeDouble(ba, value) {
            var buffer = new ArrayBuffer(8);
            var view = new DataView(buffer);
            view.setFloat64(0, value, false);
            for (var i = 0; i < buffer.byteLength; i++) {
                ba.writeByte(view.getUint8(i));
            }
        }
        function readDouble(ba) {
            var buffer = new ArrayBuffer(8);
            var view = new DataView(buffer);
            for (var i = 0; i < buffer.byteLength; i++) {
                view.setUint8(i, ba.readByte());
            }
            return view.getFloat64(0, false);
        }
        function setAvmProperty(obj, propertyName, value) {
            obj.asSetPublicProperty(propertyName, value);
        }
        var AMF0 = (function () {
            function AMF0() {
            }
            AMF0.write = function (ba, obj) {
                switch (typeof obj) {
                    case 'boolean':
                        ba.writeByte(1 /* BOOLEAN */);
                        ba.writeByte(obj ? 0x01 : 0x00);
                        break;
                    case 'number':
                        ba.writeByte(0 /* NUMBER */);
                        writeDouble(ba, obj);
                        break;
                    case 'undefined':
                        ba.writeByte(6 /* UNDEFINED */);
                        break;
                    case 'string':
                        ba.writeByte(2 /* STRING */);
                        writeString(ba, obj);
                        break;
                    case 'object':
                        if (obj === null) {
                            ba.writeByte(5 /* NULL */);
                        }
                        else if (Array.isArray(obj)) {
                            ba.writeByte(8 /* ECMA_ARRAY */);
                            ba.writeByte((obj.length >>> 24) & 255);
                            ba.writeByte((obj.length >> 16) & 255);
                            ba.writeByte((obj.length >> 8) & 255);
                            ba.writeByte(obj.length & 255);
                            forEachPublicProperty(obj, function (key, value) {
                                writeString(ba, key);
                                this.write(ba, value);
                            }, this);
                            ba.writeByte(0x00);
                            ba.writeByte(0x00);
                            ba.writeByte(9 /* OBJECT_END */);
                        }
                        else {
                            ba.writeByte(3 /* OBJECT */);
                            forEachPublicProperty(obj, function (key, value) {
                                writeString(ba, key);
                                this.write(ba, value);
                            }, this);
                            ba.writeByte(0x00);
                            ba.writeByte(0x00);
                            ba.writeByte(9 /* OBJECT_END */);
                        }
                        return;
                }
            };
            AMF0.read = function (ba) {
                var marker = ba.readByte();
                switch (marker) {
                    case 0 /* NUMBER */:
                        return readDouble(ba);
                    case 1 /* BOOLEAN */:
                        return !!ba.readByte();
                    case 2 /* STRING */:
                        return readString(ba);
                    case 3 /* OBJECT */:
                        var obj = {};
                        while (true) {
                            var key = readString(ba);
                            if (!key.length)
                                break;
                            setAvmProperty(obj, key, this.read(ba));
                        }
                        if (ba.readByte() !== 9 /* OBJECT_END */) {
                            throw 'AMF0 End marker is not found';
                        }
                        return obj;
                    case 5 /* NULL */:
                        return null;
                    case 6 /* UNDEFINED */:
                        return undefined;
                    case 8 /* ECMA_ARRAY */:
                        var arr = [];
                        arr.length = (ba.readByte() << 24) | (ba.readByte() << 16) | (ba.readByte() << 8) | ba.readByte();
                        while (true) {
                            var key = readString(ba);
                            if (!key.length)
                                break;
                            setAvmProperty(arr, key, this.read(ba));
                        }
                        if (ba.readByte() !== 9 /* OBJECT_END */) {
                            throw 'AMF0 End marker is not found';
                        }
                        return arr;
                    case 10 /* STRICT_ARRAY */:
                        var arr = [];
                        arr.length = (ba.readByte() << 24) | (ba.readByte() << 16) | (ba.readByte() << 8) | ba.readByte();
                        for (var i = 0; i < arr.length; i++) {
                            arr[i] = this.read(ba);
                        }
                        return arr;
                    case 17 /* AVMPLUS */:
                        return readAmf3Data(ba, {});
                    default:
                        throw 'AMF0 Unknown marker ' + marker;
                }
            };
            return AMF0;
        })();
        AVM2.AMF0 = AMF0;
        (function (AMF3Marker) {
            AMF3Marker[AMF3Marker["UNDEFINED"] = 0x00] = "UNDEFINED";
            AMF3Marker[AMF3Marker["NULL"] = 0x01] = "NULL";
            AMF3Marker[AMF3Marker["FALSE"] = 0x02] = "FALSE";
            AMF3Marker[AMF3Marker["TRUE"] = 0x03] = "TRUE";
            AMF3Marker[AMF3Marker["INTEGER"] = 0x04] = "INTEGER";
            AMF3Marker[AMF3Marker["DOUBLE"] = 0x05] = "DOUBLE";
            AMF3Marker[AMF3Marker["STRING"] = 0x06] = "STRING";
            AMF3Marker[AMF3Marker["XML_DOC"] = 0x07] = "XML_DOC";
            AMF3Marker[AMF3Marker["DATE"] = 0x08] = "DATE";
            AMF3Marker[AMF3Marker["ARRAY"] = 0x09] = "ARRAY";
            AMF3Marker[AMF3Marker["OBJECT"] = 0x0A] = "OBJECT";
            AMF3Marker[AMF3Marker["XML"] = 0x0B] = "XML";
            AMF3Marker[AMF3Marker["BYTEARRAY"] = 0x0C] = "BYTEARRAY";
            AMF3Marker[AMF3Marker["VECTOR_INT"] = 0x0D] = "VECTOR_INT";
            AMF3Marker[AMF3Marker["VECTOR_UINT"] = 0x0E] = "VECTOR_UINT";
            AMF3Marker[AMF3Marker["VECTOR_DOUBLE"] = 0x0F] = "VECTOR_DOUBLE";
            AMF3Marker[AMF3Marker["VECTOR_OBJECT"] = 0x10] = "VECTOR_OBJECT";
            AMF3Marker[AMF3Marker["DICTIONARY"] = 0x11] = "DICTIONARY";
        })(AVM2.AMF3Marker || (AVM2.AMF3Marker = {}));
        var AMF3Marker = AVM2.AMF3Marker;
        function readU29(ba) {
            var b1 = ba.readByte();
            if ((b1 & 0x80) === 0) {
                return b1;
            }
            var b2 = ba.readByte();
            if ((b2 & 0x80) === 0) {
                return ((b1 & 0x7F) << 7) | b2;
            }
            var b3 = ba.readByte();
            if ((b3 & 0x80) === 0) {
                return ((b1 & 0x7F) << 14) | ((b2 & 0x7F) << 7) | b3;
            }
            var b4 = ba.readByte();
            return ((b1 & 0x7F) << 22) | ((b2 & 0x7F) << 15) | ((b3 & 0x7F) << 8) | b4;
        }
        function writeU29(ba, value) {
            if ((value & 0xFFFFFF80) === 0) {
                ba.writeByte(value & 0x7F);
            }
            else if ((value & 0xFFFFC000) === 0) {
                ba.writeByte(0x80 | ((value >> 7) & 0x7F));
                ba.writeByte(value & 0x7F);
            }
            else if ((value & 0xFFE00000) === 0) {
                ba.writeByte(0x80 | ((value >> 14) & 0x7F));
                ba.writeByte(0x80 | ((value >> 7) & 0x7F));
                ba.writeByte(value & 0x7F);
            }
            else if ((value & 0xC0000000) === 0) {
                ba.writeByte(0x80 | ((value >> 22) & 0x7F));
                ba.writeByte(0x80 | ((value >> 15) & 0x7F));
                ba.writeByte(0x80 | ((value >> 8) & 0x7F));
                ba.writeByte(value & 0xFF);
            }
            else {
                throw 'AMF3 U29 range';
            }
        }
        function readUTF8vr(ba, caches) {
            var u29s = readU29(ba);
            if (u29s === 0x01) {
                return '';
            }
            var stringsCache = caches.stringsCache || (caches.stringsCache = []);
            if ((u29s & 1) === 0) {
                return stringsCache[u29s >> 1];
            }
            var byteLength = u29s >> 1;
            var buffer = new Uint8Array(byteLength);
            for (var i = 0; i < byteLength; i++) {
                buffer[i] = ba.readByte();
            }
            var value = Shumway.StringUtilities.utf8encode(buffer);
            stringsCache.push(value);
            return value;
        }
        function writeUTF8vr(ba, value, caches) {
            if (value === '') {
                ba.writeByte(0x01);
                return;
            }
            var stringsCache = caches.stringsCache || (caches.stringsCache = []);
            var index = stringsCache.indexOf(value);
            if (index >= 0) {
                writeU29(ba, index << 1);
                return;
            }
            stringsCache.push(value);
            var bytes = Shumway.StringUtilities.utf8decode(value);
            writeU29(ba, 1 | (bytes.length << 1));
            for (var i = 0; i < bytes.length; i++) {
                ba.writeByte(bytes[i]);
            }
        }
        function readAmf3Data(ba, caches) {
            var marker = ba.readByte();
            switch (marker) {
                case 1 /* NULL */:
                    return null;
                case 0 /* UNDEFINED */:
                    return undefined;
                case 2 /* FALSE */:
                    return false;
                case 3 /* TRUE */:
                    return true;
                case 4 /* INTEGER */:
                    return readU29(ba);
                case 5 /* DOUBLE */:
                    return readDouble(ba);
                case 6 /* STRING */:
                    return readUTF8vr(ba, caches);
                case 8 /* DATE */:
                    return new Date(readDouble(ba));
                case 10 /* OBJECT */:
                    var u29o = readU29(ba);
                    if ((u29o & 1) === 0) {
                        return caches.objectsCache[u29o >> 1];
                    }
                    if ((u29o & 4) !== 0) {
                        throw 'AMF3 Traits-Ext is not supported';
                    }
                    var traits, objectClass;
                    if ((u29o & 2) === 0) {
                        traits = caches.traitsCache[u29o >> 2];
                        objectClass = traits.class;
                    }
                    else {
                        traits = {};
                        var aliasName = readUTF8vr(ba, caches);
                        traits.className = aliasName;
                        objectClass = aliasName && AVM2.aliasesCache.names[aliasName];
                        traits.class = objectClass;
                        traits.isDynamic = (u29o & 8) !== 0;
                        traits.members = [];
                        var slots = objectClass && objectClass.instanceBindings.slots;
                        for (var i = 0, j = u29o >> 4; i < j; i++) {
                            var traitName = readUTF8vr(ba, caches);
                            var slot = null;
                            for (var j = 1; slots && j < slots.length; j++) {
                                if (slots[j].name.name === traitName) {
                                    slot = slots[j];
                                    break;
                                }
                            }
                            traits.members.push(slot ? Multiname.getQualifiedName(slot.name) : Multiname.getPublicQualifiedName(traitName));
                        }
                        (caches.traitsCache || (caches.traitsCache = [])).push(traits);
                    }
                    var obj = objectClass ? construct(objectClass, []) : {};
                    (caches.objectsCache || (caches.objectsCache = [])).push(obj);
                    for (var i = 0; i < traits.members.length; i++) {
                        var value = readAmf3Data(ba, caches);
                        obj[traits.members[i]] = value;
                    }
                    if (traits.isDynamic) {
                        while (true) {
                            var key = readUTF8vr(ba, caches);
                            if (!key.length)
                                break;
                            var value = readAmf3Data(ba, caches);
                            setAvmProperty(obj, key, value);
                        }
                    }
                    return obj;
                case 9 /* ARRAY */:
                    var u29o = readU29(ba);
                    if ((u29o & 1) === 0) {
                        return caches.objectsCache[u29o >> 1];
                    }
                    var arr = [];
                    (caches.objectsCache || (caches.objectsCache = [])).push(arr);
                    var densePortionLength = u29o >> 1;
                    while (true) {
                        var key = readUTF8vr(ba, caches);
                        if (!key.length)
                            break;
                        var value = readAmf3Data(ba, caches);
                        setAvmProperty(arr, key, value);
                    }
                    for (var i = 0; i < densePortionLength; i++) {
                        var value = readAmf3Data(ba, caches);
                        setAvmProperty(arr, i, value);
                    }
                    return arr;
                default:
                    throw 'AMF3 Unknown marker ' + marker;
            }
        }
        function writeCachedReference(ba, obj, caches) {
            var objectsCache = caches.objectsCache || (caches.objectsCache = []);
            var index = objectsCache.indexOf(obj);
            if (index < 0) {
                objectsCache.push(obj);
                return false;
            }
            writeU29(ba, index << 1);
            return true;
        }
        function writeAmf3Data(ba, obj, caches) {
            switch (typeof obj) {
                case 'boolean':
                    ba.writeByte(obj ? 3 /* TRUE */ : 2 /* FALSE */);
                    break;
                case 'number':
                    if (obj === (obj | 0)) {
                        ba.writeByte(4 /* INTEGER */);
                        writeU29(ba, obj);
                    }
                    else {
                        ba.writeByte(5 /* DOUBLE */);
                        writeDouble(ba, obj);
                    }
                    break;
                case 'undefined':
                    ba.writeByte(0 /* UNDEFINED */);
                    break;
                case 'string':
                    ba.writeByte(6 /* STRING */);
                    writeUTF8vr(ba, obj, caches);
                    break;
                case 'object':
                    if (obj === null) {
                        ba.writeByte(1 /* NULL */);
                    }
                    else if (Array.isArray(obj)) {
                        ba.writeByte(9 /* ARRAY */);
                        if (writeCachedReference(ba, obj, caches))
                            break;
                        var densePortionLength = 0;
                        while (densePortionLength in obj) {
                            ++densePortionLength;
                        }
                        writeU29(ba, (densePortionLength << 1) | 1);
                        forEachPublicProperty(obj, function (i, value) {
                            if (Shumway.isNumeric(i) && i >= 0 && i < densePortionLength) {
                                return;
                            }
                            writeUTF8vr(ba, i, caches);
                            writeAmf3Data(ba, value, caches);
                        });
                        writeUTF8vr(ba, '', caches);
                        for (var j = 0; j < densePortionLength; j++) {
                            writeAmf3Data(ba, obj[j], caches);
                        }
                    }
                    else if (obj instanceof Date) {
                        ba.writeByte(8 /* DATE */);
                        if (writeCachedReference(ba, obj, caches))
                            break;
                        writeU29(ba, 1);
                        writeDouble(ba, obj.valueOf());
                    }
                    else {
                        ba.writeByte(10 /* OBJECT */);
                        if (writeCachedReference(ba, obj, caches))
                            break;
                        var isDynamic = true;
                        var objectClass = obj.class;
                        if (objectClass) {
                            isDynamic = !objectClass.classInfo.instanceInfo.isSealed();
                            var aliasName = AVM2.aliasesCache.classes.get(objectClass) || '';
                            var traits, traitsCount;
                            var traitsCache = caches.traitsCache || (caches.traitsCache = []);
                            var traitsInfos = caches.traitsInfos || (caches.traitsInfos = []);
                            var traitsRef = traitsCache.indexOf(objectClass);
                            if (traitsRef < 0) {
                                var slots = objectClass.instanceBindings.slots;
                                traits = [];
                                var traitsNames = [];
                                for (var i = 1; i < slots.length; i++) {
                                    var slot = slots[i];
                                    if (!slot.name.getNamespace().isPublic()) {
                                        continue;
                                    }
                                    traits.push(Multiname.getQualifiedName(slot.name));
                                    traitsNames.push(slot.name.name);
                                }
                                traitsCache.push(objectClass);
                                traitsInfos.push(traits);
                                traitsCount = traitsNames.length;
                                writeU29(ba, (isDynamic ? 0x0B : 0x03) + (traitsCount << 4));
                                writeUTF8vr(ba, aliasName, caches);
                                for (var i = 0; i < traitsCount; i++) {
                                    writeUTF8vr(ba, traitsNames[i], caches);
                                }
                            }
                            else {
                                traits = traitsInfos[traitsRef];
                                traitsCount = traits.length;
                                writeU29(ba, 0x01 + (traitsRef << 2));
                            }
                            for (var i = 0; i < traitsCount; i++) {
                                writeAmf3Data(ba, obj[traits[i]], caches);
                            }
                        }
                        else {
                            writeU29(ba, 0x0B);
                            writeUTF8vr(ba, '', caches);
                        }
                        if (isDynamic) {
                            forEachPublicProperty(obj, function (i, value) {
                                writeUTF8vr(ba, i, caches);
                                writeAmf3Data(ba, value, caches);
                            });
                            writeUTF8vr(ba, '', caches);
                        }
                    }
                    return;
            }
        }
        AVM2.aliasesCache = {
            classes: new WeakMap(),
            names: Object.create(null)
        };
        var AMF3 = (function () {
            function AMF3() {
            }
            AMF3.write = function (ba, object) {
                writeAmf3Data(ba, object, {});
            };
            AMF3.read = function (ba) {
                return readAmf3Data(ba, {});
            };
            return AMF3;
        })();
        AVM2.AMF3 = AMF3;
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
//# sourceMappingURL=avm2.js.map
console.timeEnd("Load AVM2 Dependencies");
console.time("Load SWF Parser");
var Shumway;
(function (Shumway) {
    var SWF;
    (function (SWF) {
        var Parser;
        (function (Parser) {
            var pow = Math.pow;
            var fromCharCode = String.fromCharCode;
            var slice = Array.prototype.slice;
            function readSi8($bytes, $stream) {
                return $stream.getInt8($stream.pos++);
            }
            Parser.readSi8 = readSi8;
            function readSi16($bytes, $stream) {
                return $stream.getInt16($stream.pos, $stream.pos += 2);
            }
            Parser.readSi16 = readSi16;
            function readSi32($bytes, $stream) {
                return $stream.getInt32($stream.pos, $stream.pos += 4);
            }
            Parser.readSi32 = readSi32;
            function readUi8($bytes, $stream) {
                return $bytes[$stream.pos++];
            }
            Parser.readUi8 = readUi8;
            function readUi16($bytes, $stream) {
                return $stream.getUint16($stream.pos, $stream.pos += 2);
            }
            Parser.readUi16 = readUi16;
            function readUi32($bytes, $stream) {
                return $stream.getUint32($stream.pos, $stream.pos += 4);
            }
            Parser.readUi32 = readUi32;
            function readFixed($bytes, $stream) {
                return $stream.getInt32($stream.pos, $stream.pos += 4) / 65536;
            }
            Parser.readFixed = readFixed;
            function readFixed8($bytes, $stream) {
                return $stream.getInt16($stream.pos, $stream.pos += 2) / 256;
            }
            Parser.readFixed8 = readFixed8;
            function readFloat16($bytes, $stream) {
                var ui16 = $stream.getUint16($stream.pos);
                $stream.pos += 2;
                var sign = ui16 >> 15 ? -1 : 1;
                var exponent = (ui16 & 0x7c00) >> 10;
                var fraction = ui16 & 0x03ff;
                if (!exponent)
                    return sign * pow(2, -14) * (fraction / 1024);
                if (exponent === 0x1f)
                    return fraction ? NaN : sign * Infinity;
                return sign * pow(2, exponent - 15) * (1 + (fraction / 1024));
            }
            Parser.readFloat16 = readFloat16;
            function readFloat($bytes, $stream) {
                return $stream.getFloat32($stream.pos, $stream.pos += 4);
            }
            Parser.readFloat = readFloat;
            function readDouble($bytes, $stream) {
                return $stream.getFloat64($stream.pos, $stream.pos += 8);
            }
            Parser.readDouble = readDouble;
            function readEncodedU32($bytes, $stream) {
                var val = $bytes[$stream.pos++];
                if (!(val & 0x080))
                    return val;
                val = (val & 0x7f) | $bytes[$stream.pos++] << 7;
                if (!(val & 0x4000))
                    return val;
                val = (val & 0x3fff) | $bytes[$stream.pos++] << 14;
                if (!(val & 0x200000))
                    return val;
                val = (val & 0x1FFFFF) | $bytes[$stream.pos++] << 21;
                if (!(val & 0x10000000))
                    return val;
                return (val & 0xFFFFFFF) | ($bytes[$stream.pos++] << 28);
            }
            Parser.readEncodedU32 = readEncodedU32;
            function readBool($bytes, $stream) {
                return !!$bytes[$stream.pos++];
            }
            Parser.readBool = readBool;
            function align($bytes, $stream) {
                $stream.align();
            }
            Parser.align = align;
            function readSb($bytes, $stream, size) {
                return (readUb($bytes, $stream, size) << (32 - size)) >> (32 - size);
            }
            Parser.readSb = readSb;
            var masks = new Uint32Array(33);
            for (var i = 1, mask = 0; i <= 32; ++i) {
                masks[i] = mask = (mask << 1) | 1;
            }
            function readUb($bytes, $stream, size) {
                var buffer = $stream.bitBuffer;
                var bitlen = $stream.bitLength;
                while (size > bitlen) {
                    buffer = (buffer << 8) | $bytes[$stream.pos++];
                    bitlen += 8;
                }
                bitlen -= size;
                var val = (buffer >>> bitlen) & masks[size];
                $stream.bitBuffer = buffer;
                $stream.bitLength = bitlen;
                return val;
            }
            Parser.readUb = readUb;
            function readFb($bytes, $stream, size) {
                return readSb($bytes, $stream, size) / 65536;
            }
            Parser.readFb = readFb;
            function readString($bytes, $stream, length) {
                var codes;
                var pos = $stream.pos;
                if (length) {
                    codes = $bytes.subarray(pos, pos += length);
                }
                else {
                    length = 0;
                    for (var i = pos; $bytes[i]; i++) {
                        length++;
                    }
                    codes = $bytes.subarray(pos, pos += length);
                    pos++;
                }
                $stream.pos = pos;
                var str = Shumway.StringUtilities.utf8encode(codes);
                if (str.indexOf('\0') >= 0) {
                    str = str.split('\0').join('');
                }
                return str;
            }
            Parser.readString = readString;
        })(Parser = SWF.Parser || (SWF.Parser = {}));
    })(SWF = Shumway.SWF || (Shumway.SWF = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var SWF;
    (function (SWF) {
        var Parser;
        (function (Parser) {
            var LowLevel;
            (function (LowLevel) {
                function defineShape($bytes, $stream, output, swfVersion, tagCode) {
                    output || (output = {});
                    output.id = Parser.readUi16($bytes, $stream);
                    var lineBounds = output.lineBounds = {};
                    bbox($bytes, $stream, lineBounds, swfVersion, tagCode);
                    var isMorph = output.isMorph = tagCode === 46 || tagCode === 84;
                    if (isMorph) {
                        var lineBoundsMorph = output.lineBoundsMorph = {};
                        bbox($bytes, $stream, lineBoundsMorph, swfVersion, tagCode);
                    }
                    var canHaveStrokes = output.canHaveStrokes = tagCode === 83 || tagCode === 84;
                    if (canHaveStrokes) {
                        var fillBounds = output.fillBounds = {};
                        bbox($bytes, $stream, fillBounds, swfVersion, tagCode);
                        if (isMorph) {
                            var fillBoundsMorph = output.fillBoundsMorph = {};
                            bbox($bytes, $stream, fillBoundsMorph, swfVersion, tagCode);
                        }
                        output.flags = Parser.readUi8($bytes, $stream);
                    }
                    if (isMorph) {
                        output.offsetMorph = Parser.readUi32($bytes, $stream);
                        morphShapeWithStyle($bytes, $stream, output, swfVersion, tagCode, isMorph, canHaveStrokes);
                    }
                    else {
                        shapeWithStyle($bytes, $stream, output, swfVersion, tagCode, isMorph, canHaveStrokes);
                    }
                    return output;
                }
                function placeObject($bytes, $stream, $, swfVersion, tagCode, tagEnd) {
                    var flags;
                    $ || ($ = {});
                    if (tagCode === 4 /* CODE_PLACE_OBJECT */) {
                        $.symbolId = Parser.readUi16($bytes, $stream);
                        $.depth = Parser.readUi16($bytes, $stream);
                        $.flags |= 4 /* HasMatrix */;
                        $.matrix = matrix($bytes, $stream);
                        if ($stream.pos < tagEnd) {
                            $.flags |= 8 /* HasColorTransform */;
                            var $31 = $.cxform = {};
                            cxform($bytes, $stream, $31, tagCode);
                        }
                        return $;
                    }
                    flags = $.flags = tagCode > 26 /* CODE_PLACE_OBJECT2 */ ? Parser.readUi16($bytes, $stream) : Parser.readUi8($bytes, $stream);
                    $.depth = Parser.readUi16($bytes, $stream);
                    if (flags & 2048 /* HasClassName */) {
                        $.className = Parser.readString($bytes, $stream, 0);
                    }
                    if (flags & 2 /* HasCharacter */) {
                        $.symbolId = Parser.readUi16($bytes, $stream);
                    }
                    if (flags & 4 /* HasMatrix */) {
                        $.matrix = matrix($bytes, $stream);
                    }
                    if (flags & 8 /* HasColorTransform */) {
                        var $1 = $.cxform = {};
                        cxform($bytes, $stream, $1, tagCode);
                    }
                    if (flags & 16 /* HasRatio */) {
                        $.ratio = Parser.readUi16($bytes, $stream);
                    }
                    if (flags & 32 /* HasName */) {
                        $.name = Parser.readString($bytes, $stream, 0);
                    }
                    if (flags & 64 /* HasClipDepth */) {
                        $.clipDepth = Parser.readUi16($bytes, $stream);
                    }
                    if (flags & 256 /* HasFilterList */) {
                        var count = Parser.readUi8($bytes, $stream);
                        var $2 = $.filters = [];
                        var $3 = count;
                        while ($3--) {
                            var $4 = {};
                            anyFilter($bytes, $stream, $4);
                            $2.push($4);
                        }
                    }
                    if (flags & 512 /* HasBlendMode */) {
                        $.blendMode = Parser.readUi8($bytes, $stream);
                    }
                    if (flags & 1024 /* HasCacheAsBitmap */) {
                        $.bmpCache = Parser.readUi8($bytes, $stream);
                    }
                    if (flags & 8192 /* HasVisible */) {
                        $.visibility = Parser.readUi8($bytes, $stream);
                    }
                    if (flags & 16384 /* OpaqueBackground */) {
                        $.backgroundColor = argb($bytes, $stream);
                    }
                    if (flags & 128 /* HasClipActions */) {
                        var reserved = Parser.readUi16($bytes, $stream);
                        if (swfVersion >= 6) {
                            var allFlags = Parser.readUi32($bytes, $stream);
                        }
                        else {
                            var allFlags = Parser.readUi16($bytes, $stream);
                        }
                        var $28 = $.events = [];
                        do {
                            var $29 = {};
                            if (events($bytes, $stream, $29, swfVersion)) {
                                break;
                            }
                            if ($stream.pos > tagEnd) {
                                Shumway.Debug.warning('PlaceObject handler attempted to read clip events beyond tag end');
                                $stream.pos = tagEnd;
                                break;
                            }
                            $28.push($29);
                        } while (true);
                    }
                    return $;
                }
                function removeObject($bytes, $stream, $, swfVersion, tagCode) {
                    $ || ($ = {});
                    if (tagCode === 5) {
                        $.symbolId = Parser.readUi16($bytes, $stream);
                    }
                    $.depth = Parser.readUi16($bytes, $stream);
                    return $;
                }
                function defineImage($bytes, $stream, $, swfVersion, tagCode, tagEnd, jpegTables) {
                    var imgData;
                    var tag = $ || {};
                    tag.id = Parser.readUi16($bytes, $stream);
                    if (tagCode > 21) {
                        var alphaDataOffset = Parser.readUi32($bytes, $stream);
                        if (tagCode === 90) {
                            tag.deblock = Parser.readFixed8($bytes, $stream);
                        }
                        alphaDataOffset += $stream.pos;
                        imgData = tag.imgData = $bytes.subarray($stream.pos, alphaDataOffset);
                        tag.alphaData = $bytes.subarray(alphaDataOffset, tagEnd);
                        $stream.pos = tagEnd;
                    }
                    else {
                        imgData = tag.imgData = $bytes.subarray($stream.pos, tagEnd);
                        $stream.pos = tagEnd;
                    }
                    switch (imgData[0] << 8 | imgData[1]) {
                        case 65496:
                        case 65497:
                            tag.mimeType = "image/jpeg";
                            break;
                        case 35152:
                            tag.mimeType = "image/png";
                            break;
                        case 18249:
                            tag.mimeType = "image/gif";
                            break;
                        default:
                            tag.mimeType = "application/octet-stream";
                    }
                    tag.jpegTables = tagCode === 6 ? jpegTables : null;
                    return tag;
                }
                LowLevel.defineImage = defineImage;
                function defineButton($bytes, $stream, $, swfVersion, tagCode, tagEnd) {
                    var eob;
                    $ || ($ = {});
                    $.id = Parser.readUi16($bytes, $stream);
                    if (tagCode == 7 /* CODE_DEFINE_BUTTON */) {
                        var characters = $.characters = [];
                        do {
                            var $1 = {};
                            var temp = button($bytes, $stream, $1, swfVersion, tagCode);
                            eob = temp.eob;
                            characters.push($1);
                        } while (!eob);
                        $.actionsData = $bytes.subarray($stream.pos, tagEnd);
                        $stream.pos = tagEnd;
                    }
                    else {
                        var trackFlags = Parser.readUi8($bytes, $stream);
                        $.trackAsMenu = trackFlags >> 7 & 1;
                        var actionOffset = Parser.readUi16($bytes, $stream);
                        var characters = $.characters = [];
                        do {
                            var $29 = {};
                            var flags = Parser.readUi8($bytes, $stream);
                            var eob = $29.eob = !flags;
                            if (swfVersion >= 8) {
                                $29.flags = (flags >> 5 & 1 ? 512 /* HasBlendMode */ : 0) | (flags >> 4 & 1 ? 256 /* HasFilterList */ : 0);
                            }
                            else {
                                $29.flags = 0;
                            }
                            $29.stateHitTest = flags >> 3 & 1;
                            $29.stateDown = flags >> 2 & 1;
                            $29.stateOver = flags >> 1 & 1;
                            $29.stateUp = flags & 1;
                            if (!eob) {
                                $29.symbolId = Parser.readUi16($bytes, $stream);
                                $29.depth = Parser.readUi16($bytes, $stream);
                                $29.matrix = matrix($bytes, $stream);
                                if (tagCode === 34) {
                                    var $31 = $29.cxform = {};
                                    cxform($bytes, $stream, $31, tagCode);
                                }
                                if ($29.flags & 256 /* HasFilterList */) {
                                    var count = Parser.readUi8($bytes, $stream);
                                    var $2 = $.filters = [];
                                    var $3 = count;
                                    while ($3--) {
                                        var $4 = {};
                                        anyFilter($bytes, $stream, $4);
                                        $2.push($4);
                                    }
                                }
                                if ($29.flags & 512 /* HasBlendMode */) {
                                    $29.blendMode = Parser.readUi8($bytes, $stream);
                                }
                            }
                            characters.push($29);
                        } while (!eob);
                        if (!!actionOffset) {
                            var $56 = $.buttonActions = [];
                            while ($stream.pos < tagEnd) {
                                var $57 = buttonCondAction($bytes, $stream, tagEnd);
                                if ($stream.pos > tagEnd) {
                                    break;
                                }
                                $56.push($57);
                            }
                            $stream.pos = tagEnd;
                        }
                    }
                    return $;
                }
                function defineBinaryData($bytes, $stream, $, swfVersion, tagCode, tagEnd) {
                    $ || ($ = {});
                    $.id = Parser.readUi16($bytes, $stream);
                    Parser.readUi32($bytes, $stream);
                    $.data = $bytes.subarray($stream.pos, tagEnd);
                    $stream.pos = tagEnd;
                    return $;
                }
                function defineFont($bytes, $stream, $, swfVersion, tagCode) {
                    $ || ($ = {});
                    $.id = Parser.readUi16($bytes, $stream);
                    var firstOffset = Parser.readUi16($bytes, $stream);
                    var glyphCount = $.glyphCount = firstOffset / 2;
                    var restOffsets = [];
                    var $0 = glyphCount - 1;
                    while ($0--) {
                        restOffsets.push(Parser.readUi16($bytes, $stream));
                    }
                    $.offsets = [firstOffset].concat(restOffsets);
                    var $1 = $.glyphs = [];
                    var $2 = glyphCount;
                    while ($2--) {
                        var $3 = {};
                        shape($bytes, $stream, $3, swfVersion, tagCode);
                        $1.push($3);
                    }
                    return $;
                }
                LowLevel.defineFont = defineFont;
                function defineLabel($bytes, $stream, $, swfVersion, tagCode) {
                    var eot;
                    $ || ($ = {});
                    $.id = Parser.readUi16($bytes, $stream);
                    var $0 = $.bbox = {};
                    bbox($bytes, $stream, $0, swfVersion, tagCode);
                    $.matrix = matrix($bytes, $stream);
                    var glyphBits = $.glyphBits = Parser.readUi8($bytes, $stream);
                    var advanceBits = $.advanceBits = Parser.readUi8($bytes, $stream);
                    var $2 = $.records = [];
                    do {
                        var $3 = {};
                        var temp = textRecord($bytes, $stream, $3, swfVersion, tagCode, glyphBits, advanceBits);
                        eot = temp.eot;
                        $2.push($3);
                    } while (!eot);
                    return $;
                }
                function defineSound($bytes, $stream, $, swfVersion, tagCode, tagEnd) {
                    $ || ($ = {});
                    $.id = Parser.readUi16($bytes, $stream);
                    var soundFlags = Parser.readUi8($bytes, $stream);
                    $.soundFormat = soundFlags >> 4 & 15;
                    $.soundRate = soundFlags >> 2 & 3;
                    $.soundSize = soundFlags >> 1 & 1;
                    $.soundType = soundFlags & 1;
                    $.samplesCount = Parser.readUi32($bytes, $stream);
                    $.soundData = $bytes.subarray($stream.pos, tagEnd);
                    $stream.pos = tagEnd;
                    return $;
                }
                function startSound($bytes, $stream, $, swfVersion, tagCode) {
                    $ || ($ = {});
                    if (tagCode == 15) {
                        $.soundId = Parser.readUi16($bytes, $stream);
                    }
                    if (tagCode == 89) {
                        $.soundClassName = Parser.readString($bytes, $stream, 0);
                    }
                    $.soundInfo = soundInfo($bytes, $stream);
                    return $;
                }
                function soundStreamHead($bytes, $stream) {
                    var $ = {};
                    var playbackFlags = Parser.readUi8($bytes, $stream);
                    $.playbackRate = playbackFlags >> 2 & 3;
                    $.playbackSize = playbackFlags >> 1 & 1;
                    $.playbackType = playbackFlags & 1;
                    var streamFlags = Parser.readUi8($bytes, $stream);
                    var streamCompression = $.streamCompression = streamFlags >> 4 & 15;
                    $.streamRate = streamFlags >> 2 & 3;
                    $.streamSize = streamFlags >> 1 & 1;
                    $.streamType = streamFlags & 1;
                    $.samplesCount = Parser.readUi16($bytes, $stream);
                    if (streamCompression == 2) {
                        $.latencySeek = Parser.readSi16($bytes, $stream);
                    }
                    return $;
                }
                LowLevel.soundStreamHead = soundStreamHead;
                function defineBitmap(bytes, stream, $, swfVersion, tagCode, tagEnd) {
                    var tag = $ || {};
                    tag.id = Parser.readUi16(bytes, stream);
                    var format = tag.format = Parser.readUi8(bytes, stream);
                    tag.width = Parser.readUi16(bytes, stream);
                    tag.height = Parser.readUi16(bytes, stream);
                    tag.hasAlpha = tagCode === 36;
                    if (format === 3) {
                        tag.colorTableSize = Parser.readUi8(bytes, stream);
                    }
                    tag.bmpData = bytes.subarray(stream.pos, tagEnd);
                    stream.pos = tagEnd;
                    return tag;
                }
                LowLevel.defineBitmap = defineBitmap;
                function defineText($bytes, $stream, $, swfVersion, tagCode) {
                    $ || ($ = {});
                    $.id = Parser.readUi16($bytes, $stream);
                    var $0 = $.bbox = {};
                    bbox($bytes, $stream, $0, swfVersion, tagCode);
                    var flags = Parser.readUi16($bytes, $stream);
                    var hasText = $.hasText = flags >> 7 & 1;
                    $.wordWrap = flags >> 6 & 1;
                    $.multiline = flags >> 5 & 1;
                    $.password = flags >> 4 & 1;
                    $.readonly = flags >> 3 & 1;
                    var hasColor = $.hasColor = flags >> 2 & 1;
                    var hasMaxLength = $.hasMaxLength = flags >> 1 & 1;
                    var hasFont = $.hasFont = flags & 1;
                    var hasFontClass = $.hasFontClass = flags >> 15 & 1;
                    $.autoSize = flags >> 14 & 1;
                    var hasLayout = $.hasLayout = flags >> 13 & 1;
                    $.noSelect = flags >> 12 & 1;
                    $.border = flags >> 11 & 1;
                    $.wasStatic = flags >> 10 & 1;
                    $.html = flags >> 9 & 1;
                    $.useOutlines = flags >> 8 & 1;
                    if (hasFont) {
                        $.fontId = Parser.readUi16($bytes, $stream);
                    }
                    if (hasFontClass) {
                        $.fontClass = Parser.readString($bytes, $stream, 0);
                    }
                    if (hasFont) {
                        $.fontHeight = Parser.readUi16($bytes, $stream);
                    }
                    if (hasColor) {
                        $.color = rgba($bytes, $stream);
                    }
                    if (hasMaxLength) {
                        $.maxLength = Parser.readUi16($bytes, $stream);
                    }
                    if (hasLayout) {
                        $.align = Parser.readUi8($bytes, $stream);
                        $.leftMargin = Parser.readUi16($bytes, $stream);
                        $.rightMargin = Parser.readUi16($bytes, $stream);
                        $.indent = Parser.readSi16($bytes, $stream);
                        $.leading = Parser.readSi16($bytes, $stream);
                    }
                    $.variableName = Parser.readString($bytes, $stream, 0);
                    if (hasText) {
                        $.initialText = Parser.readString($bytes, $stream, 0);
                    }
                    return $;
                }
                function defineFont2($bytes, $stream, $, swfVersion, tagCode) {
                    $ || ($ = {});
                    $.id = Parser.readUi16($bytes, $stream);
                    var flags = Parser.readUi8($bytes, $stream);
                    var hasLayout = $.hasLayout = (flags & 0x80) ? 1 : 0;
                    $.shiftJis = (swfVersion > 5 && flags & 0x40) ? 1 : 0;
                    $.smallText = (flags & 0x20) ? 1 : 0;
                    $.ansi = (flags & 0x10) ? 1 : 0;
                    var wideOffset = $.wideOffset = (flags & 0x08) ? 1 : 0;
                    var wide = $.wide = (flags & 0x04) ? 1 : 0;
                    $.italic = (flags & 0x02) ? 1 : 0;
                    $.bold = (flags & 0x01) ? 1 : 0;
                    if (swfVersion > 5) {
                        $.language = Parser.readUi8($bytes, $stream);
                    }
                    else {
                        Parser.readUi8($bytes, $stream);
                        $.language = 0;
                    }
                    var nameLength = Parser.readUi8($bytes, $stream);
                    $.name = Parser.readString($bytes, $stream, nameLength);
                    if (tagCode === 75) {
                        $.resolution = 20;
                    }
                    var glyphCount = $.glyphCount = Parser.readUi16($bytes, $stream);
                    if (glyphCount === 0) {
                        return $;
                    }
                    var startpos = $stream.pos;
                    if (wideOffset) {
                        var $0 = $.offsets = [];
                        var $1 = glyphCount;
                        while ($1--) {
                            $0.push(Parser.readUi32($bytes, $stream));
                        }
                        $.mapOffset = Parser.readUi32($bytes, $stream);
                    }
                    else {
                        var $2 = $.offsets = [];
                        var $3 = glyphCount;
                        while ($3--) {
                            $2.push(Parser.readUi16($bytes, $stream));
                        }
                        $.mapOffset = Parser.readUi16($bytes, $stream);
                    }
                    var $4 = $.glyphs = [];
                    var $5 = glyphCount;
                    while ($5--) {
                        var $6 = {};
                        var dist = $.offsets[glyphCount - $5] + startpos - $stream.pos;
                        if (dist === 1) {
                            Parser.readUi8($bytes, $stream);
                            $4.push({ "records": [{ "type": 0, "eos": true, "hasNewStyles": 0, "hasLineStyle": 0, "hasFillStyle1": 0, "hasFillStyle0": 0, "move": 0 }] });
                            continue;
                        }
                        shape($bytes, $stream, $6, swfVersion, tagCode);
                        $4.push($6);
                    }
                    if (wide) {
                        var $47 = $.codes = [];
                        var $48 = glyphCount;
                        while ($48--) {
                            $47.push(Parser.readUi16($bytes, $stream));
                        }
                    }
                    else {
                        var $49 = $.codes = [];
                        var $50 = glyphCount;
                        while ($50--) {
                            $49.push(Parser.readUi8($bytes, $stream));
                        }
                    }
                    if (hasLayout) {
                        $.ascent = Parser.readUi16($bytes, $stream);
                        $.descent = Parser.readUi16($bytes, $stream);
                        $.leading = Parser.readSi16($bytes, $stream);
                        var $51 = $.advance = [];
                        var $52 = glyphCount;
                        while ($52--) {
                            $51.push(Parser.readSi16($bytes, $stream));
                        }
                        var $53 = $.bbox = [];
                        var $54 = glyphCount;
                        while ($54--) {
                            var $55 = {};
                            bbox($bytes, $stream, $55, swfVersion, tagCode);
                            $53.push($55);
                        }
                        var kerningCount = Parser.readUi16($bytes, $stream);
                        var $56 = $.kerning = [];
                        var $57 = kerningCount;
                        while ($57--) {
                            var $58 = {};
                            kerning($bytes, $stream, $58, wide);
                            $56.push($58);
                        }
                    }
                    return $;
                }
                LowLevel.defineFont2 = defineFont2;
                function defineFont4($bytes, $stream, $, swfVersion, tagCode, tagEnd) {
                    $ || ($ = {});
                    $.id = Parser.readUi16($bytes, $stream);
                    var flags = Parser.readUi8($bytes, $stream);
                    var hasFontData = $.hasFontData = (flags & 0x4) ? 1 : 0;
                    $.italic = (flags & 0x2) ? 1 : 0;
                    $.bold = (flags & 0x1) ? 1 : 0;
                    $.name = Parser.readString($bytes, $stream, 0);
                    if (hasFontData) {
                        $.data = $bytes.subarray($stream.pos, tagEnd);
                        $stream.pos = tagEnd;
                    }
                    return $;
                }
                LowLevel.defineFont4 = defineFont4;
                function defineScalingGrid($bytes, $stream, $, swfVersion, tagCode) {
                    $ || ($ = {});
                    $.symbolId = Parser.readUi16($bytes, $stream);
                    var $0 = $.splitter = {};
                    bbox($bytes, $stream, $0, swfVersion, tagCode);
                    return $;
                }
                function defineScene($bytes, $stream, $) {
                    $ || ($ = {});
                    var sceneCount = Parser.readEncodedU32($bytes, $stream);
                    var $0 = $.scenes = [];
                    var $1 = sceneCount;
                    while ($1--) {
                        var $2 = {};
                        $2.offset = Parser.readEncodedU32($bytes, $stream);
                        $2.name = Parser.readString($bytes, $stream, 0);
                        $0.push($2);
                    }
                    var labelCount = Parser.readEncodedU32($bytes, $stream);
                    var $3 = $.labels = [];
                    var $4 = labelCount;
                    while ($4--) {
                        var $5 = {};
                        $5.frame = Parser.readEncodedU32($bytes, $stream);
                        $5.name = Parser.readString($bytes, $stream, 0);
                        $3.push($5);
                    }
                    return $;
                }
                LowLevel.defineScene = defineScene;
                function bbox($bytes, $stream, $, swfVersion, tagCode) {
                    Parser.align($bytes, $stream);
                    var bits = Parser.readUb($bytes, $stream, 5);
                    var xMin = Parser.readSb($bytes, $stream, bits);
                    var xMax = Parser.readSb($bytes, $stream, bits);
                    var yMin = Parser.readSb($bytes, $stream, bits);
                    var yMax = Parser.readSb($bytes, $stream, bits);
                    $.xMin = xMin;
                    $.xMax = xMax;
                    $.yMin = yMin;
                    $.yMax = yMax;
                    Parser.align($bytes, $stream);
                }
                function rgb($bytes, $stream) {
                    return ((Parser.readUi8($bytes, $stream) << 24) | (Parser.readUi8($bytes, $stream) << 16) | (Parser.readUi8($bytes, $stream) << 8) | 0xff) >>> 0;
                }
                LowLevel.rgb = rgb;
                function rgba($bytes, $stream) {
                    return (Parser.readUi8($bytes, $stream) << 24) | (Parser.readUi8($bytes, $stream) << 16) | (Parser.readUi8($bytes, $stream) << 8) | Parser.readUi8($bytes, $stream);
                }
                function argb($bytes, $stream) {
                    return Parser.readUi8($bytes, $stream) | (Parser.readUi8($bytes, $stream) << 24) | (Parser.readUi8($bytes, $stream) << 16) | (Parser.readUi8($bytes, $stream) << 8);
                }
                function matrix($bytes, $stream) {
                    var $ = {};
                    Parser.align($bytes, $stream);
                    var hasScale = Parser.readUb($bytes, $stream, 1);
                    if (hasScale) {
                        var bits = Parser.readUb($bytes, $stream, 5);
                        $.a = Parser.readFb($bytes, $stream, bits);
                        $.d = Parser.readFb($bytes, $stream, bits);
                    }
                    else {
                        $.a = 1;
                        $.d = 1;
                    }
                    var hasRotate = Parser.readUb($bytes, $stream, 1);
                    if (hasRotate) {
                        var bits = Parser.readUb($bytes, $stream, 5);
                        $.b = Parser.readFb($bytes, $stream, bits);
                        $.c = Parser.readFb($bytes, $stream, bits);
                    }
                    else {
                        $.b = 0;
                        $.c = 0;
                    }
                    var bits = Parser.readUb($bytes, $stream, 5);
                    var e = Parser.readSb($bytes, $stream, bits);
                    var f = Parser.readSb($bytes, $stream, bits);
                    $.tx = e;
                    $.ty = f;
                    Parser.align($bytes, $stream);
                    return $;
                }
                function cxform($bytes, $stream, $, tagCode) {
                    Parser.align($bytes, $stream);
                    var hasOffsets = Parser.readUb($bytes, $stream, 1);
                    var hasMultipliers = Parser.readUb($bytes, $stream, 1);
                    var bits = Parser.readUb($bytes, $stream, 4);
                    if (hasMultipliers) {
                        $.redMultiplier = Parser.readSb($bytes, $stream, bits);
                        $.greenMultiplier = Parser.readSb($bytes, $stream, bits);
                        $.blueMultiplier = Parser.readSb($bytes, $stream, bits);
                        if (tagCode > 4) {
                            $.alphaMultiplier = Parser.readSb($bytes, $stream, bits);
                        }
                        else {
                            $.alphaMultiplier = 256;
                        }
                    }
                    else {
                        $.redMultiplier = 256;
                        $.greenMultiplier = 256;
                        $.blueMultiplier = 256;
                        $.alphaMultiplier = 256;
                    }
                    if (hasOffsets) {
                        $.redOffset = Parser.readSb($bytes, $stream, bits);
                        $.greenOffset = Parser.readSb($bytes, $stream, bits);
                        $.blueOffset = Parser.readSb($bytes, $stream, bits);
                        if (tagCode > 4) {
                            $.alphaOffset = Parser.readSb($bytes, $stream, bits);
                        }
                        else {
                            $.alphaOffset = 0;
                        }
                    }
                    else {
                        $.redOffset = 0;
                        $.greenOffset = 0;
                        $.blueOffset = 0;
                        $.alphaOffset = 0;
                    }
                    Parser.align($bytes, $stream);
                }
                function gradient($bytes, $stream, $, swfVersion, tagCode, isMorph, type) {
                    if (tagCode === 83) {
                        $.spreadMode = Parser.readUb($bytes, $stream, 2);
                        $.interpolationMode = Parser.readUb($bytes, $stream, 2);
                    }
                    else {
                        var pad = Parser.readUb($bytes, $stream, 4);
                    }
                    var count = $.count = Parser.readUb($bytes, $stream, 4);
                    var $130 = $.records = [];
                    var $131 = count;
                    while ($131--) {
                        var $132 = {};
                        gradientRecord($bytes, $stream, $132, tagCode, isMorph);
                        $130.push($132);
                    }
                    if (type === 19) {
                        $.focalPoint = Parser.readSi16($bytes, $stream);
                        if (isMorph) {
                            $.focalPointMorph = Parser.readSi16($bytes, $stream);
                        }
                    }
                }
                function gradientRecord($bytes, $stream, $, tagCode, isMorph) {
                    $.ratio = Parser.readUi8($bytes, $stream);
                    if (tagCode > 22) {
                        $.color = rgba($bytes, $stream);
                    }
                    else {
                        $.color = rgb($bytes, $stream);
                    }
                    if (isMorph) {
                        $.ratioMorph = Parser.readUi8($bytes, $stream);
                        $.colorMorph = rgba($bytes, $stream);
                    }
                }
                function morphShapeWithStyle($bytes, $stream, $, swfVersion, tagCode, isMorph, hasStrokes) {
                    var eos, bits, temp;
                    temp = styles($bytes, $stream, $, swfVersion, tagCode, isMorph, hasStrokes);
                    var lineBits = temp.lineBits;
                    var fillBits = temp.fillBits;
                    var records = $.records = [];
                    do {
                        var record = {};
                        temp = shapeRecord($bytes, $stream, record, swfVersion, tagCode, isMorph, fillBits, lineBits, hasStrokes, bits);
                        eos = temp.eos;
                        fillBits = temp.fillBits;
                        lineBits = temp.lineBits;
                        bits = temp.bits;
                        records.push(record);
                    } while (!eos);
                    temp = styleBits($bytes, $stream);
                    var fillBits = temp.fillBits;
                    var lineBits = temp.lineBits;
                    var recordsMorph = $.recordsMorph = [];
                    do {
                        var morphRecord = {};
                        temp = shapeRecord($bytes, $stream, morphRecord, swfVersion, tagCode, isMorph, fillBits, lineBits, hasStrokes, bits);
                        eos = temp.eos;
                        fillBits = temp.fillBits;
                        lineBits = temp.lineBits;
                        bits = temp.bits;
                        recordsMorph.push(morphRecord);
                    } while (!eos);
                }
                function shapeWithStyle($bytes, $stream, $, swfVersion, tagCode, isMorph, hasStrokes) {
                    var eos, bits, temp;
                    temp = styles($bytes, $stream, $, swfVersion, tagCode, isMorph, hasStrokes);
                    var fillBits = temp.fillBits;
                    var lineBits = temp.lineBits;
                    var $160 = $.records = [];
                    do {
                        var $161 = {};
                        temp = shapeRecord($bytes, $stream, $161, swfVersion, tagCode, isMorph, fillBits, lineBits, hasStrokes, bits);
                        eos = temp.eos;
                        fillBits = temp.fillBits;
                        lineBits = temp.lineBits;
                        bits = temp.bits;
                        $160.push($161);
                    } while (!eos);
                }
                function shapeRecord($bytes, $stream, $, swfVersion, tagCode, isMorph, fillBits, lineBits, hasStrokes, bits) {
                    var eos, temp;
                    var type = $.type = Parser.readUb($bytes, $stream, 1);
                    var flags = Parser.readUb($bytes, $stream, 5);
                    eos = $.eos = !(type || flags);
                    if (type) {
                        temp = shapeRecordEdge($bytes, $stream, $, flags);
                        bits = temp.bits;
                    }
                    else {
                        temp = shapeRecordSetup($bytes, $stream, $, swfVersion, tagCode, flags, isMorph, fillBits, lineBits, hasStrokes, bits);
                        fillBits = temp.fillBits;
                        lineBits = temp.lineBits;
                        bits = temp.bits;
                    }
                    return {
                        type: type,
                        flags: flags,
                        eos: eos,
                        fillBits: fillBits,
                        lineBits: lineBits,
                        bits: bits
                    };
                }
                function shapeRecordEdge($bytes, $stream, $, flags) {
                    var bits = (flags & 0x0f) + 2;
                    var isStraight = $.isStraight = flags >> 4;
                    if (isStraight) {
                        var isGeneral = $.isGeneral = Parser.readUb($bytes, $stream, 1);
                        if (isGeneral) {
                            $.deltaX = Parser.readSb($bytes, $stream, bits);
                            $.deltaY = Parser.readSb($bytes, $stream, bits);
                        }
                        else {
                            var isVertical = $.isVertical = Parser.readUb($bytes, $stream, 1);
                            if (isVertical) {
                                $.deltaY = Parser.readSb($bytes, $stream, bits);
                            }
                            else {
                                $.deltaX = Parser.readSb($bytes, $stream, bits);
                            }
                        }
                    }
                    else {
                        $.controlDeltaX = Parser.readSb($bytes, $stream, bits);
                        $.controlDeltaY = Parser.readSb($bytes, $stream, bits);
                        $.anchorDeltaX = Parser.readSb($bytes, $stream, bits);
                        $.anchorDeltaY = Parser.readSb($bytes, $stream, bits);
                    }
                    return { bits: bits };
                }
                function shapeRecordSetup($bytes, $stream, $, swfVersion, tagCode, flags, isMorph, fillBits, lineBits, hasStrokes, bits) {
                    var hasNewStyles = $.hasNewStyles = tagCode > 2 ? flags >> 4 : 0;
                    var hasLineStyle = $.hasLineStyle = flags >> 3 & 1;
                    var hasFillStyle1 = $.hasFillStyle1 = flags >> 2 & 1;
                    var hasFillStyle0 = $.hasFillStyle0 = flags >> 1 & 1;
                    var move = $.move = flags & 1;
                    if (move) {
                        bits = Parser.readUb($bytes, $stream, 5);
                        $.moveX = Parser.readSb($bytes, $stream, bits);
                        $.moveY = Parser.readSb($bytes, $stream, bits);
                    }
                    if (hasFillStyle0) {
                        $.fillStyle0 = Parser.readUb($bytes, $stream, fillBits);
                    }
                    if (hasFillStyle1) {
                        $.fillStyle1 = Parser.readUb($bytes, $stream, fillBits);
                    }
                    if (hasLineStyle) {
                        $.lineStyle = Parser.readUb($bytes, $stream, lineBits);
                    }
                    if (hasNewStyles) {
                        var temp = styles($bytes, $stream, $, swfVersion, tagCode, isMorph, hasStrokes);
                        lineBits = temp.lineBits;
                        fillBits = temp.fillBits;
                    }
                    return {
                        lineBits: lineBits,
                        fillBits: fillBits,
                        bits: bits
                    };
                }
                function styles($bytes, $stream, $, swfVersion, tagCode, isMorph, hasStrokes) {
                    fillStyleArray($bytes, $stream, $, swfVersion, tagCode, isMorph);
                    lineStyleArray($bytes, $stream, $, swfVersion, tagCode, isMorph, hasStrokes);
                    var temp = styleBits($bytes, $stream);
                    var fillBits = temp.fillBits;
                    var lineBits = temp.lineBits;
                    return { fillBits: fillBits, lineBits: lineBits };
                }
                function fillStyleArray($bytes, $stream, $, swfVersion, tagCode, isMorph) {
                    var count;
                    var tmp = Parser.readUi8($bytes, $stream);
                    if (tagCode > 2 && tmp === 255) {
                        count = Parser.readUi16($bytes, $stream);
                    }
                    else {
                        count = tmp;
                    }
                    var $4 = $.fillStyles = [];
                    var $5 = count;
                    while ($5--) {
                        var $6 = {};
                        fillStyle($bytes, $stream, $6, swfVersion, tagCode, isMorph);
                        $4.push($6);
                    }
                }
                function lineStyleArray($bytes, $stream, $, swfVersion, tagCode, isMorph, hasStrokes) {
                    var count;
                    var tmp = Parser.readUi8($bytes, $stream);
                    if (tagCode > 2 && tmp === 255) {
                        count = Parser.readUi16($bytes, $stream);
                    }
                    else {
                        count = tmp;
                    }
                    var $138 = $.lineStyles = [];
                    var $139 = count;
                    while ($139--) {
                        var $140 = {};
                        lineStyle($bytes, $stream, $140, swfVersion, tagCode, isMorph, hasStrokes);
                        $138.push($140);
                    }
                }
                function styleBits($bytes, $stream) {
                    Parser.align($bytes, $stream);
                    var fillBits = Parser.readUb($bytes, $stream, 4);
                    var lineBits = Parser.readUb($bytes, $stream, 4);
                    return {
                        fillBits: fillBits,
                        lineBits: lineBits
                    };
                }
                function fillStyle($bytes, $stream, $, swfVersion, tagCode, isMorph) {
                    var type = $.type = Parser.readUi8($bytes, $stream);
                    switch (type) {
                        case 0:
                            $.color = tagCode > 22 || isMorph ? rgba($bytes, $stream) : rgb($bytes, $stream);
                            if (isMorph) {
                                $.colorMorph = rgba($bytes, $stream);
                            }
                            break;
                        case 16:
                        case 18:
                        case 19:
                            $.matrix = matrix($bytes, $stream);
                            if (isMorph) {
                                $.matrixMorph = matrix($bytes, $stream);
                            }
                            gradient($bytes, $stream, $, swfVersion, tagCode, isMorph, type);
                            break;
                        case 64:
                        case 65:
                        case 66:
                        case 67:
                            $.bitmapId = Parser.readUi16($bytes, $stream);
                            $.condition = type === 64 || type === 67;
                            $.matrix = matrix($bytes, $stream);
                            if (isMorph) {
                                $.matrixMorph = matrix($bytes, $stream);
                            }
                            break;
                        default:
                    }
                }
                function lineStyle($bytes, $stream, $, swfVersion, tagCode, isMorph, hasStrokes) {
                    $.width = Parser.readUi16($bytes, $stream);
                    if (isMorph) {
                        $.widthMorph = Parser.readUi16($bytes, $stream);
                    }
                    if (hasStrokes) {
                        Parser.align($bytes, $stream);
                        $.startCapsStyle = Parser.readUb($bytes, $stream, 2);
                        var jointStyle = $.jointStyle = Parser.readUb($bytes, $stream, 2);
                        var hasFill = $.hasFill = Parser.readUb($bytes, $stream, 1);
                        $.noHscale = Parser.readUb($bytes, $stream, 1);
                        $.noVscale = Parser.readUb($bytes, $stream, 1);
                        $.pixelHinting = Parser.readUb($bytes, $stream, 1);
                        var reserved = Parser.readUb($bytes, $stream, 5);
                        $.noClose = Parser.readUb($bytes, $stream, 1);
                        $.endCapsStyle = Parser.readUb($bytes, $stream, 2);
                        if (jointStyle === 2) {
                            $.miterLimitFactor = Parser.readFixed8($bytes, $stream);
                        }
                        if (hasFill) {
                            var $141 = $.fillStyle = {};
                            fillStyle($bytes, $stream, $141, swfVersion, tagCode, isMorph);
                        }
                        else {
                            $.color = rgba($bytes, $stream);
                            if (isMorph) {
                                $.colorMorph = rgba($bytes, $stream);
                            }
                        }
                    }
                    else {
                        if (tagCode > 22) {
                            $.color = rgba($bytes, $stream);
                        }
                        else {
                            $.color = rgb($bytes, $stream);
                        }
                        if (isMorph) {
                            $.colorMorph = rgba($bytes, $stream);
                        }
                    }
                }
                function filterGlow($bytes, $stream, $, type) {
                    var count;
                    if (type === 4 || type === 7) {
                        count = Parser.readUi8($bytes, $stream);
                    }
                    else {
                        count = 1;
                    }
                    var $5 = $.colors = [];
                    var $6 = count;
                    while ($6--) {
                        $5.push(rgba($bytes, $stream));
                    }
                    if (type === 3) {
                        $.hightlightColor = rgba($bytes, $stream);
                    }
                    if (type === 4 || type === 7) {
                        var $9 = $.ratios = [];
                        var $10 = count;
                        while ($10--) {
                            $9.push(Parser.readUi8($bytes, $stream));
                        }
                    }
                    $.blurX = Parser.readFixed($bytes, $stream);
                    $.blurY = Parser.readFixed($bytes, $stream);
                    if (type !== 2) {
                        $.angle = Parser.readFixed($bytes, $stream);
                        $.distance = Parser.readFixed($bytes, $stream);
                    }
                    $.strength = Parser.readFixed8($bytes, $stream);
                    $.inner = Parser.readUb($bytes, $stream, 1);
                    $.knockout = Parser.readUb($bytes, $stream, 1);
                    $.compositeSource = Parser.readUb($bytes, $stream, 1);
                    if (type === 3 || type === 4 || type === 7) {
                        $.onTop = Parser.readUb($bytes, $stream, 1);
                        $.quality = Parser.readUb($bytes, $stream, 4);
                    }
                    else {
                        $.quality = Parser.readUb($bytes, $stream, 5);
                    }
                }
                function filterBlur($bytes, $stream, $) {
                    $.blurX = Parser.readFixed($bytes, $stream);
                    $.blurY = Parser.readFixed($bytes, $stream);
                    $.quality = Parser.readUb($bytes, $stream, 5);
                    var reserved = Parser.readUb($bytes, $stream, 3);
                }
                function filterConvolution($bytes, $stream, $) {
                    var matrixX = $.matrixX = Parser.readUi8($bytes, $stream);
                    var matrixY = $.matrixY = Parser.readUi8($bytes, $stream);
                    $.divisor = Parser.readFloat($bytes, $stream);
                    $.bias = Parser.readFloat($bytes, $stream);
                    var $17 = $.matrix = [];
                    var $18 = matrixX * matrixY;
                    while ($18--) {
                        $17.push(Parser.readFloat($bytes, $stream));
                    }
                    $.color = rgba($bytes, $stream);
                    var reserved = Parser.readUb($bytes, $stream, 6);
                    $.clamp = Parser.readUb($bytes, $stream, 1);
                    $.preserveAlpha = Parser.readUb($bytes, $stream, 1);
                }
                function filterColorMatrix($bytes, $stream, $) {
                    var $20 = $.matrix = [];
                    var $21 = 20;
                    while ($21--) {
                        $20.push(Parser.readFloat($bytes, $stream));
                    }
                }
                function anyFilter($bytes, $stream, $) {
                    var type = $.type = Parser.readUi8($bytes, $stream);
                    switch (type) {
                        case 0:
                        case 2:
                        case 3:
                        case 4:
                        case 7:
                            filterGlow($bytes, $stream, $, type);
                            break;
                        case 1:
                            filterBlur($bytes, $stream, $);
                            break;
                        case 5:
                            filterConvolution($bytes, $stream, $);
                            break;
                        case 6:
                            filterColorMatrix($bytes, $stream, $);
                            break;
                        default:
                    }
                }
                function events($bytes, $stream, $, swfVersion) {
                    var flags = $.flags = swfVersion >= 6 ? Parser.readUi32($bytes, $stream) : Parser.readUi16($bytes, $stream);
                    if (!flags) {
                        return true;
                    }
                    if (swfVersion === 6) {
                        flags = flags & ~262144 /* Construct */;
                    }
                    var length = $.length = Parser.readUi32($bytes, $stream);
                    if (flags & 131072 /* KeyPress */) {
                        $.keyCode = Parser.readUi8($bytes, $stream);
                        length--;
                    }
                    var end = $stream.pos + length;
                    $.actionsData = $bytes.subarray($stream.pos, end);
                    $stream.pos = end;
                    return false;
                }
                function kerning($bytes, $stream, $, wide) {
                    if (wide) {
                        $.code1 = Parser.readUi16($bytes, $stream);
                        $.code2 = Parser.readUi16($bytes, $stream);
                    }
                    else {
                        $.code1 = Parser.readUi8($bytes, $stream);
                        $.code2 = Parser.readUi8($bytes, $stream);
                    }
                    $.adjustment = Parser.readUi16($bytes, $stream);
                }
                function textEntry($bytes, $stream, $, glyphBits, advanceBits) {
                    $.glyphIndex = Parser.readUb($bytes, $stream, glyphBits);
                    $.advance = Parser.readSb($bytes, $stream, advanceBits);
                }
                function textRecordSetup($bytes, $stream, $, swfVersion, tagCode, flags) {
                    var hasFont = $.hasFont = flags >> 3 & 1;
                    var hasColor = $.hasColor = flags >> 2 & 1;
                    var hasMoveY = $.hasMoveY = flags >> 1 & 1;
                    var hasMoveX = $.hasMoveX = flags & 1;
                    if (hasFont) {
                        $.fontId = Parser.readUi16($bytes, $stream);
                    }
                    if (hasColor) {
                        if (tagCode === 33) {
                            $.color = rgba($bytes, $stream);
                        }
                        else {
                            $.color = rgb($bytes, $stream);
                        }
                    }
                    if (hasMoveX) {
                        $.moveX = Parser.readSi16($bytes, $stream);
                    }
                    if (hasMoveY) {
                        $.moveY = Parser.readSi16($bytes, $stream);
                    }
                    if (hasFont) {
                        $.fontHeight = Parser.readUi16($bytes, $stream);
                    }
                }
                function textRecord($bytes, $stream, $, swfVersion, tagCode, glyphBits, advanceBits) {
                    var glyphCount;
                    Parser.align($bytes, $stream);
                    var flags = Parser.readUb($bytes, $stream, 8);
                    var eot = $.eot = !flags;
                    textRecordSetup($bytes, $stream, $, swfVersion, tagCode, flags);
                    if (!eot) {
                        var tmp = Parser.readUi8($bytes, $stream);
                        if (swfVersion > 6) {
                            glyphCount = $.glyphCount = tmp;
                        }
                        else {
                            glyphCount = $.glyphCount = tmp;
                        }
                        var $6 = $.entries = [];
                        var $7 = glyphCount;
                        while ($7--) {
                            var $8 = {};
                            textEntry($bytes, $stream, $8, glyphBits, advanceBits);
                            $6.push($8);
                        }
                    }
                    return { eot: eot };
                }
                function soundEnvelope($bytes, $stream, $) {
                    $.pos44 = Parser.readUi32($bytes, $stream);
                    $.volumeLeft = Parser.readUi16($bytes, $stream);
                    $.volumeRight = Parser.readUi16($bytes, $stream);
                }
                function soundInfo($bytes, $stream) {
                    var $ = {};
                    var reserved = Parser.readUb($bytes, $stream, 2);
                    $.stop = Parser.readUb($bytes, $stream, 1);
                    $.noMultiple = Parser.readUb($bytes, $stream, 1);
                    var hasEnvelope = $.hasEnvelope = Parser.readUb($bytes, $stream, 1);
                    var hasLoops = $.hasLoops = Parser.readUb($bytes, $stream, 1);
                    var hasOutPoint = $.hasOutPoint = Parser.readUb($bytes, $stream, 1);
                    var hasInPoint = $.hasInPoint = Parser.readUb($bytes, $stream, 1);
                    if (hasInPoint) {
                        $.inPoint = Parser.readUi32($bytes, $stream);
                    }
                    if (hasOutPoint) {
                        $.outPoint = Parser.readUi32($bytes, $stream);
                    }
                    if (hasLoops) {
                        $.loopCount = Parser.readUi16($bytes, $stream);
                    }
                    if (hasEnvelope) {
                        var envelopeCount = $.envelopeCount = Parser.readUi8($bytes, $stream);
                        var $1 = $.envelopes = [];
                        var $2 = envelopeCount;
                        while ($2--) {
                            var $3 = {};
                            soundEnvelope($bytes, $stream, $3);
                            $1.push($3);
                        }
                    }
                    return $;
                }
                function button($bytes, $stream, $, swfVersion, tagCode) {
                    var flags = Parser.readUi8($bytes, $stream);
                    var eob = $.eob = !flags;
                    if (swfVersion >= 8) {
                        $.flags = (flags >> 5 & 1 ? 512 /* HasBlendMode */ : 0) | (flags >> 4 & 1 ? 256 /* HasFilterList */ : 0);
                    }
                    else {
                        $.flags = 0;
                    }
                    $.stateHitTest = flags >> 3 & 1;
                    $.stateDown = flags >> 2 & 1;
                    $.stateOver = flags >> 1 & 1;
                    $.stateUp = flags & 1;
                    if (!eob) {
                        $.symbolId = Parser.readUi16($bytes, $stream);
                        $.depth = Parser.readUi16($bytes, $stream);
                        $.matrix = matrix($bytes, $stream);
                        if (tagCode === 34 /* CODE_DEFINE_BUTTON2 */) {
                            var $3 = $.cxform = {};
                            cxform($bytes, $stream, $3, tagCode);
                        }
                        if ($.flags & 256 /* HasFilterList */) {
                            $.filterCount = Parser.readUi8($bytes, $stream);
                            var $4 = $.filters = {};
                            anyFilter($bytes, $stream, $4);
                        }
                        if ($.flags & 512 /* HasBlendMode */) {
                            $.blendMode = Parser.readUi8($bytes, $stream);
                        }
                    }
                    return { eob: eob };
                }
                function buttonCondAction($bytes, $stream, tagEnd) {
                    var start = $stream.pos;
                    var tagSize = Parser.readUi16($bytes, $stream);
                    var end = tagSize ? start + tagSize : tagEnd;
                    var conditions = Parser.readUi16($bytes, $stream);
                    $stream.pos = end;
                    return {
                        keyCode: (conditions & 0xfe00) >> 9,
                        stateTransitionFlags: conditions & 0x1ff,
                        actionsData: $bytes.subarray(start + 4, end)
                    };
                }
                function shape($bytes, $stream, $, swfVersion, tagCode) {
                    var eos, bits, temp;
                    temp = styleBits($bytes, $stream);
                    var fillBits = temp.fillBits;
                    var lineBits = temp.lineBits;
                    var $4 = $.records = [];
                    do {
                        var $5 = {};
                        var isMorph = false;
                        var hasStrokes = false;
                        temp = shapeRecord($bytes, $stream, $5, swfVersion, tagCode, isMorph, fillBits, lineBits, hasStrokes, bits);
                        eos = temp.eos;
                        fillBits = temp.fillBits;
                        lineBits = temp.lineBits;
                        bits = temp.bits;
                        $4.push($5);
                    } while (!eos);
                }
                LowLevel.tagHandlers = {
                    0: undefined,
                    1: undefined,
                    2: defineShape,
                    4: placeObject,
                    5: removeObject,
                    6: defineImage,
                    7: defineButton,
                    8: undefined,
                    9: undefined,
                    10: defineFont,
                    11: defineLabel,
                    12: undefined,
                    13: undefined,
                    14: defineSound,
                    15: startSound,
                    17: undefined,
                    18: undefined,
                    19: undefined,
                    20: defineBitmap,
                    21: defineImage,
                    22: defineShape,
                    23: undefined,
                    24: undefined,
                    26: placeObject,
                    28: removeObject,
                    32: defineShape,
                    33: defineLabel,
                    34: defineButton,
                    35: defineImage,
                    36: defineBitmap,
                    37: defineText,
                    39: undefined,
                    43: undefined,
                    45: undefined,
                    46: defineShape,
                    48: defineFont2,
                    56: undefined,
                    57: undefined,
                    58: undefined,
                    59: undefined,
                    60: undefined,
                    61: undefined,
                    62: undefined,
                    64: undefined,
                    65: undefined,
                    66: undefined,
                    69: undefined,
                    70: placeObject,
                    71: undefined,
                    72: undefined,
                    73: undefined,
                    74: undefined,
                    75: defineFont2,
                    76: undefined,
                    77: undefined,
                    78: defineScalingGrid,
                    82: undefined,
                    83: defineShape,
                    84: defineShape,
                    86: defineScene,
                    87: defineBinaryData,
                    88: undefined,
                    89: startSound,
                    90: defineImage,
                    91: defineFont4
                };
                function readHeader($bytes, $stream) {
                    var bits = Parser.readUb($bytes, $stream, 5);
                    var xMin = Parser.readSb($bytes, $stream, bits);
                    var xMax = Parser.readSb($bytes, $stream, bits);
                    var yMin = Parser.readSb($bytes, $stream, bits);
                    var yMax = Parser.readSb($bytes, $stream, bits);
                    Parser.align($bytes, $stream);
                    var frameRateFraction = Parser.readUi8($bytes, $stream);
                    var frameRate = Parser.readUi8($bytes, $stream) + frameRateFraction / 256;
                    var frameCount = Parser.readUi16($bytes, $stream);
                    return {
                        frameRate: frameRate,
                        frameCount: frameCount,
                        bounds: new Shumway.Bounds(xMin, yMin, xMax, yMax)
                    };
                }
                LowLevel.readHeader = readHeader;
            })(LowLevel = Parser.LowLevel || (Parser.LowLevel = {}));
        })(Parser = SWF.Parser || (SWF.Parser = {}));
    })(SWF = Shumway.SWF || (Shumway.SWF = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var SWF;
    (function (SWF) {
        var Parser;
        (function (Parser) {
            var assert = Shumway.Debug.assert;
            var assertUnreachable = Shumway.Debug.assertUnreachable;
            var roundToMultipleOfFour = Shumway.IntegerUtilities.roundToMultipleOfFour;
            var Inflate = Shumway.ArrayUtilities.Inflate;
            (function (BitmapFormat) {
                BitmapFormat[BitmapFormat["FORMAT_COLORMAPPED"] = 3] = "FORMAT_COLORMAPPED";
                BitmapFormat[BitmapFormat["FORMAT_15BPP"] = 4] = "FORMAT_15BPP";
                BitmapFormat[BitmapFormat["FORMAT_24BPP"] = 5] = "FORMAT_24BPP";
            })(Parser.BitmapFormat || (Parser.BitmapFormat = {}));
            var BitmapFormat = Parser.BitmapFormat;
            var FACTOR_5BBP = 255 / 31;
            function parseColorMapped(tag) {
                var width = tag.width, height = tag.height;
                var hasAlpha = tag.hasAlpha;
                var padding = roundToMultipleOfFour(width) - width;
                var colorTableLength = tag.colorTableSize + 1;
                var colorTableEntrySize = hasAlpha ? 4 : 3;
                var colorTableSize = roundToMultipleOfFour(colorTableLength * colorTableEntrySize);
                var dataSize = colorTableSize + ((width + padding) * height);
                var bytes = Inflate.inflate(tag.bmpData, dataSize, true);
                var view = new Uint32Array(width * height);
                var p = colorTableSize, i = 0, offset = 0;
                if (hasAlpha) {
                    for (var y = 0; y < height; y++) {
                        for (var x = 0; x < width; x++) {
                            offset = bytes[p++] << 2;
                            var a = bytes[offset + 3];
                            var r = bytes[offset + 0];
                            var g = bytes[offset + 1];
                            var b = bytes[offset + 2];
                            view[i++] = b << 24 | g << 16 | r << 8 | a;
                        }
                        p += padding;
                    }
                }
                else {
                    for (var y = 0; y < height; y++) {
                        for (var x = 0; x < width; x++) {
                            offset = bytes[p++] * colorTableEntrySize;
                            var a = 0xff;
                            var r = bytes[offset + 0];
                            var g = bytes[offset + 1];
                            var b = bytes[offset + 2];
                            view[i++] = b << 24 | g << 16 | r << 8 | a;
                        }
                        p += padding;
                    }
                }
                release || assert(p === dataSize, "We should be at the end of the data buffer now.");
                release || assert(i === width * height, "Should have filled the entire image.");
                return new Uint8Array(view.buffer);
            }
            function parse24BPP(tag) {
                var width = tag.width, height = tag.height;
                var hasAlpha = tag.hasAlpha;
                var dataSize = height * width * 4;
                var bytes = Inflate.inflate(tag.bmpData, dataSize, true);
                if (hasAlpha) {
                    return bytes;
                }
                var view = new Uint32Array(width * height);
                var length = width * height, p = 0;
                for (var i = 0; i < length; i++) {
                    p++;
                    var r = bytes[p++];
                    var g = bytes[p++];
                    var b = bytes[p++];
                    view[i] = b << 24 | g << 16 | r << 8 | 0xff;
                }
                release || assert(p === dataSize, "We should be at the end of the data buffer now.");
                return new Uint8Array(view.buffer);
            }
            function parse15BPP(tag) {
                Shumway.Debug.notImplemented("parse15BPP");
                return null;
            }
            function defineBitmap(tag) {
                SWF.enterTimeline("defineBitmap");
                var data;
                var type = 0 /* None */;
                switch (tag.format) {
                    case 3 /* FORMAT_COLORMAPPED */:
                        data = parseColorMapped(tag);
                        type = 1 /* PremultipliedAlphaARGB */;
                        break;
                    case 5 /* FORMAT_24BPP */:
                        data = parse24BPP(tag);
                        type = 1 /* PremultipliedAlphaARGB */;
                        break;
                    case 4 /* FORMAT_15BPP */:
                        data = parse15BPP(tag);
                        type = 1 /* PremultipliedAlphaARGB */;
                        break;
                    default:
                        release || assertUnreachable('invalid bitmap format');
                }
                SWF.leaveTimeline();
                return {
                    definition: {
                        type: 'image',
                        id: tag.id,
                        width: tag.width,
                        height: tag.height,
                        mimeType: 'application/octet-stream',
                        data: data,
                        dataType: type,
                        image: null
                    },
                    type: 'image'
                };
            }
            Parser.defineBitmap = defineBitmap;
        })(Parser = SWF.Parser || (SWF.Parser = {}));
    })(SWF = Shumway.SWF || (Shumway.SWF = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var SWF;
    (function (SWF) {
        var Parser;
        (function (Parser) {
            function defineButton(tag, dictionary) {
                var characters = tag.characters;
                var states = {
                    up: [],
                    over: [],
                    down: [],
                    hitTest: []
                };
                var i = 0, character;
                while ((character = characters[i++])) {
                    if (character.eob)
                        break;
                    var characterItem = dictionary[character.symbolId];
                    release || characterItem || Shumway.Debug.warning('undefined character in button ' + tag.id);
                    var cmd = {
                        symbolId: characterItem.id,
                        code: 4 /* CODE_PLACE_OBJECT */,
                        depth: character.depth,
                        flags: character.matrix ? 4 /* HasMatrix */ : 0,
                        matrix: character.matrix
                    };
                    if (character.stateUp)
                        states.up.push(cmd);
                    if (character.stateOver)
                        states.over.push(cmd);
                    if (character.stateDown)
                        states.down.push(cmd);
                    if (character.stateHitTest)
                        states.hitTest.push(cmd);
                }
                var button = {
                    type: 'button',
                    id: tag.id,
                    buttonActions: tag.buttonActions,
                    states: states
                };
                return button;
            }
            Parser.defineButton = defineButton;
        })(Parser = SWF.Parser || (SWF.Parser = {}));
    })(SWF = Shumway.SWF || (Shumway.SWF = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var SWF;
    (function (SWF) {
        var Parser;
        (function (Parser) {
            var pow = Math.pow;
            var min = Math.min;
            var max = Math.max;
            var logE = Math.log;
            var fromCharCode = String.fromCharCode;
            var nextFontId = 1;
            function maxPower2(num) {
                var maxPower = 0;
                var val = num;
                while (val >= 2) {
                    val /= 2;
                    ++maxPower;
                }
                return pow(2, maxPower);
            }
            function toString16(val) {
                return fromCharCode((val >> 8) & 0xff, val & 0xff);
            }
            function toString32(val) {
                return toString16(val >> 16) + toString16(val);
            }
            function isScaledFont2(glyphs) {
                var xMin = 0, yMin = 0, xMax = 0, yMax = 0;
                for (var i = 0; i < glyphs.length; i++) {
                    var glyph = glyphs[i];
                    if (!glyph) {
                        continue;
                    }
                    var records = glyph.records;
                    var record;
                    var x = 0;
                    var y = 0;
                    for (var j = 0; j < records.length; j++) {
                        record = records[j];
                        if (record.type) {
                            if (record.isStraight) {
                                x += (record.deltaX || 0);
                                y += -(record.deltaY || 0);
                            }
                            else {
                                x += record.controlDeltaX;
                                y += -record.controlDeltaY;
                                x += record.anchorDeltaX;
                                y += -record.anchorDeltaY;
                            }
                        }
                        else {
                            if (record.eos) {
                                break;
                            }
                            if (record.move) {
                                x = record.moveX;
                                y = -record.moveY;
                            }
                        }
                        if (xMin > x) {
                            xMin = x;
                        }
                        if (yMin > y) {
                            yMin = y;
                        }
                        if (xMax < x) {
                            xMax = x;
                        }
                        if (yMax < y) {
                            yMax = y;
                        }
                    }
                }
                var maxDimension = Math.max(xMax - xMin, yMax - yMin);
                return maxDimension > 5000;
            }
            function defineFont(tag) {
                var uniqueName = 'swf-font-' + tag.id;
                var fontName = tag.name || uniqueName;
                var font = {
                    type: 'font',
                    id: tag.id,
                    name: fontName,
                    bold: tag.bold === 1,
                    italic: tag.italic === 1,
                    codes: null,
                    metrics: null,
                    data: tag.data,
                    originalSize: false
                };
                var glyphs = tag.glyphs;
                var glyphCount = glyphs ? tag.glyphCount = glyphs.length : 0;
                if (!glyphCount) {
                    return font;
                }
                var tables = {};
                var codes = [];
                var glyphIndex = {};
                var ranges = [];
                var originalCode;
                var generateAdvancement = !('advance' in tag);
                var correction = 0;
                var isFont2 = (tag.code === 48);
                var isFont3 = (tag.code === 75);
                if (generateAdvancement) {
                    tag.advance = [];
                }
                var maxCode = Math.max.apply(null, tag.codes) || 35;
                if (tag.codes) {
                    for (var i = 0; i < tag.codes.length; i++) {
                        var code = tag.codes[i];
                        if (code < 32 || codes.indexOf(code) > -1) {
                            maxCode++;
                            if (maxCode == 8232) {
                                maxCode = 8240;
                            }
                            code = maxCode;
                        }
                        codes.push(code);
                        glyphIndex[code] = i;
                    }
                    originalCode = codes.concat();
                    codes.sort(function (a, b) {
                        return a - b;
                    });
                    var i = 0;
                    var code;
                    var indices;
                    while ((code = codes[i++]) !== undefined) {
                        var start = code;
                        var end = start;
                        indices = [i - 1];
                        while (((code = codes[i]) !== undefined) && end + 1 === code) {
                            ++end;
                            indices.push(i);
                            ++i;
                        }
                        ranges.push([start, end, indices]);
                    }
                }
                else {
                    indices = [];
                    var UAC_OFFSET = 0xe000;
                    for (var i = 0; i < glyphCount; i++) {
                        code = UAC_OFFSET + i;
                        codes.push(code);
                        glyphIndex[code] = i;
                        indices.push(i);
                    }
                    ranges.push([UAC_OFFSET, UAC_OFFSET + glyphCount - 1, indices]);
                    originalCode = codes.concat();
                }
                var resolution = tag.resolution || 1;
                if (isFont2 && isScaledFont2(glyphs)) {
                    resolution = 20;
                    font.originalSize = true;
                }
                var ascent = Math.ceil(tag.ascent / resolution) || 1024;
                var descent = -Math.ceil(tag.descent / resolution) || 0;
                var leading = (tag.leading / resolution) || 0;
                tables['OS/2'] = '';
                var startCount = '';
                var endCount = '';
                var idDelta = '';
                var idRangeOffset = '';
                var i = 0;
                var range;
                while ((range = ranges[i++])) {
                    var start = range[0];
                    var end = range[1];
                    var code = range[2][0];
                    startCount += toString16(start);
                    endCount += toString16(end);
                    idDelta += toString16(((code - start) + 1) & 0xffff);
                    idRangeOffset += toString16(0);
                }
                endCount += '\xff\xff';
                startCount += '\xff\xff';
                idDelta += '\x00\x01';
                idRangeOffset += '\x00\x00';
                var segCount = ranges.length + 1;
                var searchRange = maxPower2(segCount) * 2;
                var rangeShift = (2 * segCount) - searchRange;
                var format314 = '\x00\x00' + toString16(segCount * 2) + toString16(searchRange) + toString16(logE(segCount) / logE(2)) + toString16(rangeShift) + endCount + '\x00\x00' + startCount + idDelta + idRangeOffset;
                tables['cmap'] = '\x00\x00' + '\x00\x01' + '\x00\x03' + '\x00\x01' + '\x00\x00\x00\x0c' + '\x00\x04' + toString16(format314.length + 4) + format314;
                var glyf = '\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x31\x00';
                var loca = '\x00\x00';
                var offset = 16;
                var maxPoints = 0;
                var xMins = [];
                var xMaxs = [];
                var yMins = [];
                var yMaxs = [];
                var maxContours = 0;
                var i = 0;
                var code;
                var rawData = {};
                while ((code = codes[i++]) !== undefined) {
                    var glyph = glyphs[glyphIndex[code]];
                    var records = glyph.records;
                    var x = 0;
                    var y = 0;
                    var myFlags = '';
                    var myEndpts = '';
                    var endPoint = 0;
                    var segments = [];
                    var segmentIndex = -1;
                    for (var j = 0; j < records.length; j++) {
                        record = records[j];
                        if (record.type) {
                            if (segmentIndex < 0) {
                                segmentIndex = 0;
                                segments[segmentIndex] = { data: [], commands: [], xMin: 0, xMax: 0, yMin: 0, yMax: 0 };
                            }
                            if (record.isStraight) {
                                segments[segmentIndex].commands.push(2);
                                var dx = (record.deltaX || 0) / resolution;
                                var dy = -(record.deltaY || 0) / resolution;
                                x += dx;
                                y += dy;
                                segments[segmentIndex].data.push(x, y);
                            }
                            else {
                                segments[segmentIndex].commands.push(3);
                                var cx = record.controlDeltaX / resolution;
                                var cy = -record.controlDeltaY / resolution;
                                x += cx;
                                y += cy;
                                segments[segmentIndex].data.push(x, y);
                                var dx = record.anchorDeltaX / resolution;
                                var dy = -record.anchorDeltaY / resolution;
                                x += dx;
                                y += dy;
                                segments[segmentIndex].data.push(x, y);
                            }
                        }
                        else {
                            if (record.eos) {
                                break;
                            }
                            if (record.move) {
                                segmentIndex++;
                                segments[segmentIndex] = { data: [], commands: [], xMin: 0, xMax: 0, yMin: 0, yMax: 0 };
                                segments[segmentIndex].commands.push(1);
                                var moveX = record.moveX / resolution;
                                var moveY = -record.moveY / resolution;
                                var dx = moveX - x;
                                var dy = moveY - y;
                                x = moveX;
                                y = moveY;
                                segments[segmentIndex].data.push(x, y);
                            }
                        }
                        if (segmentIndex > -1) {
                            if (segments[segmentIndex].xMin > x) {
                                segments[segmentIndex].xMin = x;
                            }
                            if (segments[segmentIndex].yMin > y) {
                                segments[segmentIndex].yMin = y;
                            }
                            if (segments[segmentIndex].xMax < x) {
                                segments[segmentIndex].xMax = x;
                            }
                            if (segments[segmentIndex].yMax < y) {
                                segments[segmentIndex].yMax = y;
                            }
                        }
                    }
                    if (!isFont3) {
                        segments.sort(function (a, b) {
                            return (b.xMax - b.xMin) * (b.yMax - b.yMin) - (a.xMax - a.xMin) * (a.yMax - a.yMin);
                        });
                    }
                    rawData[code] = segments;
                }
                i = 0;
                while ((code = codes[i++]) !== undefined) {
                    var glyph = glyphs[glyphIndex[code]];
                    var records = glyph.records;
                    segments = rawData[code];
                    var numberOfContours = 1;
                    var endPoint = 0;
                    var endPtsOfContours = '';
                    var flags = '';
                    var xCoordinates = '';
                    var yCoordinates = '';
                    var x = 0;
                    var y = 0;
                    var xMin = 0;
                    var xMax = -1024;
                    var yMin = 0;
                    var yMax = -1024;
                    var myFlags = '';
                    var myEndpts = '';
                    var endPoint = 0;
                    var segmentIndex = -1;
                    var data = [];
                    var commands = [];
                    for (j = 0; j < segments.length; j++) {
                        data = data.concat(segments[j].data);
                        commands = commands.concat(segments[j].commands);
                    }
                    x = 0;
                    y = 0;
                    var nx = 0;
                    var ny = 0;
                    var myXCoordinates = '';
                    var myYCoordinates = '';
                    var dataIndex = 0;
                    var endPoint = 0;
                    var numberOfContours = 1;
                    var myEndpts = '';
                    for (j = 0; j < commands.length; j++) {
                        var command = commands[j];
                        if (command === 1) {
                            if (endPoint) {
                                ++numberOfContours;
                                myEndpts += toString16(endPoint - 1);
                            }
                            nx = data[dataIndex++];
                            ny = data[dataIndex++];
                            var dx = nx - x;
                            var dy = ny - y;
                            myFlags += '\x01';
                            myXCoordinates += toString16(dx);
                            myYCoordinates += toString16(dy);
                            x = nx;
                            y = ny;
                        }
                        else if (command === 2) {
                            nx = data[dataIndex++];
                            ny = data[dataIndex++];
                            var dx = nx - x;
                            var dy = ny - y;
                            myFlags += '\x01';
                            myXCoordinates += toString16(dx);
                            myYCoordinates += toString16(dy);
                            x = nx;
                            y = ny;
                        }
                        else if (command === 3) {
                            nx = data[dataIndex++];
                            ny = data[dataIndex++];
                            var cx = nx - x;
                            var cy = ny - y;
                            myFlags += '\x00';
                            myXCoordinates += toString16(cx);
                            myYCoordinates += toString16(cy);
                            x = nx;
                            y = ny;
                            endPoint++;
                            nx = data[dataIndex++];
                            ny = data[dataIndex++];
                            var cx = nx - x;
                            var cy = ny - y;
                            myFlags += '\x01';
                            myXCoordinates += toString16(cx);
                            myYCoordinates += toString16(cy);
                            x = nx;
                            y = ny;
                        }
                        endPoint++;
                        if (endPoint > maxPoints) {
                            maxPoints = endPoint;
                        }
                        if (xMin > x) {
                            xMin = x;
                        }
                        if (yMin > y) {
                            yMin = y;
                        }
                        if (xMax < x) {
                            xMax = x;
                        }
                        if (yMax < y) {
                            yMax = y;
                        }
                    }
                    myEndpts += toString16((endPoint || 1) - 1);
                    endPtsOfContours = myEndpts;
                    xCoordinates = myXCoordinates;
                    yCoordinates = myYCoordinates;
                    flags = myFlags;
                    if (!j) {
                        xMin = xMax = yMin = yMax = 0;
                        flags += '\x31';
                    }
                    var entry = toString16(numberOfContours) + toString16(xMin) + toString16(yMin) + toString16(xMax) + toString16(yMax) + endPtsOfContours + '\x00\x00' + flags + xCoordinates + yCoordinates;
                    if (entry.length & 1) {
                        entry += '\x00';
                    }
                    glyf += entry;
                    loca += toString16(offset / 2);
                    offset += entry.length;
                    xMins.push(xMin);
                    xMaxs.push(xMax);
                    yMins.push(yMin);
                    yMaxs.push(yMax);
                    if (numberOfContours > maxContours) {
                        maxContours = numberOfContours;
                    }
                    if (endPoint > maxPoints) {
                        maxPoints = endPoint;
                    }
                    if (generateAdvancement) {
                        tag.advance.push((xMax - xMin) * resolution * 1.3);
                    }
                }
                loca += toString16(offset / 2);
                tables['glyf'] = glyf;
                if (!isFont3) {
                    var minYmin = Math.min.apply(null, yMins);
                    if (minYmin < 0) {
                        descent = descent || minYmin;
                    }
                }
                tables['OS/2'] = '\x00\x01' + '\x00\x00' + toString16(tag.bold ? 700 : 400) + '\x00\x05' + '\x00\x00' + '\x00\x00' + '\x00\x00' + '\x00\x00' + '\x00\x00' + '\x00\x00' + '\x00\x00' + '\x00\x00' + '\x00\x00' + '\x00\x00' + '\x00\x00' + '\x00\x00' + '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00' + '\x00\x00\x00\x00' + '\x00\x00\x00\x00' + '\x00\x00\x00\x00' + '\x00\x00\x00\x00' + 'ALF ' + toString16((tag.italic ? 0x01 : 0) | (tag.bold ? 0x20 : 0)) + toString16(codes[0]) + toString16(codes[codes.length - 1]) + toString16(ascent) + toString16(descent) + toString16(leading) + toString16(ascent) + toString16(-descent) + '\x00\x00\x00\x00' + '\x00\x00\x00\x00';
                tables['head'] = '\x00\x01\x00\x00' + '\x00\x01\x00\x00' + '\x00\x00\x00\x00' + '\x5f\x0f\x3c\xf5' + '\x00\x0b' + '\x04\x00' + '\x00\x00\x00\x00' + toString32(Date.now()) + '\x00\x00\x00\x00' + toString32(Date.now()) + toString16(min.apply(null, xMins)) + toString16(min.apply(null, yMins)) + toString16(max.apply(null, xMaxs)) + toString16(max.apply(null, yMaxs)) + toString16((tag.italic ? 2 : 0) | (tag.bold ? 1 : 0)) + '\x00\x08' + '\x00\x02' + '\x00\x00' + '\x00\x00';
                var advance = tag.advance;
                tables['hhea'] = '\x00\x01\x00\x00' + toString16(ascent) + toString16(descent) + toString16(leading) + toString16(advance ? max.apply(null, advance) : 1024) + '\x00\x00' + '\x00\x00' + '\x03\xb8' + '\x00\x01' + '\x00\x00' + '\x00\x00' + '\x00\x00' + '\x00\x00' + '\x00\x00' + '\x00\x00' + '\x00\x00' + toString16(glyphCount + 1);
                var hmtx = '\x00\x00\x00\x00';
                for (var i = 0; i < glyphCount; ++i) {
                    hmtx += toString16(advance ? (advance[i] / resolution) : 1024) + '\x00\x00';
                }
                tables['hmtx'] = hmtx;
                if (tag.kerning) {
                    var kerning = tag.kerning;
                    var nPairs = kerning.length;
                    var searchRange = maxPower2(nPairs) * 2;
                    var kern = '\x00\x00' + '\x00\x01' + '\x00\x00' + toString16(14 + (nPairs * 6)) + '\x00\x01' + toString16(nPairs) + toString16(searchRange) + toString16(logE(nPairs) / logE(2)) + toString16((2 * nPairs) - searchRange);
                    var i = 0;
                    var record;
                    while ((record = kerning[i++])) {
                        kern += toString16(glyphIndex[record.code1]) + toString16(glyphIndex[record.code2]) + toString16(record.adjustment);
                    }
                    tables['kern'] = kern;
                }
                tables['loca'] = loca;
                tables['maxp'] = '\x00\x01\x00\x00' + toString16(glyphCount + 1) + toString16(maxPoints) + toString16(maxContours) + '\x00\x00' + '\x00\x00' + '\x00\x00' + '\x00\x00' + '\x00\x00' + '\x00\x00' + '\x00\x00' + '\x00\x00' + '\x00\x00' + '\x00\x00' + '\x00\x00';
                var psName = fontName.replace(/ /g, '');
                var strings = [
                    tag.copyright || 'Original licence',
                    fontName,
                    'Unknown',
                    uniqueName,
                    fontName,
                    '1.0',
                    psName,
                    'Unknown',
                    'Unknown',
                    'Unknown'
                ];
                var count = strings.length;
                var name = '\x00\x00' + toString16(count) + toString16((count * 12) + 6);
                var offset = 0;
                var i = 0;
                var str;
                while ((str = strings[i++])) {
                    name += '\x00\x01' + '\x00\x00' + '\x00\x00' + toString16(i - 1) + toString16(str.length) + toString16(offset);
                    offset += str.length;
                }
                tables['name'] = name + strings.join('');
                tables['post'] = '\x00\x03\x00\x00' + '\x00\x00\x00\x00' + '\x00\x00' + '\x00\x00' + '\x00\x00\x00\x00' + '\x00\x00\x00\x00' + '\x00\x00\x00\x00' + '\x00\x00\x00\x00' + '\x00\x00\x00\x00';
                var names = Object.keys(tables);
                var numTables = names.length;
                var header = '\x00\x01\x00\x00' + toString16(numTables) + '\x00\x80' + '\x00\x03' + '\x00\x20';
                var dataString = '';
                var offset = (numTables * 16) + header.length;
                var i = 0;
                while ((name = names[i++])) {
                    var table = tables[name];
                    var length = table.length;
                    header += name + '\x00\x00\x00\x00' + toString32(offset) + toString32(length);
                    while (length & 3) {
                        table += '\x00';
                        ++length;
                    }
                    dataString += table;
                    while (offset & 3) {
                        ++offset;
                    }
                    offset += length;
                }
                var otf = header + dataString;
                var unitPerEm = 1024;
                var metrics = {
                    ascent: ascent / unitPerEm,
                    descent: -descent / unitPerEm,
                    leading: leading / unitPerEm
                };
                var dataBuffer = new Uint8Array(otf.length);
                for (var i = 0; i < otf.length; i++) {
                    dataBuffer[i] = otf.charCodeAt(i) & 0xff;
                }
                font.codes = originalCode;
                font.metrics = metrics;
                font.data = dataBuffer;
                return font;
            }
            Parser.defineFont = defineFont;
        })(Parser = SWF.Parser || (SWF.Parser = {}));
    })(SWF = Shumway.SWF || (Shumway.SWF = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var SWF;
    (function (SWF) {
        var Parser;
        (function (Parser) {
            var assert = Shumway.Debug.assert;
            var Inflate = Shumway.ArrayUtilities.Inflate;
            function readUint16(bytes, position) {
                return (bytes[position] << 8) | bytes[position + 1];
            }
            function readInt32(bytes, position) {
                return (bytes[position] << 24) | (bytes[position + 1] << 16) | (bytes[position + 2] << 8) | bytes[position + 3];
            }
            function parseJpegChunks(image, bytes, chunks) {
                var i = 0;
                var n = bytes.length;
                var code;
                do {
                    var begin = i;
                    while (i < n && bytes[i] !== 0xff) {
                        ++i;
                    }
                    while (i < n && bytes[i] === 0xff) {
                        ++i;
                    }
                    code = bytes[i++];
                    if (code === 0xda) {
                        i = n;
                    }
                    else if (code === 0xd9) {
                        i += 2;
                        continue;
                    }
                    else if (code < 0xd0 || code > 0xd8) {
                        var length = readUint16(bytes, i);
                        if (code >= 0xc0 && code <= 0xc3) {
                            image.height = readUint16(bytes, i + 3);
                            image.width = readUint16(bytes, i + 5);
                        }
                        i += length;
                    }
                    chunks.push(bytes.subarray(begin, i));
                } while (i < n);
                if (!release && !(image.width && image.height)) {
                    Shumway.Debug.warning('bad jpeg image');
                }
                return chunks;
            }
            Parser.parseJpegChunks = parseJpegChunks;
            function parsePngHeaders(image, bytes) {
                var ihdrOffset = 12;
                if (bytes[ihdrOffset] !== 0x49 || bytes[ihdrOffset + 1] !== 0x48 || bytes[ihdrOffset + 2] !== 0x44 || bytes[ihdrOffset + 3] !== 0x52) {
                    return;
                }
                image.width = readInt32(bytes, ihdrOffset + 4);
                image.height = readInt32(bytes, ihdrOffset + 8);
                var type = bytes[ihdrOffset + 14];
                image.hasAlpha = type === 4 || type === 6;
            }
            Parser.parsePngHeaders = parsePngHeaders;
            function joinChunks(chunks) {
                var length = 0;
                for (var i = 0; i < chunks.length; i++) {
                    length += chunks[i].length;
                }
                var bytes = new Uint8Array(length);
                var offset = 0;
                for (var i = 0; i < chunks.length; i++) {
                    var chunk = chunks[i];
                    bytes.set(chunk, offset);
                    offset += chunk.length;
                }
                return bytes;
            }
            function defineImage(tag) {
                SWF.enterTimeline("defineImage");
                var image = {
                    type: 'image',
                    id: tag.id,
                    mimeType: tag.mimeType
                };
                var imgData = tag.imgData;
                if (tag.mimeType === 'image/jpeg') {
                    var alphaData = tag.alphaData;
                    if (alphaData) {
                        var jpegImage = new Shumway.JPEG.JpegImage();
                        jpegImage.parse(joinChunks(parseJpegChunks(image, imgData, [])));
                        release || assert(image.width === jpegImage.width);
                        release || assert(image.height === jpegImage.height);
                        var width = image.width;
                        var height = image.height;
                        var length = width * height;
                        var alphaMaskBytes = Inflate.inflate(alphaData, length, true);
                        var data = image.data = new Uint8ClampedArray(length * 4);
                        jpegImage.copyToImageData(image);
                        for (var i = 0, k = 3; i < length; i++, k += 4) {
                            data[k] = alphaMaskBytes[i];
                        }
                        image.mimeType = 'application/octet-stream';
                        image.dataType = 3 /* StraightAlphaRGBA */;
                    }
                    else {
                        var chunks = [];
                        if (tag.jpegTables) {
                            chunks.push(tag.jpegTables);
                        }
                        parseJpegChunks(image, imgData, chunks);
                        if (tag.jpegTables && tag.jpegTables.byteLength > 0) {
                            chunks[1] = chunks[1].subarray(2);
                        }
                        image.data = joinChunks(chunks);
                        image.dataType = 4 /* JPEG */;
                    }
                }
                else {
                    parsePngHeaders(image, imgData);
                    image.data = imgData;
                    image.dataType = 5 /* PNG */;
                }
                SWF.leaveTimeline();
                return image;
            }
            Parser.defineImage = defineImage;
        })(Parser = SWF.Parser || (SWF.Parser = {}));
    })(SWF = Shumway.SWF || (Shumway.SWF = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var SWF;
    (function (SWF) {
        var Parser;
        (function (Parser) {
            function defineLabel(tag) {
                var label = {
                    type: 'label',
                    id: tag.id,
                    fillBounds: tag.bbox,
                    matrix: tag.matrix,
                    tag: {
                        hasText: true,
                        initialText: '',
                        html: true,
                        readonly: true
                    },
                    records: tag.records,
                    coords: null,
                    static: true,
                    require: null
                };
                return label;
            }
            Parser.defineLabel = defineLabel;
        })(Parser = SWF.Parser || (SWF.Parser = {}));
    })(SWF = Shumway.SWF || (Shumway.SWF = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var SWF;
    (function (SWF) {
        var Parser;
        (function (Parser) {
            var PathCommand = Shumway.PathCommand;
            var GradientType = Shumway.GradientType;
            var DataBuffer = Shumway.ArrayUtilities.DataBuffer;
            var ShapeData = Shumway.ShapeData;
            var clamp = Shumway.NumberUtilities.clamp;
            var assert = Shumway.Debug.assert;
            var assertUnreachable = Shumway.Debug.assertUnreachable;
            var push = Array.prototype.push;
            var FillType;
            (function (FillType) {
                FillType[FillType["Solid"] = 0] = "Solid";
                FillType[FillType["LinearGradient"] = 0x10] = "LinearGradient";
                FillType[FillType["RadialGradient"] = 0x12] = "RadialGradient";
                FillType[FillType["FocalRadialGradient"] = 0x13] = "FocalRadialGradient";
                FillType[FillType["RepeatingBitmap"] = 0x40] = "RepeatingBitmap";
                FillType[FillType["ClippedBitmap"] = 0x41] = "ClippedBitmap";
                FillType[FillType["NonsmoothedRepeatingBitmap"] = 0x42] = "NonsmoothedRepeatingBitmap";
                FillType[FillType["NonsmoothedClippedBitmap"] = 0x43] = "NonsmoothedClippedBitmap";
            })(FillType || (FillType = {}));
            function applySegmentToStyles(segment, styles, linePaths, fillPaths) {
                if (!segment) {
                    return;
                }
                var path;
                if (styles.fill0) {
                    path = fillPaths[styles.fill0 - 1];
                    if (!(styles.fill1 || styles.line)) {
                        segment.isReversed = true;
                        return;
                    }
                    else {
                        path.addSegment(segment.toReversed());
                    }
                }
                if (styles.line && styles.fill1) {
                    path = linePaths[styles.line - 1];
                    path.addSegment(segment.clone());
                }
            }
            function convertRecordsToShapeData(records, fillPaths, linePaths, dependencies, recordsMorph) {
                var isMorph = recordsMorph !== null;
                var styles = { fill0: 0, fill1: 0, line: 0 };
                var segment = null;
                var allPaths;
                var defaultPath;
                var numRecords = records.length - 1;
                var x = 0;
                var y = 0;
                var morphX = 0;
                var morphY = 0;
                var path;
                for (var i = 0, j = 0; i < numRecords; i++) {
                    var record = records[i];
                    var morphRecord;
                    if (isMorph) {
                        morphRecord = recordsMorph[j++];
                    }
                    if (record.type === 0) {
                        if (segment) {
                            applySegmentToStyles(segment, styles, linePaths, fillPaths);
                        }
                        if (record.hasNewStyles) {
                            if (!allPaths) {
                                allPaths = [];
                            }
                            push.apply(allPaths, fillPaths);
                            fillPaths = createPathsList(record.fillStyles, false, isMorph, dependencies);
                            push.apply(allPaths, linePaths);
                            linePaths = createPathsList(record.lineStyles, true, isMorph, dependencies);
                            if (defaultPath) {
                                allPaths.push(defaultPath);
                                defaultPath = null;
                            }
                            styles = { fill0: 0, fill1: 0, line: 0 };
                        }
                        if (record.hasFillStyle0) {
                            styles.fill0 = record.fillStyle0;
                        }
                        if (record.hasFillStyle1) {
                            styles.fill1 = record.fillStyle1;
                        }
                        if (record.hasLineStyle) {
                            styles.line = record.lineStyle;
                        }
                        if (styles.fill1) {
                            path = fillPaths[styles.fill1 - 1];
                        }
                        else if (styles.line) {
                            path = linePaths[styles.line - 1];
                        }
                        else if (styles.fill0) {
                            path = fillPaths[styles.fill0 - 1];
                        }
                        if (record.move) {
                            x = record.moveX | 0;
                            y = record.moveY | 0;
                        }
                        if (path) {
                            segment = PathSegment.FromDefaults(isMorph);
                            path.addSegment(segment);
                            if (!isMorph) {
                                segment.moveTo(x, y);
                            }
                            else {
                                if (morphRecord.type === 0) {
                                    morphX = morphRecord.moveX | 0;
                                    morphY = morphRecord.moveY | 0;
                                }
                                else {
                                    morphX = x;
                                    morphY = y;
                                    j--;
                                }
                                segment.morphMoveTo(x, y, morphX, morphY);
                            }
                        }
                    }
                    else {
                        release || assert(record.type === 1);
                        if (!segment) {
                            if (!defaultPath) {
                                var style = { color: { red: 0, green: 0, blue: 0, alpha: 0 }, width: 20 };
                                defaultPath = new SegmentedPath(null, processStyle(style, true, isMorph, dependencies));
                            }
                            segment = PathSegment.FromDefaults(isMorph);
                            defaultPath.addSegment(segment);
                            if (!isMorph) {
                                segment.moveTo(x, y);
                            }
                            else {
                                segment.morphMoveTo(x, y, morphX, morphY);
                            }
                        }
                        if (isMorph) {
                            while (morphRecord && morphRecord.type === 0) {
                                morphRecord = recordsMorph[j++];
                            }
                            if (!morphRecord) {
                                morphRecord = record;
                            }
                        }
                        if (record.isStraight && (!isMorph || morphRecord.isStraight)) {
                            x += record.deltaX | 0;
                            y += record.deltaY | 0;
                            if (!isMorph) {
                                segment.lineTo(x, y);
                            }
                            else {
                                morphX += morphRecord.deltaX | 0;
                                morphY += morphRecord.deltaY | 0;
                                segment.morphLineTo(x, y, morphX, morphY);
                            }
                        }
                        else {
                            var cx, cy;
                            var deltaX, deltaY;
                            if (!record.isStraight) {
                                cx = x + record.controlDeltaX | 0;
                                cy = y + record.controlDeltaY | 0;
                                x = cx + record.anchorDeltaX | 0;
                                y = cy + record.anchorDeltaY | 0;
                            }
                            else {
                                deltaX = record.deltaX | 0;
                                deltaY = record.deltaY | 0;
                                cx = x + (deltaX >> 1);
                                cy = y + (deltaY >> 1);
                                x += deltaX;
                                y += deltaY;
                            }
                            if (!isMorph) {
                                segment.curveTo(cx, cy, x, y);
                            }
                            else {
                                if (!morphRecord.isStraight) {
                                    var morphCX = morphX + morphRecord.controlDeltaX | 0;
                                    var morphCY = morphY + morphRecord.controlDeltaY | 0;
                                    morphX = morphCX + morphRecord.anchorDeltaX | 0;
                                    morphY = morphCY + morphRecord.anchorDeltaY | 0;
                                }
                                else {
                                    deltaX = morphRecord.deltaX | 0;
                                    deltaY = morphRecord.deltaY | 0;
                                    var morphCX = morphX + (deltaX >> 1);
                                    var morphCY = morphY + (deltaY >> 1);
                                    morphX += deltaX;
                                    morphY += deltaY;
                                }
                                segment.morphCurveTo(cx, cy, x, y, morphCX, morphCY, morphX, morphY);
                            }
                        }
                    }
                }
                applySegmentToStyles(segment, styles, linePaths, fillPaths);
                if (allPaths) {
                    push.apply(allPaths, fillPaths);
                }
                else {
                    allPaths = fillPaths;
                }
                push.apply(allPaths, linePaths);
                if (defaultPath) {
                    allPaths.push(defaultPath);
                }
                var shape = new ShapeData();
                if (isMorph) {
                    shape.morphCoordinates = new Int32Array(shape.coordinates.length);
                    shape.morphStyles = new DataBuffer(16);
                }
                for (i = 0; i < allPaths.length; i++) {
                    allPaths[i].serialize(shape);
                }
                return shape;
            }
            var IDENTITY_MATRIX = { a: 1, b: 0, c: 0, d: 1, tx: 0, ty: 0 };
            function processStyle(style, isLineStyle, isMorph, dependencies) {
                var shapeStyle = style;
                if (isMorph) {
                    shapeStyle.morph = processMorphStyle(style, isLineStyle, dependencies);
                }
                if (isLineStyle) {
                    shapeStyle.miterLimit = (style.miterLimitFactor || 1.5) * 2;
                    if (!style.color && style.hasFill) {
                        var fillStyle = processStyle(style.fillStyle, false, false, dependencies);
                        shapeStyle.type = fillStyle.type;
                        shapeStyle.transform = fillStyle.transform;
                        shapeStyle.colors = fillStyle.colors;
                        shapeStyle.ratios = fillStyle.ratios;
                        shapeStyle.focalPoint = fillStyle.focalPoint;
                        shapeStyle.bitmapId = fillStyle.bitmapId;
                        shapeStyle.bitmapIndex = fillStyle.bitmapIndex;
                        shapeStyle.repeat = fillStyle.repeat;
                        style.fillStyle = null;
                        return shapeStyle;
                    }
                    else {
                        shapeStyle.type = 0 /* Solid */;
                        return shapeStyle;
                    }
                }
                if (style.type === undefined || style.type === 0 /* Solid */) {
                    return shapeStyle;
                }
                var scale;
                switch (style.type) {
                    case 16 /* LinearGradient */:
                    case 18 /* RadialGradient */:
                    case 19 /* FocalRadialGradient */:
                        var records = style.records;
                        var colors = shapeStyle.colors = [];
                        var ratios = shapeStyle.ratios = [];
                        for (var i = 0; i < records.length; i++) {
                            var record = records[i];
                            colors.push(record.color);
                            ratios.push(record.ratio);
                        }
                        scale = 819.2;
                        break;
                    case 64 /* RepeatingBitmap */:
                    case 65 /* ClippedBitmap */:
                    case 66 /* NonsmoothedRepeatingBitmap */:
                    case 67 /* NonsmoothedClippedBitmap */:
                        shapeStyle.smooth = style.type !== 66 /* NonsmoothedRepeatingBitmap */ && style.type !== 67 /* NonsmoothedClippedBitmap */;
                        shapeStyle.repeat = style.type !== 65 /* ClippedBitmap */ && style.type !== 67 /* NonsmoothedClippedBitmap */;
                        shapeStyle.bitmapIndex = dependencies.length;
                        dependencies.push(style.bitmapId);
                        scale = 0.05;
                        break;
                    default:
                        Shumway.Debug.warning('shape parser encountered invalid fill style ' + style.type);
                }
                if (!style.matrix) {
                    shapeStyle.transform = IDENTITY_MATRIX;
                    return shapeStyle;
                }
                var matrix = style.matrix;
                shapeStyle.transform = {
                    a: (matrix.a * scale),
                    b: (matrix.b * scale),
                    c: (matrix.c * scale),
                    d: (matrix.d * scale),
                    tx: matrix.tx / 20,
                    ty: matrix.ty / 20
                };
                style.matrix = null;
                return shapeStyle;
            }
            function processMorphStyle(style, isLineStyle, dependencies) {
                var morphStyle = Object.create(style);
                if (isLineStyle) {
                    morphStyle.width = style.widthMorph;
                    if (!style.color && style.hasFill) {
                        var fillStyle = processMorphStyle(style.fillStyle, false, dependencies);
                        morphStyle.transform = fillStyle.transform;
                        morphStyle.colors = fillStyle.colors;
                        morphStyle.ratios = fillStyle.ratios;
                        return morphStyle;
                    }
                    else {
                        morphStyle.color = style.colorMorph;
                        return morphStyle;
                    }
                }
                if (style.type === undefined) {
                    return morphStyle;
                }
                if (style.type === 0 /* Solid */) {
                    morphStyle.color = style.colorMorph;
                    return morphStyle;
                }
                var scale;
                switch (style.type) {
                    case 16 /* LinearGradient */:
                    case 18 /* RadialGradient */:
                    case 19 /* FocalRadialGradient */:
                        var records = style.records;
                        var colors = morphStyle.colors = [];
                        var ratios = morphStyle.ratios = [];
                        for (var i = 0; i < records.length; i++) {
                            var record = records[i];
                            colors.push(record.colorMorph);
                            ratios.push(record.ratioMorph);
                        }
                        scale = 819.2;
                        break;
                    case 64 /* RepeatingBitmap */:
                    case 65 /* ClippedBitmap */:
                    case 66 /* NonsmoothedRepeatingBitmap */:
                    case 67 /* NonsmoothedClippedBitmap */:
                        scale = 0.05;
                        break;
                    default:
                        release || assertUnreachable('shape parser encountered invalid fill style');
                }
                if (!style.matrix) {
                    morphStyle.transform = IDENTITY_MATRIX;
                    return morphStyle;
                }
                var matrix = style.matrixMorph;
                morphStyle.transform = {
                    a: (matrix.a * scale),
                    b: (matrix.b * scale),
                    c: (matrix.c * scale),
                    d: (matrix.d * scale),
                    tx: matrix.tx / 20,
                    ty: matrix.ty / 20
                };
                return morphStyle;
            }
            function createPathsList(styles, isLineStyle, isMorph, dependencies) {
                var paths = [];
                for (var i = 0; i < styles.length; i++) {
                    var style = processStyle(styles[i], isLineStyle, isMorph, dependencies);
                    if (!isLineStyle) {
                        paths[i] = new SegmentedPath(style, null);
                    }
                    else {
                        paths[i] = new SegmentedPath(null, style);
                    }
                }
                return paths;
            }
            function defineShape(tag) {
                var dependencies = [];
                var fillPaths = createPathsList(tag.fillStyles, false, !!tag.recordsMorph, dependencies);
                var linePaths = createPathsList(tag.lineStyles, true, !!tag.recordsMorph, dependencies);
                var shape = convertRecordsToShapeData(tag.records, fillPaths, linePaths, dependencies, tag.recordsMorph || null);
                return {
                    type: tag.isMorph ? 'morphshape' : 'shape',
                    id: tag.id,
                    fillBounds: tag.fillBounds,
                    lineBounds: tag.lineBounds,
                    morphFillBounds: tag.fillBoundsMorph || null,
                    morphLineBounds: tag.lineBoundsMorph || null,
                    shape: shape.toPlainObject(),
                    transferables: shape.buffers,
                    require: dependencies.length ? dependencies : null
                };
            }
            Parser.defineShape = defineShape;
            var PathSegment = (function () {
                function PathSegment(commands, data, morphData, prev, next, isReversed) {
                    this.commands = commands;
                    this.data = data;
                    this.morphData = morphData;
                    this.prev = prev;
                    this.next = next;
                    this.isReversed = isReversed;
                    this.id = PathSegment._counter++;
                }
                PathSegment.FromDefaults = function (isMorph) {
                    var commands = new DataBuffer();
                    var data = new DataBuffer();
                    commands.endian = data.endian = 'auto';
                    var morphData = null;
                    if (isMorph) {
                        morphData = new DataBuffer();
                        morphData.endian = 'auto';
                    }
                    return new PathSegment(commands, data, morphData, null, null, false);
                };
                PathSegment.prototype.moveTo = function (x, y) {
                    this.commands.writeUnsignedByte(9 /* MoveTo */);
                    this.data.write2Ints(x, y);
                };
                PathSegment.prototype.morphMoveTo = function (x, y, mx, my) {
                    this.moveTo(x, y);
                    this.morphData.write2Ints(mx, my);
                };
                PathSegment.prototype.lineTo = function (x, y) {
                    this.commands.writeUnsignedByte(10 /* LineTo */);
                    this.data.write2Ints(x, y);
                };
                PathSegment.prototype.morphLineTo = function (x, y, mx, my) {
                    this.lineTo(x, y);
                    this.morphData.write2Ints(mx, my);
                };
                PathSegment.prototype.curveTo = function (cpx, cpy, x, y) {
                    this.commands.writeUnsignedByte(11 /* CurveTo */);
                    this.data.write4Ints(cpx, cpy, x, y);
                };
                PathSegment.prototype.morphCurveTo = function (cpx, cpy, x, y, mcpx, mcpy, mx, my) {
                    this.curveTo(cpx, cpy, x, y);
                    this.morphData.write4Ints(mcpx, mcpy, mx, my);
                };
                PathSegment.prototype.toReversed = function () {
                    release || assert(!this.isReversed);
                    return new PathSegment(this.commands, this.data, this.morphData, null, null, true);
                };
                PathSegment.prototype.clone = function () {
                    return new PathSegment(this.commands, this.data, this.morphData, null, null, this.isReversed);
                };
                PathSegment.prototype.storeStartAndEnd = function () {
                    var data = this.data.ints;
                    var endPoint1 = data[0] + ',' + data[1];
                    var endPoint2Offset = (this.data.length >> 2) - 2;
                    var endPoint2 = data[endPoint2Offset] + ',' + data[endPoint2Offset + 1];
                    if (!this.isReversed) {
                        this.startPoint = endPoint1;
                        this.endPoint = endPoint2;
                    }
                    else {
                        this.startPoint = endPoint2;
                        this.endPoint = endPoint1;
                    }
                };
                PathSegment.prototype.connectsTo = function (other) {
                    release || assert(other !== this);
                    release || assert(this.endPoint);
                    release || assert(other.startPoint);
                    return this.endPoint === other.startPoint;
                };
                PathSegment.prototype.startConnectsTo = function (other) {
                    release || assert(other !== this);
                    return this.startPoint === other.startPoint;
                };
                PathSegment.prototype.flipDirection = function () {
                    var tempPoint = "";
                    tempPoint = this.startPoint;
                    this.startPoint = this.endPoint;
                    this.endPoint = tempPoint;
                    this.isReversed = !this.isReversed;
                };
                PathSegment.prototype.serialize = function (shape, lastPosition) {
                    if (this.isReversed) {
                        this._serializeReversed(shape, lastPosition);
                        return;
                    }
                    var commands = this.commands.bytes;
                    var dataLength = this.data.length >> 2;
                    var morphData = this.morphData ? this.morphData.ints : null;
                    var data = this.data.ints;
                    release || assert(commands[0] === 9 /* MoveTo */);
                    var offset = 0;
                    if (data[0] === lastPosition.x && data[1] === lastPosition.y) {
                        offset++;
                    }
                    var commandsCount = this.commands.length;
                    var dataPosition = offset * 2;
                    for (var i = offset; i < commandsCount; i++) {
                        dataPosition = this._writeCommand(commands[i], dataPosition, data, morphData, shape);
                    }
                    release || assert(dataPosition === dataLength);
                    lastPosition.x = data[dataLength - 2];
                    lastPosition.y = data[dataLength - 1];
                };
                PathSegment.prototype._serializeReversed = function (shape, lastPosition) {
                    var commandsCount = this.commands.length;
                    var dataPosition = (this.data.length >> 2) - 2;
                    var commands = this.commands.bytes;
                    release || assert(commands[0] === 9 /* MoveTo */);
                    var data = this.data.ints;
                    var morphData = this.morphData ? this.morphData.ints : null;
                    if (data[dataPosition] !== lastPosition.x || data[dataPosition + 1] !== lastPosition.y) {
                        this._writeCommand(9 /* MoveTo */, dataPosition, data, morphData, shape);
                    }
                    if (commandsCount === 1) {
                        lastPosition.x = data[0];
                        lastPosition.y = data[1];
                        return;
                    }
                    for (var i = commandsCount; i-- > 1;) {
                        dataPosition -= 2;
                        var command = commands[i];
                        shape.writeCommandAndCoordinates(command, data[dataPosition], data[dataPosition + 1]);
                        if (morphData) {
                            shape.writeMorphCoordinates(morphData[dataPosition], morphData[dataPosition + 1]);
                        }
                        if (command === 11 /* CurveTo */) {
                            dataPosition -= 2;
                            shape.writeCoordinates(data[dataPosition], data[dataPosition + 1]);
                            if (morphData) {
                                shape.writeMorphCoordinates(morphData[dataPosition], morphData[dataPosition + 1]);
                            }
                        }
                        else {
                        }
                    }
                    release || assert(dataPosition === 0);
                    lastPosition.x = data[0];
                    lastPosition.y = data[1];
                };
                PathSegment.prototype._writeCommand = function (command, position, data, morphData, shape) {
                    shape.writeCommandAndCoordinates(command, data[position++], data[position++]);
                    if (morphData) {
                        shape.writeMorphCoordinates(morphData[position - 2], morphData[position - 1]);
                    }
                    if (command === 11 /* CurveTo */) {
                        shape.writeCoordinates(data[position++], data[position++]);
                        if (morphData) {
                            shape.writeMorphCoordinates(morphData[position - 2], morphData[position - 1]);
                        }
                    }
                    return position;
                };
                PathSegment._counter = 0;
                return PathSegment;
            })();
            var SegmentedPath = (function () {
                function SegmentedPath(fillStyle, lineStyle) {
                    this.fillStyle = fillStyle;
                    this.lineStyle = lineStyle;
                    this._head = null;
                }
                SegmentedPath.prototype.addSegment = function (segment) {
                    release || assert(segment);
                    release || assert(segment.next === null);
                    release || assert(segment.prev === null);
                    var currentHead = this._head;
                    if (currentHead) {
                        release || assert(segment !== currentHead);
                        currentHead.next = segment;
                        segment.prev = currentHead;
                    }
                    this._head = segment;
                };
                SegmentedPath.prototype.removeSegment = function (segment) {
                    if (segment.prev) {
                        segment.prev.next = segment.next;
                    }
                    if (segment.next) {
                        segment.next.prev = segment.prev;
                    }
                };
                SegmentedPath.prototype.insertSegment = function (segment, next) {
                    var prev = next.prev;
                    segment.prev = prev;
                    segment.next = next;
                    if (prev) {
                        prev.next = segment;
                    }
                    next.prev = segment;
                };
                SegmentedPath.prototype.head = function () {
                    return this._head;
                };
                SegmentedPath.prototype.serialize = function (shape) {
                    var segment = this.head();
                    if (!segment) {
                        return;
                    }
                    while (segment) {
                        segment.storeStartAndEnd();
                        segment = segment.prev;
                    }
                    var start = this.head();
                    var end = start;
                    var finalRoot = null;
                    var finalHead = null;
                    var current = start.prev;
                    while (start) {
                        while (current) {
                            if (current.startConnectsTo(start)) {
                                current.flipDirection();
                            }
                            if (current.connectsTo(start)) {
                                if (current.next !== start) {
                                    this.removeSegment(current);
                                    this.insertSegment(current, start);
                                }
                                start = current;
                                current = start.prev;
                                continue;
                            }
                            if (current.startConnectsTo(end)) {
                                current.flipDirection();
                            }
                            if (end.connectsTo(current)) {
                                this.removeSegment(current);
                                end.next = current;
                                current = current.prev;
                                end.next.prev = end;
                                end.next.next = null;
                                end = end.next;
                                continue;
                            }
                            current = current.prev;
                        }
                        current = start.prev;
                        if (!finalRoot) {
                            finalRoot = start;
                            finalHead = end;
                        }
                        else {
                            finalHead.next = start;
                            start.prev = finalHead;
                            finalHead = end;
                            finalHead.next = null;
                        }
                        if (!current) {
                            break;
                        }
                        start = end = current;
                        current = start.prev;
                    }
                    if (this.fillStyle) {
                        var style = this.fillStyle;
                        var morph = style.morph;
                        switch (style.type) {
                            case 0 /* Solid */:
                                shape.beginFill(style.color);
                                if (morph) {
                                    shape.writeMorphFill(morph.color);
                                }
                                break;
                            case 16 /* LinearGradient */:
                            case 18 /* RadialGradient */:
                            case 19 /* FocalRadialGradient */:
                                writeGradient(2 /* BeginGradientFill */, style, shape);
                                if (morph) {
                                    writeMorphGradient(morph, shape);
                                }
                                break;
                            case 65 /* ClippedBitmap */:
                            case 64 /* RepeatingBitmap */:
                            case 67 /* NonsmoothedClippedBitmap */:
                            case 66 /* NonsmoothedRepeatingBitmap */:
                                writeBitmap(3 /* BeginBitmapFill */, style, shape);
                                if (morph) {
                                    writeMorphBitmap(morph, shape);
                                }
                                break;
                            default:
                                release || assertUnreachable('Invalid fill style type: ' + style.type);
                        }
                    }
                    else {
                        var style = this.lineStyle;
                        var morph = style.morph;
                        release || assert(style);
                        switch (style.type) {
                            case 0 /* Solid */:
                                writeLineStyle(style, shape);
                                if (morph) {
                                    writeMorphLineStyle(morph, shape);
                                }
                                break;
                            case 16 /* LinearGradient */:
                            case 18 /* RadialGradient */:
                            case 19 /* FocalRadialGradient */:
                                writeLineStyle(style, shape);
                                writeGradient(6 /* LineStyleGradient */, style, shape);
                                if (morph) {
                                    writeMorphLineStyle(morph, shape);
                                    writeMorphGradient(morph, shape);
                                }
                                break;
                            case 65 /* ClippedBitmap */:
                            case 64 /* RepeatingBitmap */:
                            case 67 /* NonsmoothedClippedBitmap */:
                            case 66 /* NonsmoothedRepeatingBitmap */:
                                writeLineStyle(style, shape);
                                writeBitmap(7 /* LineStyleBitmap */, style, shape);
                                if (morph) {
                                    writeMorphLineStyle(morph, shape);
                                    writeMorphBitmap(morph, shape);
                                }
                                break;
                            default:
                        }
                    }
                    var lastPosition = { x: 0, y: 0 };
                    current = finalRoot;
                    while (current) {
                        current.serialize(shape, lastPosition);
                        current = current.next;
                    }
                    if (this.fillStyle) {
                        shape.endFill();
                    }
                    else {
                        shape.endLine();
                    }
                    return shape;
                };
                return SegmentedPath;
            })();
            function writeLineStyle(style, shape) {
                var scaleMode = style.noHscale ? (style.noVscale ? 0 : 2) : style.noVscale ? 3 : 1;
                var thickness = clamp(style.width, 0, 0xff * 20) | 0;
                shape.lineStyle(thickness, style.color, style.pixelHinting, scaleMode, style.endCapsStyle, style.jointStyle, style.miterLimit);
            }
            function writeMorphLineStyle(style, shape) {
                var thickness = clamp(style.width, 0, 0xff * 20) | 0;
                shape.writeMorphLineStyle(thickness, style.color);
            }
            function writeGradient(command, style, shape) {
                var gradientType = style.type === 16 /* LinearGradient */ ? 16 /* Linear */ : 18 /* Radial */;
                shape.beginGradient(command, style.colors, style.ratios, gradientType, style.transform, style.spreadMethod, style.interpolationMode, style.focalPoint / 2 | 0);
            }
            function writeMorphGradient(style, shape) {
                shape.writeMorphGradient(style.colors, style.ratios, style.transform);
            }
            function writeBitmap(command, style, shape) {
                shape.beginBitmap(command, style.bitmapIndex, style.transform, style.repeat, style.smooth);
            }
            function writeMorphBitmap(style, shape) {
                shape.writeMorphBitmap(style.transform);
            }
        })(Parser = SWF.Parser || (SWF.Parser = {}));
    })(SWF = Shumway.SWF || (Shumway.SWF = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var SWF;
    (function (SWF) {
        var Parser;
        (function (Parser) {
            var SOUND_SIZE_8_BIT = 0;
            var SOUND_SIZE_16_BIT = 1;
            var SOUND_TYPE_MONO = 0;
            var SOUND_TYPE_STEREO = 1;
            var SOUND_FORMAT_PCM_BE = 0;
            var SOUND_FORMAT_ADPCM = 1;
            var SOUND_FORMAT_MP3 = 2;
            var SOUND_FORMAT_PCM_LE = 3;
            var SOUND_FORMAT_NELLYMOSER_16 = 4;
            var SOUND_FORMAT_NELLYMOSER_8 = 5;
            var SOUND_FORMAT_NELLYMOSER = 6;
            var SOUND_FORMAT_SPEEX = 11;
            var SOUND_RATES = [5512, 11250, 22500, 44100];
            var WaveHeader = new Uint8Array([0x52, 0x49, 0x46, 0x46, 0x00, 0x00, 0x00, 0x00, 0x57, 0x41, 0x56, 0x45, 0x66, 0x6D, 0x74, 0x20, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x44, 0xAC, 0x00, 0x00, 0x10, 0xB1, 0x02, 0x00, 0x04, 0x00, 0x10, 0x00, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x00]);
            function packageWave(data, sampleRate, channels, size, swapBytes) {
                var sizeInBytes = size >> 3;
                var sizePerSecond = channels * sampleRate * sizeInBytes;
                var sizePerSample = channels * sizeInBytes;
                var dataLength = data.length + (data.length & 1);
                var buffer = new ArrayBuffer(WaveHeader.length + dataLength);
                var bytes = new Uint8Array(buffer);
                bytes.set(WaveHeader);
                if (swapBytes) {
                    for (var i = 0, j = WaveHeader.length; i < data.length; i += 2, j += 2) {
                        bytes[j] = data[i + 1];
                        bytes[j + 1] = data[i];
                    }
                }
                else {
                    bytes.set(data, WaveHeader.length);
                }
                var view = new DataView(buffer);
                view.setUint32(4, dataLength + 36, true);
                view.setUint16(22, channels, true);
                view.setUint32(24, sampleRate, true);
                view.setUint32(28, sizePerSecond, true);
                view.setUint16(32, sizePerSample, true);
                view.setUint16(34, size, true);
                view.setUint32(40, dataLength, true);
                return {
                    data: bytes,
                    mimeType: 'audio/wav'
                };
            }
            function defineSound(tag) {
                var channels = tag.soundType == SOUND_TYPE_STEREO ? 2 : 1;
                var samplesCount = tag.samplesCount;
                var sampleRate = SOUND_RATES[tag.soundRate];
                var data = tag.soundData;
                var pcm, packaged;
                switch (tag.soundFormat) {
                    case SOUND_FORMAT_PCM_BE:
                        pcm = new Float32Array(samplesCount * channels);
                        if (tag.soundSize == SOUND_SIZE_16_BIT) {
                            for (var i = 0, j = 0; i < pcm.length; i++, j += 2)
                                pcm[i] = ((data[j] << 24) | (data[j + 1] << 16)) / 2147483648;
                            packaged = packageWave(data, sampleRate, channels, 16, true);
                        }
                        else {
                            for (var i = 0; i < pcm.length; i++)
                                pcm[i] = (data[i] - 128) / 128;
                            packaged = packageWave(data, sampleRate, channels, 8, false);
                        }
                        break;
                    case SOUND_FORMAT_PCM_LE:
                        pcm = new Float32Array(samplesCount * channels);
                        if (tag.soundSize == SOUND_SIZE_16_BIT) {
                            for (var i = 0, j = 0; i < pcm.length; i++, j += 2)
                                pcm[i] = ((data[j + 1] << 24) | (data[j] << 16)) / 2147483648;
                            packaged = packageWave(data, sampleRate, channels, 16, false);
                        }
                        else {
                            for (var i = 0; i < pcm.length; i++)
                                pcm[i] = (data[i] - 128) / 128;
                            packaged = packageWave(data, sampleRate, channels, 8, false);
                        }
                        break;
                    case SOUND_FORMAT_MP3:
                        packaged = {
                            data: new Uint8Array(data.subarray(2)),
                            mimeType: 'audio/mpeg'
                        };
                        break;
                    case SOUND_FORMAT_ADPCM:
                        var pcm16 = new Int16Array(samplesCount * channels);
                        decodeACPCMSoundData(data, pcm16, channels);
                        pcm = new Float32Array(samplesCount * channels);
                        for (var i = 0; i < pcm.length; i++)
                            pcm[i] = pcm16[i] / 32768;
                        packaged = packageWave(new Uint8Array(pcm16.buffer), sampleRate, channels, 16, !(new Uint8Array(new Uint16Array([1]).buffer))[0]);
                        break;
                    default:
                        throw new Error('Unsupported audio format: ' + tag.soundFormat);
                }
                var sound = {
                    type: 'sound',
                    id: tag.id,
                    sampleRate: sampleRate,
                    channels: channels,
                    pcm: pcm,
                    packaged: null
                };
                if (packaged) {
                    sound.packaged = packaged;
                }
                return sound;
            }
            Parser.defineSound = defineSound;
            var ACPCMIndexTables = [
                [-1, 2],
                [-1, -1, 2, 4],
                [-1, -1, -1, -1, 2, 4, 6, 8],
                [-1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 4, 6, 8, 10, 13, 16]
            ];
            var ACPCMStepSizeTable = [
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                16,
                17,
                19,
                21,
                23,
                25,
                28,
                31,
                34,
                37,
                41,
                45,
                50,
                55,
                60,
                66,
                73,
                80,
                88,
                97,
                107,
                118,
                130,
                143,
                157,
                173,
                190,
                209,
                230,
                253,
                279,
                307,
                337,
                371,
                408,
                449,
                494,
                544,
                598,
                658,
                724,
                796,
                876,
                963,
                1060,
                1166,
                1282,
                1411,
                1552,
                1707,
                1878,
                2066,
                2272,
                2499,
                2749,
                3024,
                3327,
                3660,
                4026,
                4428,
                4871,
                5358,
                5894,
                6484,
                7132,
                7845,
                8630,
                9493,
                10442,
                11487,
                12635,
                13899,
                15289,
                16818,
                18500,
                20350,
                22385,
                24623,
                27086,
                29794,
                32767
            ];
            function decodeACPCMSoundData(data, pcm16, channels) {
                function readBits(n) {
                    while (dataBufferLength < n) {
                        dataBuffer = (dataBuffer << 8) | data[dataPosition++];
                        dataBufferLength += 8;
                    }
                    dataBufferLength -= n;
                    return (dataBuffer >>> dataBufferLength) & ((1 << n) - 1);
                }
                var dataPosition = 0;
                var dataBuffer = 0;
                var dataBufferLength = 0;
                var pcmPosition = 0;
                var codeSize = readBits(2);
                var indexTable = ACPCMIndexTables[codeSize];
                while (pcmPosition < pcm16.length) {
                    var x = pcm16[pcmPosition++] = (readBits(16) << 16) >> 16, x2;
                    var stepIndex = readBits(6), stepIndex2;
                    if (channels > 1) {
                        x2 = pcm16[pcmPosition++] = (readBits(16) << 16) >> 16;
                        stepIndex2 = readBits(6);
                    }
                    var signMask = 1 << (codeSize + 1);
                    for (var i = 0; i < 4095; i++) {
                        var nibble = readBits(codeSize + 2);
                        var step = ACPCMStepSizeTable[stepIndex];
                        var sum = 0;
                        for (var currentBit = signMask >> 1; currentBit; currentBit >>= 1, step >>= 1) {
                            if (nibble & currentBit)
                                sum += step;
                        }
                        x += (nibble & signMask ? -1 : 1) * (sum + step);
                        pcm16[pcmPosition++] = (x = (x < -32768 ? -32768 : x > 32767 ? 32767 : x));
                        stepIndex += indexTable[nibble & ~signMask];
                        stepIndex = stepIndex < 0 ? 0 : stepIndex > 88 ? 88 : stepIndex;
                        if (channels > 1) {
                            nibble = readBits(codeSize + 2);
                            step = ACPCMStepSizeTable[stepIndex2];
                            sum = 0;
                            for (var currentBit = signMask >> 1; currentBit; currentBit >>= 1, step >>= 1) {
                                if (nibble & currentBit)
                                    sum += step;
                            }
                            x2 += (nibble & signMask ? -1 : 1) * (sum + step);
                            pcm16[pcmPosition++] = (x2 = (x2 < -32768 ? -32768 : x2 > 32767 ? 32767 : x2));
                            stepIndex2 += indexTable[nibble & ~signMask];
                            stepIndex2 = stepIndex2 < 0 ? 0 : stepIndex2 > 88 ? 88 : stepIndex2;
                        }
                    }
                }
            }
            var nextSoundStreamId = 0;
            var SoundStream = (function () {
                function SoundStream(samplesCount, sampleRate, channels) {
                    this.streamId = (nextSoundStreamId++);
                    this.samplesCount = samplesCount;
                    this.sampleRate = sampleRate;
                    this.channels = channels;
                    this.format = null;
                    this.currentSample = 0;
                }
                SoundStream.FromTag = function (tag) {
                    var channels = tag.streamType == SOUND_TYPE_STEREO ? 2 : 1;
                    var samplesCount = tag.samplesCount;
                    var sampleRate = SOUND_RATES[tag.streamRate];
                    var stream = new SoundStream(samplesCount, sampleRate, channels);
                    switch (tag.streamCompression) {
                        case SOUND_FORMAT_PCM_BE:
                        case SOUND_FORMAT_PCM_LE:
                            stream.format = 'wave';
                            if (tag.soundSize == SOUND_SIZE_16_BIT) {
                                stream.decode = tag.streamCompression === SOUND_FORMAT_PCM_BE ? SwfSoundStream_decode_PCM_be : SwfSoundStream_decode_PCM_le;
                            }
                            else {
                                stream.decode = SwfSoundStream_decode_PCM;
                            }
                            break;
                        case SOUND_FORMAT_MP3:
                            stream.format = 'mp3';
                            stream.decode = SwfSoundStream_decode_MP3;
                            break;
                        default:
                            Shumway.Debug.warning('Unsupported audio format: ' + tag.soundFormat);
                            return null;
                    }
                    return stream;
                };
                return SoundStream;
            })();
            Parser.SoundStream = SoundStream;
            function SwfSoundStream_decode_PCM(data) {
                var pcm = new Float32Array(data.length);
                for (var i = 0; i < pcm.length; i++)
                    pcm[i] = (data[i] - 128) / 128;
                this.currentSample += pcm.length / this.channels;
                return {
                    streamId: this.streamId,
                    samplesCount: pcm.length / this.channels,
                    pcm: pcm
                };
            }
            function SwfSoundStream_decode_PCM_be(data) {
                var pcm = new Float32Array(data.length / 2);
                for (var i = 0, j = 0; i < pcm.length; i++, j += 2)
                    pcm[i] = ((data[j] << 24) | (data[j + 1] << 16)) / 2147483648;
                this.currentSample += pcm.length / this.channels;
                return {
                    streamId: this.streamId,
                    samplesCount: pcm.length / this.channels,
                    pcm: pcm
                };
            }
            function SwfSoundStream_decode_PCM_le(data) {
                var pcm = new Float32Array(data.length / 2);
                for (var i = 0, j = 0; i < pcm.length; i++, j += 2)
                    pcm[i] = ((data[j + 1] << 24) | (data[j] << 16)) / 2147483648;
                this.currentSample += pcm.length / this.channels;
                return {
                    streamId: this.streamId,
                    samplesCount: pcm.length / this.channels,
                    pcm: pcm
                };
            }
            function SwfSoundStream_decode_MP3(data) {
                var samplesCount = (data[1] << 8) | data[0];
                var seek = (data[3] << 8) | data[2];
                this.currentSample += samplesCount;
                return {
                    streamId: this.streamId,
                    samplesCount: samplesCount,
                    data: new Uint8Array(data.subarray(4)),
                    seek: seek
                };
            }
        })(Parser = SWF.Parser || (SWF.Parser = {}));
    })(SWF = Shumway.SWF || (Shumway.SWF = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var SWF;
    (function (SWF) {
        var Parser;
        (function (Parser) {
            function defineText(tag) {
                var bold = false;
                var italic = false;
                return {
                    type: 'text',
                    id: tag.id,
                    fillBounds: tag.bbox,
                    variableName: tag.variableName,
                    tag: tag,
                    bold: bold,
                    italic: italic
                };
            }
            Parser.defineText = defineText;
        })(Parser = SWF.Parser || (SWF.Parser = {}));
    })(SWF = Shumway.SWF || (Shumway.SWF = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var SWF;
    (function (SWF) {
        SWF.timelineBuffer = new Shumway.Tools.Profiler.TimelineBuffer("Parser");
        function enterTimeline(name, data) {
            profile && SWF.timelineBuffer && SWF.timelineBuffer.enter(name, data);
        }
        SWF.enterTimeline = enterTimeline;
        function leaveTimeline(data) {
            profile && SWF.timelineBuffer && SWF.timelineBuffer.leave(null, data);
        }
        SWF.leaveTimeline = leaveTimeline;
    })(SWF = Shumway.SWF || (Shumway.SWF = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var SWF;
    (function (SWF) {
        var Option = Shumway.Options.Option;
        var OptionSet = Shumway.Options.OptionSet;
        var shumwayOptions = Shumway.Settings.shumwayOptions;
        SWF.parserOptions = shumwayOptions.register(new OptionSet("Parser Options"));
        SWF.traceLevel = SWF.parserOptions.register(new Option("parsertracelevel", "Parser Trace Level", "number", 0, "Parser Trace Level"));
    })(SWF = Shumway.SWF || (Shumway.SWF = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var JPEG;
    (function (JPEG) {
        var dctZigZag = new Int32Array([
            0,
            1,
            8,
            16,
            9,
            2,
            3,
            10,
            17,
            24,
            32,
            25,
            18,
            11,
            4,
            5,
            12,
            19,
            26,
            33,
            40,
            48,
            41,
            34,
            27,
            20,
            13,
            6,
            7,
            14,
            21,
            28,
            35,
            42,
            49,
            56,
            57,
            50,
            43,
            36,
            29,
            22,
            15,
            23,
            30,
            37,
            44,
            51,
            58,
            59,
            52,
            45,
            38,
            31,
            39,
            46,
            53,
            60,
            61,
            54,
            47,
            55,
            62,
            63
        ]);
        var dctCos1 = 4017;
        var dctSin1 = 799;
        var dctCos3 = 3406;
        var dctSin3 = 2276;
        var dctCos6 = 1567;
        var dctSin6 = 3784;
        var dctSqrt2 = 5793;
        var dctSqrt1d2 = 2896;
        function constructor() {
        }
        function buildHuffmanTable(codeLengths, values) {
            var k = 0, code = [], i, j, length = 16;
            while (length > 0 && !codeLengths[length - 1]) {
                length--;
            }
            code.push({ children: [], index: 0 });
            var p = code[0], q;
            for (i = 0; i < length; i++) {
                for (j = 0; j < codeLengths[i]; j++) {
                    p = code.pop();
                    p.children[p.index] = values[k];
                    while (p.index > 0) {
                        p = code.pop();
                    }
                    p.index++;
                    code.push(p);
                    while (code.length <= i) {
                        code.push(q = { children: [], index: 0 });
                        p.children[p.index] = q.children;
                        p = q;
                    }
                    k++;
                }
                if (i + 1 < length) {
                    code.push(q = { children: [], index: 0 });
                    p.children[p.index] = q.children;
                    p = q;
                }
            }
            return code[0].children;
        }
        function getBlockBufferOffset(component, row, col) {
            return 64 * ((component.blocksPerLine + 1) * row + col);
        }
        function decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successivePrev, successive) {
            var precision = frame.precision;
            var samplesPerLine = frame.samplesPerLine;
            var scanLines = frame.scanLines;
            var mcusPerLine = frame.mcusPerLine;
            var progressive = frame.progressive;
            var maxH = frame.maxH, maxV = frame.maxV;
            var startOffset = offset, bitsData = 0, bitsCount = 0;
            function readBit() {
                if (bitsCount > 0) {
                    bitsCount--;
                    return (bitsData >> bitsCount) & 1;
                }
                bitsData = data[offset++];
                if (bitsData == 0xFF) {
                    var nextByte = data[offset++];
                    if (nextByte) {
                        throw 'unexpected marker: ' + ((bitsData << 8) | nextByte).toString(16);
                    }
                }
                bitsCount = 7;
                return bitsData >>> 7;
            }
            function decodeHuffman(tree) {
                var node = tree;
                var bit;
                while ((bit = readBit()) !== null) {
                    node = node[bit];
                    if (typeof node === 'number') {
                        return node;
                    }
                    if (typeof node !== 'object') {
                        throw 'invalid huffman sequence';
                    }
                }
                return null;
            }
            function receive(length) {
                var n = 0;
                while (length > 0) {
                    var bit = readBit();
                    if (bit === null) {
                        return;
                    }
                    n = (n << 1) | bit;
                    length--;
                }
                return n;
            }
            function receiveAndExtend(length) {
                if (length === 1) {
                    return readBit() === 1 ? 1 : -1;
                }
                var n = receive(length);
                if (n >= 1 << (length - 1)) {
                    return n;
                }
                return n + (-1 << length) + 1;
            }
            function decodeBaseline(component, offset) {
                var t = decodeHuffman(component.huffmanTableDC);
                var diff = t === 0 ? 0 : receiveAndExtend(t);
                component.blockData[offset] = (component.pred += diff);
                var k = 1;
                while (k < 64) {
                    var rs = decodeHuffman(component.huffmanTableAC);
                    var s = rs & 15, r = rs >> 4;
                    if (s === 0) {
                        if (r < 15) {
                            break;
                        }
                        k += 16;
                        continue;
                    }
                    k += r;
                    var z = dctZigZag[k];
                    component.blockData[offset + z] = receiveAndExtend(s);
                    k++;
                }
            }
            function decodeDCFirst(component, offset) {
                var t = decodeHuffman(component.huffmanTableDC);
                var diff = t === 0 ? 0 : (receiveAndExtend(t) << successive);
                component.blockData[offset] = (component.pred += diff);
            }
            function decodeDCSuccessive(component, offset) {
                component.blockData[offset] |= readBit() << successive;
            }
            var eobrun = 0;
            function decodeACFirst(component, offset) {
                if (eobrun > 0) {
                    eobrun--;
                    return;
                }
                var k = spectralStart, e = spectralEnd;
                while (k <= e) {
                    var rs = decodeHuffman(component.huffmanTableAC);
                    var s = rs & 15, r = rs >> 4;
                    if (s === 0) {
                        if (r < 15) {
                            eobrun = receive(r) + (1 << r) - 1;
                            break;
                        }
                        k += 16;
                        continue;
                    }
                    k += r;
                    var z = dctZigZag[k];
                    component.blockData[offset + z] = receiveAndExtend(s) * (1 << successive);
                    k++;
                }
            }
            var successiveACState = 0, successiveACNextValue;
            function decodeACSuccessive(component, offset) {
                var k = spectralStart;
                var e = spectralEnd;
                var r = 0;
                var s;
                var rs;
                while (k <= e) {
                    var z = dctZigZag[k];
                    switch (successiveACState) {
                        case 0:
                            rs = decodeHuffman(component.huffmanTableAC);
                            s = rs & 15;
                            r = rs >> 4;
                            if (s === 0) {
                                if (r < 15) {
                                    eobrun = receive(r) + (1 << r);
                                    successiveACState = 4;
                                }
                                else {
                                    r = 16;
                                    successiveACState = 1;
                                }
                            }
                            else {
                                if (s !== 1) {
                                    throw 'invalid ACn encoding';
                                }
                                successiveACNextValue = receiveAndExtend(s);
                                successiveACState = r ? 2 : 3;
                            }
                            continue;
                        case 1:
                        case 2:
                            if (component.blockData[offset + z]) {
                                component.blockData[offset + z] += (readBit() << successive);
                            }
                            else {
                                r--;
                                if (r === 0) {
                                    successiveACState = successiveACState == 2 ? 3 : 0;
                                }
                            }
                            break;
                        case 3:
                            if (component.blockData[offset + z]) {
                                component.blockData[offset + z] += (readBit() << successive);
                            }
                            else {
                                component.blockData[offset + z] = successiveACNextValue << successive;
                                successiveACState = 0;
                            }
                            break;
                        case 4:
                            if (component.blockData[offset + z]) {
                                component.blockData[offset + z] += (readBit() << successive);
                            }
                            break;
                    }
                    k++;
                }
                if (successiveACState === 4) {
                    eobrun--;
                    if (eobrun === 0) {
                        successiveACState = 0;
                    }
                }
            }
            function decodeMcu(component, decode, mcu, row, col) {
                var mcuRow = (mcu / mcusPerLine) | 0;
                var mcuCol = mcu % mcusPerLine;
                var blockRow = mcuRow * component.v + row;
                var blockCol = mcuCol * component.h + col;
                var offset = getBlockBufferOffset(component, blockRow, blockCol);
                decode(component, offset);
            }
            function decodeBlock(component, decode, mcu) {
                var blockRow = (mcu / component.blocksPerLine) | 0;
                var blockCol = mcu % component.blocksPerLine;
                var offset = getBlockBufferOffset(component, blockRow, blockCol);
                decode(component, offset);
            }
            var componentsLength = components.length;
            var component, i, j, k, n;
            var decodeFn;
            if (progressive) {
                if (spectralStart === 0) {
                    decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;
                }
                else {
                    decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;
                }
            }
            else {
                decodeFn = decodeBaseline;
            }
            var mcu = 0, marker;
            var mcuExpected;
            if (componentsLength == 1) {
                mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;
            }
            else {
                mcuExpected = mcusPerLine * frame.mcusPerColumn;
            }
            if (!resetInterval) {
                resetInterval = mcuExpected;
            }
            var h, v;
            while (mcu < mcuExpected) {
                for (i = 0; i < componentsLength; i++) {
                    components[i].pred = 0;
                }
                eobrun = 0;
                if (componentsLength == 1) {
                    component = components[0];
                    for (n = 0; n < resetInterval; n++) {
                        decodeBlock(component, decodeFn, mcu);
                        mcu++;
                    }
                }
                else {
                    for (n = 0; n < resetInterval; n++) {
                        for (i = 0; i < componentsLength; i++) {
                            component = components[i];
                            h = component.h;
                            v = component.v;
                            for (j = 0; j < v; j++) {
                                for (k = 0; k < h; k++) {
                                    decodeMcu(component, decodeFn, mcu, j, k);
                                }
                            }
                        }
                        mcu++;
                    }
                }
                bitsCount = 0;
                marker = (data[offset] << 8) | data[offset + 1];
                if (marker <= 0xFF00) {
                    throw 'marker was not found';
                }
                if (marker >= 0xFFD0 && marker <= 0xFFD7) {
                    offset += 2;
                }
                else {
                    break;
                }
            }
            return offset - startOffset;
        }
        function quantizeAndInverse(component, blockBufferOffset, p) {
            var qt = component.quantizationTable;
            var v0, v1, v2, v3, v4, v5, v6, v7, t;
            var i;
            for (i = 0; i < 64; i++) {
                p[i] = component.blockData[blockBufferOffset + i] * qt[i];
            }
            for (i = 0; i < 8; ++i) {
                var row = 8 * i;
                if (p[1 + row] === 0 && p[2 + row] === 0 && p[3 + row] === 0 && p[4 + row] === 0 && p[5 + row] === 0 && p[6 + row] === 0 && p[7 + row] === 0) {
                    t = (dctSqrt2 * p[0 + row] + 512) >> 10;
                    p[0 + row] = t;
                    p[1 + row] = t;
                    p[2 + row] = t;
                    p[3 + row] = t;
                    p[4 + row] = t;
                    p[5 + row] = t;
                    p[6 + row] = t;
                    p[7 + row] = t;
                    continue;
                }
                v0 = (dctSqrt2 * p[0 + row] + 128) >> 8;
                v1 = (dctSqrt2 * p[4 + row] + 128) >> 8;
                v2 = p[2 + row];
                v3 = p[6 + row];
                v4 = (dctSqrt1d2 * (p[1 + row] - p[7 + row]) + 128) >> 8;
                v7 = (dctSqrt1d2 * (p[1 + row] + p[7 + row]) + 128) >> 8;
                v5 = p[3 + row] << 4;
                v6 = p[5 + row] << 4;
                t = (v0 - v1 + 1) >> 1;
                v0 = (v0 + v1 + 1) >> 1;
                v1 = t;
                t = (v2 * dctSin6 + v3 * dctCos6 + 128) >> 8;
                v2 = (v2 * dctCos6 - v3 * dctSin6 + 128) >> 8;
                v3 = t;
                t = (v4 - v6 + 1) >> 1;
                v4 = (v4 + v6 + 1) >> 1;
                v6 = t;
                t = (v7 + v5 + 1) >> 1;
                v5 = (v7 - v5 + 1) >> 1;
                v7 = t;
                t = (v0 - v3 + 1) >> 1;
                v0 = (v0 + v3 + 1) >> 1;
                v3 = t;
                t = (v1 - v2 + 1) >> 1;
                v1 = (v1 + v2 + 1) >> 1;
                v2 = t;
                t = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;
                v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;
                v7 = t;
                t = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;
                v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;
                v6 = t;
                p[0 + row] = v0 + v7;
                p[7 + row] = v0 - v7;
                p[1 + row] = v1 + v6;
                p[6 + row] = v1 - v6;
                p[2 + row] = v2 + v5;
                p[5 + row] = v2 - v5;
                p[3 + row] = v3 + v4;
                p[4 + row] = v3 - v4;
            }
            for (i = 0; i < 8; ++i) {
                var col = i;
                if (p[1 * 8 + col] === 0 && p[2 * 8 + col] === 0 && p[3 * 8 + col] === 0 && p[4 * 8 + col] === 0 && p[5 * 8 + col] === 0 && p[6 * 8 + col] === 0 && p[7 * 8 + col] === 0) {
                    t = (dctSqrt2 * p[i + 0] + 8192) >> 14;
                    p[0 * 8 + col] = t;
                    p[1 * 8 + col] = t;
                    p[2 * 8 + col] = t;
                    p[3 * 8 + col] = t;
                    p[4 * 8 + col] = t;
                    p[5 * 8 + col] = t;
                    p[6 * 8 + col] = t;
                    p[7 * 8 + col] = t;
                    continue;
                }
                v0 = (dctSqrt2 * p[0 * 8 + col] + 2048) >> 12;
                v1 = (dctSqrt2 * p[4 * 8 + col] + 2048) >> 12;
                v2 = p[2 * 8 + col];
                v3 = p[6 * 8 + col];
                v4 = (dctSqrt1d2 * (p[1 * 8 + col] - p[7 * 8 + col]) + 2048) >> 12;
                v7 = (dctSqrt1d2 * (p[1 * 8 + col] + p[7 * 8 + col]) + 2048) >> 12;
                v5 = p[3 * 8 + col];
                v6 = p[5 * 8 + col];
                t = (v0 - v1 + 1) >> 1;
                v0 = (v0 + v1 + 1) >> 1;
                v1 = t;
                t = (v2 * dctSin6 + v3 * dctCos6 + 2048) >> 12;
                v2 = (v2 * dctCos6 - v3 * dctSin6 + 2048) >> 12;
                v3 = t;
                t = (v4 - v6 + 1) >> 1;
                v4 = (v4 + v6 + 1) >> 1;
                v6 = t;
                t = (v7 + v5 + 1) >> 1;
                v5 = (v7 - v5 + 1) >> 1;
                v7 = t;
                t = (v0 - v3 + 1) >> 1;
                v0 = (v0 + v3 + 1) >> 1;
                v3 = t;
                t = (v1 - v2 + 1) >> 1;
                v1 = (v1 + v2 + 1) >> 1;
                v2 = t;
                t = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;
                v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;
                v7 = t;
                t = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;
                v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;
                v6 = t;
                p[0 * 8 + col] = v0 + v7;
                p[7 * 8 + col] = v0 - v7;
                p[1 * 8 + col] = v1 + v6;
                p[6 * 8 + col] = v1 - v6;
                p[2 * 8 + col] = v2 + v5;
                p[5 * 8 + col] = v2 - v5;
                p[3 * 8 + col] = v3 + v4;
                p[4 * 8 + col] = v3 - v4;
            }
            for (i = 0; i < 64; ++i) {
                var index = blockBufferOffset + i;
                var q = p[i];
                q = (q <= -2056) ? 0 : (q >= 2024) ? 255 : (q + 2056) >> 4;
                component.blockData[index] = q;
            }
        }
        function buildComponentData(frame, component) {
            var lines = [];
            var blocksPerLine = component.blocksPerLine;
            var blocksPerColumn = component.blocksPerColumn;
            var samplesPerLine = blocksPerLine << 3;
            var computationBuffer = new Int32Array(64);
            var i, j, ll = 0;
            for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {
                for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {
                    var offset = getBlockBufferOffset(component, blockRow, blockCol);
                    quantizeAndInverse(component, offset, computationBuffer);
                }
            }
            return component.blockData;
        }
        function clamp0to255(a) {
            return a <= 0 ? 0 : a >= 255 ? 255 : a;
        }
        var JpegImage = (function () {
            function JpegImage() {
            }
            JpegImage.prototype.parse = function (data) {
                function readUint16() {
                    var value = (data[offset] << 8) | data[offset + 1];
                    offset += 2;
                    return value;
                }
                function readDataBlock() {
                    var length = readUint16();
                    var array = data.subarray(offset, offset + length - 2);
                    offset += array.length;
                    return array;
                }
                function prepareComponents(frame) {
                    var mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / frame.maxH);
                    var mcusPerColumn = Math.ceil(frame.scanLines / 8 / frame.maxV);
                    for (var i = 0; i < frame.components.length; i++) {
                        component = frame.components[i];
                        var blocksPerLine = Math.ceil(Math.ceil(frame.samplesPerLine / 8) * component.h / frame.maxH);
                        var blocksPerColumn = Math.ceil(Math.ceil(frame.scanLines / 8) * component.v / frame.maxV);
                        var blocksPerLineForMcu = mcusPerLine * component.h;
                        var blocksPerColumnForMcu = mcusPerColumn * component.v;
                        var blocksBufferSize = 64 * blocksPerColumnForMcu * (blocksPerLineForMcu + 1);
                        component.blockData = new Int16Array(blocksBufferSize);
                        component.blocksPerLine = blocksPerLine;
                        component.blocksPerColumn = blocksPerColumn;
                    }
                    frame.mcusPerLine = mcusPerLine;
                    frame.mcusPerColumn = mcusPerColumn;
                }
                var offset = 0, length = data.length;
                var jfif = null;
                var adobe = null;
                var pixels = null;
                var frame, resetInterval;
                var quantizationTables = [];
                var huffmanTablesAC = [], huffmanTablesDC = [];
                var fileMarker = readUint16();
                if (fileMarker != 0xFFD8) {
                    throw 'SOI not found';
                }
                fileMarker = readUint16();
                while (fileMarker != 0xFFD9) {
                    var i, j, l;
                    switch (fileMarker) {
                        case 0xFFE0:
                        case 0xFFE1:
                        case 0xFFE2:
                        case 0xFFE3:
                        case 0xFFE4:
                        case 0xFFE5:
                        case 0xFFE6:
                        case 0xFFE7:
                        case 0xFFE8:
                        case 0xFFE9:
                        case 0xFFEA:
                        case 0xFFEB:
                        case 0xFFEC:
                        case 0xFFED:
                        case 0xFFEE:
                        case 0xFFEF:
                        case 0xFFFE:
                            var appData = readDataBlock();
                            if (fileMarker === 0xFFE0) {
                                if (appData[0] === 0x4A && appData[1] === 0x46 && appData[2] === 0x49 && appData[3] === 0x46 && appData[4] === 0) {
                                    jfif = {
                                        version: { major: appData[5], minor: appData[6] },
                                        densityUnits: appData[7],
                                        xDensity: (appData[8] << 8) | appData[9],
                                        yDensity: (appData[10] << 8) | appData[11],
                                        thumbWidth: appData[12],
                                        thumbHeight: appData[13],
                                        thumbData: appData.subarray(14, 14 + 3 * appData[12] * appData[13])
                                    };
                                }
                            }
                            if (fileMarker === 0xFFEE) {
                                if (appData[0] === 0x41 && appData[1] === 0x64 && appData[2] === 0x6F && appData[3] === 0x62 && appData[4] === 0x65 && appData[5] === 0) {
                                    adobe = {
                                        version: appData[6],
                                        flags0: (appData[7] << 8) | appData[8],
                                        flags1: (appData[9] << 8) | appData[10],
                                        transformCode: appData[11]
                                    };
                                }
                            }
                            break;
                        case 0xFFDB:
                            var quantizationTablesLength = readUint16();
                            var quantizationTablesEnd = quantizationTablesLength + offset - 2;
                            var z;
                            while (offset < quantizationTablesEnd) {
                                var quantizationTableSpec = data[offset++];
                                var tableData = new Int32Array(64);
                                if ((quantizationTableSpec >> 4) === 0) {
                                    for (j = 0; j < 64; j++) {
                                        z = dctZigZag[j];
                                        tableData[z] = data[offset++];
                                    }
                                }
                                else if ((quantizationTableSpec >> 4) === 1) {
                                    for (j = 0; j < 64; j++) {
                                        z = dctZigZag[j];
                                        tableData[z] = readUint16();
                                    }
                                }
                                else {
                                    throw 'DQT: invalid table spec';
                                }
                                quantizationTables[quantizationTableSpec & 15] = tableData;
                            }
                            break;
                        case 0xFFC0:
                        case 0xFFC1:
                        case 0xFFC2:
                            if (frame) {
                                throw 'Only single frame JPEGs supported';
                            }
                            readUint16();
                            frame = {};
                            frame.extended = (fileMarker === 0xFFC1);
                            frame.progressive = (fileMarker === 0xFFC2);
                            frame.precision = data[offset++];
                            frame.scanLines = readUint16();
                            frame.samplesPerLine = readUint16();
                            frame.components = [];
                            frame.componentIds = {};
                            var componentsCount = data[offset++], componentId;
                            var maxH = 0, maxV = 0;
                            for (i = 0; i < componentsCount; i++) {
                                componentId = data[offset];
                                var h = data[offset + 1] >> 4;
                                var v = data[offset + 1] & 15;
                                if (maxH < h) {
                                    maxH = h;
                                }
                                if (maxV < v) {
                                    maxV = v;
                                }
                                var qId = data[offset + 2];
                                l = frame.components.push({
                                    h: h,
                                    v: v,
                                    quantizationTable: quantizationTables[qId]
                                });
                                frame.componentIds[componentId] = l - 1;
                                offset += 3;
                            }
                            frame.maxH = maxH;
                            frame.maxV = maxV;
                            prepareComponents(frame);
                            break;
                        case 0xFFC4:
                            var huffmanLength = readUint16();
                            for (i = 2; i < huffmanLength;) {
                                var huffmanTableSpec = data[offset++];
                                var codeLengths = new Uint8Array(16);
                                var codeLengthSum = 0;
                                for (j = 0; j < 16; j++, offset++) {
                                    codeLengthSum += (codeLengths[j] = data[offset]);
                                }
                                var huffmanValues = new Uint8Array(codeLengthSum);
                                for (j = 0; j < codeLengthSum; j++, offset++) {
                                    huffmanValues[j] = data[offset];
                                }
                                i += 17 + codeLengthSum;
                                ((huffmanTableSpec >> 4) === 0 ? huffmanTablesDC : huffmanTablesAC)[huffmanTableSpec & 15] = buildHuffmanTable(codeLengths, huffmanValues);
                            }
                            break;
                        case 0xFFDD:
                            readUint16();
                            resetInterval = readUint16();
                            break;
                        case 0xFFDA:
                            var scanLength = readUint16();
                            var selectorsCount = data[offset++];
                            var components = [], component;
                            for (i = 0; i < selectorsCount; i++) {
                                var componentIndex = frame.componentIds[data[offset++]];
                                component = frame.components[componentIndex];
                                var tableSpec = data[offset++];
                                component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];
                                component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];
                                components.push(component);
                            }
                            var spectralStart = data[offset++];
                            var spectralEnd = data[offset++];
                            var successiveApproximation = data[offset++];
                            var processed = decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successiveApproximation >> 4, successiveApproximation & 15);
                            offset += processed;
                            break;
                        default:
                            if (data[offset - 3] == 0xFF && data[offset - 2] >= 0xC0 && data[offset - 2] <= 0xFE) {
                                offset -= 3;
                                break;
                            }
                            throw 'unknown JPEG marker ' + fileMarker.toString(16);
                    }
                    fileMarker = readUint16();
                }
                this.width = frame.samplesPerLine;
                this.height = frame.scanLines;
                this.jfif = jfif;
                this.adobe = adobe;
                this.components = [];
                for (i = 0; i < frame.components.length; i++) {
                    component = frame.components[i];
                    this.components.push({
                        output: buildComponentData(frame, component),
                        scaleX: component.h / frame.maxH,
                        scaleY: component.v / frame.maxV,
                        blocksPerLine: component.blocksPerLine,
                        blocksPerColumn: component.blocksPerColumn
                    });
                }
                this.numComponents = this.components.length;
            };
            JpegImage.prototype._getLinearizedBlockData = function (width, height) {
                var scaleX = this.width / width, scaleY = this.height / height;
                var component, componentScaleX, componentScaleY, blocksPerScanline;
                var x, y, i, j, k;
                var index;
                var offset = 0;
                var output;
                var numComponents = this.components.length;
                var dataLength = width * height * numComponents;
                var data = new Uint8Array(dataLength);
                var xScaleBlockOffset = new Uint32Array(width);
                var mask3LSB = 0xfffffff8;
                for (i = 0; i < numComponents; i++) {
                    component = this.components[i];
                    componentScaleX = component.scaleX * scaleX;
                    componentScaleY = component.scaleY * scaleY;
                    offset = i;
                    output = component.output;
                    blocksPerScanline = (component.blocksPerLine + 1) << 3;
                    for (x = 0; x < width; x++) {
                        j = 0 | (x * componentScaleX);
                        xScaleBlockOffset[x] = ((j & mask3LSB) << 3) | (j & 7);
                    }
                    for (y = 0; y < height; y++) {
                        j = 0 | (y * componentScaleY);
                        index = blocksPerScanline * (j & mask3LSB) | ((j & 7) << 3);
                        for (x = 0; x < width; x++) {
                            data[offset] = output[index + xScaleBlockOffset[x]];
                            offset += numComponents;
                        }
                    }
                }
                var transform = this.decodeTransform;
                if (transform) {
                    for (i = 0; i < dataLength;) {
                        for (j = 0, k = 0; j < numComponents; j++, i++, k += 2) {
                            data[i] = ((data[i] * transform[k]) >> 8) + transform[k + 1];
                        }
                    }
                }
                return data;
            };
            JpegImage.prototype._isColorConversionNeeded = function () {
                if (this.adobe && this.adobe.transformCode) {
                    return true;
                }
                else if (this.numComponents == 3) {
                    return true;
                }
                else {
                    return false;
                }
            };
            JpegImage.prototype._convertYccToRgb = function (data) {
                var Y, Cb, Cr;
                for (var i = 0, length = data.length; i < length; i += 3) {
                    Y = data[i];
                    Cb = data[i + 1];
                    Cr = data[i + 2];
                    data[i] = clamp0to255(Y - 179.456 + 1.402 * Cr);
                    data[i + 1] = clamp0to255(Y + 135.459 - 0.344 * Cb - 0.714 * Cr);
                    data[i + 2] = clamp0to255(Y - 226.816 + 1.772 * Cb);
                }
                return data;
            };
            JpegImage.prototype._convertYcckToRgb = function (data) {
                var Y, Cb, Cr, k, CbCb, CbCr, CbY, Cbk, CrCr, Crk, CrY, YY, Yk, kk;
                var offset = 0;
                for (var i = 0, length = data.length; i < length; i += 4) {
                    Y = data[i];
                    Cb = data[i + 1];
                    Cr = data[i + 2];
                    k = data[i + 3];
                    CbCb = Cb * Cb;
                    CbCr = Cb * Cr;
                    CbY = Cb * Y;
                    Cbk = Cb * k;
                    CrCr = Cr * Cr;
                    Crk = Cr * k;
                    CrY = Cr * Y;
                    YY = Y * Y;
                    Yk = Y * k;
                    kk = k * k;
                    var r = -122.67195406894 - 6.60635669420364e-5 * CbCb + 0.000437130475926232 * CbCr - 5.4080610064599e-5 * CbY + 0.00048449797120281 * Cbk - 0.154362151871126 * Cb - 0.000957964378445773 * CrCr + 0.000817076911346625 * CrY - 0.00477271405408747 * Crk + 1.53380253221734 * Cr + 0.000961250184130688 * YY - 0.00266257332283933 * Yk + 0.48357088451265 * Y - 0.000336197177618394 * kk + 0.484791561490776 * k;
                    var g = 107.268039397724 + 2.19927104525741e-5 * CbCb - 0.000640992018297945 * CbCr + 0.000659397001245577 * CbY + 0.000426105652938837 * Cbk - 0.176491792462875 * Cb - 0.000778269941513683 * CrCr + 0.00130872261408275 * CrY + 0.000770482631801132 * Crk - 0.151051492775562 * Cr + 0.00126935368114843 * YY - 0.00265090189010898 * Yk + 0.25802910206845 * Y - 0.000318913117588328 * kk - 0.213742400323665 * k;
                    var b = -20.810012546947 - 0.000570115196973677 * CbCb - 2.63409051004589e-5 * CbCr + 0.0020741088115012 * CbY - 0.00288260236853442 * Cbk + 0.814272968359295 * Cb - 1.53496057440975e-5 * CrCr - 0.000132689043961446 * CrY + 0.000560833691242812 * Crk - 0.195152027534049 * Cr + 0.00174418132927582 * YY - 0.00255243321439347 * Yk + 0.116935020465145 * Y - 0.000343531996510555 * kk + 0.24165260232407 * k;
                    data[offset++] = clamp0to255(r);
                    data[offset++] = clamp0to255(g);
                    data[offset++] = clamp0to255(b);
                }
                return data;
            };
            JpegImage.prototype._convertYcckToCmyk = function (data) {
                var Y, Cb, Cr;
                for (var i = 0, length = data.length; i < length; i += 4) {
                    Y = data[i];
                    Cb = data[i + 1];
                    Cr = data[i + 2];
                    data[i] = clamp0to255(434.456 - Y - 1.402 * Cr);
                    data[i + 1] = clamp0to255(119.541 - Y + 0.344 * Cb + 0.714 * Cr);
                    data[i + 2] = clamp0to255(481.816 - Y - 1.772 * Cb);
                }
                return data;
            };
            JpegImage.prototype._convertCmykToRgb = function (data) {
                var c, m, y, k;
                var offset = 0;
                var min = -255 * 255 * 255;
                var scale = 1 / 255 / 255;
                for (var i = 0, length = data.length; i < length; i += 4) {
                    c = data[i];
                    m = data[i + 1];
                    y = data[i + 2];
                    k = data[i + 3];
                    var r = c * (-4.387332384609988 * c + 54.48615194189176 * m + 18.82290502165302 * y + 212.25662451639585 * k - 72734.4411664936) + m * (1.7149763477362134 * m - 5.6096736904047315 * y - 17.873870861415444 * k - 1401.7366389350734) + y * (-2.5217340131683033 * y - 21.248923337353073 * k + 4465.541406466231) - k * (21.86122147463605 * k + 48317.86113160301);
                    var g = c * (8.841041422036149 * c + 60.118027045597366 * m + 6.871425592049007 * y + 31.159100130055922 * k - 20220.756542821975) + m * (-15.310361306967817 * m + 17.575251261109482 * y + 131.35250912493976 * k - 48691.05921601825) + y * (4.444339102852739 * y + 9.8632861493405 * k - 6341.191035517494) - k * (20.737325471181034 * k + 47890.15695978492);
                    var b = c * (0.8842522430003296 * c + 8.078677503112928 * m + 30.89978309703729 * y - 0.23883238689178934 * k - 3616.812083916688) + m * (10.49593273432072 * m + 63.02378494754052 * y + 50.606957656360734 * k - 28620.90484698408) + y * (0.03296041114873217 * y + 115.60384449646641 * k - 49363.43385999684) - k * (22.33816807309886 * k + 45932.16563550634);
                    data[offset++] = r >= 0 ? 255 : r <= min ? 0 : 255 + r * scale | 0;
                    data[offset++] = g >= 0 ? 255 : g <= min ? 0 : 255 + g * scale | 0;
                    data[offset++] = b >= 0 ? 255 : b <= min ? 0 : 255 + b * scale | 0;
                }
                return data;
            };
            JpegImage.prototype.getData = function (width, height, forceRGBoutput) {
                if (this.numComponents > 4) {
                    throw 'Unsupported color mode';
                }
                var data = this._getLinearizedBlockData(width, height);
                if (this.numComponents === 3) {
                    return this._convertYccToRgb(data);
                }
                else if (this.numComponents === 4) {
                    if (this._isColorConversionNeeded()) {
                        if (forceRGBoutput) {
                            return this._convertYcckToRgb(data);
                        }
                        else {
                            return this._convertYcckToCmyk(data);
                        }
                    }
                    else {
                        return this._convertCmykToRgb(data);
                    }
                }
                return data;
            };
            JpegImage.prototype.copyToImageData = function (imageData) {
                var width = imageData.width, height = imageData.height;
                var imageDataBytes = width * height * 4;
                var imageDataArray = imageData.data;
                var data = this.getData(width, height, true);
                var i = 0, j = 0;
                var Y, K, C, M, R, G, B;
                switch (this.components.length) {
                    case 1:
                        while (j < imageDataBytes) {
                            Y = data[i++];
                            imageDataArray[j++] = Y;
                            imageDataArray[j++] = Y;
                            imageDataArray[j++] = Y;
                            imageDataArray[j++] = 255;
                        }
                        break;
                    case 3:
                        while (j < imageDataBytes) {
                            R = data[i++];
                            G = data[i++];
                            B = data[i++];
                            imageDataArray[j++] = R;
                            imageDataArray[j++] = G;
                            imageDataArray[j++] = B;
                            imageDataArray[j++] = 255;
                        }
                        break;
                    case 4:
                        while (j < imageDataBytes) {
                            C = data[i++];
                            M = data[i++];
                            Y = data[i++];
                            K = data[i++];
                            R = 255 - clamp0to255(C * (1 - K / 255) + K);
                            G = 255 - clamp0to255(M * (1 - K / 255) + K);
                            B = 255 - clamp0to255(Y * (1 - K / 255) + K);
                            imageDataArray[j++] = R;
                            imageDataArray[j++] = G;
                            imageDataArray[j++] = B;
                            imageDataArray[j++] = 255;
                        }
                        break;
                    default:
                        throw 'Unsupported color mode';
                }
            };
            return JpegImage;
        })();
        JPEG.JpegImage = JpegImage;
    })(JPEG = Shumway.JPEG || (Shumway.JPEG = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var SWF;
    (function (SWF) {
        SWF.StreamNoDataError = {};
        function Stream_align() {
            this.bitBuffer = this.bitLength = 0;
        }
        function Stream_ensure(size) {
            if (this.pos + size > this.end) {
                throw SWF.StreamNoDataError;
            }
        }
        function Stream_remaining() {
            return this.end - this.pos;
        }
        function Stream_substream(begin, end) {
            var stream = new Stream(this.bytes);
            stream.pos = begin;
            stream.end = end;
            return stream;
        }
        function Stream_push(data) {
            var bytes = this.bytes;
            var newBytesLength = this.end + data.length;
            if (newBytesLength > bytes.length) {
                throw 'stream buffer overfow';
            }
            bytes.set(data, this.end);
            this.end = newBytesLength;
        }
        var Stream = (function () {
            function Stream(buffer, offset, length, maxLength) {
                if (offset === undefined)
                    offset = 0;
                if (buffer.buffer instanceof ArrayBuffer) {
                    offset += buffer.byteOffset;
                    buffer = buffer.buffer;
                }
                if (length === undefined)
                    length = buffer.byteLength - offset;
                if (maxLength === undefined)
                    maxLength = length;
                var bytes = new Uint8Array(buffer, offset, maxLength);
                var stream = (new DataView(buffer, offset, maxLength));
                stream.bytes = bytes;
                stream.pos = 0;
                stream.end = length;
                stream.bitBuffer = 0;
                stream.bitLength = 0;
                stream.align = Stream_align;
                stream.ensure = Stream_ensure;
                stream.remaining = Stream_remaining;
                stream.substream = Stream_substream;
                stream.push = Stream_push;
                return stream;
            }
            return Stream;
        })();
        SWF.Stream = Stream;
    })(SWF = Shumway.SWF || (Shumway.SWF = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var SWF;
    (function (SWF) {
        SWF.MP3WORKER_PATH = '../../lib/mp3/mp3worker.js';
        var mp3Worker = null;
        function ensureMP3Worker() {
            if (!mp3Worker) {
                mp3Worker = new Worker(SWF.MP3WORKER_PATH);
                mp3Worker.addEventListener('message', function (e) {
                    if (e.data.action === 'console') {
                        console[e.data.method].call(console, e.data.message);
                    }
                });
            }
            return mp3Worker;
        }
        var nextSessionId = 0;
        var MP3DecoderSession = (function () {
            function MP3DecoderSession() {
                this._sessionId = (nextSessionId++);
                this._onworkermessageBound = this.onworkermessage.bind(this);
                this._worker = ensureMP3Worker();
                this._worker.addEventListener('message', this._onworkermessageBound, false);
                this._worker.postMessage({
                    sessionId: this._sessionId,
                    action: 'create'
                });
            }
            MP3DecoderSession.prototype.onworkermessage = function (e) {
                if (e.data.sessionId !== this._sessionId)
                    return;
                var action = e.data.action;
                switch (action) {
                    case 'closed':
                        if (this.onclosed) {
                            this.onclosed();
                        }
                        this._worker.removeEventListener('message', this._onworkermessageBound, false);
                        this._worker = null;
                        break;
                    case 'frame':
                        this.onframedata(e.data.frameData, e.data.channels, e.data.sampleRate, e.data.bitRate);
                        break;
                    case 'id3':
                        if (this.onid3tag) {
                            this.onid3tag(e.data.id3Data);
                        }
                        break;
                    case 'error':
                        if (this.onerror) {
                            this.onerror(e.data.message);
                        }
                        break;
                }
            };
            MP3DecoderSession.prototype.pushAsync = function (data) {
                this._worker.postMessage({
                    sessionId: this._sessionId,
                    action: 'decode',
                    data: data
                });
            };
            MP3DecoderSession.prototype.close = function () {
                this._worker.postMessage({
                    sessionId: this._sessionId,
                    action: 'close'
                });
            };
            MP3DecoderSession.processAll = function (data) {
                var currentBufferSize = 8000;
                var currentBuffer = new Float32Array(currentBufferSize);
                var bufferPosition = 0;
                var id3Tags = [];
                var sessionAborted = false;
                var promiseWrapper = new Shumway.PromiseWrapper();
                var session = new MP3DecoderSession();
                session.onframedata = function (frameData, channels, sampleRate, bitRate) {
                    var needed = frameData.length + bufferPosition;
                    if (needed > currentBufferSize) {
                        do {
                            currentBufferSize *= 2;
                        } while (needed > currentBufferSize);
                        var newBuffer = new Float32Array(currentBufferSize);
                        newBuffer.set(currentBuffer);
                        currentBuffer = newBuffer;
                    }
                    currentBuffer.set(frameData, bufferPosition);
                    bufferPosition += frameData.length;
                };
                session.onid3tag = function (tagData) {
                    id3Tags.push(tagData);
                };
                session.onclosed = function () {
                    if (sessionAborted)
                        return;
                    promiseWrapper.resolve({ data: currentBuffer.subarray(0, bufferPosition), id3Tags: id3Tags });
                };
                session.onerror = function (error) {
                    if (sessionAborted)
                        return;
                    sessionAborted = true;
                    promiseWrapper.reject(error);
                };
                session.pushAsync(data);
                session.close();
                return promiseWrapper.promise;
            };
            return MP3DecoderSession;
        })();
        SWF.MP3DecoderSession = MP3DecoderSession;
    })(SWF = Shumway.SWF || (Shumway.SWF = {}));
})(Shumway || (Shumway = {}));
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Shumway;
(function (Shumway) {
    var SWF;
    (function (SWF) {
        var assert = Shumway.Debug.assert;
        var Parser = Shumway.SWF.Parser;
        var Stream = SWF.Stream;
        var Inflate = Shumway.ArrayUtilities.Inflate;
        var SWFTag = Parser.SwfTag;
        var DefinitionTags = Parser.DefinitionTags;
        var ImageDefinitionTags = Parser.ImageDefinitionTags;
        var FontDefinitionTags = Parser.FontDefinitionTags;
        var ControlTags = Parser.ControlTags;
        var SWFFile = (function () {
            function SWFFile(initialBytes, length) {
                release || assert(initialBytes[0] === 67 || initialBytes[0] === 70, "Unsupported compression format: " + (initialBytes[0] === 90 ? "LZMA" : initialBytes[0] + ''));
                release || assert(initialBytes[1] === 87);
                release || assert(initialBytes[2] === 83);
                release || assert(initialBytes.length >= 30, "At least the header must be complete here.");
                if (!release && SWF.traceLevel.value > 0) {
                    console.log('Create SWFFile');
                }
                this.isCompressed = false;
                this.swfVersion = 0;
                this.useAVM1 = true;
                this.backgroundColor = 0xffffffff;
                this.bounds = null;
                this.frameRate = 0;
                this.frameCount = 0;
                this.attributes = null;
                this.sceneAndFrameLabelData = null;
                this.bytesLoaded = 0;
                this.bytesTotal = length;
                this.pendingUpdateDelays = 0;
                this.framesLoaded = 0;
                this.frames = [];
                this.abcBlocks = [];
                this.dictionary = [];
                this.fonts = [];
                this.symbolClassesMap = [];
                this.symbolClassesList = [];
                this.eagerlyParsedSymbolsMap = [];
                this.eagerlyParsedSymbolsList = [];
                this._jpegTables = null;
                this._currentFrameLabel = null;
                this._currentSoundStreamHead = null;
                this._currentSoundStreamBlock = null;
                this._currentControlTags = null;
                this._currentActionBlocks = null;
                this._currentInitActionBlocks = null;
                this._currentExports = null;
                this._endTagEncountered = false;
                this.readHeaderAndInitialize(initialBytes);
            }
            SWFFile.prototype.appendLoadedData = function (bytes) {
                this.bytesLoaded += bytes.length;
                release || assert(this.bytesLoaded <= this.bytesTotal);
                if (this._endTagEncountered) {
                    return;
                }
                if (this.isCompressed) {
                    this._decompressor.push(bytes);
                }
                else {
                    this.processDecompressedData(bytes);
                }
                this.scanLoadedData();
            };
            SWFFile.prototype.getSymbol = function (id) {
                if (this.eagerlyParsedSymbolsMap[id]) {
                    return this.eagerlyParsedSymbolsMap[id];
                }
                var unparsed = this.dictionary[id];
                if (!unparsed) {
                    return null;
                }
                var symbol;
                if (unparsed.tagCode === 39 /* CODE_DEFINE_SPRITE */) {
                    symbol = this.parseSpriteTimeline(unparsed);
                }
                else {
                    symbol = this.getParsedTag(unparsed);
                }
                symbol.className = this.symbolClassesMap[id] || null;
                return symbol;
            };
            SWFFile.prototype.getParsedTag = function (unparsed) {
                SWF.enterTimeline('Parse tag ' + SWFTag[unparsed.tagCode]);
                this._dataStream.align();
                this._dataStream.pos = unparsed.byteOffset;
                var tag = { code: unparsed.tagCode };
                var handler = Parser.LowLevel.tagHandlers[unparsed.tagCode];
                release || Shumway.Debug.assert(handler, 'handler shall exists here');
                var tagEnd = unparsed.byteOffset + unparsed.byteLength;
                handler(this.data, this._dataStream, tag, this.swfVersion, unparsed.tagCode, tagEnd);
                var finalPos = this._dataStream.pos;
                release || assert(finalPos <= tagEnd);
                if (finalPos < tagEnd) {
                    var consumedBytes = finalPos - unparsed.byteOffset;
                    Shumway.Debug.warning('Scanning ' + SWFTag[unparsed.tagCode] + ' at offset ' + unparsed.byteOffset + ' consumed ' + consumedBytes + ' of ' + unparsed.byteLength + ' bytes. (' + (tagEnd - finalPos) + ' left)');
                    this._dataStream.pos = tagEnd;
                }
                var symbol = defineSymbol(tag, this.dictionary);
                SWF.leaveTimeline();
                return symbol;
            };
            SWFFile.prototype.readHeaderAndInitialize = function (initialBytes) {
                SWF.enterTimeline('Initialize SWFFile');
                this.isCompressed = initialBytes[0] === 67;
                this.swfVersion = initialBytes[3];
                this._loadStarted = Date.now();
                this._uncompressedLength = readSWFLength(initialBytes);
                this.bytesLoaded = initialBytes.length;
                this.data = new Uint8Array(this._uncompressedLength);
                this._dataStream = new Stream(this.data.buffer);
                this._dataStream.pos = 8;
                this._dataView = this._dataStream;
                if (this.isCompressed) {
                    this.data.set(initialBytes.subarray(0, 8));
                    this._uncompressedLoadedLength = 8;
                    this._decompressor = Inflate.create(true);
                    var self = this;
                    this._decompressor.onData = function (data) {
                        self.data.set(data, self._uncompressedLoadedLength);
                        self._uncompressedLoadedLength += data.length;
                        self._decompressor.onData = self.processDecompressedData.bind(self);
                        self.parseHeaderContents();
                    };
                    this._decompressor.push(initialBytes.subarray(8));
                }
                else {
                    this.data.set(initialBytes);
                    this._uncompressedLoadedLength = initialBytes.length;
                    this._decompressor = null;
                    this.parseHeaderContents();
                }
                SWF.leaveTimeline();
                this._lastScanPosition = this._dataStream.pos;
                this.scanLoadedData();
            };
            SWFFile.prototype.parseHeaderContents = function () {
                var obj = Parser.LowLevel.readHeader(this.data, this._dataStream);
                this.bounds = obj.bounds;
                this.frameRate = obj.frameRate;
                this.frameCount = obj.frameCount;
            };
            SWFFile.prototype.processDecompressedData = function (data) {
                this.data.set(data, this._uncompressedLoadedLength);
                this._uncompressedLoadedLength += data.length;
                if (this._uncompressedLoadedLength === this._uncompressedLength) {
                    this._decompressor.close();
                    this._decompressor = null;
                }
            };
            SWFFile.prototype.scanLoadedData = function () {
                SWF.enterTimeline('Scan loaded SWF file tags');
                this._dataStream.pos = this._lastScanPosition;
                this.scanTagsToOffset(this._uncompressedLoadedLength, true);
                this._lastScanPosition = this._dataStream.pos;
                SWF.leaveTimeline();
            };
            SWFFile.prototype.scanTagsToOffset = function (endOffset, rootTimelineMode) {
                var tempTag = new UnparsedTag(0, 0, 0);
                var pos;
                while ((pos = this._dataStream.pos) < endOffset - 1) {
                    this.parseNextTagHeader(tempTag);
                    if (tempTag.tagCode === 0 /* CODE_END */) {
                        if (rootTimelineMode) {
                            this._endTagEncountered = true;
                            console.log('SWF load time: ' + ((Date.now() - this._loadStarted) * 0.001).toFixed(4) + 'sec');
                        }
                        return;
                    }
                    var tagEnd = tempTag.byteOffset + tempTag.byteLength;
                    if (tagEnd > endOffset) {
                        this._dataStream.pos = pos;
                        return;
                    }
                    this.scanTag(tempTag, rootTimelineMode);
                    release || assert(this._dataStream.pos <= tagEnd);
                    if (this._dataStream.pos < tagEnd) {
                        this.emitTagSlopWarning(tempTag, tagEnd);
                    }
                }
            };
            SWFFile.prototype.parseNextTagHeader = function (target) {
                var position = this._dataStream.pos;
                var tagCodeAndLength = this._dataView.getUint16(position, true);
                position += 2;
                target.tagCode = tagCodeAndLength >> 6;
                var tagLength = tagCodeAndLength & 0x3f;
                var extendedLength = tagLength === 0x3f;
                if (extendedLength) {
                    if (position + 4 > this._uncompressedLoadedLength) {
                        return;
                    }
                    tagLength = this._dataView.getUint32(position, true);
                    position += 4;
                }
                this._dataStream.pos = position;
                target.byteOffset = position;
                target.byteLength = tagLength;
            };
            SWFFile.prototype.scanTag = function (tag, rootTimelineMode) {
                var stream = this._dataStream;
                var byteOffset = stream.pos;
                release || assert(byteOffset === tag.byteOffset);
                var tagCode = tag.tagCode;
                var tagLength = tag.byteLength;
                if (!release && SWF.traceLevel.value > 1) {
                    console.info("Scanning tag " + SWFTag[tagCode] + " (start: " + byteOffset + ", end: " + (byteOffset + tagLength) + ")");
                }
                if (tagCode === 39 /* CODE_DEFINE_SPRITE */) {
                    this.addLazySymbol(tagCode, byteOffset, tagLength);
                    var spriteTagEnd = byteOffset + tagLength;
                    stream.pos += 4;
                    this.scanTagsToOffset(spriteTagEnd, false);
                    if (this._dataStream.pos < tagEnd) {
                        this.emitTagSlopWarning(tag, tagEnd);
                        stream.pos = spriteTagEnd;
                    }
                    return;
                }
                if (ImageDefinitionTags[tagCode]) {
                    var unparsed = this.addLazySymbol(tagCode, byteOffset, tagLength);
                    this.decodeEmbeddedImage(unparsed);
                    return;
                }
                if (FontDefinitionTags[tagCode]) {
                    var unparsed = this.addLazySymbol(tagCode, byteOffset, tagLength);
                    this.registerEmbeddedFont(unparsed);
                    return;
                }
                if (DefinitionTags[tagCode]) {
                    this.addLazySymbol(tagCode, byteOffset, tagLength);
                    this.jumpToNextTag(tagLength);
                    return;
                }
                if (!rootTimelineMode && !(tagCode === 76 /* CODE_SYMBOL_CLASS */ || tagCode === 56 /* CODE_EXPORT_ASSETS */)) {
                    this.jumpToNextTag(tagLength);
                    return;
                }
                if (ControlTags[tagCode]) {
                    this.addControlTag(tagCode, byteOffset, tagLength);
                    return;
                }
                switch (tagCode) {
                    case 69 /* CODE_FILE_ATTRIBUTES */:
                        this.setFileAttributes(tagLength);
                        break;
                    case 86 /* CODE_DEFINE_SCENE_AND_FRAME_LABEL_DATA */:
                        this.setSceneAndFrameLabelData(tagLength);
                        break;
                    case 9 /* CODE_SET_BACKGROUND_COLOR */:
                        this.backgroundColor = Parser.LowLevel.rgb(this.data, this._dataStream);
                        break;
                    case 8 /* CODE_JPEG_TABLES */:
                        if (!this._jpegTables) {
                            this._jpegTables = tagLength === 0 ? new Uint8Array(0) : this.data.subarray(stream.pos, stream.pos + tagLength - 2);
                        }
                        this.jumpToNextTag(tagLength);
                        break;
                    case 82 /* CODE_DO_ABC */:
                    case 72 /* CODE_DO_ABC_DEFINE */:
                        if (!this.useAVM1) {
                            var tagEnd = byteOffset + tagLength;
                            var abcBlock = new ABCBlock();
                            if (tagCode === 82 /* CODE_DO_ABC */) {
                                abcBlock.flags = Parser.readUi32(this.data, stream);
                                abcBlock.name = Parser.readString(this.data, stream, 0);
                            }
                            else {
                                abcBlock.flags = 0;
                                abcBlock.name = "";
                            }
                            abcBlock.data = this.data.subarray(stream.pos, tagEnd);
                            this.abcBlocks.push(abcBlock);
                            stream.pos = tagEnd;
                        }
                        else {
                            this.jumpToNextTag(tagLength);
                        }
                        break;
                    case 76 /* CODE_SYMBOL_CLASS */:
                        var tagEnd = byteOffset + tagLength;
                        var symbolCount = Parser.readUi16(this.data, stream);
                        while (symbolCount--) {
                            var symbolId = Parser.readUi16(this.data, stream);
                            var symbolClassName = Parser.readString(this.data, stream, 0);
                            if (!release && SWF.traceLevel.value > 0) {
                                console.log('Registering symbol class ' + symbolClassName + ' to symbol ' + symbolId);
                            }
                            this.symbolClassesMap[symbolId] = symbolClassName;
                            this.symbolClassesList.push({ id: symbolId, className: symbolClassName });
                        }
                        stream.pos = tagEnd;
                        break;
                    case 59 /* CODE_DO_INIT_ACTION */:
                        if (this.useAVM1) {
                            var initActionBlocks = this._currentInitActionBlocks || (this._currentInitActionBlocks = []);
                            var spriteId = this._dataView.getUint16(stream.pos, true);
                            var actionsData = this.data.subarray(byteOffset + 2, byteOffset + tagLength);
                            initActionBlocks.push({ spriteId: spriteId, actionsData: actionsData });
                        }
                        this.jumpToNextTag(tagLength);
                        break;
                    case 12 /* CODE_DO_ACTION */:
                        if (this.useAVM1) {
                            var actionBlocks = this._currentActionBlocks || (this._currentActionBlocks = []);
                            actionBlocks.push(this.data.subarray(stream.pos, stream.pos + tagLength));
                        }
                        this.jumpToNextTag(tagLength);
                        break;
                    case 18 /* CODE_SOUND_STREAM_HEAD */:
                    case 45 /* CODE_SOUND_STREAM_HEAD2 */:
                        var soundStreamTag = Parser.LowLevel.soundStreamHead(this.data, this._dataStream);
                        this._currentSoundStreamHead = Parser.SoundStream.FromTag(soundStreamTag);
                        break;
                    case 19 /* CODE_SOUND_STREAM_BLOCK */:
                        this._currentSoundStreamBlock = this.data.subarray(stream.pos, stream.pos += tagLength);
                        break;
                    case 43 /* CODE_FRAME_LABEL */:
                        var tagEnd = stream.pos + tagLength;
                        this._currentFrameLabel = Parser.readString(this.data, stream, 0);
                        stream.pos = tagEnd;
                        break;
                    case 1 /* CODE_SHOW_FRAME */:
                        this.finishFrame();
                        break;
                    case 0 /* CODE_END */:
                        return;
                    case 56 /* CODE_EXPORT_ASSETS */:
                        var tagEnd = stream.pos + tagLength;
                        var exportsCount = Parser.readUi16(this.data, stream);
                        var exports = this._currentExports || (this._currentExports = []);
                        while (exportsCount--) {
                            var symbolId = Parser.readUi16(this.data, stream);
                            var className = Parser.readString(this.data, stream, 0);
                            if (stream.pos > tagEnd) {
                                stream.pos = tagEnd;
                                break;
                            }
                            exports.push(new SymbolExport(symbolId, className));
                        }
                        stream.pos = tagEnd;
                        break;
                    case 23 /* CODE_DEFINE_BUTTON_CXFORM */:
                    case 17 /* CODE_DEFINE_BUTTON_SOUND */:
                    case 13 /* CODE_DEFINE_FONT_INFO */:
                    case 62 /* CODE_DEFINE_FONT_INFO2 */:
                    case 78 /* CODE_DEFINE_SCALING_GRID */:
                    case 57 /* CODE_IMPORT_ASSETS */:
                    case 71 /* CODE_IMPORT_ASSETS2 */:
                        Shumway.Debug.warning('Unsupported tag encountered ' + tagCode + ': ' + SWFTag[tagCode]);
                        this.jumpToNextTag(tagLength);
                        break;
                    case 74 /* CODE_CSM_TEXT_SETTINGS */:
                    case 73 /* CODE_DEFINE_FONT_ALIGN_ZONES */:
                    case 65 /* CODE_SCRIPT_LIMITS */:
                    case 66 /* CODE_SET_TAB_INDEX */:
                        this.jumpToNextTag(tagLength);
                        break;
                    case 58 /* CODE_ENABLE_DEBUGGER */:
                    case 64 /* CODE_ENABLE_DEBUGGER2 */:
                    case 63 /* CODE_DEBUG_ID */:
                    case 88 /* CODE_DEFINE_FONT_NAME */:
                    case 41 /* CODE_PRODUCT_INFO */:
                    case 77 /* CODE_METADATA */:
                    case 24 /* CODE_PROTECT */:
                        this.jumpToNextTag(tagLength);
                        break;
                    case 51 /* CODE_CHARACTER_SET */:
                    case 44 /* CODE_DEFINE_BEHAVIOUR */:
                    case 50 /* CODE_DEFINE_COMMAND_OBJECT */:
                    case 53 /* CODE_DEFINE_FUNCTION */:
                    case 42 /* CODE_DEFINE_TEXT_FORMAT */:
                    case 38 /* CODE_DEFINE_VIDEO */:
                    case 52 /* CODE_EXTERNAL_FONT */:
                    case 3 /* CODE_FREE_CHARACTER */:
                    case 31 /* CODE_FREE_ALL */:
                    case 47 /* CODE_GENERATE_FRAME */:
                    case 16 /* CODE_STOP_SOUND */:
                    case 29 /* CODE_SYNC_FRAME */:
                        console.info("Ignored tag (these shouldn't occur) " + tagCode + ': ' + SWFTag[tagCode]);
                        this.jumpToNextTag(tagLength);
                        break;
                    default:
                        Shumway.Debug.warning('Tag not handled by the parser: ' + tagCode + ': ' + SWFTag[tagCode]);
                        this.jumpToNextTag(tagLength);
                }
            };
            SWFFile.prototype.parseSpriteTimeline = function (spriteTag) {
                SWF.enterTimeline("parseSpriteTimeline");
                var data = this.data;
                var stream = this._dataStream;
                var dataView = this._dataView;
                var timeline = {
                    id: spriteTag.id,
                    type: 'sprite',
                    frames: []
                };
                var spriteTagEnd = spriteTag.byteOffset + spriteTag.byteLength;
                var frames = timeline.frames;
                var label = null;
                var controlTags = [];
                var soundStreamHead = null;
                var soundStreamBlock = null;
                var actionBlocks = null;
                var initActionBlocks = null;
                stream.pos = spriteTag.byteOffset + 2;
                timeline.frameCount = dataView.getUint16(stream.pos, true);
                stream.pos += 2;
                var spriteContentTag = new UnparsedTag(0, 0, 0);
                while (stream.pos < spriteTagEnd) {
                    this.parseNextTagHeader(spriteContentTag);
                    var tagLength = spriteContentTag.byteLength;
                    var tagCode = spriteContentTag.tagCode;
                    if (stream.pos + tagLength > spriteTagEnd) {
                        Shumway.Debug.warning("DefineSprite child tags exceed DefineSprite tag length and are dropped");
                        break;
                    }
                    if (Parser.ControlTags[tagCode]) {
                        controlTags.push(new UnparsedTag(tagCode, stream.pos, tagLength));
                        stream.pos += tagLength;
                        continue;
                    }
                    switch (tagCode) {
                        case 12 /* CODE_DO_ACTION */:
                            if (this.useAVM1) {
                                if (!actionBlocks) {
                                    actionBlocks = [];
                                }
                                actionBlocks.push(data.subarray(stream.pos, stream.pos + tagLength));
                            }
                            break;
                        case 59 /* CODE_DO_INIT_ACTION */:
                            if (this.useAVM1) {
                                if (!initActionBlocks) {
                                    initActionBlocks = [];
                                }
                                var spriteId = dataView.getUint16(stream.pos, true);
                                stream.pos += 2;
                                var actionsData = data.subarray(stream.pos, stream.pos + tagLength);
                                initActionBlocks.push({ spriteId: spriteId, actionsData: actionsData });
                            }
                            break;
                        case 43 /* CODE_FRAME_LABEL */:
                            var tagEnd = stream.pos + tagLength;
                            label = Parser.readString(data, stream, 0);
                            stream.pos = tagEnd;
                            tagLength = 0;
                            break;
                        case 1 /* CODE_SHOW_FRAME */:
                            frames.push(new SWFFrame(controlTags, label, soundStreamHead, soundStreamBlock, actionBlocks, initActionBlocks, null));
                            label = null;
                            controlTags = [];
                            soundStreamHead = null;
                            soundStreamBlock = null;
                            actionBlocks = null;
                            initActionBlocks = null;
                            break;
                        case 0 /* CODE_END */:
                            stream.pos = spriteTagEnd;
                            tagLength = 0;
                            break;
                        default:
                    }
                    stream.pos += tagLength;
                    release || assert(stream.pos <= spriteTagEnd);
                }
                SWF.leaveTimeline();
                return timeline;
            };
            SWFFile.prototype.jumpToNextTag = function (currentTagLength) {
                this._dataStream.pos += currentTagLength;
            };
            SWFFile.prototype.emitTagSlopWarning = function (tag, tagEnd) {
                var consumedBytes = this._dataStream.pos - tag.byteOffset;
                Shumway.Debug.warning('Scanning ' + SWFTag[tag.tagCode] + ' at offset ' + tag.byteOffset + ' consumed ' + consumedBytes + ' of ' + tag.byteLength + ' bytes. (' + (tag.byteLength - consumedBytes) + ' left)');
                this._dataStream.pos = tagEnd;
            };
            SWFFile.prototype.finishFrame = function () {
                if (this.pendingUpdateDelays === 0) {
                    this.framesLoaded++;
                }
                this.frames.push(new SWFFrame(this._currentControlTags, this._currentFrameLabel, this._currentSoundStreamHead, this._currentSoundStreamBlock, this._currentActionBlocks, this._currentInitActionBlocks, this._currentExports));
                this._currentFrameLabel = null;
                this._currentControlTags = null;
                this._currentSoundStreamHead = null;
                this._currentSoundStreamBlock = null;
                this._currentActionBlocks = null;
                this._currentInitActionBlocks = null;
                this._currentExports = null;
            };
            SWFFile.prototype.setFileAttributes = function (tagLength) {
                if (this.attributes) {
                    this.jumpToNextTag(tagLength);
                }
                var bits = this.data[this._dataStream.pos];
                this._dataStream.pos += 4;
                this.attributes = {
                    network: bits & 0x1,
                    relativeUrls: bits & 0x2,
                    noCrossDomainCaching: bits & 0x4,
                    doAbc: bits & 0x8,
                    hasMetadata: bits & 0x10,
                    useGpu: bits & 0x20,
                    useDirectBlit: bits & 0x40
                };
                this.useAVM1 = !this.attributes.doAbc;
            };
            SWFFile.prototype.setSceneAndFrameLabelData = function (tagLength) {
                if (this.sceneAndFrameLabelData) {
                    this.jumpToNextTag(tagLength);
                }
                this.sceneAndFrameLabelData = Parser.LowLevel.defineScene(this.data, this._dataStream, null);
            };
            SWFFile.prototype.addControlTag = function (tagCode, byteOffset, tagLength) {
                var controlTags = this._currentControlTags || (this._currentControlTags = []);
                controlTags.push(new UnparsedTag(tagCode, byteOffset, tagLength));
                this.jumpToNextTag(tagLength);
            };
            SWFFile.prototype.addLazySymbol = function (tagCode, byteOffset, tagLength) {
                var id = this._dataStream.getUint16(this._dataStream.pos, true);
                var symbol = new DictionaryEntry(id, tagCode, byteOffset, tagLength);
                this.dictionary[id] = symbol;
                if (!release && SWF.traceLevel.value > 0) {
                    console.info("Registering symbol " + id + " of type " + SWFTag[tagCode]);
                }
                return symbol;
            };
            SWFFile.prototype.decodeEmbeddedFont = function (unparsed) {
                var definition = this.getParsedTag(unparsed);
                var symbol = new EagerlyParsedDictionaryEntry(definition.id, unparsed, 'font', definition);
                if (!release && SWF.traceLevel.value > 0) {
                    console.info("Decoding embedded font " + definition.id + " with name '" + definition.name + "'", definition);
                }
                this.eagerlyParsedSymbolsMap[symbol.id] = symbol;
                this.eagerlyParsedSymbolsList.push(symbol);
                var style = flagsToFontStyle(definition.bold, definition.italic);
                this.fonts.push({ name: definition.name, id: definition.id, style: style });
            };
            SWFFile.prototype.registerEmbeddedFont = function (unparsed) {
                if (!inFirefox) {
                    this.decodeEmbeddedFont(unparsed);
                    return;
                }
                var stream = this._dataStream;
                var id = stream.getUint16(stream.pos, true);
                var style;
                var name;
                if (unparsed.tagCode === 10 /* CODE_DEFINE_FONT */) {
                    name = '__autofont__' + unparsed.byteOffset;
                    style = 'regular';
                }
                else {
                    var flags = this.data[stream.pos + 2];
                    style = flagsToFontStyle(!!(flags & 0x2), !!(flags & 0x1));
                    var nameLength = this.data[stream.pos + 4];
                    stream.pos += 5;
                    name = Parser.readString(this.data, stream, nameLength);
                }
                this.fonts.push({ name: name, id: id, style: style });
                if (!release && SWF.traceLevel.value > 0) {
                    console.info("Registering embedded font " + id + " with name '" + name + "'");
                }
                stream.pos = unparsed.byteOffset + unparsed.byteLength;
            };
            SWFFile.prototype.decodeEmbeddedImage = function (unparsed) {
                var definition = this.getParsedTag(unparsed);
                var symbol = new EagerlyParsedDictionaryEntry(definition.id, unparsed, 'image', definition);
                if (!release && SWF.traceLevel.value > 0) {
                    console.info("Decoding embedded image " + definition.id + " of type " + SWFTag[unparsed.tagCode] + " (start: " + unparsed.byteOffset + ", end: " + (unparsed.byteOffset + unparsed.byteLength) + ")");
                }
                this.eagerlyParsedSymbolsMap[symbol.id] = symbol;
                this.eagerlyParsedSymbolsList.push(symbol);
            };
            return SWFFile;
        })();
        SWF.SWFFile = SWFFile;
        function flagsToFontStyle(bold, italic) {
            if (bold && italic) {
                return 'boldItalic';
            }
            if (bold) {
                return 'bold';
            }
            if (italic) {
                return 'italic';
            }
            return 'regular';
        }
        var SWFFrame = (function () {
            function SWFFrame(controlTags, labelName, soundStreamHead, soundStreamBlock, actionBlocks, initActionBlocks, exports) {
                release || controlTags && Object.freeze(controlTags);
                this.controlTags = controlTags;
                this.labelName = labelName;
                release || actionBlocks && Object.freeze(actionBlocks);
                this.soundStreamHead = soundStreamHead;
                this.soundStreamBlock = soundStreamBlock;
                this.actionBlocks = actionBlocks;
                release || initActionBlocks && Object.freeze(initActionBlocks);
                this.initActionBlocks = initActionBlocks;
                release || exports && Object.freeze(exports);
                this.exports = exports;
            }
            return SWFFrame;
        })();
        SWF.SWFFrame = SWFFrame;
        var ABCBlock = (function () {
            function ABCBlock() {
            }
            return ABCBlock;
        })();
        SWF.ABCBlock = ABCBlock;
        var InitActionBlock = (function () {
            function InitActionBlock() {
            }
            return InitActionBlock;
        })();
        SWF.InitActionBlock = InitActionBlock;
        var SymbolExport = (function () {
            function SymbolExport(symbolId, className) {
                this.symbolId = symbolId;
                this.className = className;
            }
            return SymbolExport;
        })();
        SWF.SymbolExport = SymbolExport;
        var UnparsedTag = (function () {
            function UnparsedTag(tagCode, byteOffset, byteLength) {
                this.tagCode = tagCode;
                this.byteOffset = byteOffset;
                this.byteLength = byteLength;
            }
            return UnparsedTag;
        })();
        SWF.UnparsedTag = UnparsedTag;
        var DictionaryEntry = (function (_super) {
            __extends(DictionaryEntry, _super);
            function DictionaryEntry(id, tagCode, byteOffset, byteLength) {
                _super.call(this, tagCode, byteOffset, byteLength);
                this.id = id;
            }
            return DictionaryEntry;
        })(UnparsedTag);
        SWF.DictionaryEntry = DictionaryEntry;
        var EagerlyParsedDictionaryEntry = (function (_super) {
            __extends(EagerlyParsedDictionaryEntry, _super);
            function EagerlyParsedDictionaryEntry(id, unparsed, type, definition) {
                _super.call(this, id, unparsed.tagCode, unparsed.byteOffset, unparsed.byteLength);
                this.type = type;
                this.definition = definition;
                this.ready = false;
            }
            return EagerlyParsedDictionaryEntry;
        })(DictionaryEntry);
        SWF.EagerlyParsedDictionaryEntry = EagerlyParsedDictionaryEntry;
        function readSWFLength(bytes) {
            return bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24;
        }
        function defineSymbol(swfTag, symbols) {
            switch (swfTag.code) {
                case 6 /* CODE_DEFINE_BITS */:
                case 21 /* CODE_DEFINE_BITS_JPEG2 */:
                case 35 /* CODE_DEFINE_BITS_JPEG3 */:
                case 90 /* CODE_DEFINE_BITS_JPEG4 */:
                    return Shumway.SWF.Parser.defineImage(swfTag);
                case 20 /* CODE_DEFINE_BITS_LOSSLESS */:
                case 36 /* CODE_DEFINE_BITS_LOSSLESS2 */:
                    return Shumway.SWF.Parser.defineBitmap(swfTag);
                case 7 /* CODE_DEFINE_BUTTON */:
                case 34 /* CODE_DEFINE_BUTTON2 */:
                    return Shumway.SWF.Parser.defineButton(swfTag, symbols);
                case 37 /* CODE_DEFINE_EDIT_TEXT */:
                    return Shumway.SWF.Parser.defineText(swfTag);
                case 10 /* CODE_DEFINE_FONT */:
                case 48 /* CODE_DEFINE_FONT2 */:
                case 75 /* CODE_DEFINE_FONT3 */:
                case 91 /* CODE_DEFINE_FONT4 */:
                    return Shumway.SWF.Parser.defineFont(swfTag);
                case 46 /* CODE_DEFINE_MORPH_SHAPE */:
                case 84 /* CODE_DEFINE_MORPH_SHAPE2 */:
                case 2 /* CODE_DEFINE_SHAPE */:
                case 22 /* CODE_DEFINE_SHAPE2 */:
                case 32 /* CODE_DEFINE_SHAPE3 */:
                case 83 /* CODE_DEFINE_SHAPE4 */:
                    return Shumway.SWF.Parser.defineShape(swfTag);
                case 14 /* CODE_DEFINE_SOUND */:
                    return Shumway.SWF.Parser.defineSound(swfTag);
                case 39 /* CODE_DEFINE_SPRITE */:
                    return swfTag;
                case 87 /* CODE_DEFINE_BINARY_DATA */:
                    return {
                        type: 'binary',
                        id: swfTag.id,
                        data: swfTag.data
                    };
                case 11 /* CODE_DEFINE_TEXT */:
                case 33 /* CODE_DEFINE_TEXT2 */:
                    return Shumway.SWF.Parser.defineLabel(swfTag);
                default:
                    return swfTag;
            }
        }
    })(SWF = Shumway.SWF || (Shumway.SWF = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var ImageTypeMagicHeaderBytes;
    (function (ImageTypeMagicHeaderBytes) {
        ImageTypeMagicHeaderBytes[ImageTypeMagicHeaderBytes["JPG"] = 0xffd8ff] = "JPG";
        ImageTypeMagicHeaderBytes[ImageTypeMagicHeaderBytes["PNG"] = 0x89504e] = "PNG";
        ImageTypeMagicHeaderBytes[ImageTypeMagicHeaderBytes["GIF"] = 0x474946] = "GIF";
    })(ImageTypeMagicHeaderBytes || (ImageTypeMagicHeaderBytes = {}));
    var mimetypesForHeaders = {};
    mimetypesForHeaders[16767231 /* JPG */] = 'image/jpeg';
    mimetypesForHeaders[8998990 /* PNG */] = 'image/png';
    mimetypesForHeaders[4671814 /* GIF */] = 'image/gif';
    var ImageFile = (function () {
        function ImageFile(header, fileLength) {
            this.type = 4;
            this.bytesLoaded = header.length;
            if (header.length === fileLength) {
                this.data = header;
            }
            else {
                this.data = new Uint8Array(fileLength);
                this.data.set(header);
            }
            this.setMimetype();
        }
        Object.defineProperty(ImageFile.prototype, "bytesTotal", {
            get: function () {
                return this.data.length;
            },
            enumerable: true,
            configurable: true
        });
        ImageFile.prototype.appendLoadedData = function (data) {
            this.data.set(data, this.bytesLoaded);
            this.bytesLoaded += data.length;
        };
        ImageFile.prototype.setMimetype = function () {
            var magic = (this.data[0] << 16) | (this.data[1] << 8) | this.data[2];
            this.mimeType = mimetypesForHeaders[magic];
        };
        return ImageFile;
    })();
    Shumway.ImageFile = ImageFile;
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var assert = Shumway.Debug.assert;
    var SWFFile = Shumway.SWF.SWFFile;
    var MIN_LOADED_BYTES = 8192;
    var LoadProgressUpdate = (function () {
        function LoadProgressUpdate(bytesLoaded, framesLoaded) {
            this.bytesLoaded = bytesLoaded;
            this.framesLoaded = framesLoaded;
        }
        return LoadProgressUpdate;
    })();
    Shumway.LoadProgressUpdate = LoadProgressUpdate;
    var FileLoader = (function () {
        function FileLoader(listener) {
            release || assert(listener);
            this._file = null;
            this._listener = listener;
            this._loadingServiceSession = null;
            this._delayedUpdatesPromise = null;
            this._bytesLoaded = 0;
        }
        FileLoader.prototype.loadFile = function (request) {
            this._bytesLoaded = 0;
            var session = this._loadingServiceSession = Shumway.FileLoadingService.instance.createSession();
            session.onopen = this.processLoadOpen.bind(this);
            session.onprogress = this.processNewData.bind(this);
            session.onerror = this.processError.bind(this);
            session.onclose = this.processLoadClose.bind(this);
            session.open(request);
        };
        FileLoader.prototype.abortLoad = function () {
        };
        FileLoader.prototype.loadBytes = function (bytes) {
            this.processLoadOpen();
            this.processNewData(bytes, { bytesLoaded: bytes.length, bytesTotal: bytes.length });
            this.processLoadClose();
        };
        FileLoader.prototype.processLoadOpen = function () {
            release || assert(!this._file);
        };
        FileLoader.prototype.processNewData = function (data, progressInfo) {
            this._bytesLoaded += data.length;
            if (this._bytesLoaded < MIN_LOADED_BYTES && this._bytesLoaded < progressInfo.bytesTotal) {
                if (!this._queuedInitialData) {
                    this._queuedInitialData = new Uint8Array(Math.min(MIN_LOADED_BYTES, progressInfo.bytesTotal));
                }
                this._queuedInitialData.set(data, this._bytesLoaded - data.length);
                return;
            }
            else if (this._queuedInitialData) {
                var allData = new Uint8Array(this._bytesLoaded);
                allData.set(this._queuedInitialData);
                allData.set(data, this._bytesLoaded - data.length);
                data = allData;
                this._queuedInitialData = null;
            }
            var file = this._file;
            var eagerlyParsedSymbolsCount = 0;
            var previousFramesLoaded = 0;
            if (!file) {
                file = this._file = createFileInstanceForHeader(data, progressInfo.bytesTotal);
                this._listener.onLoadOpen(file);
            }
            else {
                if (file instanceof SWFFile) {
                    eagerlyParsedSymbolsCount = file.eagerlyParsedSymbolsList.length;
                    previousFramesLoaded = file.framesLoaded;
                }
                file.appendLoadedData(data);
            }
            if (file instanceof SWFFile) {
                this.processSWFFileUpdate(file, eagerlyParsedSymbolsCount, previousFramesLoaded);
            }
            else {
                release || assert(file instanceof Shumway.ImageFile);
                this._listener.onLoadProgress(new LoadProgressUpdate(progressInfo.bytesLoaded, -1));
                if (progressInfo.bytesLoaded === progressInfo.bytesTotal) {
                    this._listener.onImageBytesLoaded();
                }
            }
        };
        FileLoader.prototype.processError = function (error) {
            Shumway.Debug.warning('Loading error encountered:', error);
        };
        FileLoader.prototype.processLoadClose = function () {
            if (this._file.bytesLoaded !== this._file.bytesTotal) {
                Shumway.Debug.warning("Not Implemented: processing loadClose when loading was aborted");
            }
        };
        FileLoader.prototype.processSWFFileUpdate = function (file, previousEagerlyParsedSymbolsCount, previousFramesLoaded) {
            var promise;
            var eagerlyParsedSymbolsDelta = file.eagerlyParsedSymbolsList.length - previousEagerlyParsedSymbolsCount;
            if (!eagerlyParsedSymbolsDelta) {
                var update = this._lastDelayedUpdate;
                if (!update) {
                    release || assert(file.framesLoaded === file.frames.length);
                    this._listener.onLoadProgress(new LoadProgressUpdate(file.bytesLoaded, file.framesLoaded));
                }
                else {
                    release || assert(update.framesLoaded <= file.frames.length);
                    update.bytesLoaded = file.bytesLoaded;
                    update.framesLoaded = file.frames.length;
                }
                return;
            }
            promise = this._listener.onNewEagerlyParsedSymbols(file.eagerlyParsedSymbolsList, eagerlyParsedSymbolsDelta);
            if (this._delayedUpdatesPromise) {
                promise = Promise.all([this._delayedUpdatesPromise, promise]);
            }
            this._delayedUpdatesPromise = promise;
            var update = new LoadProgressUpdate(file.bytesLoaded, file.frames.length);
            this._lastDelayedUpdate = update;
            file.pendingUpdateDelays++;
            var self = this;
            file.framesLoaded = previousFramesLoaded;
            promise.then(function () {
                if (!release && Shumway.SWF.traceLevel.value > 0) {
                    console.log("Reducing pending update delays from " + file.pendingUpdateDelays + " to " + (file.pendingUpdateDelays - 1));
                }
                file.pendingUpdateDelays--;
                release || assert(file.pendingUpdateDelays >= 0);
                file.framesLoaded = update.framesLoaded;
                self._listener.onLoadProgress(update);
                if (self._delayedUpdatesPromise === promise) {
                    self._delayedUpdatesPromise = null;
                    self._lastDelayedUpdate = null;
                }
            });
        };
        return FileLoader;
    })();
    Shumway.FileLoader = FileLoader;
    function createFileInstanceForHeader(header, fileLength) {
        var magic = (header[0] << 16) | (header[1] << 8) | header[2];
        if ((magic & 0xffff) === 22355 /* SWF */) {
            return new SWFFile(header, fileLength);
        }
        if (magic === 16767231 /* JPG */ || magic === 8998990 /* PNG */ || magic === 4671814 /* GIF */) {
            return new Shumway.ImageFile(header, fileLength);
        }
        return null;
    }
    var FileTypeMagicHeaderBytes;
    (function (FileTypeMagicHeaderBytes) {
        FileTypeMagicHeaderBytes[FileTypeMagicHeaderBytes["SWF"] = 0x5753] = "SWF";
        FileTypeMagicHeaderBytes[FileTypeMagicHeaderBytes["JPG"] = 0xffd8ff] = "JPG";
        FileTypeMagicHeaderBytes[FileTypeMagicHeaderBytes["PNG"] = 0x89504e] = "PNG";
        FileTypeMagicHeaderBytes[FileTypeMagicHeaderBytes["GIF"] = 0x474946] = "GIF";
    })(FileTypeMagicHeaderBytes || (FileTypeMagicHeaderBytes = {}));
})(Shumway || (Shumway = {}));
//# sourceMappingURL=swf.js.map
console.timeEnd("Load SWF Parser");
// !inline console.time("Load Compiled Code Cache");
// !inline console.timeEnd("Load Compiled Code Cache");
// Load Flash TS Dependencies
console.time("Load Flash TS Dependencies");
var Shumway;
(function (Shumway) {
    var startTag = /^<([-A-Za-z0-9_]+)((?:\s+[-A-Za-z0-9_]+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)>/, endTag = /^<\/([-A-Za-z0-9_]+)[^>]*>/, attr = /([-A-Za-z0-9_]+)(?:\s*=\s*(?:(?:"((?:\\.|[^"])*)")|(?:'((?:\\.|[^'])*)')|([^>\s]+)))?/g;
    var empty = makeMap("area,base,basefont,br,col,frame,hr,img,input,isindex,link,meta,param,embed");
    var block = makeMap("address,applet,blockquote,button,center,dd,del,dir,div,dl,dt,fieldset,form,frameset,hr,iframe,ins,isindex,li,map,menu,noframes,noscript,object,ol,p,pre,script,table,tbody,td,tfoot,th,thead,tr,ul");
    var inline = makeMap("a,abbr,acronym,applet,b,basefont,bdo,big,br,button,cite,code,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,object,q,s,samp,script,select,small,span,strike,strong,sub,sup,textarea,tt,u,var");
    var closeSelf = makeMap("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr");
    var fillAttrs = makeMap("checked,compact,declare,defer,disabled,ismap,multiple,nohref,noresize,noshade,nowrap,readonly,selected");
    var special = makeMap("script,style");
    function HTMLParser(html, handler) {
        var index, chars, match, stack = [], last = html;
        function top() {
            return this[this.length - 1];
        }
        while (html) {
            chars = true;
            if (!top() || !special[top()]) {
                if (html.indexOf("<!--") == 0) {
                    index = html.indexOf("-->");
                    if (index >= 0) {
                        if (handler.comment)
                            handler.comment(html.substring(4, index));
                        html = html.substring(index + 3);
                        chars = false;
                    }
                }
                else if (html.indexOf("</") == 0) {
                    match = html.match(endTag);
                    if (match) {
                        html = html.substring(match[0].length);
                        match[0].replace(endTag, parseEndTag);
                        chars = false;
                    }
                }
                else if (html.indexOf("<") == 0) {
                    match = html.match(startTag);
                    if (match) {
                        html = html.substring(match[0].length);
                        match[0].replace(startTag, parseStartTag);
                        chars = false;
                    }
                }
                if (chars) {
                    index = html.indexOf("<");
                    var text = index < 0 ? html : html.substring(0, index);
                    html = index < 0 ? "" : html.substring(index);
                    if (handler.chars)
                        handler.chars(text);
                }
            }
            else {
                html = html.replace(new RegExp("(.*)<\/" + top() + "[^>]*>"), function (all, text) {
                    text = text.replace(/<!--(.*?)-->/g, "$1").replace(/<!\[CDATA\[(.*?)]]>/g, "$1");
                    if (handler.chars)
                        handler.chars(text);
                    return "";
                });
                parseEndTag("", top());
            }
            if (html == last)
                throw "Parse Error: " + html;
            last = html;
        }
        parseEndTag();
        function parseStartTag(tag, tagName, rest, unary) {
            tagName = tagName.toLowerCase();
            if (block[tagName]) {
                while (top() && inline[top()]) {
                    parseEndTag("", top());
                }
            }
            if (closeSelf[tagName] && top() == tagName) {
                parseEndTag("", tagName);
            }
            unary = empty[tagName] || !!unary;
            if (!unary)
                stack.push(tagName);
            if (handler.start) {
                var attrs = Object.create(null);
                rest.replace(attr, function (match, name) {
                    name = name.toLowerCase();
                    var value = arguments[2] ? arguments[2] : arguments[3] ? arguments[3] : arguments[4] ? arguments[4] : fillAttrs[name] ? name : "";
                    attrs[name] = value;
                    return match;
                });
                if (handler.start)
                    handler.start(tagName, attrs, !!unary);
            }
        }
        function parseEndTag(tag, tagName) {
            if (!tagName)
                var pos = 0;
            else
                for (var pos = stack.length - 1; pos >= 0; pos--)
                    if (stack[pos] == tagName)
                        break;
            if (pos >= 0) {
                for (var i = stack.length - 1; i >= pos; i--)
                    if (handler.end)
                        handler.end(stack[i]);
                stack.length = pos;
            }
        }
    }
    Shumway.HTMLParser = HTMLParser;
    ;
    function makeMap(str) {
        var obj = {}, items = str.split(",");
        for (var i = 0; i < items.length; i++)
            obj[items[i]] = true;
        return obj;
    }
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var notImplemented = Shumway.Debug.notImplemented;
    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
    var Bounds = Shumway.Bounds;
    var DataBuffer = Shumway.ArrayUtilities.DataBuffer;
    var ColorUtilities = Shumway.ColorUtilities;
    var flash = Shumway.AVM2.AS.flash;
    (function (TextContentFlags) {
        TextContentFlags[TextContentFlags["None"] = 0x0000] = "None";
        TextContentFlags[TextContentFlags["DirtyBounds"] = 0x0001] = "DirtyBounds";
        TextContentFlags[TextContentFlags["DirtyContent"] = 0x0002] = "DirtyContent";
        TextContentFlags[TextContentFlags["DirtyStyle"] = 0x0004] = "DirtyStyle";
        TextContentFlags[TextContentFlags["DirtyFlow"] = 0x0008] = "DirtyFlow";
        TextContentFlags[TextContentFlags["Dirty"] = TextContentFlags.DirtyBounds | TextContentFlags.DirtyContent | TextContentFlags.DirtyStyle | TextContentFlags.DirtyFlow] = "Dirty";
    })(Shumway.TextContentFlags || (Shumway.TextContentFlags = {}));
    var TextContentFlags = Shumway.TextContentFlags;
    var _decodeHTMLMap = {
        lt: '<',
        gt: '>',
        amp: '&',
        quot: '"',
        apos: "'",
        nbsp: "\u00A0"
    };
    function decodeHTML(s) {
        var r = "";
        for (var i = 0; i < s.length; i++) {
            var c = s.charAt(i);
            if (c !== '&') {
                r += c;
            }
            else {
                var j = Shumway.StringUtilities.indexOfAny(s, ['&', ';'], i + 1);
                if (j > 0) {
                    var v = s.substring(i + 1, j);
                    if (v.length > 1 && v.charAt(0) === "#") {
                        var n = 0;
                        if (v.length > 2 && v.charAt(1) === "x") {
                            n = parseInt(v.substring(1));
                        }
                        else {
                            n = parseInt(v.substring(2), 16);
                        }
                        r += String.fromCharCode(n);
                    }
                    else {
                        if (_decodeHTMLMap[v] !== undefined) {
                            r += _decodeHTMLMap[v];
                        }
                        else {
                            Shumway.Debug.unexpected(v);
                        }
                    }
                    i = j;
                }
                else {
                    for (var k in _decodeHTMLMap) {
                        if (s.indexOf(k, i + 1) === i + 1) {
                            r += _decodeHTMLMap[k];
                            i += k.length;
                            break;
                        }
                    }
                }
            }
        }
        return r;
    }
    var TextContent = (function () {
        function TextContent(defaultTextFormat) {
            this._id = flash.display.DisplayObject.getNextSyncID();
            this._bounds = new Bounds(0, 0, 0, 0);
            this._plainText = '';
            this._backgroundColor = 0;
            this._borderColor = 0;
            this._autoSize = 0;
            this._wordWrap = false;
            this._scrollV = 1;
            this._scrollH = 0;
            this.flags = 0 /* None */;
            this.defaultTextFormat = defaultTextFormat || new flash.text.TextFormat();
            this.textRuns = [];
            this.textRunData = new DataBuffer();
            this.matrix = null;
            this.coords = null;
        }
        TextContent.prototype.parseHtml = function (htmlText, styleSheet, multiline) {
            var plainText = '';
            var textRuns = this.textRuns;
            textRuns.length = 0;
            var beginIndex = 0;
            var endIndex = 0;
            var textFormat = this.defaultTextFormat.clone();
            var prevTextRun = null;
            var stack = [];
            var handler;
            Shumway.HTMLParser(htmlText, handler = {
                chars: function (text) {
                    text = decodeHTML(text);
                    plainText += text;
                    endIndex += text.length;
                    if (endIndex - beginIndex) {
                        if (prevTextRun && prevTextRun.textFormat.equals(textFormat)) {
                            prevTextRun.endIndex = endIndex;
                        }
                        else {
                            prevTextRun = new flash.text.TextRun(beginIndex, endIndex, textFormat);
                            textRuns.push(prevTextRun);
                        }
                        beginIndex = endIndex;
                    }
                },
                start: function (tagName, attributes) {
                    var hasStyle = false;
                    if (styleSheet) {
                        hasStyle = styleSheet.hasStyle(tagName);
                        if (hasStyle) {
                            stack.push(textFormat);
                            textFormat = textFormat.clone();
                            styleSheet.applyStyle(textFormat, tagName);
                        }
                    }
                    switch (tagName) {
                        case 'a':
                            stack.push(textFormat);
                            somewhatImplemented('<a/>');
                            var target = attributes.target || textFormat.target;
                            var url = attributes.url || textFormat.url;
                            if (target !== textFormat.target || url !== textFormat.url) {
                                if (!hasStyle) {
                                    textFormat = textFormat.clone();
                                }
                                textFormat.target = target;
                                textFormat.url = url;
                            }
                            break;
                        case 'b':
                            stack.push(textFormat);
                            if (!textFormat.bold) {
                                if (!hasStyle) {
                                    textFormat = textFormat.clone();
                                }
                                textFormat.bold = true;
                            }
                            break;
                        case 'font':
                            stack.push(textFormat);
                            var color = ColorUtilities.isValidHexColor(attributes.color) ? ColorUtilities.hexToRGB(attributes.color) : textFormat.color;
                            var font = attributes.face || textFormat.font;
                            var size = isNaN(attributes.size) ? textFormat.size : +attributes.size;
                            if (color !== textFormat.color || font !== textFormat.font || size !== textFormat.size) {
                                if (!hasStyle) {
                                    textFormat = textFormat.clone();
                                }
                                textFormat.color = color;
                                textFormat.font = font;
                                textFormat.size = size;
                            }
                            break;
                        case 'img':
                            notImplemented('<img/>');
                            break;
                        case 'i':
                            stack.push(textFormat);
                            if (!textFormat.italic) {
                                if (!hasStyle) {
                                    textFormat = textFormat.clone();
                                }
                                textFormat.italic = true;
                            }
                            break;
                        case 'li':
                            stack.push(textFormat);
                            if (!textFormat.bullet) {
                                if (!hasStyle) {
                                    textFormat = textFormat.clone();
                                }
                                textFormat.bullet = true;
                            }
                            if (plainText[plainText.length - 1] === '\r') {
                                break;
                            }
                        case 'br':
                            if (multiline) {
                                handler.chars('\r');
                            }
                            break;
                        case 'span':
                        case 'p':
                            var hasClassStyle = false;
                            stack.push(textFormat);
                            if (styleSheet && attributes.class) {
                                var cssClass = '.' + attributes.class;
                                hasClassStyle = styleSheet.hasStyle(cssClass);
                                if (hasClassStyle) {
                                    if (!hasStyle) {
                                        textFormat = textFormat.clone();
                                    }
                                    styleSheet.applyStyle(textFormat, cssClass);
                                }
                            }
                            if (tagName === 'span') {
                                break;
                            }
                            var align = attributes.align;
                            if (flash.text.TextFormatAlign.toNumber(align) > -1 && align !== textFormat.align) {
                                if (!(hasStyle || hasClassStyle)) {
                                    textFormat = textFormat.clone();
                                }
                                textFormat.align = align;
                            }
                            break;
                        case 'textformat':
                            stack.push(textFormat);
                            var blockIndent = isNaN(attributes.blockindent) ? textFormat.blockIndent : +attributes.blockindent;
                            var indent = isNaN(attributes.indent) ? textFormat.indent : +attributes.indent;
                            var leading = isNaN(attributes.leading) ? textFormat.leading : +attributes.leading;
                            var leftMargin = isNaN(attributes.leftmargin) ? textFormat.leftMargin : +attributes.leftmargin;
                            var rightMargin = isNaN(attributes.rightmargin) ? textFormat.rightMargin : +attributes.rightmargin;
                            if (blockIndent !== textFormat.blockIndent || indent !== textFormat.indent || leading !== textFormat.leading || leftMargin !== textFormat.leftMargin || rightMargin !== textFormat.rightMargin) {
                                if (!hasStyle) {
                                    textFormat = textFormat.clone();
                                }
                                textFormat.blockIndent = blockIndent;
                                textFormat.indent = indent;
                                textFormat.leading = leading;
                                textFormat.leftMargin = leftMargin;
                                textFormat.rightMargin = rightMargin;
                            }
                            break;
                        case 'u':
                            stack.push(textFormat);
                            if (!textFormat.underline) {
                                if (!hasStyle) {
                                    textFormat = textFormat.clone();
                                }
                                textFormat.underline = true;
                            }
                            break;
                    }
                },
                end: function (tagName) {
                    switch (tagName) {
                        case 'li':
                        case 'p':
                            if (multiline) {
                                handler.chars('\r');
                            }
                        case 'a':
                        case 'b':
                        case 'font':
                        case 'i':
                        case 'textformat':
                        case 'u':
                            textFormat = stack.pop();
                            if (styleSheet && styleSheet.hasStyle(tagName)) {
                                textFormat = stack.pop();
                            }
                    }
                }
            });
            this._plainText = plainText;
            this._serializeTextRuns();
        };
        Object.defineProperty(TextContent.prototype, "plainText", {
            get: function () {
                return this._plainText;
            },
            set: function (value) {
                this._plainText = value;
                this.textRuns.length = 0;
                if (value) {
                    var textRun = new flash.text.TextRun(0, value.length, this.defaultTextFormat);
                    this.textRuns[0] = textRun;
                }
                this._serializeTextRuns();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextContent.prototype, "bounds", {
            get: function () {
                return this._bounds;
            },
            set: function (bounds) {
                this._bounds.copyFrom(bounds);
                this.flags |= 1 /* DirtyBounds */;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextContent.prototype, "autoSize", {
            get: function () {
                return this._autoSize;
            },
            set: function (value) {
                if (value === this._autoSize) {
                    return;
                }
                this._autoSize = value;
                if (this._plainText) {
                    this.flags |= 8 /* DirtyFlow */;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextContent.prototype, "wordWrap", {
            get: function () {
                return this._wordWrap;
            },
            set: function (value) {
                if (value === this._wordWrap) {
                    return;
                }
                this._wordWrap = value;
                if (this._plainText) {
                    this.flags |= 8 /* DirtyFlow */;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextContent.prototype, "scrollV", {
            get: function () {
                return this._scrollV;
            },
            set: function (value) {
                if (value === this._scrollV) {
                    return;
                }
                this._scrollV = value;
                if (this._plainText) {
                    this.flags |= 8 /* DirtyFlow */;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextContent.prototype, "scrollH", {
            get: function () {
                return this._scrollH;
            },
            set: function (value) {
                if (value === this._scrollH) {
                    return;
                }
                this._scrollH = value;
                if (this._plainText) {
                    this.flags |= 8 /* DirtyFlow */;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextContent.prototype, "backgroundColor", {
            get: function () {
                return this._backgroundColor;
            },
            set: function (value) {
                if (value === this._backgroundColor) {
                    return;
                }
                this._backgroundColor = value;
                this.flags |= 4 /* DirtyStyle */;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextContent.prototype, "borderColor", {
            get: function () {
                return this._borderColor;
            },
            set: function (value) {
                if (value === this._borderColor) {
                    return;
                }
                this._borderColor = value;
                this.flags |= 4 /* DirtyStyle */;
            },
            enumerable: true,
            configurable: true
        });
        TextContent.prototype._serializeTextRuns = function () {
            var textRuns = this.textRuns;
            this.textRunData.clear();
            for (var i = 0; i < textRuns.length; i++) {
                this._writeTextRun(textRuns[i]);
            }
            this.flags |= 2 /* DirtyContent */;
        };
        TextContent.prototype._writeTextRun = function (textRun) {
            var textRunData = this.textRunData;
            textRunData.writeInt(textRun.beginIndex);
            textRunData.writeInt(textRun.endIndex);
            var textFormat = textRun.textFormat;
            var size = +textFormat.size;
            textRunData.writeInt(size);
            var font = flash.text.Font.getByNameAndStyle(textFormat.font, textFormat.style) || flash.text.Font.getDefaultFont();
            if (font.fontType === flash.text.FontType.EMBEDDED) {
                textRunData.writeUTF('swffont' + font._id);
            }
            else {
                textRunData.writeUTF(font._fontFamily);
            }
            textRunData.writeInt(font.ascent * size);
            textRunData.writeInt(font.descent * size);
            textRunData.writeInt(textFormat.leading === null ? font.leading * size : +textFormat.leading);
            var bold = false;
            var italic = false;
            if (font.fontType === flash.text.FontType.DEVICE) {
                if (textFormat.bold === null) {
                    bold = font.fontStyle === flash.text.FontStyle.BOLD || font.fontType === flash.text.FontStyle.BOLD_ITALIC;
                }
                else {
                    bold = !!textFormat.bold;
                }
                if (textFormat.italic === null) {
                    italic = font.fontStyle === flash.text.FontStyle.ITALIC || font.fontType === flash.text.FontStyle.BOLD_ITALIC;
                }
                else {
                    italic = !!textFormat.italic;
                }
            }
            textRunData.writeBoolean(bold);
            textRunData.writeBoolean(italic);
            textRunData.writeInt(+textFormat.color);
            textRunData.writeInt(flash.text.TextFormatAlign.toNumber(textFormat.align));
            textRunData.writeBoolean(!!textFormat.bullet);
            textRunData.writeInt(+textFormat.indent);
            textRunData.writeInt(+textFormat.kerning);
            textRunData.writeInt(+textFormat.leftMargin);
            textRunData.writeInt(+textFormat.letterSpacing);
            textRunData.writeInt(+textFormat.rightMargin);
            textRunData.writeBoolean(!!textFormat.underline);
        };
        TextContent.prototype.appendText = function (newText, format) {
            if (!format) {
                format = this.defaultTextFormat;
            }
            var plainText = this._plainText;
            var newRun = new flash.text.TextRun(plainText.length, plainText.length + newText.length, format);
            this._plainText = plainText + newText;
            this.textRuns.push(newRun);
            this._writeTextRun(newRun);
        };
        TextContent.prototype.prependText = function (newText, format) {
            if (!format) {
                format = this.defaultTextFormat;
            }
            var plainText = this._plainText;
            this._plainText = newText + plainText;
            var textRuns = this.textRuns;
            var shift = newText.length;
            for (var i = 0; i < textRuns.length; i++) {
                var run = textRuns[i];
                run.beginIndex += shift;
                run.endIndex += shift;
            }
            textRuns.unshift(new flash.text.TextRun(0, shift, format));
            this._serializeTextRuns();
        };
        TextContent.prototype.replaceText = function (beginIndex, endIndex, newText, format) {
            if (endIndex < beginIndex || !newText) {
                return;
            }
            if (endIndex === 0) {
                this.prependText(newText, format);
                return;
            }
            var plainText = this._plainText;
            if (beginIndex >= plainText.length) {
                this.appendText(newText, format);
                return;
            }
            var defaultTextFormat = this.defaultTextFormat;
            var newFormat = defaultTextFormat;
            if (format) {
                newFormat = newFormat.clone();
                newFormat.merge(format);
            }
            if (beginIndex <= 0 && endIndex >= plainText.length) {
                if (format) {
                    this.defaultTextFormat = newFormat;
                    this.plainText = newText;
                    this.defaultTextFormat = defaultTextFormat;
                }
                else {
                    this.plainText = newText;
                }
                return;
            }
            var textRuns = this.textRuns;
            var newTextRuns = [];
            var newEndIndex = beginIndex + newText.length;
            var shift = newEndIndex - endIndex;
            for (var i = 0; i < textRuns.length; i++) {
                var run = textRuns[i];
                if (beginIndex < run.endIndex) {
                    if (beginIndex <= run.beginIndex && newEndIndex >= run.endIndex) {
                        continue;
                    }
                    var containsBeginIndex = run.containsIndex(beginIndex);
                    var containsEndIndex = run.containsIndex(endIndex);
                    if (containsBeginIndex && containsEndIndex) {
                        if (format) {
                            var clone = run.clone();
                            clone.endIndex = beginIndex;
                            newTextRuns.push(clone);
                            i--;
                            run.beginIndex = beginIndex + 1;
                            continue;
                        }
                    }
                    else if (containsBeginIndex) {
                        run.endIndex = beginIndex;
                    }
                    else if (containsEndIndex) {
                        if (format) {
                            newTextRuns.push(new flash.text.TextRun(beginIndex, newEndIndex, newFormat));
                            run.beginIndex = newEndIndex;
                        }
                        else {
                            run.beginIndex = beginIndex;
                            run.endIndex += shift;
                        }
                    }
                    else {
                        run.beginIndex += shift;
                        run.endIndex += shift;
                    }
                }
                newTextRuns.push(run);
            }
            this._plainText = plainText.substring(0, beginIndex) + newText + plainText.substring(endIndex);
            this.textRuns = newTextRuns;
            this._serializeTextRuns();
        };
        return TextContent;
    })();
    Shumway.TextContent = TextContent;
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var OptionSet = Shumway.Options.OptionSet;
            var shumwayOptions = Shumway.Settings.shumwayOptions;
            AS.flashOptions = shumwayOptions.register(new OptionSet("Flash Options"));
            AS.traceEventsOption = AS.flashOptions.register(new Shumway.Options.Option("te", "Trace Events", "boolean", false, "Trace dispatching of events."));
            AS.traceLoaderOption = AS.flashOptions.register(new Shumway.Options.Option("tp", "Trace Loader", "boolean", false, "Trace loader execution."));
            AS.disableAudioOption = AS.flashOptions.register(new Shumway.Options.Option("da", "Disable Audio", "boolean", false, "Disables audio."));
            AS.webAudioOption = AS.flashOptions.register(new Shumway.Options.Option(null, "Use WebAudio for Sound", "boolean", false, "Enables WebAudio API for MovieClip sound stream. (MP3 format is an exception)"));
            AS.webAudioMP3Option = AS.flashOptions.register(new Shumway.Options.Option(null, "Use MP3 decoding to WebAudio", "boolean", false, "Enables WebAudio API and software MP3 decoding and disables any AUDIO tag usage for MP3 format"));
            AS.mediaSourceOption = AS.flashOptions.register(new Shumway.Options.Option(null, "Use Media Source for Video", "boolean", false, "Enables Media Source Extension API for NetStream."));
            AS.mediaSourceMP3Option = AS.flashOptions.register(new Shumway.Options.Option(null, "Use Media Source for MP3", "boolean", true, "Enables Media Source Extension API for MP3 streams."));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Shumway;
(function (Shumway) {
    var Timeline;
    (function (Timeline) {
        var isInteger = Shumway.isInteger;
        var assert = Shumway.Debug.assert;
        var warning = Shumway.Debug.warning;
        var Bounds = Shumway.Bounds;
        var flash = Shumway.AVM2.AS.flash;
        var Symbol = (function () {
            function Symbol(data, symbolDefaultClass) {
                release || assert(isInteger(data.id));
                this.data = data;
                if (data.className) {
                    var appDomain = Shumway.AVM2.Runtime.AVM2.instance.applicationDomain;
                    try {
                        var symbolClass = appDomain.getClass(data.className);
                        this.symbolClass = symbolClass;
                    }
                    catch (e) {
                        warning("Symbol " + data.id + " bound to non-existing class " + data.className);
                        this.symbolClass = symbolDefaultClass;
                    }
                }
                else {
                    this.symbolClass = symbolDefaultClass;
                }
                this.isAVM1Object = false;
            }
            Object.defineProperty(Symbol.prototype, "id", {
                get: function () {
                    return this.data.id;
                },
                enumerable: true,
                configurable: true
            });
            return Symbol;
        })();
        Timeline.Symbol = Symbol;
        var DisplaySymbol = (function (_super) {
            __extends(DisplaySymbol, _super);
            function DisplaySymbol(data, symbolClass, dynamic) {
                _super.call(this, data, symbolClass);
                this.dynamic = dynamic;
            }
            DisplaySymbol.prototype._setBoundsFromData = function (data) {
                this.fillBounds = data.fillBounds ? Bounds.FromUntyped(data.fillBounds) : null;
                this.lineBounds = data.lineBounds ? Bounds.FromUntyped(data.lineBounds) : null;
                if (!this.lineBounds && this.fillBounds) {
                    this.lineBounds = this.fillBounds.clone();
                }
            };
            return DisplaySymbol;
        })(Symbol);
        Timeline.DisplaySymbol = DisplaySymbol;
        var BinarySymbol = (function (_super) {
            __extends(BinarySymbol, _super);
            function BinarySymbol(data) {
                _super.call(this, data, flash.utils.ByteArray);
            }
            BinarySymbol.FromData = function (data) {
                var symbol = new BinarySymbol(data);
                symbol.buffer = data.data;
                symbol.byteLength = data.data.byteLength;
                return symbol;
            };
            return BinarySymbol;
        })(Symbol);
        Timeline.BinarySymbol = BinarySymbol;
        var SoundStart = (function () {
            function SoundStart(soundId, soundInfo) {
                this.soundId = soundId;
                this.soundInfo = soundInfo;
            }
            return SoundStart;
        })();
        Timeline.SoundStart = SoundStart;
    })(Timeline = Shumway.Timeline || (Shumway.Timeline = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var geom;
                (function (geom) {
                    var PI = Math.PI;
                    var HalfPI = PI / 2;
                    var PacPI = PI + HalfPI;
                    var TwoPI = PI * 2;
                    function cos(angle) {
                        switch (angle) {
                            case HalfPI:
                            case -PacPI:
                                return 0;
                            case PI:
                            case -PI:
                                return -1;
                            case PacPI:
                            case -HalfPI:
                                return 0;
                            default:
                                return Math.cos(angle);
                        }
                    }
                    function sin(angle) {
                        switch (angle) {
                            case HalfPI:
                            case -PacPI:
                                return 1;
                            case PI:
                            case -PI:
                                return 0;
                            case PacPI:
                            case -HalfPI:
                                return -1;
                            default:
                                return Math.sin(angle);
                        }
                    }
                    var Matrix = (function (_super) {
                        __extends(Matrix, _super);
                        function Matrix(a, b, c, d, tx, ty) {
                            if (a === void 0) { a = 1; }
                            if (b === void 0) { b = 0; }
                            if (c === void 0) { c = 0; }
                            if (d === void 0) { d = 1; }
                            if (tx === void 0) { tx = 0; }
                            if (ty === void 0) { ty = 0; }
                            false && _super.call(this);
                            var m = this._data = new Float64Array(6);
                            m[0] = a;
                            m[1] = b;
                            m[2] = c;
                            m[3] = d;
                            m[4] = tx;
                            m[5] = ty;
                        }
                        Matrix.FromUntyped = function (object) {
                            return new flash.geom.Matrix(object.a, object.b, object.c, object.d, object.tx, object.ty);
                        };
                        Matrix.FromDataBuffer = function (input) {
                            return new flash.geom.Matrix(input.readFloat(), input.readFloat(), input.readFloat(), input.readFloat(), input.readFloat(), input.readFloat());
                        };
                        Object.defineProperty(Matrix.prototype, "a", {
                            get: function () {
                                return this._data[0];
                            },
                            set: function (a) {
                                this._data[0] = a;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Matrix.prototype, "b", {
                            get: function () {
                                return this._data[1];
                            },
                            set: function (b) {
                                this._data[1] = b;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Matrix.prototype, "c", {
                            get: function () {
                                return this._data[2];
                            },
                            set: function (c) {
                                this._data[2] = c;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Matrix.prototype, "d", {
                            get: function () {
                                return this._data[3];
                            },
                            set: function (d) {
                                this._data[3] = d;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Matrix.prototype, "tx", {
                            get: function () {
                                return this._data[4];
                            },
                            set: function (tx) {
                                this._data[4] = tx;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Matrix.prototype, "ty", {
                            get: function () {
                                return this._data[5];
                            },
                            set: function (ty) {
                                this._data[5] = ty;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Matrix.prototype.concat = function (other) {
                            var m = this._data, n = other._data;
                            var a = m[0] * n[0];
                            var b = 0.0;
                            var c = 0.0;
                            var d = m[3] * n[3];
                            var tx = m[4] * n[0] + n[4];
                            var ty = m[5] * n[3] + n[5];
                            if (m[1] !== 0.0 || m[2] !== 0.0 || n[1] !== 0.0 || n[2] !== 0.0) {
                                a += m[1] * n[2];
                                d += m[2] * n[1];
                                b += m[0] * n[1] + m[1] * n[3];
                                c += m[2] * n[0] + m[3] * n[2];
                                tx += m[5] * n[2];
                                ty += m[4] * n[1];
                            }
                            m[0] = a;
                            m[1] = b;
                            m[2] = c;
                            m[3] = d;
                            m[4] = tx;
                            m[5] = ty;
                        };
                        Matrix.prototype.preMultiply = function (other) {
                            this.preMultiplyInto(other, this);
                        };
                        Matrix.prototype.preMultiplyInto = function (other, target) {
                            var m = this._data, n = other._data, t = target._data;
                            var a = n[0] * m[0];
                            var b = 0.0;
                            var c = 0.0;
                            var d = n[3] * m[3];
                            var tx = n[4] * m[0] + m[4];
                            var ty = n[5] * m[3] + m[5];
                            if (n[1] !== 0.0 || n[2] !== 0.0 || m[1] !== 0.0 || m[2] !== 0.0) {
                                a += n[1] * m[2];
                                d += n[2] * m[1];
                                b += n[0] * m[1] + n[1] * m[3];
                                c += n[2] * m[0] + n[3] * m[2];
                                tx += n[5] * m[2];
                                ty += n[4] * m[1];
                            }
                            t[0] = a;
                            t[1] = b;
                            t[2] = c;
                            t[3] = d;
                            t[4] = tx;
                            t[5] = ty;
                        };
                        Matrix.prototype.invert = function () {
                            this.invertInto(this);
                        };
                        Matrix.prototype.invertInto = function (target) {
                            var m = this._data, t = target._data;
                            var b = m[1];
                            var c = m[2];
                            var tx = m[4];
                            var ty = m[5];
                            if (b === 0 && c === 0) {
                                var a = t[0] = 1 / m[0];
                                var d = t[3] = 1 / m[3];
                                t[1] = t[2] = 0;
                                t[4] = -a * tx;
                                t[5] = -d * ty;
                                return;
                            }
                            var a = m[0];
                            var d = m[3];
                            var determinant = a * d - b * c;
                            if (determinant === 0) {
                                target.identity();
                                return;
                            }
                            determinant = 1 / determinant;
                            var k = 0;
                            k = t[0] = d * determinant;
                            b = t[1] = -b * determinant;
                            c = t[2] = -c * determinant;
                            d = t[3] = a * determinant;
                            t[4] = -(k * tx + c * ty);
                            t[5] = -(b * tx + d * ty);
                        };
                        Matrix.prototype.identity = function () {
                            var m = this._data;
                            m[0] = m[3] = 1;
                            m[1] = m[2] = m[4] = m[5] = 0;
                        };
                        Matrix.prototype.createBox = function (scaleX, scaleY, rotation, tx, ty) {
                            if (rotation === void 0) { rotation = 0; }
                            if (tx === void 0) { tx = 0; }
                            if (ty === void 0) { ty = 0; }
                            var m = this._data;
                            if (rotation !== 0) {
                                var u = cos(rotation);
                                var v = sin(rotation);
                                m[0] = u * scaleX;
                                m[1] = v * scaleY;
                                m[2] = -v * scaleX;
                                m[3] = u * scaleY;
                            }
                            else {
                                m[0] = scaleX;
                                m[1] = 0;
                                m[2] = 0;
                                m[3] = scaleY;
                            }
                            m[4] = tx;
                            m[5] = ty;
                        };
                        Matrix.prototype.createGradientBox = function (width, height, rotation, tx, ty) {
                            if (rotation === void 0) { rotation = 0; }
                            if (tx === void 0) { tx = 0; }
                            if (ty === void 0) { ty = 0; }
                            this.createBox(width / 1638.4, height / 1638.4, rotation, tx + width / 2, ty + height / 2);
                        };
                        Matrix.prototype.rotate = function (angle) {
                            angle = +angle;
                            if (angle !== 0) {
                                var m = this._data;
                                var u = cos(angle);
                                var v = sin(angle);
                                var ta = m[0];
                                var tb = m[1];
                                var tc = m[2];
                                var td = m[3];
                                var ttx = m[4];
                                var tty = m[5];
                                m[0] = ta * u - tb * v;
                                m[1] = ta * v + tb * u;
                                m[2] = tc * u - td * v;
                                m[3] = tc * v + td * u;
                                m[4] = ttx * u - tty * v;
                                m[5] = ttx * v + tty * u;
                            }
                        };
                        Matrix.prototype.translate = function (dx, dy) {
                            var m = this._data;
                            m[4] += dx;
                            m[5] += dy;
                        };
                        Matrix.prototype.scale = function (sx, sy) {
                            var m = this._data;
                            if (sx !== 1) {
                                m[0] *= sx;
                                m[2] *= sx;
                                m[4] *= sx;
                            }
                            if (sy !== 1) {
                                m[1] *= sy;
                                m[3] *= sy;
                                m[5] *= sy;
                            }
                        };
                        Matrix.prototype.deltaTransformPoint = function (point) {
                            return new geom.Point(this._data[0] * point.x + this._data[2] * point.y, this._data[1] * point.x + this._data[3] * point.y);
                        };
                        Matrix.prototype.transformX = function (x, y) {
                            var m = this._data;
                            return m[0] * x + m[2] * y + m[4];
                        };
                        Matrix.prototype.transformY = function (x, y) {
                            var m = this._data;
                            return m[1] * x + m[3] * y + m[5];
                        };
                        Matrix.prototype.transformPoint = function (point) {
                            var m = this._data;
                            return new geom.Point(m[0] * point.x + m[2] * point.y + m[4], m[1] * point.x + m[3] * point.y + m[5]);
                        };
                        Matrix.prototype.transformPointInPlace = function (point) {
                            var m = this._data;
                            point.setTo(m[0] * point.x + m[2] * point.y + m[4], m[1] * point.x + m[3] * point.y + m[5]);
                            return point;
                        };
                        Matrix.prototype.transformBounds = function (bounds) {
                            var m = this._data;
                            var a = m[0];
                            var b = m[1];
                            var c = m[2];
                            var d = m[3];
                            var tx = m[4];
                            var ty = m[5];
                            var x = bounds.xMin;
                            var y = bounds.yMin;
                            var w = bounds.width;
                            var h = bounds.height;
                            var x0 = Math.round(a * x + c * y + tx);
                            var y0 = Math.round(b * x + d * y + ty);
                            var x1 = Math.round(a * (x + w) + c * y + tx);
                            var y1 = Math.round(b * (x + w) + d * y + ty);
                            var x2 = Math.round(a * (x + w) + c * (y + h) + tx);
                            var y2 = Math.round(b * (x + w) + d * (y + h) + ty);
                            var x3 = Math.round(a * x + c * (y + h) + tx);
                            var y3 = Math.round(b * x + d * (y + h) + ty);
                            var tmp = 0;
                            if (x0 > x1) {
                                tmp = x0;
                                x0 = x1;
                                x1 = tmp;
                            }
                            if (x2 > x3) {
                                tmp = x2;
                                x2 = x3;
                                x3 = tmp;
                            }
                            bounds.xMin = x0 < x2 ? x0 : x2;
                            bounds.xMax = x1 > x3 ? x1 : x3;
                            if (y0 > y1) {
                                tmp = y0;
                                y0 = y1;
                                y1 = tmp;
                            }
                            if (y2 > y3) {
                                tmp = y2;
                                y2 = y3;
                                y3 = tmp;
                            }
                            bounds.yMin = y0 < y2 ? y0 : y2;
                            bounds.yMax = y1 > y3 ? y1 : y3;
                        };
                        Matrix.prototype.getDeterminant = function () {
                            var m = this._data;
                            return m[0] * m[3] - m[1] * m[2];
                        };
                        Matrix.prototype.getScaleX = function () {
                            var m = this._data;
                            if (m[0] === 1 && m[1] === 0) {
                                return 1;
                            }
                            var result = Math.sqrt(m[0] * m[0] + m[1] * m[1]);
                            return this.getDeterminant() < 0 ? -result : result;
                        };
                        Matrix.prototype.getScaleY = function () {
                            var m = this._data;
                            if (m[2] === 0 && m[3] === 1) {
                                return 1;
                            }
                            var result = Math.sqrt(m[2] * m[2] + m[3] * m[3]);
                            return this.getDeterminant() < 0 ? -result : result;
                        };
                        Matrix.prototype.getAbsoluteScaleX = function () {
                            return Math.abs(this.getScaleX());
                        };
                        Matrix.prototype.getAbsoluteScaleY = function () {
                            return Math.abs(this.getScaleY());
                        };
                        Matrix.prototype.getSkewX = function () {
                            return Math.atan2(this._data[3], this._data[2]) - (Math.PI / 2);
                        };
                        Matrix.prototype.getSkewY = function () {
                            return Math.atan2(this._data[1], this._data[0]);
                        };
                        Matrix.prototype.copyFrom = function (other) {
                            var m = this._data, n = other._data;
                            m[0] = n[0];
                            m[1] = n[1];
                            m[2] = n[2];
                            m[3] = n[3];
                            m[4] = n[4];
                            m[5] = n[5];
                        };
                        Matrix.prototype.copyFromUntyped = function (object) {
                            var m = this._data;
                            m[0] = object.a;
                            m[1] = object.b;
                            m[2] = object.c;
                            m[3] = object.d;
                            m[4] = object.tx;
                            m[5] = object.ty;
                        };
                        Matrix.prototype.setTo = function (a, b, c, d, tx, ty) {
                            var m = this._data;
                            m[0] = a;
                            m[1] = b;
                            m[2] = c;
                            m[3] = d;
                            m[4] = tx;
                            m[5] = ty;
                        };
                        Matrix.prototype.toTwipsInPlace = function () {
                            var m = this._data;
                            m[4] = (m[4] * 20) | 0;
                            m[5] = (m[5] * 20) | 0;
                            return this;
                        };
                        Matrix.prototype.toPixelsInPlace = function () {
                            var m = this._data;
                            m[4] /= 20;
                            m[5] /= 20;
                            return this;
                        };
                        Matrix.prototype.copyRowTo = function (row, vector3D) {
                            var m = this._data;
                            row = row >>> 0;
                            if (row === 0) {
                                vector3D.x = m[0];
                                vector3D.y = m[2];
                                vector3D.z = m[4];
                            }
                            else if (row === 1) {
                                vector3D.x = m[1];
                                vector3D.y = m[3];
                                vector3D.z = m[5];
                            }
                            else if (row === 2) {
                                vector3D.x = 0;
                                vector3D.y = 0;
                                vector3D.z = 1;
                            }
                        };
                        Matrix.prototype.copyColumnTo = function (column, vector3D) {
                            var m = this._data;
                            column = column >>> 0;
                            if (column === 0) {
                                vector3D.x = m[0];
                                vector3D.y = m[1];
                                vector3D.z = 0;
                            }
                            else if (column === 1) {
                                vector3D.x = m[2];
                                vector3D.y = m[3];
                                vector3D.z = 0;
                            }
                            else if (column === 2) {
                                vector3D.x = m[4];
                                vector3D.y = m[5];
                                vector3D.z = 1;
                            }
                        };
                        Matrix.prototype.copyRowFrom = function (row, vector3D) {
                            var m = this._data;
                            row = row >>> 0;
                            if (row === 0) {
                                m[0] = vector3D.x;
                                m[2] = vector3D.y;
                                m[4] = vector3D.z;
                            }
                            else if (row === 1) {
                                m[1] = vector3D.x;
                                m[3] = vector3D.y;
                                m[5] = vector3D.z;
                            }
                        };
                        Matrix.prototype.copyColumnFrom = function (column, vector3D) {
                            var m = this._data;
                            column = column >>> 0;
                            if (column === 0) {
                                m[0] = vector3D.x;
                                m[2] = vector3D.y;
                                m[4] = vector3D.z;
                            }
                            else if (column === 1) {
                                m[1] = vector3D.x;
                                m[3] = vector3D.y;
                                m[5] = vector3D.z;
                            }
                        };
                        Matrix.prototype.updateScaleAndRotation = function (scaleX, scaleY, skewX, skewY) {
                            var m = this._data;
                            if ((skewX === 0 || skewX === TwoPI) && (skewY === 0 || skewY === TwoPI)) {
                                m[0] = scaleX;
                                m[1] = m[2] = 0;
                                m[3] = scaleY;
                                return;
                            }
                            var u = cos(skewX);
                            var v = sin(skewX);
                            if (skewX === skewY) {
                                m[0] = u * scaleX;
                                m[1] = v * scaleX;
                            }
                            else {
                                m[0] = cos(skewY) * scaleX;
                                m[1] = sin(skewY) * scaleX;
                            }
                            m[2] = -v * scaleY;
                            m[3] = u * scaleY;
                        };
                        Matrix.prototype.clone = function () {
                            var m = this._data;
                            return new flash.geom.Matrix(m[0], m[1], m[2], m[3], m[4], m[5]);
                        };
                        Matrix.prototype.equals = function (other) {
                            var m = this._data, n = other._data;
                            return m[0] === n[0] && m[1] === n[1] && m[2] === n[2] && m[3] === n[3] && m[4] === n[4] && m[5] === n[5];
                        };
                        Matrix.prototype.toString = function () {
                            var m = this._data;
                            return "(a=" + m[0] + ", b=" + m[1] + ", c=" + m[2] + ", d=" + m[3] + ", tx=" + m[4] + ", ty=" + m[5] + ")";
                        };
                        Matrix.prototype.writeExternal = function (output) {
                            var m = this._data;
                            output.writeFloat(m[0]);
                            output.writeFloat(m[1]);
                            output.writeFloat(m[2]);
                            output.writeFloat(m[3]);
                            output.writeFloat(m[4]);
                            output.writeFloat(m[5]);
                        };
                        Matrix.classInitializer = null;
                        Matrix.initializer = null;
                        Matrix.classSymbols = null;
                        Matrix.instanceSymbols = null;
                        Matrix.FROZEN_IDENTITY_MATRIX = Object.freeze(new Matrix());
                        Matrix.TEMP_MATRIX = new Matrix();
                        return Matrix;
                    })(AS.ASNative);
                    geom.Matrix = Matrix;
                })(geom = flash.geom || (flash.geom = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var geom;
                (function (geom) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var precision = 1e-7;
                    var transposeTransform = new Uint32Array([
                        0,
                        4,
                        8,
                        12,
                        1,
                        5,
                        9,
                        13,
                        2,
                        6,
                        10,
                        14,
                        3,
                        7,
                        11,
                        15
                    ]);
                    function getRotationMatrix(theta, u, v, w, a, b, c) {
                        var u2 = u * u, v2 = v * v, w2 = w * w;
                        var L2 = u2 + v2 + w2, L = Math.sqrt(L2);
                        u /= L;
                        v /= L;
                        w /= L;
                        u2 /= L2;
                        v2 /= L2;
                        w2 /= L2;
                        var cos = Math.cos(theta), sin = Math.sin(theta);
                        return new flash.geom.Matrix3D([
                            u2 + (v2 + w2) * cos,
                            u * v * (1 - cos) + w * sin,
                            u * w * (1 - cos) - v * sin,
                            0,
                            u * v * (1 - cos) - w * sin,
                            v2 + (u2 + w2) * cos,
                            v * w * (1 - cos) + u * sin,
                            0,
                            u * w * (1 - cos) + v * sin,
                            v * w * (1 - cos) - u * sin,
                            w2 + (u2 + v2) * cos,
                            0,
                            (a * (v2 + w2) - u * (b * v + c * w)) * (1 - cos) + (b * w - c * v) * sin,
                            (b * (u2 + w2) - v * (a * u + c * w)) * (1 - cos) + (c * u - a * w) * sin,
                            (c * (u2 + v2) - w * (a * u + b * v)) * (1 - cos) + (a * v - b * u) * sin,
                            1
                        ]);
                    }
                    var Matrix3D = (function (_super) {
                        __extends(Matrix3D, _super);
                        function Matrix3D(v) {
                            if (v === void 0) { v = null; }
                            false && _super.call(this);
                            this._matrix = new Float32Array(16);
                            if (v && v.length >= 16) {
                                this.copyRawDataFrom(v, 0, false);
                            }
                            else {
                                this.identity();
                            }
                        }
                        Matrix3D.interpolate = function (thisMat, toMat, percent) {
                            thisMat = thisMat;
                            toMat = toMat;
                            percent = +percent;
                            notImplemented("public flash.geom.Matrix3D::static interpolate");
                            return;
                        };
                        Object.defineProperty(Matrix3D.prototype, "rawData", {
                            get: function () {
                                var result = new AS.Float64Vector();
                                this.copyRawDataTo(result, 0, false);
                                return result;
                            },
                            set: function (v) {
                                this.copyRawDataFrom(v, 0, false);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Matrix3D.prototype, "position", {
                            get: function () {
                                var m = this._matrix;
                                return new flash.geom.Vector3D(m[12], m[13], m[14]);
                            },
                            set: function (pos) {
                                var m = this._matrix;
                                m[12] = pos.x;
                                m[13] = pos.y;
                                m[14] = pos.z;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Matrix3D.prototype, "determinant", {
                            get: function () {
                                var m = this._matrix;
                                var m11 = m[0], m12 = m[4], m13 = m[8], m14 = m[12], m21 = m[1], m22 = m[5], m23 = m[9], m24 = m[13], m31 = m[2], m32 = m[6], m33 = m[10], m34 = m[14], m41 = m[3], m42 = m[7], m43 = m[11], m44 = m[15];
                                var d;
                                d = m11 * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24)) - m21 * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14)) + m31 * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14)) - m41 * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
                                return d;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Matrix3D.prototype.clone = function () {
                            return new flash.geom.Matrix3D(this._matrix);
                        };
                        Matrix3D.prototype.copyToMatrix3D = function (dest) {
                            dest = dest;
                            dest._matrix.set(this._matrix);
                        };
                        Matrix3D.prototype.append = function (lhs) {
                            var ma = lhs._matrix, mb = this._matrix, m = this._matrix;
                            var ma11 = ma[0], ma12 = ma[4], ma13 = ma[8], ma14 = ma[12], ma21 = ma[1], ma22 = ma[5], ma23 = ma[9], ma24 = ma[13], ma31 = ma[2], ma32 = ma[6], ma33 = ma[10], ma34 = ma[14], ma41 = ma[3], ma42 = ma[7], ma43 = ma[11], ma44 = ma[15];
                            var mb11 = mb[0], mb12 = mb[4], mb13 = mb[8], mb14 = mb[12], mb21 = mb[1], mb22 = mb[5], mb23 = mb[9], mb24 = mb[13], mb31 = mb[2], mb32 = mb[6], mb33 = mb[10], mb34 = mb[14], mb41 = mb[3], mb42 = mb[7], mb43 = mb[11], mb44 = mb[15];
                            m[0] = ma11 * mb11 + ma12 * mb21 + ma13 * mb31 + ma14 * mb41;
                            m[1] = ma21 * mb11 + ma22 * mb21 + ma23 * mb31 + ma24 * mb41;
                            m[2] = ma31 * mb11 + ma32 * mb21 + ma33 * mb31 + ma34 * mb41;
                            m[3] = ma41 * mb11 + ma42 * mb21 + ma43 * mb31 + ma44 * mb41;
                            m[4] = ma11 * mb12 + ma12 * mb22 + ma13 * mb32 + ma14 * mb42;
                            m[5] = ma21 * mb12 + ma22 * mb22 + ma23 * mb32 + ma24 * mb42;
                            m[6] = ma31 * mb12 + ma32 * mb22 + ma33 * mb32 + ma34 * mb42;
                            m[7] = ma41 * mb12 + ma42 * mb22 + ma43 * mb32 + ma44 * mb42;
                            m[8] = ma11 * mb13 + ma12 * mb23 + ma13 * mb33 + ma14 * mb43;
                            m[9] = ma21 * mb13 + ma22 * mb23 + ma23 * mb33 + ma24 * mb43;
                            m[10] = ma31 * mb13 + ma32 * mb23 + ma33 * mb33 + ma34 * mb43;
                            m[11] = ma41 * mb13 + ma42 * mb23 + ma43 * mb33 + ma44 * mb43;
                            m[12] = ma11 * mb14 + ma12 * mb24 + ma13 * mb34 + ma14 * mb44;
                            m[13] = ma21 * mb14 + ma22 * mb24 + ma23 * mb34 + ma24 * mb44;
                            m[14] = ma31 * mb14 + ma32 * mb24 + ma33 * mb34 + ma34 * mb44;
                            m[15] = ma41 * mb14 + ma42 * mb24 + ma43 * mb34 + ma44 * mb44;
                        };
                        Matrix3D.prototype.prepend = function (rhs) {
                            var ma = this._matrix, mb = rhs._matrix, m = this._matrix;
                            var ma11 = ma[0], ma12 = ma[4], ma13 = ma[8], ma14 = ma[12], ma21 = ma[1], ma22 = ma[5], ma23 = ma[9], ma24 = ma[13], ma31 = ma[2], ma32 = ma[6], ma33 = ma[10], ma34 = ma[14], ma41 = ma[3], ma42 = ma[7], ma43 = ma[11], ma44 = ma[15];
                            var mb11 = mb[0], mb12 = mb[4], mb13 = mb[8], mb14 = mb[12], mb21 = mb[1], mb22 = mb[5], mb23 = mb[9], mb24 = mb[13], mb31 = mb[2], mb32 = mb[6], mb33 = mb[10], mb34 = mb[14], mb41 = mb[3], mb42 = mb[7], mb43 = mb[11], mb44 = mb[15];
                            m[0] = ma11 * mb11 + ma12 * mb21 + ma13 * mb31 + ma14 * mb41;
                            m[1] = ma21 * mb11 + ma22 * mb21 + ma23 * mb31 + ma24 * mb41;
                            m[2] = ma31 * mb11 + ma32 * mb21 + ma33 * mb31 + ma34 * mb41;
                            m[3] = ma41 * mb11 + ma42 * mb21 + ma43 * mb31 + ma44 * mb41;
                            m[4] = ma11 * mb12 + ma12 * mb22 + ma13 * mb32 + ma14 * mb42;
                            m[5] = ma21 * mb12 + ma22 * mb22 + ma23 * mb32 + ma24 * mb42;
                            m[6] = ma31 * mb12 + ma32 * mb22 + ma33 * mb32 + ma34 * mb42;
                            m[7] = ma41 * mb12 + ma42 * mb22 + ma43 * mb32 + ma44 * mb42;
                            m[8] = ma11 * mb13 + ma12 * mb23 + ma13 * mb33 + ma14 * mb43;
                            m[9] = ma21 * mb13 + ma22 * mb23 + ma23 * mb33 + ma24 * mb43;
                            m[10] = ma31 * mb13 + ma32 * mb23 + ma33 * mb33 + ma34 * mb43;
                            m[11] = ma41 * mb13 + ma42 * mb23 + ma43 * mb33 + ma44 * mb43;
                            m[12] = ma11 * mb14 + ma12 * mb24 + ma13 * mb34 + ma14 * mb44;
                            m[13] = ma21 * mb14 + ma22 * mb24 + ma23 * mb34 + ma24 * mb44;
                            m[14] = ma31 * mb14 + ma32 * mb24 + ma33 * mb34 + ma34 * mb44;
                            m[15] = ma41 * mb14 + ma42 * mb24 + ma43 * mb34 + ma44 * mb44;
                        };
                        Matrix3D.prototype.invert = function () {
                            var d = this.determinant;
                            if (Math.abs(d) < precision) {
                                return false;
                            }
                            d = 1 / d;
                            var m = this._matrix;
                            var m11 = m[0], m12 = m[1], m13 = m[2], m14 = m[3], m21 = m[4], m22 = m[5], m23 = m[6], m24 = m[7], m31 = m[8], m32 = m[9], m33 = m[10], m34 = m[11], m41 = m[12], m42 = m[13], m43 = m[14], m44 = m[15];
                            m[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
                            m[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
                            m[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
                            m[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
                            m[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
                            m[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
                            m[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
                            m[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
                            m[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
                            m[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
                            m[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
                            m[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
                            m[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
                            m[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
                            m[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
                            m[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
                            return true;
                        };
                        Matrix3D.prototype.identity = function () {
                            var m = this._matrix;
                            m[0] = m[5] = m[10] = m[15] = 1;
                            m[1] = m[2] = m[3] = m[4] = m[6] = m[7] = m[8] = m[9] = m[11] = m[12] = m[13] = m[14] = 0;
                        };
                        Matrix3D.prototype.decompose = function (orientationStyle) {
                            if (orientationStyle === void 0) { orientationStyle = "eulerAngles"; }
                            orientationStyle = asCoerceString(orientationStyle);
                            notImplemented("public flash.geom.Matrix3D::decompose");
                            return;
                        };
                        Matrix3D.prototype.recompose = function (components, orientationStyle) {
                            if (orientationStyle === void 0) { orientationStyle = "eulerAngles"; }
                            orientationStyle = asCoerceString(orientationStyle);
                            notImplemented("public flash.geom.Matrix3D::recompose");
                            return;
                        };
                        Matrix3D.prototype.appendTranslation = function (x, y, z) {
                            x = +x;
                            y = +y;
                            z = +z;
                            var m = this._matrix;
                            var m41 = m[3], m42 = m[7], m43 = m[11], m44 = m[15];
                            m[0] += x * m41;
                            m[1] += y * m41;
                            m[2] += z * m41;
                            m[4] += x * m42;
                            m[5] += y * m42;
                            m[6] += z * m42;
                            m[8] += x * m43;
                            m[9] += y * m43;
                            m[10] += z * m43;
                            m[12] += x * m44;
                            m[13] += y * m44;
                            m[14] += z * m44;
                        };
                        Matrix3D.prototype.appendRotation = function (degrees, axis, pivotPoint) {
                            if (pivotPoint === void 0) { pivotPoint = null; }
                            degrees = +degrees;
                            axis = axis;
                            pivotPoint = pivotPoint;
                            this.append(getRotationMatrix(degrees / 180 * Math.PI, axis.x, axis.y, axis.z, pivotPoint ? pivotPoint.x : 0, pivotPoint ? pivotPoint.y : 0, pivotPoint ? pivotPoint.z : 0));
                        };
                        Matrix3D.prototype.appendScale = function (xScale, yScale, zScale) {
                            xScale = +xScale;
                            yScale = +yScale;
                            zScale = +zScale;
                            var m = this._matrix;
                            m[0] *= xScale;
                            m[1] *= yScale;
                            m[2] *= zScale;
                            m[4] *= xScale;
                            m[5] *= yScale;
                            m[6] *= zScale;
                            m[8] *= xScale;
                            m[9] *= yScale;
                            m[10] *= zScale;
                            m[12] *= xScale;
                            m[13] *= yScale;
                            m[14] *= zScale;
                        };
                        Matrix3D.prototype.prependTranslation = function (x, y, z) {
                            x = +x;
                            y = +y;
                            z = +z;
                            var m = this._matrix;
                            var m11 = m[0], m12 = m[4], m13 = m[8], m14 = m[12], m21 = m[1], m22 = m[5], m23 = m[9], m24 = m[13], m31 = m[2], m32 = m[6], m33 = m[10], m34 = m[14], m41 = m[3], m42 = m[7], m43 = m[11], m44 = m[15];
                            m[12] += m11 * x + m12 * y + m13 * z;
                            m[13] += m21 * x + m22 * y + m23 * z;
                            m[14] += m31 * x + m32 * y + m33 * z;
                            m[15] += m41 * x + m42 * y + m43 * z;
                        };
                        Matrix3D.prototype.prependRotation = function (degrees, axis, pivotPoint) {
                            if (pivotPoint === void 0) { pivotPoint = null; }
                            degrees = +degrees;
                            axis = axis;
                            pivotPoint = pivotPoint;
                            this.prepend(getRotationMatrix(degrees / 180 * Math.PI, axis.x, axis.y, axis.z, pivotPoint ? pivotPoint.x : 0, pivotPoint ? pivotPoint.y : 0, pivotPoint ? pivotPoint.z : 0));
                        };
                        Matrix3D.prototype.prependScale = function (xScale, yScale, zScale) {
                            xScale = +xScale;
                            yScale = +yScale;
                            zScale = +zScale;
                            var m = this._matrix;
                            m[0] *= xScale;
                            m[1] *= xScale;
                            m[2] *= xScale;
                            m[3] *= xScale;
                            m[4] *= yScale;
                            m[5] *= yScale;
                            m[6] *= yScale;
                            m[7] *= yScale;
                            m[8] *= zScale;
                            m[9] *= zScale;
                            m[10] *= zScale;
                            m[11] *= zScale;
                        };
                        Matrix3D.prototype.transformVector = function (v) {
                            var m = this._matrix;
                            var x = v.x, y = v.y, z = v.z;
                            return new flash.geom.Vector3D(m[0] * x + m[4] * y + m[8] * z + m[12], m[1] * x + m[5] * y + m[9] * z + m[13], m[2] * x + m[6] * y + m[10] * z + m[14]);
                        };
                        Matrix3D.prototype.deltaTransformVector = function (v) {
                            var m = this._matrix;
                            var x = v.x, y = v.y, z = v.z;
                            return new flash.geom.Vector3D(m[0] * x + m[4] * y + m[8] * z, m[1] * x + m[5] * y + m[9] * z, m[2] * x + m[6] * y + m[10] * z);
                        };
                        Matrix3D.prototype.transformVectors = function (vin, vout) {
                            var m = this._matrix;
                            var m11 = m[0], m12 = m[4], m13 = m[8], m14 = m[12], m21 = m[1], m22 = m[5], m23 = m[9], m24 = m[13], m31 = m[2], m32 = m[6], m33 = m[10], m34 = m[14], m41 = m[3], m42 = m[7], m43 = m[11], m44 = m[15];
                            for (var i = 0; i < vin.length - 2; i += 3) {
                                var x = vin.asGetNumericProperty(i), y = vin.asGetNumericProperty(i + 1), z = vin.asGetNumericProperty(i + 2);
                                vout.push(m11 * x + m12 * y + m13 * z + m14);
                                vout.push(m21 * x + m22 * y + m23 * z + m24);
                                vout.push(m31 * x + m32 * y + m33 * z + m34);
                            }
                        };
                        Matrix3D.prototype.transpose = function () {
                            var m = this._matrix;
                            var tmp;
                            tmp = m[1];
                            m[1] = m[4];
                            m[4] = tmp;
                            tmp = m[2];
                            m[2] = m[8];
                            m[5] = tmp;
                            tmp = m[3];
                            m[3] = m[12];
                            m[12] = tmp;
                            tmp = m[6];
                            m[6] = m[9];
                            m[9] = tmp;
                            tmp = m[7];
                            m[7] = m[13];
                            m[13] = tmp;
                            tmp = m[11];
                            m[11] = m[14];
                            m[14] = tmp;
                        };
                        Matrix3D.prototype.pointAt = function (pos, at, up) {
                            if (at === void 0) { at = null; }
                            if (up === void 0) { up = null; }
                            pos = pos;
                            at = at;
                            up = up;
                            notImplemented("public flash.geom.Matrix3D::pointAt");
                            return;
                        };
                        Matrix3D.prototype.interpolateTo = function (toMat, percent) {
                            toMat = toMat;
                            percent = +percent;
                            notImplemented("public flash.geom.Matrix3D::interpolateTo");
                            return;
                        };
                        Matrix3D.prototype.copyFrom = function (sourceMatrix3D) {
                            sourceMatrix3D = sourceMatrix3D;
                            this._matrix.set(sourceMatrix3D._matrix);
                        };
                        Matrix3D.prototype.copyRawDataTo = function (vector, index, transpose) {
                            if (index === void 0) { index = 0; }
                            if (transpose === void 0) { transpose = false; }
                            vector = vector;
                            index = index >>> 0;
                            transpose = !!transpose;
                            var m = this._matrix;
                            if (transpose) {
                                for (var i = 0, j = index | 0; i < 16; i++, j++) {
                                    vector.asSetNumericProperty(j, m[transposeTransform[i]]);
                                }
                            }
                            else {
                                for (var i = 0, j = index | 0; i < 16; i++, j++) {
                                    vector.asSetNumericProperty(j, m[i]);
                                }
                            }
                        };
                        Matrix3D.prototype.copyRawDataFrom = function (vector, index, transpose) {
                            if (index === void 0) { index = 0; }
                            if (transpose === void 0) { transpose = false; }
                            vector = vector;
                            index = index >>> 0;
                            transpose = !!transpose;
                            var m = this._matrix;
                            if (transpose) {
                                for (var i = 0, j = index | 0; i < 16; i++, j++) {
                                    m[transposeTransform[i]] = vector.asGetNumericProperty(j) || 0;
                                }
                            }
                            else {
                                for (var i = 0, j = index | 0; i < 16; i++, j++) {
                                    m[i] = vector.asGetNumericProperty(j) || 0;
                                }
                            }
                        };
                        Matrix3D.prototype.copyRowTo = function (row, vector3D) {
                            row = row >>> 0;
                            vector3D = vector3D;
                            var offset = row | 0;
                            var m = this._matrix;
                            vector3D.x = m[offset];
                            vector3D.y = m[offset + 4];
                            vector3D.z = m[offset + 8];
                            vector3D.w = m[offset + 12];
                        };
                        Matrix3D.prototype.copyColumnTo = function (column, vector3D) {
                            column = column >>> 0;
                            vector3D = vector3D;
                            var offset = column << 2;
                            var m = this._matrix;
                            vector3D.x = m[offset];
                            vector3D.y = m[offset + 1];
                            vector3D.z = m[offset + 2];
                            vector3D.w = m[offset + 3];
                        };
                        Matrix3D.prototype.copyRowFrom = function (row, vector3D) {
                            row = row >>> 0;
                            vector3D = vector3D;
                            var offset = row | 0;
                            var m = this._matrix;
                            m[offset] = vector3D.x;
                            m[offset + 4] = vector3D.y;
                            m[offset + 8] = vector3D.z;
                            m[offset + 12] = vector3D.w;
                        };
                        Matrix3D.prototype.copyColumnFrom = function (column, vector3D) {
                            column = column >>> 0;
                            vector3D = vector3D;
                            var offset = column << 2;
                            var m = this._matrix;
                            m[offset] = vector3D.x;
                            m[offset + 1] = vector3D.y;
                            m[offset + 2] = vector3D.z;
                            m[offset + 3] = vector3D.w;
                        };
                        Matrix3D.classInitializer = null;
                        Matrix3D.initializer = null;
                        Matrix3D.classSymbols = null;
                        Matrix3D.instanceSymbols = null;
                        return Matrix3D;
                    })(AS.ASNative);
                    geom.Matrix3D = Matrix3D;
                })(geom = flash.geom || (flash.geom = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var geom;
                (function (geom) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var Orientation3D = (function (_super) {
                        __extends(Orientation3D, _super);
                        function Orientation3D() {
                            false && _super.call(this);
                            dummyConstructor("public flash.geom.Orientation3D");
                        }
                        Orientation3D.classInitializer = null;
                        Orientation3D.initializer = null;
                        Orientation3D.classSymbols = null;
                        Orientation3D.instanceSymbols = null;
                        Orientation3D.EULER_ANGLES = "eulerAngles";
                        Orientation3D.AXIS_ANGLE = "axisAngle";
                        Orientation3D.QUATERNION = "quaternion";
                        return Orientation3D;
                    })(AS.ASNative);
                    geom.Orientation3D = Orientation3D;
                })(geom = flash.geom || (flash.geom = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var geom;
                (function (geom) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var PerspectiveProjection = (function (_super) {
                        __extends(PerspectiveProjection, _super);
                        function PerspectiveProjection() {
                            false && _super.call(this);
                            dummyConstructor("public flash.geom.PerspectiveProjection");
                        }
                        Object.defineProperty(PerspectiveProjection.prototype, "fieldOfView", {
                            get: function () {
                                notImplemented("public flash.geom.PerspectiveProjection::get fieldOfView");
                                return;
                            },
                            set: function (fieldOfViewAngleInDegrees) {
                                fieldOfViewAngleInDegrees = +fieldOfViewAngleInDegrees;
                                notImplemented("public flash.geom.PerspectiveProjection::set fieldOfView");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(PerspectiveProjection.prototype, "projectionCenter", {
                            get: function () {
                                notImplemented("public flash.geom.PerspectiveProjection::get projectionCenter");
                                return;
                            },
                            set: function (p) {
                                p = p;
                                notImplemented("public flash.geom.PerspectiveProjection::set projectionCenter");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(PerspectiveProjection.prototype, "focalLength", {
                            get: function () {
                                notImplemented("public flash.geom.PerspectiveProjection::get focalLength");
                                return;
                            },
                            set: function (value) {
                                value = +value;
                                notImplemented("public flash.geom.PerspectiveProjection::set focalLength");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        PerspectiveProjection.prototype.toMatrix3D = function () {
                            notImplemented("public flash.geom.PerspectiveProjection::toMatrix3D");
                            return;
                        };
                        PerspectiveProjection.classInitializer = null;
                        PerspectiveProjection.initializer = null;
                        PerspectiveProjection.classSymbols = null;
                        PerspectiveProjection.instanceSymbols = null;
                        return PerspectiveProjection;
                    })(AS.ASNative);
                    geom.PerspectiveProjection = PerspectiveProjection;
                })(geom = flash.geom || (flash.geom = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var geom;
                (function (geom) {
                    var Point = (function (_super) {
                        __extends(Point, _super);
                        function Point(x, y) {
                            if (x === void 0) { x = 0; }
                            if (y === void 0) { y = 0; }
                            false && _super.call(this);
                            this.x = +x;
                            this.y = +y;
                        }
                        Object.defineProperty(Point.prototype, "native_x", {
                            get: function () {
                                return this.x;
                            },
                            set: function (x) {
                                this.x = x;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Point.prototype, "native_y", {
                            get: function () {
                                return this.y;
                            },
                            set: function (y) {
                                this.y = y;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Point.prototype.Point = function (x, y) {
                            if (x === void 0) { x = 0; }
                            if (y === void 0) { y = 0; }
                            this.x = x;
                            this.y = y;
                        };
                        Object.defineProperty(Point.prototype, "length", {
                            get: function () {
                                return Math.sqrt(this.x * this.x + this.y * this.y);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Point.interpolate = function (p1, p2, f) {
                            var f1 = 1 - f;
                            return new Point(p1.x * f + p2.x * f1, p1.y * f + p2.y * f1);
                        };
                        Point.distance = function (p1, p2) {
                            var dx = p2.x - p1.x;
                            var dy = p2.y - p1.y;
                            return (dx === 0) ? Math.abs(dy) : (dy === 0) ? Math.abs(dx) : Math.sqrt(dx * dx + dy * dy);
                        };
                        Point.polar = function (length, angle) {
                            length = +length;
                            angle = +angle;
                            return new Point(length * Math.cos(angle), length * Math.sin(angle));
                        };
                        Point.prototype.clone = function () {
                            return new Point(this.x, this.y);
                        };
                        Point.prototype.offset = function (dx, dy) {
                            this.x += +dx;
                            this.y += +dy;
                        };
                        Point.prototype.equals = function (toCompare) {
                            return this.x === toCompare.x && this.y === toCompare.y;
                        };
                        Point.prototype.subtract = function (v) {
                            return new Point(this.x - v.x, this.y - v.y);
                        };
                        Point.prototype.add = function (v) {
                            return new Point(this.x + v.x, this.y + v.y);
                        };
                        Point.prototype.normalize = function (thickness) {
                            if (this.x !== 0 || this.y !== 0) {
                                var relativeThickness = +thickness / this.length;
                                this.x *= relativeThickness;
                                this.y *= relativeThickness;
                            }
                        };
                        Point.prototype.copyFrom = function (sourcePoint) {
                            this.x = sourcePoint.x;
                            this.y = sourcePoint.y;
                        };
                        Point.prototype.setTo = function (x, y) {
                            this.x = +x;
                            this.y = +y;
                        };
                        Point.prototype.toTwips = function () {
                            this.x = (this.x * 20) | 0;
                            this.y = (this.y * 20) | 0;
                            return this;
                        };
                        Point.prototype.toPixels = function () {
                            this.x /= 20;
                            this.y /= 20;
                            return this;
                        };
                        Point.prototype.round = function () {
                            this.x = Math.round(this.x);
                            this.y = Math.round(this.y);
                            return this;
                        };
                        Point.prototype.toString = function () {
                            return "(x=" + this.x + ", y=" + this.y + ")";
                        };
                        Point.classInitializer = null;
                        Point.initializer = null;
                        Point.classSymbols = null;
                        Point.instanceSymbols = null;
                        return Point;
                    })(AS.ASNative);
                    geom.Point = Point;
                })(geom = flash.geom || (flash.geom = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var geom;
                (function (geom) {
                    var Rectangle = (function (_super) {
                        __extends(Rectangle, _super);
                        function Rectangle(x, y, width, height) {
                            if (x === void 0) { x = 0; }
                            if (y === void 0) { y = 0; }
                            if (width === void 0) { width = 0; }
                            if (height === void 0) { height = 0; }
                            false && _super.call(this);
                            x = +x;
                            y = +y;
                            width = +width;
                            height = +height;
                            this.x = x;
                            this.y = y;
                            this.width = width;
                            this.height = height;
                        }
                        Rectangle.FromBounds = function (bounds) {
                            var xMin = bounds.xMin;
                            var yMin = bounds.yMin;
                            return new Rectangle(xMin / 20, yMin / 20, (bounds.xMax - xMin) / 20, (bounds.yMax - yMin) / 20);
                        };
                        Object.defineProperty(Rectangle.prototype, "native_x", {
                            get: function () {
                                return this.x;
                            },
                            set: function (x) {
                                this.x = x;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Rectangle.prototype, "native_y", {
                            get: function () {
                                return this.y;
                            },
                            set: function (y) {
                                this.y = y;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Rectangle.prototype, "native_width", {
                            get: function () {
                                return this.width;
                            },
                            set: function (width) {
                                this.width = +width;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Rectangle.prototype, "native_height", {
                            get: function () {
                                return this.height;
                            },
                            set: function (height) {
                                this.height = +height;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Rectangle.prototype, "left", {
                            get: function () {
                                return this.x;
                            },
                            set: function (value) {
                                value = +value;
                                this.width += this.x - value;
                                this.x = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Rectangle.prototype, "right", {
                            get: function () {
                                return this.x + this.width;
                            },
                            set: function (value) {
                                value = +value;
                                this.width = value - this.x;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Rectangle.prototype, "top", {
                            get: function () {
                                return this.y;
                            },
                            set: function (value) {
                                value = +value;
                                this.height += this.y - value;
                                this.y = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Rectangle.prototype, "bottom", {
                            get: function () {
                                return this.y + this.height;
                            },
                            set: function (value) {
                                value = +value;
                                this.height = value - this.y;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Rectangle.prototype, "topLeft", {
                            get: function () {
                                return new geom.Point(this.left, this.top);
                            },
                            set: function (value) {
                                this.top = value.y;
                                this.left = value.x;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Rectangle.prototype, "bottomRight", {
                            get: function () {
                                return new geom.Point(this.right, this.bottom);
                            },
                            set: function (value) {
                                this.bottom = value.y;
                                this.right = value.x;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Rectangle.prototype, "size", {
                            get: function () {
                                return new geom.Point(this.width, this.height);
                            },
                            set: function (value) {
                                this.width = value.x;
                                this.height = value.y;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Rectangle.prototype, "area", {
                            get: function () {
                                return this.width * this.height;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Rectangle.prototype.clone = function () {
                            return new Rectangle(this.x, this.y, this.width, this.height);
                        };
                        Rectangle.prototype.isEmpty = function () {
                            return this.width <= 0 || this.height <= 0;
                        };
                        Rectangle.prototype.setEmpty = function () {
                            this.x = 0;
                            this.y = 0;
                            this.width = 0;
                            this.height = 0;
                        };
                        Rectangle.prototype.inflate = function (dx, dy) {
                            dx = +dx;
                            dy = +dy;
                            this.x -= dx;
                            this.y -= dy;
                            this.width += (dx * 2);
                            this.height += (dy * 2);
                        };
                        Rectangle.prototype.inflatePoint = function (point) {
                            this.inflate(point.x, point.y);
                        };
                        Rectangle.prototype.offset = function (dx, dy) {
                            this.x += +dx;
                            this.y += +dy;
                        };
                        Rectangle.prototype.offsetPoint = function (point) {
                            this.offset(point.x, point.y);
                        };
                        Rectangle.prototype.contains = function (x, y) {
                            x = +x;
                            y = +y;
                            return x >= this.x && x < this.right && y >= this.y && y < this.bottom;
                        };
                        Rectangle.prototype.containsPoint = function (point) {
                            return this.contains(point.x, point.y);
                        };
                        Rectangle.prototype.containsRect = function (rect) {
                            var r1 = rect.x + rect.width;
                            var b1 = rect.y + rect.height;
                            var r2 = this.x + this.width;
                            var b2 = this.y + this.height;
                            return (rect.x >= this.x) && (rect.x < r2) && (rect.y >= this.y) && (rect.y < b2) && (r1 > this.x) && (r1 <= r2) && (b1 > this.y) && (b1 <= b2);
                        };
                        Rectangle.prototype.intersection = function (toIntersect) {
                            return this.clone().intersectInPlace(toIntersect);
                        };
                        Rectangle.prototype.intersects = function (toIntersect) {
                            return Math.max(this.x, toIntersect.x) <= Math.min(this.right, toIntersect.right) && Math.max(this.y, toIntersect.y) <= Math.min(this.bottom, toIntersect.bottom);
                        };
                        Rectangle.prototype.intersectInPlace = function (clipRect) {
                            var x0 = this.x;
                            var y0 = this.y;
                            var x1 = clipRect.x;
                            var y1 = clipRect.y;
                            var l = Math.max(x0, x1);
                            var r = Math.min(x0 + this.width, x1 + clipRect.width);
                            if (l <= r) {
                                var t = Math.max(y0, y1);
                                var b = Math.min(y0 + this.height, y1 + clipRect.height);
                                if (t <= b) {
                                    this.setTo(l, t, r - l, b - t);
                                    return this;
                                }
                            }
                            this.setEmpty();
                            return this;
                        };
                        Rectangle.prototype.intersectInPlaceInt32 = function (clipRect) {
                            var x0 = this.x | 0;
                            var y0 = this.y | 0;
                            var w0 = this.width | 0;
                            var h0 = this.height | 0;
                            var x1 = clipRect.x | 0;
                            var w1 = clipRect.width | 0;
                            var l = Math.max(x0, x1) | 0;
                            var r = Math.min(x0 + w0 | 0, x1 + w1 | 0) | 0;
                            if (l <= r) {
                                var y1 = clipRect.y | 0;
                                var h1 = clipRect.height | 0;
                                var t = Math.max(y0, y1) | 0;
                                var b = Math.min(y0 + h0 | 0, y1 + h1 | 0);
                                if (t <= b) {
                                    this.setTo(l, t, r - l, b - t);
                                    return this;
                                }
                            }
                            this.setEmpty();
                            return this;
                        };
                        Rectangle.prototype.union = function (toUnion) {
                            return this.clone().unionInPlace(toUnion);
                        };
                        Rectangle.prototype.unionInPlace = function (toUnion) {
                            if (toUnion.isEmpty()) {
                                return this;
                            }
                            if (this.isEmpty()) {
                                this.copyFrom(toUnion);
                                return this;
                            }
                            var l = Math.min(this.x, toUnion.x);
                            var t = Math.min(this.y, toUnion.y);
                            this.setTo(l, t, Math.max(this.right, toUnion.right) - l, Math.max(this.bottom, toUnion.bottom) - t);
                            return this;
                        };
                        Rectangle.prototype.equals = function (toCompare) {
                            return this === toCompare || this.x === toCompare.x && this.y === toCompare.y && this.width === toCompare.width && this.height === toCompare.height;
                        };
                        Rectangle.prototype.copyFrom = function (sourceRect) {
                            this.x = sourceRect.x;
                            this.y = sourceRect.y;
                            this.width = sourceRect.width;
                            this.height = sourceRect.height;
                        };
                        Rectangle.prototype.setTo = function (x, y, width, height) {
                            this.x = +x;
                            this.y = +y;
                            this.width = +width;
                            this.height = +height;
                        };
                        Rectangle.prototype.toTwips = function () {
                            this.x = (this.x * 20) | 0;
                            this.y = (this.y * 20) | 0;
                            this.width = (this.width * 20) | 0;
                            this.height = (this.height * 20) | 0;
                            return this;
                        };
                        Rectangle.prototype.getBaseWidth = function (angle) {
                            var u = Math.abs(Math.cos(angle));
                            var v = Math.abs(Math.sin(angle));
                            return u * this.width + v * this.height;
                        };
                        Rectangle.prototype.getBaseHeight = function (angle) {
                            var u = Math.abs(Math.cos(angle));
                            var v = Math.abs(Math.sin(angle));
                            return v * this.width + u * this.height;
                        };
                        Rectangle.prototype.toPixels = function () {
                            this.x /= 20;
                            this.y /= 20;
                            this.width /= 20;
                            this.height /= 20;
                            return this;
                        };
                        Rectangle.prototype.snapInPlace = function () {
                            var x1 = Math.ceil(this.x + this.width);
                            var y1 = Math.ceil(this.y + this.height);
                            this.x = Math.floor(this.x);
                            this.y = Math.floor(this.y);
                            this.width = x1 - this.x;
                            this.height = y1 - this.y;
                            return this;
                        };
                        Rectangle.prototype.roundInPlace = function () {
                            var x1 = Math.round(this.x + this.width);
                            var y1 = Math.round(this.y + this.height);
                            this.x = Math.round(this.x);
                            this.y = Math.round(this.y);
                            this.width = x1 - this.x;
                            this.height = y1 - this.y;
                            return this;
                        };
                        Rectangle.prototype.toString = function () {
                            return "(x=" + this.x + ", y=" + this.y + ", w=" + this.width + ", h=" + this.height + ")";
                        };
                        Rectangle.prototype.writeExternal = function (output) {
                            output.writeFloat(this.x);
                            output.writeFloat(this.y);
                            output.writeFloat(this.width);
                            output.writeFloat(this.height);
                        };
                        Rectangle.prototype.readExternal = function (input) {
                            this.x = input.readFloat();
                            this.y = input.readFloat();
                            this.width = input.readFloat();
                            this.height = input.readFloat();
                        };
                        Rectangle.classInitializer = null;
                        Rectangle.initializer = null;
                        Rectangle.classSymbols = null;
                        Rectangle.instanceSymbols = null;
                        return Rectangle;
                    })(AS.ASNative);
                    geom.Rectangle = Rectangle;
                })(geom = flash.geom || (flash.geom = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var geom;
                (function (geom) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var throwError = Shumway.AVM2.Runtime.throwError;
                    var Errors = Shumway.AVM2.Errors;
                    var Transform = (function (_super) {
                        __extends(Transform, _super);
                        function Transform(displayObject) {
                            false && _super.call(this);
                            if (!displayObject) {
                                throwError("ArgumentError", Errors.NullPointerError, "displayObject");
                            }
                            this._displayObject = displayObject;
                        }
                        Object.defineProperty(Transform.prototype, "matrix", {
                            get: function () {
                                return this._displayObject._getMatrix().clone().toPixelsInPlace();
                            },
                            set: function (value) {
                                this._displayObject._setMatrix(value, true);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Transform.prototype, "colorTransform", {
                            get: function () {
                                return this._displayObject._colorTransform.clone();
                            },
                            set: function (value) {
                                this._displayObject._setColorTransform(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Transform.prototype, "concatenatedMatrix", {
                            get: function () {
                                var matrix = this._displayObject._getConcatenatedMatrix().clone().toPixelsInPlace();
                                if (!this._displayObject._stage) {
                                    matrix.scale(5, 5);
                                }
                                return matrix;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Transform.prototype, "concatenatedColorTransform", {
                            get: function () {
                                return this._displayObject._getConcatenatedColorTransform();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Transform.prototype, "pixelBounds", {
                            get: function () {
                                notImplemented("public flash.geom.Transform::get pixelBounds");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Transform.prototype, "matrix3D", {
                            get: function () {
                                var m = this._displayObject._matrix3D;
                                return m && m.clone();
                            },
                            set: function (m) {
                                if (!(geom.Matrix3D.isType(m))) {
                                    throwError('TypeError', Errors.CheckTypeFailedError, m, 'flash.geom.Matrix3D');
                                }
                                var raw = m.rawData;
                                this.matrix = new flash.geom.Matrix(raw.asGetPublicProperty(0), raw.asGetPublicProperty(1), raw.asGetPublicProperty(4), raw.asGetPublicProperty(5), raw.asGetPublicProperty(12), raw.asGetPublicProperty(13));
                                somewhatImplemented("public flash.geom.Transform::set matrix3D");
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Transform.prototype.getRelativeMatrix3D = function (relativeTo) {
                            relativeTo = relativeTo;
                            notImplemented("public flash.geom.Transform::getRelativeMatrix3D");
                            return;
                        };
                        Object.defineProperty(Transform.prototype, "perspectiveProjection", {
                            get: function () {
                                notImplemented("public flash.geom.Transform::get perspectiveProjection");
                                return;
                            },
                            set: function (pm) {
                                pm = pm;
                                notImplemented("public flash.geom.Transform::set perspectiveProjection");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Transform.classInitializer = null;
                        Transform.initializer = null;
                        Transform.classSymbols = null;
                        Transform.instanceSymbols = null;
                        return Transform;
                    })(AS.ASNative);
                    geom.Transform = Transform;
                })(geom = flash.geom || (flash.geom = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var geom;
                (function (geom) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var Utils3D = (function (_super) {
                        __extends(Utils3D, _super);
                        function Utils3D() {
                            false && _super.call(this);
                            dummyConstructor("public flash.geom.Utils3D");
                        }
                        Utils3D.projectVector = function (m, v) {
                            m = m;
                            v = v;
                            notImplemented("public flash.geom.Utils3D::static projectVector");
                            return;
                        };
                        Utils3D.projectVectors = function (m, verts, projectedVerts, uvts) {
                            m = m;
                            verts = verts;
                            projectedVerts = projectedVerts;
                            uvts = uvts;
                            notImplemented("public flash.geom.Utils3D::static projectVectors");
                            return;
                        };
                        Utils3D.pointTowards = function (percent, mat, pos, at, up) {
                            if (at === void 0) { at = null; }
                            if (up === void 0) { up = null; }
                            percent = +percent;
                            mat = mat;
                            pos = pos;
                            at = at;
                            up = up;
                            notImplemented("public flash.geom.Utils3D::static pointTowards");
                            return;
                        };
                        Utils3D.classInitializer = null;
                        Utils3D.initializer = null;
                        Utils3D.classSymbols = null;
                        Utils3D.instanceSymbols = null;
                        return Utils3D;
                    })(AS.ASNative);
                    geom.Utils3D = Utils3D;
                })(geom = flash.geom || (flash.geom = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var geom;
                (function (geom) {
                    var Vector3D = (function (_super) {
                        __extends(Vector3D, _super);
                        function Vector3D(x, y, z, w) {
                            if (x === void 0) { x = 0; }
                            if (y === void 0) { y = 0; }
                            if (z === void 0) { z = 0; }
                            if (w === void 0) { w = 0; }
                            false && _super.call(this);
                            this.x = +x;
                            this.y = +y;
                            this.z = +z;
                            this.w = +w;
                        }
                        Object.defineProperty(Vector3D.prototype, "native_x", {
                            get: function () {
                                return this.x;
                            },
                            set: function (x) {
                                this.x = x;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Vector3D.prototype, "native_y", {
                            get: function () {
                                return this.y;
                            },
                            set: function (y) {
                                this.y = y;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Vector3D.prototype, "native_z", {
                            get: function () {
                                return this.z;
                            },
                            set: function (z) {
                                this.z = z;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Vector3D.prototype, "native_w", {
                            get: function () {
                                return this.w;
                            },
                            set: function (w) {
                                this.w = w;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Vector3D.prototype, "length", {
                            get: function () {
                                return Math.sqrt(this.lengthSquared);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Vector3D.prototype, "lengthSquared", {
                            get: function () {
                                return this.x * this.x + this.y * this.y + this.z * this.z;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Vector3D.angleBetween = function (a, b) {
                            return Math.acos(a.dotProduct(b) / (a.length * b.length));
                        };
                        Vector3D.distance = function (pt1, pt2) {
                            return pt1.subtract(pt2).length;
                        };
                        Vector3D.prototype.dotProduct = function (a) {
                            return this.x * a.x + this.y * a.y + this.z * a.z;
                        };
                        Vector3D.prototype.crossProduct = function (a) {
                            return new Vector3D(this.y * a.z - this.z * a.y, this.z * a.x - this.x * a.z, this.x * a.y - this.y * a.x, 1.0);
                        };
                        Vector3D.prototype.normalize = function () {
                            var length = this.length;
                            if (length !== 0) {
                                this.x /= length;
                                this.y /= length;
                                this.z /= length;
                            }
                            else {
                                this.x = this.y = this.z = 0;
                            }
                            return length;
                        };
                        Vector3D.prototype.scaleBy = function (s) {
                            s = +s;
                            this.x *= s;
                            this.y *= s;
                            this.z *= s;
                        };
                        Vector3D.prototype.incrementBy = function (a) {
                            this.x += a.x;
                            this.y += a.y;
                            this.z += a.z;
                        };
                        Vector3D.prototype.decrementBy = function (a) {
                            this.x -= a.x;
                            this.y -= a.y;
                            this.z -= a.z;
                        };
                        Vector3D.prototype.add = function (a) {
                            return new Vector3D(this.x + a.x, this.y + a.y, this.z + a.z);
                        };
                        Vector3D.prototype.subtract = function (a) {
                            return new Vector3D(this.x - a.x, this.y - a.y, this.z - a.z);
                        };
                        Vector3D.prototype.negate = function () {
                            this.x = -this.x;
                            this.y = -this.y;
                            this.z = -this.z;
                        };
                        Vector3D.prototype.equals = function (toCompare, allFour) {
                            return (this.x === toCompare.x) && (this.y === toCompare.y) && (this.z === toCompare.z) && (!allFour || (this.w === toCompare.w));
                        };
                        Vector3D.prototype.nearEquals = function (toCompare, tolerance, allFour) {
                            return (Math.abs(this.x - toCompare.x) < tolerance) && (Math.abs(this.y - toCompare.y) < tolerance) && (Math.abs(this.z - toCompare.z) < tolerance) && (!allFour || (Math.abs(this.w - toCompare.w) < tolerance));
                        };
                        Vector3D.prototype.project = function () {
                            this.x /= this.w;
                            this.y /= this.w;
                            this.z /= this.w;
                        };
                        Vector3D.prototype.copyFrom = function (sourceVector3D) {
                            this.x = sourceVector3D.x;
                            this.y = sourceVector3D.y;
                            this.z = sourceVector3D.z;
                        };
                        Vector3D.prototype.setTo = function (xa, ya, za) {
                            this.x = +xa;
                            this.y = +ya;
                            this.z = +za;
                        };
                        Vector3D.prototype.clone = function () {
                            return new Vector3D(this.x, this.y, this.z, this.w);
                        };
                        Vector3D.prototype.toString = function () {
                            return "Vector3D(" + this.x + ", " + this.y + ", " + this.z + ")";
                        };
                        Vector3D.classInitializer = null;
                        Vector3D.initializer = null;
                        Vector3D.classSymbols = null;
                        Vector3D.instanceSymbols = null;
                        Vector3D.X_AXIS = Object.freeze(new Vector3D(1, 0, 0));
                        Vector3D.Y_AXIS = Object.freeze(new Vector3D(0, 1, 0));
                        Vector3D.Z_AXIS = Object.freeze(new Vector3D(0, 0, 1));
                        return Vector3D;
                    })(AS.ASNative);
                    geom.Vector3D = Vector3D;
                })(geom = flash.geom || (flash.geom = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var accessibility;
                (function (accessibility) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var Accessibility = (function (_super) {
                        __extends(Accessibility, _super);
                        function Accessibility() {
                            false && _super.call(this);
                            dummyConstructor("public flash.accessibility.Accessibility");
                        }
                        Object.defineProperty(Accessibility, "active", {
                            get: function () {
                                notImplemented("public flash.accessibility.Accessibility::get active");
                                return Accessibility._active;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Accessibility.sendEvent = function (source, childID, eventType, nonHTML) {
                            if (nonHTML === void 0) { nonHTML = false; }
                            source = source;
                            childID = childID >>> 0;
                            eventType = eventType >>> 0;
                            nonHTML = !!nonHTML;
                            notImplemented("public flash.accessibility.Accessibility::static sendEvent");
                            return;
                        };
                        Accessibility.updateProperties = function () {
                            notImplemented("public flash.accessibility.Accessibility::static updateProperties");
                            return;
                        };
                        Accessibility.classInitializer = null;
                        Accessibility.initializer = null;
                        Accessibility.classSymbols = null;
                        Accessibility.instanceSymbols = null;
                        Accessibility._active = false;
                        return Accessibility;
                    })(AS.ASNative);
                    accessibility.Accessibility = Accessibility;
                })(accessibility = flash.accessibility || (flash.accessibility = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var accessibility;
                (function (accessibility) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var AccessibilityImplementation = (function (_super) {
                        __extends(AccessibilityImplementation, _super);
                        function AccessibilityImplementation() {
                            false && _super.call(this);
                            dummyConstructor("public flash.accessibility.AccessibilityImplementation");
                        }
                        AccessibilityImplementation.classInitializer = null;
                        AccessibilityImplementation.initializer = null;
                        AccessibilityImplementation.classSymbols = null;
                        AccessibilityImplementation.instanceSymbols = null;
                        return AccessibilityImplementation;
                    })(AS.ASNative);
                    accessibility.AccessibilityImplementation = AccessibilityImplementation;
                })(accessibility = flash.accessibility || (flash.accessibility = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var accessibility;
                (function (accessibility) {
                    var AccessibilityProperties = (function (_super) {
                        __extends(AccessibilityProperties, _super);
                        function AccessibilityProperties() {
                            false && _super.call(this);
                        }
                        AccessibilityProperties.classInitializer = null;
                        AccessibilityProperties.initializer = null;
                        AccessibilityProperties.classSymbols = null;
                        AccessibilityProperties.instanceSymbols = null;
                        return AccessibilityProperties;
                    })(AS.ASNative);
                    accessibility.AccessibilityProperties = AccessibilityProperties;
                })(accessibility = flash.accessibility || (flash.accessibility = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var events;
                (function (events) {
                    var assert = Shumway.Debug.assert;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var Event = (function (_super) {
                        __extends(Event, _super);
                        function Event(type, bubbles, cancelable) {
                            false && _super.call(this);
                            this._type = asCoerceString(type);
                            this._bubbles = !!bubbles;
                            this._cancelable = !!cancelable;
                            this._target = null;
                            this._currentTarget = null;
                            this._eventPhase = events.EventPhase.AT_TARGET;
                            this._stopPropagation = false;
                            this._stopImmediatePropagation = false;
                            this._isDefaultPrevented = false;
                        }
                        Event.getInstance = function (type, bubbles, cancelable) {
                            if (bubbles === void 0) { bubbles = false; }
                            if (cancelable === void 0) { cancelable = false; }
                            var instance = Event._instances[type];
                            if (!instance) {
                                instance = new Event(type, bubbles, cancelable);
                                Event._instances[type] = instance;
                            }
                            instance._bubbles = bubbles;
                            instance._cancelable = cancelable;
                            return instance;
                        };
                        Event.getBroadcastInstance = function (type, bubbles, cancelable) {
                            if (bubbles === void 0) { bubbles = false; }
                            if (cancelable === void 0) { cancelable = false; }
                            var instance = Event._instances[type];
                            if (!instance) {
                                instance = new Event(type, bubbles, cancelable);
                                Event._instances[type] = instance;
                                release || assert(Event.isBroadcastEventType(type));
                            }
                            instance._isBroadcastEvent = true;
                            instance._bubbles = bubbles;
                            instance._cancelable = cancelable;
                            return instance;
                        };
                        Event.isBroadcastEventType = function (type) {
                            switch (type) {
                                case Event.ENTER_FRAME:
                                case Event.EXIT_FRAME:
                                case Event.FRAME_CONSTRUCTED:
                                case Event.RENDER:
                                case Event.ACTIVATE:
                                case Event.DEACTIVATE:
                                    return true;
                            }
                            return false;
                        };
                        Object.defineProperty(Event.prototype, "type", {
                            get: function () {
                                return this._type;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Event.prototype, "bubbles", {
                            get: function () {
                                return this._bubbles;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Event.prototype, "cancelable", {
                            get: function () {
                                return this._cancelable;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Event.prototype, "target", {
                            get: function () {
                                return this._target;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Event.prototype, "currentTarget", {
                            get: function () {
                                return this._currentTarget;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Event.prototype, "eventPhase", {
                            get: function () {
                                return this._eventPhase;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Event.prototype.stopPropagation = function () {
                            this._stopPropagation = true;
                        };
                        Event.prototype.stopImmediatePropagation = function () {
                            this._stopImmediatePropagation = this._stopPropagation = true;
                        };
                        Event.prototype.preventDefault = function () {
                            if (this._cancelable) {
                                this._isDefaultPrevented = true;
                            }
                        };
                        Event.prototype.isDefaultPrevented = function () {
                            return this._isDefaultPrevented;
                        };
                        Event.prototype.isBroadcastEvent = function () {
                            return !!this._isBroadcastEvent;
                        };
                        Event.prototype.clone = function () {
                            return new Event(this._type, this._bubbles, this._cancelable);
                        };
                        Event.prototype.toString = function () {
                            return this.formatToString('Event', 'type', 'bubbles', 'cancelable', 'eventPhase');
                        };
                        Event.prototype.formatToString = function (className) {
                            var args = [];
                            for (var _i = 1; _i < arguments.length; _i++) {
                                args[_i - 1] = arguments[_i];
                            }
                            var str = '[' + className;
                            for (var i = 0; i < args.length; i++) {
                                var field = args[i];
                                var value = this.asGetPublicProperty(field);
                                if (typeof value === 'string') {
                                    value = '"' + value + '"';
                                }
                                str += ' ' + field + '=' + value;
                            }
                            return str + ']';
                        };
                        Event.classInitializer = function () {
                            Event._instances = Shumway.ObjectUtilities.createMap();
                        };
                        Event.initializer = null;
                        Event.classSymbols = null;
                        Event.instanceSymbols = null;
                        Event.ACTIVATE = "activate";
                        Event.ADDED = "added";
                        Event.ADDED_TO_STAGE = "addedToStage";
                        Event.CANCEL = "cancel";
                        Event.CHANGE = "change";
                        Event.CLEAR = "clear";
                        Event.CLOSE = "close";
                        Event.COMPLETE = "complete";
                        Event.CONNECT = "connect";
                        Event.COPY = "copy";
                        Event.CUT = "cut";
                        Event.DEACTIVATE = "deactivate";
                        Event.ENTER_FRAME = "enterFrame";
                        Event.FRAME_CONSTRUCTED = "frameConstructed";
                        Event.EXIT_FRAME = "exitFrame";
                        Event.FRAME_LABEL = "frameLabel";
                        Event.ID3 = "id3";
                        Event.INIT = "init";
                        Event.MOUSE_LEAVE = "mouseLeave";
                        Event.OPEN = "open";
                        Event.PASTE = "paste";
                        Event.REMOVED = "removed";
                        Event.REMOVED_FROM_STAGE = "removedFromStage";
                        Event.RENDER = "render";
                        Event.RESIZE = "resize";
                        Event.SCROLL = "scroll";
                        Event.TEXT_INTERACTION_MODE_CHANGE = "textInteractionModeChange";
                        Event.SELECT = "select";
                        Event.SELECT_ALL = "selectAll";
                        Event.SOUND_COMPLETE = "soundComplete";
                        Event.TAB_CHILDREN_CHANGE = "tabChildrenChange";
                        Event.TAB_ENABLED_CHANGE = "tabEnabledChange";
                        Event.TAB_INDEX_CHANGE = "tabIndexChange";
                        Event.UNLOAD = "unload";
                        Event.FULLSCREEN = "fullScreen";
                        Event.CONTEXT3D_CREATE = "context3DCreate";
                        Event.TEXTURE_READY = "textureReady";
                        Event.VIDEO_FRAME = "videoFrame";
                        Event.SUSPEND = "suspend";
                        Event.AVM1_INIT = "initialize";
                        Event.AVM1_CONSTRUCT = "construct";
                        Event.AVM1_LOAD = "load";
                        return Event;
                    })(AS.ASNative);
                    events.Event = Event;
                })(events = flash.events || (flash.events = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var events;
                (function (events) {
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var isFunction = Shumway.isFunction;
                    var isNullOrUndefined = Shumway.isNullOrUndefined;
                    var throwError = Shumway.AVM2.Runtime.throwError;
                    var assert = Shumway.Debug.assert;
                    var traceEventsOption = Shumway.AVM2.AS.traceEventsOption;
                    var EventListenerEntry = (function () {
                        function EventListenerEntry(listener, useCapture, priority) {
                            this.listener = listener;
                            this.useCapture = useCapture;
                            this.priority = priority;
                        }
                        return EventListenerEntry;
                    })();
                    var EventListenerList = (function () {
                        function EventListenerList() {
                            this._aliasCount = 0;
                            this._entries = [];
                        }
                        EventListenerList.prototype.isEmpty = function () {
                            return this._entries.length === 0;
                        };
                        EventListenerList.prototype.insert = function (listener, useCapture, priority) {
                            var entries = this._entries;
                            var index = entries.length;
                            for (var i = index - 1; i >= 0; i--) {
                                var entry = entries[i];
                                if (entry.listener === listener) {
                                    return;
                                }
                                if (priority > entry.priority) {
                                    index = i;
                                }
                                else {
                                    break;
                                }
                            }
                            entries = this.ensureNonAliasedEntries();
                            entries.splice(index, 0, new EventListenerEntry(listener, useCapture, priority));
                        };
                        EventListenerList.prototype.ensureNonAliasedEntries = function () {
                            var entries = this._entries;
                            if (this._aliasCount > 0) {
                                entries = this._entries = entries.slice();
                                this._aliasCount = 0;
                            }
                            return entries;
                        };
                        EventListenerList.prototype.remove = function (listener) {
                            var entries = this._entries;
                            for (var i = 0; i < entries.length; i++) {
                                var item = entries[i];
                                if (item.listener === listener) {
                                    this.ensureNonAliasedEntries().splice(i, 1);
                                    return;
                                }
                            }
                        };
                        EventListenerList.prototype.snapshot = function () {
                            this._aliasCount++;
                            return this._entries;
                        };
                        EventListenerList.prototype.releaseSnapshot = function (snapshot) {
                            if (this._entries !== snapshot) {
                                return;
                            }
                            if (this._aliasCount > 0) {
                                this._aliasCount--;
                            }
                        };
                        return EventListenerList;
                    })();
                    var BroadcastEventDispatchQueue = (function () {
                        function BroadcastEventDispatchQueue() {
                            this.reset();
                        }
                        BroadcastEventDispatchQueue.prototype.reset = function () {
                            this._queues = Object.create(null);
                        };
                        BroadcastEventDispatchQueue.prototype.add = function (type, target) {
                            release || assert(events.Event.isBroadcastEventType(type), "Can only register broadcast events.");
                            var queue = this._queues[type] || (this._queues[type] = []);
                            if (queue.indexOf(target) >= 0) {
                                return;
                            }
                            queue.push(target);
                        };
                        BroadcastEventDispatchQueue.prototype.remove = function (type, target) {
                            release || assert(events.Event.isBroadcastEventType(type), "Can only unregister broadcast events.");
                            var queue = this._queues[type];
                            release || assert(queue, "There should already be a queue for this.");
                            var index = queue.indexOf(target);
                            release || assert(index >= 0, "Target should be somewhere in this queue.");
                            queue[index] = null;
                            release || assert(queue.indexOf(target) < 0, "Target shouldn't be in this queue anymore.");
                        };
                        BroadcastEventDispatchQueue.prototype.dispatchEvent = function (event) {
                            release || assert(event.isBroadcastEvent(), "Cannot dispatch non-broadcast events.");
                            var queue = this._queues[event.type];
                            if (!queue) {
                                return;
                            }
                            if (!release && traceEventsOption.value) {
                                console.log('Broadcast event of type ' + event._type + ' to ' + queue.length + ' listeners');
                            }
                            var nullCount = 0;
                            for (var i = 0; i < queue.length; i++) {
                                var target = queue[i];
                                if (target === null) {
                                    nullCount++;
                                }
                                else {
                                    target.dispatchEvent(event);
                                }
                            }
                            if (nullCount > 16 && nullCount > (queue.length >> 1)) {
                                var compactedQueue = [];
                                for (var i = 0; i < queue.length; i++) {
                                    if (queue[i]) {
                                        compactedQueue.push(queue[i]);
                                    }
                                }
                                this._queues[event.type] = compactedQueue;
                            }
                        };
                        BroadcastEventDispatchQueue.prototype.getQueueLength = function (type) {
                            return this._queues[type] ? this._queues[type].length : 0;
                        };
                        return BroadcastEventDispatchQueue;
                    })();
                    events.BroadcastEventDispatchQueue = BroadcastEventDispatchQueue;
                    var EventDispatcher = (function (_super) {
                        __extends(EventDispatcher, _super);
                        function EventDispatcher(target) {
                            if (target === void 0) { target = null; }
                            false && _super.call(this);
                            this._target = target || this;
                        }
                        EventDispatcher.prototype.toString = function () {
                            return AS.ASObject.dynamicPrototype['$BgtoString'].call(this);
                        };
                        EventDispatcher.prototype._getListenersForType = function (useCapture, type) {
                            var listeners = useCapture ? this._captureListeners : this._targetOrBubblingListeners;
                            if (listeners) {
                                return listeners[type];
                            }
                            return null;
                        };
                        EventDispatcher.prototype._getListeners = function (useCapture) {
                            if (useCapture) {
                                return this._captureListeners || (this._captureListeners = Object.create(null));
                            }
                            return this._targetOrBubblingListeners || (this._targetOrBubblingListeners = Object.create(null));
                        };
                        EventDispatcher.prototype.addEventListener = function (type, listener, useCapture, priority, useWeakReference) {
                            if (useCapture === void 0) { useCapture = false; }
                            if (priority === void 0) { priority = 0; }
                            if (useWeakReference === void 0) { useWeakReference = false; }
                            if (arguments.length < 2 || arguments.length > 5) {
                                throwError("ArgumentError", AVM2.Errors.WrongArgumentCountError, "flash.events::EventDispatcher/addEventListener()", 2, arguments.length);
                            }
                            if (!isFunction(listener)) {
                                throwError("TypeError", AVM2.Errors.CheckTypeFailedError, listener, "Function");
                            }
                            if (isNullOrUndefined(type)) {
                                throwError("TypeError", AVM2.Errors.NullPointerError, "type");
                            }
                            type = asCoerceString(type);
                            useCapture = !!useCapture;
                            priority |= 0;
                            useWeakReference = !!useWeakReference;
                            var listeners = this._getListeners(useCapture);
                            var list = listeners[type] || (listeners[type] = new EventListenerList());
                            list.insert(listener, useCapture, priority);
                            if (!useCapture && events.Event.isBroadcastEventType(type)) {
                                EventDispatcher.broadcastEventDispatchQueue.add(type, this);
                            }
                        };
                        EventDispatcher.prototype.removeEventListener = function (type, listener, useCapture) {
                            if (useCapture === void 0) { useCapture = false; }
                            if (arguments.length < 2 || arguments.length > 3) {
                                throwError("ArgumentError", AVM2.Errors.WrongArgumentCountError, "flash.events::EventDispatcher/removeEventListener()", 2, arguments.length);
                            }
                            if (!isFunction(listener)) {
                                throwError("TypeError", AVM2.Errors.CheckTypeFailedError, listener, "Function");
                            }
                            if (isNullOrUndefined(type)) {
                                throwError("TypeError", AVM2.Errors.NullPointerError, "type");
                            }
                            type = asCoerceString(type);
                            var listeners = this._getListeners(!!useCapture);
                            var list = listeners[type];
                            if (list) {
                                list.remove(listener);
                                if (list.isEmpty()) {
                                    if (!useCapture && events.Event.isBroadcastEventType(type)) {
                                        EventDispatcher.broadcastEventDispatchQueue.remove(type, this);
                                    }
                                    listeners[type] = null;
                                }
                            }
                        };
                        EventDispatcher.prototype._hasTargetOrBubblingEventListener = function (type) {
                            return !!(this._targetOrBubblingListeners && this._targetOrBubblingListeners[type]);
                        };
                        EventDispatcher.prototype._hasCaptureEventListener = function (type) {
                            return !!(this._captureListeners && this._captureListeners[type]);
                        };
                        EventDispatcher.prototype._hasEventListener = function (type) {
                            return this._hasTargetOrBubblingEventListener(type) || this._hasCaptureEventListener(type);
                        };
                        EventDispatcher.prototype.hasEventListener = function (type) {
                            if (arguments.length !== 1) {
                                throwError("ArgumentError", AVM2.Errors.WrongArgumentCountError, "flash.events::EventDispatcher/hasEventListener()", 1, arguments.length);
                            }
                            if (isNullOrUndefined(type)) {
                                throwError("TypeError", AVM2.Errors.NullPointerError, "type");
                            }
                            type = asCoerceString(type);
                            return this._hasEventListener(type);
                        };
                        EventDispatcher.prototype.willTrigger = function (type) {
                            if (arguments.length !== 1) {
                                throwError("ArgumentError", AVM2.Errors.WrongArgumentCountError, "flash.events::EventDispatcher/hasEventListener()", 1, arguments.length);
                            }
                            if (isNullOrUndefined(type)) {
                                throwError("TypeError", AVM2.Errors.NullPointerError, "type");
                            }
                            type = asCoerceString(type);
                            if (this._hasEventListener(type)) {
                                return true;
                            }
                            if (flash.display.DisplayObject.isType(this)) {
                                var node = this._parent;
                                do {
                                    if (node._hasEventListener(type)) {
                                        return true;
                                    }
                                } while ((node = node._parent));
                            }
                            return false;
                        };
                        EventDispatcher.prototype._skipDispatchEvent = function (event) {
                            if (this._hasEventListener(event.type)) {
                                return false;
                            }
                            if (event.isBroadcastEvent()) {
                                return true;
                            }
                            else if (event._bubbles && flash.display.DisplayObject.isType(this)) {
                                for (var node = this._parent; node; node = node._parent) {
                                    if (node._hasEventListener(event.type)) {
                                        return false;
                                    }
                                }
                            }
                            return true;
                        };
                        EventDispatcher.prototype.dispatchEvent = function (event) {
                            if (arguments.length !== 1) {
                                throwError("ArgumentError", AVM2.Errors.WrongArgumentCountError, "flash.events::EventDispatcher/dispatchEvent()", 1, arguments.length);
                            }
                            if (this._skipDispatchEvent(event)) {
                                return true;
                            }
                            if (!release && traceEventsOption.value) {
                                console.log('Dispatch event of type ' + event._type);
                            }
                            release || AVM2.counter.count("EventDispatcher::dispatchEvent");
                            var type = event._type;
                            var target = this._target;
                            release || AVM2.counter.count("EventDispatcher::dispatchEvent(" + type + ")");
                            var keepPropagating = true;
                            var ancestors = [];
                            if (!event.isBroadcastEvent() && flash.display.DisplayObject.isType(this)) {
                                var node = this._parent;
                                while (node) {
                                    if (node._hasEventListener(type)) {
                                        ancestors.push(node);
                                    }
                                    node = node._parent;
                                }
                                for (var i = ancestors.length - 1; i >= 0 && keepPropagating; i--) {
                                    var ancestor = ancestors[i];
                                    if (!ancestor._hasCaptureEventListener(type)) {
                                        continue;
                                    }
                                    var list = ancestor._getListenersForType(true, type);
                                    release || assert(list);
                                    keepPropagating = EventDispatcher.callListeners(list, event, target, ancestor, events.EventPhase.CAPTURING_PHASE);
                                }
                            }
                            if (keepPropagating) {
                                var list = this._getListenersForType(false, type);
                                if (list) {
                                    keepPropagating = EventDispatcher.callListeners(list, event, target, target, events.EventPhase.AT_TARGET);
                                }
                            }
                            if (!event.isBroadcastEvent() && keepPropagating && event.bubbles) {
                                for (var i = 0; i < ancestors.length && keepPropagating; i++) {
                                    var ancestor = ancestors[i];
                                    if (!ancestor._hasTargetOrBubblingEventListener(type)) {
                                        continue;
                                    }
                                    var list = ancestor._getListenersForType(false, type);
                                    keepPropagating = EventDispatcher.callListeners(list, event, target, ancestor, events.EventPhase.BUBBLING_PHASE);
                                }
                            }
                            return !event._isDefaultPrevented;
                        };
                        EventDispatcher.callListeners = function (list, event, target, currentTarget, eventPhase) {
                            if (list.isEmpty()) {
                                return true;
                            }
                            if (event._target) {
                                event = event.asCallPublicProperty('clone', null);
                            }
                            var snapshot = list.snapshot();
                            for (var i = 0; i < snapshot.length; i++) {
                                var entry = snapshot[i];
                                event._target = target;
                                event._currentTarget = currentTarget;
                                event._eventPhase = eventPhase;
                                entry.listener(event);
                                if (event._stopImmediatePropagation) {
                                    break;
                                }
                            }
                            list.releaseSnapshot(snapshot);
                            return !event._stopPropagation;
                        };
                        EventDispatcher.classInitializer = function () {
                            EventDispatcher.broadcastEventDispatchQueue = new BroadcastEventDispatchQueue();
                        };
                        EventDispatcher.initializer = function () {
                            var self = this;
                            self._target = this;
                            self._captureListeners = null;
                            self._targetOrBubblingListeners = null;
                        };
                        EventDispatcher.classSymbols = null;
                        EventDispatcher.instanceSymbols = null;
                        return EventDispatcher;
                    })(AS.ASNative);
                    events.EventDispatcher = EventDispatcher;
                })(events = flash.events || (flash.events = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var events;
                (function (events) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var EventPhase = (function (_super) {
                        __extends(EventPhase, _super);
                        function EventPhase() {
                            _super.call(this);
                            dummyConstructor("public flash.events.EventPhase");
                        }
                        EventPhase.classInitializer = null;
                        EventPhase.initializer = null;
                        EventPhase.classSymbols = null;
                        EventPhase.instanceSymbols = null;
                        EventPhase.CAPTURING_PHASE = 1;
                        EventPhase.AT_TARGET = 2;
                        EventPhase.BUBBLING_PHASE = 3;
                        return EventPhase;
                    })(AS.ASNative);
                    events.EventPhase = EventPhase;
                })(events = flash.events || (flash.events = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var events;
                (function (events) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var TextEvent = (function (_super) {
                        __extends(TextEvent, _super);
                        function TextEvent(type, bubbles, cancelable, text) {
                            _super.call(this, type, bubbles, cancelable);
                            this._text = text;
                        }
                        Object.defineProperty(TextEvent.prototype, "text", {
                            get: function () {
                                return this._text;
                            },
                            set: function (value) {
                                this._text = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        TextEvent.prototype.clone = function () {
                            var textEvent = new TextEvent(this.type, this.bubbles, this.cancelable, this.text);
                            this.copyNativeData(textEvent);
                            return textEvent;
                        };
                        TextEvent.prototype.toString = function () {
                            return this.formatToString('TextEvent', 'type', 'bubbles', 'cancelable', 'text');
                        };
                        TextEvent.prototype.copyNativeData = function (event) {
                            notImplemented("public flash.events.TextEvent::copyNativeData");
                        };
                        TextEvent.classInitializer = null;
                        TextEvent.initializer = null;
                        TextEvent.classSymbols = null;
                        TextEvent.instanceSymbols = null;
                        TextEvent.LINK = "link";
                        TextEvent.TEXT_INPUT = "textInput";
                        return TextEvent;
                    })(flash.events.Event);
                    events.TextEvent = TextEvent;
                })(events = flash.events || (flash.events = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var events;
                (function (events) {
                    var ErrorEvent = (function (_super) {
                        __extends(ErrorEvent, _super);
                        function ErrorEvent(type, bubbles, cancelable, text, id) {
                            if (bubbles === void 0) { bubbles = false; }
                            if (cancelable === void 0) { cancelable = false; }
                            if (text === void 0) { text = ""; }
                            if (id === void 0) { id = 0; }
                            _super.call(this, type, bubbles, cancelable, text);
                            this.setID(id);
                        }
                        ErrorEvent.prototype.setID = function (id) {
                            this._id = id;
                        };
                        Object.defineProperty(ErrorEvent.prototype, "errorID", {
                            get: function () {
                                return this._id;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        ErrorEvent.prototype.clone = function () {
                            return new ErrorEvent(this.type, this.bubbles, this.cancelable, this.text, this.errorID);
                        };
                        ErrorEvent.prototype.toString = function () {
                            return this.formatToString('ErrorEvent', 'type', 'bubbles', 'cancelable', 'text', 'errorID');
                        };
                        ErrorEvent.classInitializer = null;
                        ErrorEvent.initializer = null;
                        ErrorEvent.classSymbols = null;
                        ErrorEvent.instanceSymbols = null;
                        ErrorEvent.ERROR = "error";
                        return ErrorEvent;
                    })(flash.events.TextEvent);
                    events.ErrorEvent = ErrorEvent;
                })(events = flash.events || (flash.events = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var events;
                (function (events) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var GameInputEvent = (function (_super) {
                        __extends(GameInputEvent, _super);
                        function GameInputEvent(type, bubbles, cancelable, device) {
                            if (bubbles === void 0) { bubbles = false; }
                            if (cancelable === void 0) { cancelable = false; }
                            if (device === void 0) { device = null; }
                            _super.call(this, undefined, undefined, undefined);
                            dummyConstructor("public flash.events.GameInputEvent");
                        }
                        GameInputEvent.classInitializer = null;
                        GameInputEvent.initializer = null;
                        GameInputEvent.classSymbols = null;
                        GameInputEvent.instanceSymbols = null;
                        GameInputEvent.DEVICE_ADDED = "deviceAdded";
                        GameInputEvent.DEVICE_REMOVED = "deviceRemoved";
                        return GameInputEvent;
                    })(flash.events.Event);
                    events.GameInputEvent = GameInputEvent;
                })(events = flash.events || (flash.events = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var events;
                (function (events) {
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var GestureEvent = (function (_super) {
                        __extends(GestureEvent, _super);
                        function GestureEvent(type, bubbles, cancelable, phase, localX, localY, ctrlKey, altKey, shiftKey) {
                            if (bubbles === void 0) { bubbles = true; }
                            if (cancelable === void 0) { cancelable = false; }
                            if (phase === void 0) { phase = null; }
                            if (localX === void 0) { localX = 0; }
                            if (localY === void 0) { localY = 0; }
                            if (ctrlKey === void 0) { ctrlKey = false; }
                            if (altKey === void 0) { altKey = false; }
                            if (shiftKey === void 0) { shiftKey = false; }
                            _super.call(this, undefined, undefined, undefined);
                            dummyConstructor("public flash.events.GestureEvent");
                        }
                        Object.defineProperty(GestureEvent.prototype, "localX", {
                            get: function () {
                                return this._localX;
                            },
                            set: function (value) {
                                this._localX = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GestureEvent.prototype, "localY", {
                            get: function () {
                                return this._localY;
                            },
                            set: function (value) {
                                this._localY = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GestureEvent.prototype, "stageX", {
                            get: function () {
                                somewhatImplemented("public flash.events.GestureEvent::stageX");
                                return 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GestureEvent.prototype, "stageY", {
                            get: function () {
                                somewhatImplemented("public flash.events.GestureEvent::stageY");
                                return 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GestureEvent.prototype, "ctrlKey", {
                            get: function () {
                                return this._ctrlKey;
                            },
                            set: function (value) {
                                this._ctrlKey = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GestureEvent.prototype, "altKey", {
                            get: function () {
                                return this._altKey;
                            },
                            set: function (value) {
                                this._altKey = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GestureEvent.prototype, "shiftKey", {
                            get: function () {
                                return this._shiftKey;
                            },
                            set: function (value) {
                                this._shiftKey = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GestureEvent.prototype, "phase", {
                            get: function () {
                                return this._phase;
                            },
                            set: function (value) {
                                this._phase = asCoerceString(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        GestureEvent.prototype.updateAfterEvent = function () {
                            somewhatImplemented("public flash.events.GestureEvent::updateAfterEvent");
                        };
                        GestureEvent.prototype.NativeCtor = function (phase, localX, localY, ctrlKey, altKey, shiftKey) {
                            this._phase = asCoerceString(phase);
                            this._localX = +localX;
                            this._localY = +localY;
                            this._ctrlKey = !!ctrlKey;
                            this._altKey = !!altKey;
                            this._shiftKey = !!shiftKey;
                        };
                        GestureEvent.prototype.clone = function () {
                            return new flash.events.GestureEvent(this.type, this.bubbles, this.cancelable, this.phase, this.localX, this.localY, this.ctrlKey, this.altKey, this.shiftKey);
                        };
                        GestureEvent.prototype.toString = function () {
                            return this.formatToString('GestureEvent', 'type', 'bubbles', 'cancelable', 'eventPhase', 'localX', 'localY', 'ctrlKey', 'altKey', 'shiftKey');
                        };
                        GestureEvent.classInitializer = null;
                        GestureEvent.initializer = null;
                        GestureEvent.classSymbols = null;
                        GestureEvent.instanceSymbols = null;
                        GestureEvent.GESTURE_TWO_FINGER_TAP = "gestureTwoFingerTap";
                        return GestureEvent;
                    })(flash.events.Event);
                    events.GestureEvent = GestureEvent;
                })(events = flash.events || (flash.events = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var events;
                (function (events) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var HTTPStatusEvent = (function (_super) {
                        __extends(HTTPStatusEvent, _super);
                        function HTTPStatusEvent(type, bubbles, cancelable, status) {
                            if (bubbles === void 0) { bubbles = false; }
                            if (cancelable === void 0) { cancelable = false; }
                            if (status === void 0) { status = 0; }
                            _super.call(this, undefined, undefined, undefined);
                            dummyConstructor("public flash.events.HTTPStatusEvent");
                        }
                        HTTPStatusEvent.prototype._setStatus = function (value) {
                            this._status = value;
                        };
                        Object.defineProperty(HTTPStatusEvent.prototype, "status", {
                            get: function () {
                                return this._status;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(HTTPStatusEvent.prototype, "responseURL", {
                            get: function () {
                                return this._responseURL;
                            },
                            set: function (value) {
                                this._responseURL = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(HTTPStatusEvent.prototype, "responseHeaders", {
                            get: function () {
                                return this._responseHeaders;
                            },
                            set: function (value) {
                                this._responseHeaders = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        HTTPStatusEvent.prototype.clone = function () {
                            var event = new events.HTTPStatusEvent(this.type, this.bubbles, this.cancelable, this.status);
                            event.responseURL = this.responseURL;
                            event.responseHeaders = this.responseHeaders;
                            return event;
                        };
                        HTTPStatusEvent.prototype.toString = function () {
                            return this.formatToString('HTTPStatusEvent', 'type', 'bubbles', 'cancelable', 'eventPhase', 'status', 'responseURL', 'responseHeaders');
                        };
                        HTTPStatusEvent.classInitializer = null;
                        HTTPStatusEvent.initializer = null;
                        HTTPStatusEvent.classSymbols = null;
                        HTTPStatusEvent.instanceSymbols = null;
                        HTTPStatusEvent.HTTP_STATUS = "httpStatus";
                        HTTPStatusEvent.HTTP_RESPONSE_STATUS = "httpResponseStatus";
                        return HTTPStatusEvent;
                    })(flash.events.Event);
                    events.HTTPStatusEvent = HTTPStatusEvent;
                })(events = flash.events || (flash.events = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var events;
                (function (events) {
                    var IOErrorEvent = (function (_super) {
                        __extends(IOErrorEvent, _super);
                        function IOErrorEvent(type, bubbles, cancelable, text, id) {
                            if (bubbles === void 0) { bubbles = false; }
                            if (cancelable === void 0) { cancelable = false; }
                            if (text === void 0) { text = ""; }
                            if (id === void 0) { id = 0; }
                            _super.call(this, type, bubbles, cancelable, text, id);
                        }
                        IOErrorEvent.prototype.clone = function () {
                            var event = new IOErrorEvent(this.type, this.bubbles, this.cancelable, this.text, this.errorID);
                            this.copyNativeData(event);
                            return event;
                        };
                        IOErrorEvent.prototype.toString = function () {
                            return this.formatToString('IOErrorEvent', 'type', 'bubbles', 'cancelable', 'text', 'errorID');
                        };
                        IOErrorEvent.classInitializer = null;
                        IOErrorEvent.initializer = null;
                        IOErrorEvent.classSymbols = null;
                        IOErrorEvent.instanceSymbols = null;
                        IOErrorEvent.IO_ERROR = "ioError";
                        IOErrorEvent.NETWORK_ERROR = "networkError";
                        IOErrorEvent.DISK_ERROR = "diskError";
                        IOErrorEvent.VERIFY_ERROR = "verifyError";
                        return IOErrorEvent;
                    })(flash.events.ErrorEvent);
                    events.IOErrorEvent = IOErrorEvent;
                })(events = flash.events || (flash.events = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var events;
                (function (events) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var KeyboardEvent = (function (_super) {
                        __extends(KeyboardEvent, _super);
                        function KeyboardEvent(type, bubbles, cancelable, charCodeValue, keyCodeValue, keyLocationValue, ctrlKeyValue, altKeyValue, shiftKeyValue) {
                            if (bubbles === void 0) { bubbles = true; }
                            if (cancelable === void 0) { cancelable = false; }
                            if (charCodeValue === void 0) { charCodeValue = 0; }
                            if (keyCodeValue === void 0) { keyCodeValue = 0; }
                            if (keyLocationValue === void 0) { keyLocationValue = 0; }
                            if (ctrlKeyValue === void 0) { ctrlKeyValue = false; }
                            if (altKeyValue === void 0) { altKeyValue = false; }
                            if (shiftKeyValue === void 0) { shiftKeyValue = false; }
                            _super.call(this, undefined, undefined, undefined);
                            dummyConstructor("public flash.events.KeyboardEvent");
                        }
                        Object.defineProperty(KeyboardEvent.prototype, "charCode", {
                            get: function () {
                                return this._charCode;
                            },
                            set: function (value) {
                                this._charCode = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(KeyboardEvent.prototype, "keyCode", {
                            get: function () {
                                return this._keyCode;
                            },
                            set: function (value) {
                                this._keyCode = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(KeyboardEvent.prototype, "keyLocation", {
                            get: function () {
                                return this._keyLocation;
                            },
                            set: function (value) {
                                this._keyLocation = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(KeyboardEvent.prototype, "ctrlKey", {
                            get: function () {
                                return this._ctrlKey;
                            },
                            set: function (value) {
                                this._ctrlKey = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(KeyboardEvent.prototype, "altKey", {
                            get: function () {
                                return this._altKey;
                            },
                            set: function (value) {
                                this._altKey = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(KeyboardEvent.prototype, "shiftKey", {
                            get: function () {
                                return this._shiftKey;
                            },
                            set: function (value) {
                                this._shiftKey = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        KeyboardEvent.prototype.clone = function () {
                            return new events.KeyboardEvent(this.type, this.bubbles, this.cancelable, this.charCode, this.keyCode, this.keyLocation, this.ctrlKey, this.altKey, this.shiftKey);
                        };
                        KeyboardEvent.prototype.toString = function () {
                            return this.formatToString('KeyboardEvent', 'type', 'bubbles', 'cancelable', 'eventPhase', 'charCode', 'keyCode', 'keyLocation', 'ctrlKey', 'altKey', 'shiftKey');
                        };
                        KeyboardEvent.prototype.updateAfterEvent = function () {
                            Shumway.AVM2.Runtime.AVM2.instance.globals['Shumway.Player.Utils'].requestRendering();
                        };
                        KeyboardEvent.classInitializer = null;
                        KeyboardEvent.initializer = null;
                        KeyboardEvent.classSymbols = null;
                        KeyboardEvent.instanceSymbols = null;
                        KeyboardEvent.KEY_DOWN = "keyDown";
                        KeyboardEvent.KEY_UP = "keyUp";
                        return KeyboardEvent;
                    })(flash.events.Event);
                    events.KeyboardEvent = KeyboardEvent;
                })(events = flash.events || (flash.events = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var events;
                (function (events) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var MouseEvent = (function (_super) {
                        __extends(MouseEvent, _super);
                        function MouseEvent(type, bubbles, cancelable, localX, localY, relatedObject, ctrlKey, altKey, shiftKey, buttonDown, delta) {
                            if (bubbles === void 0) { bubbles = true; }
                            if (cancelable === void 0) { cancelable = false; }
                            if (localX === void 0) { localX = undefined; }
                            if (localY === void 0) { localY = undefined; }
                            if (relatedObject === void 0) { relatedObject = null; }
                            if (ctrlKey === void 0) { ctrlKey = false; }
                            if (altKey === void 0) { altKey = false; }
                            if (shiftKey === void 0) { shiftKey = false; }
                            if (buttonDown === void 0) { buttonDown = false; }
                            if (delta === void 0) { delta = 0; }
                            _super.call(this, undefined, undefined, undefined);
                            dummyConstructor("public flash.events.MouseEvent");
                        }
                        MouseEvent.typeFromDOMType = function (name) {
                            switch (name) {
                                case "click":
                                    return MouseEvent.CLICK;
                                case "dblclick":
                                    return MouseEvent.DOUBLE_CLICK;
                                case "mousedown":
                                    return MouseEvent.MOUSE_DOWN;
                                case "mouseout":
                                case "mouseover":
                                case "mousemove":
                                    return MouseEvent.MOUSE_MOVE;
                                case "mouseup":
                                    return MouseEvent.MOUSE_UP;
                                default:
                                    notImplemented(name);
                            }
                        };
                        Object.defineProperty(MouseEvent.prototype, "localX", {
                            get: function () {
                                return (this._localX / 20) | 0;
                            },
                            set: function (value) {
                                this._localX = (value * 20) | 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MouseEvent.prototype, "localY", {
                            get: function () {
                                return (this._localY / 20) | 0;
                            },
                            set: function (value) {
                                this._localY = (value * 20) | 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MouseEvent.prototype, "stageX", {
                            get: function () {
                                if (isNaN(this.localX + this.localY)) {
                                    return Number.NaN;
                                }
                                return (this._getGlobalPoint().x / 20) | 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MouseEvent.prototype, "stageY", {
                            get: function () {
                                if (isNaN(this.localX + this.localY)) {
                                    return Number.NaN;
                                }
                                return (this._getGlobalPoint().y / 20) | 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MouseEvent.prototype, "movementX", {
                            get: function () {
                                return this._movementX || 0;
                            },
                            set: function (value) {
                                this._movementX = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MouseEvent.prototype, "movementY", {
                            get: function () {
                                return this._movementY || 0;
                            },
                            set: function (value) {
                                this._movementY = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MouseEvent.prototype, "delta", {
                            get: function () {
                                return this._delta;
                            },
                            set: function (value) {
                                this._delta = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MouseEvent.prototype, "ctrlKey", {
                            get: function () {
                                return this._ctrlKey;
                            },
                            set: function (value) {
                                this._ctrlKey = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MouseEvent.prototype, "altKey", {
                            get: function () {
                                return this._altKey;
                            },
                            set: function (value) {
                                this._altKey = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MouseEvent.prototype, "shiftKey", {
                            get: function () {
                                return this._shiftKey;
                            },
                            set: function (value) {
                                this._shiftKey = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MouseEvent.prototype, "buttonDown", {
                            get: function () {
                                return this._buttonDown;
                            },
                            set: function (value) {
                                this._buttonDown = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MouseEvent.prototype, "relatedObject", {
                            get: function () {
                                return this._relatedObject;
                            },
                            set: function (value) {
                                this._relatedObject = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MouseEvent.prototype, "isRelatedObjectInaccessible", {
                            get: function () {
                                return this._isRelatedObjectInaccessible;
                            },
                            set: function (value) {
                                this._isRelatedObjectInaccessible = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        MouseEvent.prototype.updateAfterEvent = function () {
                            Shumway.AVM2.Runtime.AVM2.instance.globals['Shumway.Player.Utils'].requestRendering();
                        };
                        MouseEvent.prototype._getGlobalPoint = function () {
                            var point = this._position;
                            if (!point) {
                                point = this._position = new flash.geom.Point();
                            }
                            if (this.target) {
                                point.setTo(this._localX, this._localY);
                                var m = this._target._getConcatenatedMatrix();
                                m.transformPointInPlace(point);
                            }
                            else {
                                point.setTo(0, 0);
                            }
                            return point;
                        };
                        MouseEvent.prototype.clone = function () {
                            return new flash.events.MouseEvent(this.type, this.bubbles, this.cancelable, this.localX, this.localY, this.relatedObject, this.ctrlKey, this.altKey, this.shiftKey, this.buttonDown, this.delta);
                        };
                        MouseEvent.prototype.toString = function () {
                            return this.formatToString('MouseEvent', 'type', 'bubbles', 'cancelable', 'eventPhase', 'localX', "localY", 'relatedObject', 'ctrlKey', 'altKey', 'shiftKey', 'buttonDown', 'delta');
                        };
                        MouseEvent.classInitializer = null;
                        MouseEvent.initializer = null;
                        MouseEvent.classSymbols = null;
                        MouseEvent.instanceSymbols = null;
                        MouseEvent.CLICK = "click";
                        MouseEvent.DOUBLE_CLICK = "doubleClick";
                        MouseEvent.MOUSE_DOWN = "mouseDown";
                        MouseEvent.MOUSE_MOVE = "mouseMove";
                        MouseEvent.MOUSE_OUT = "mouseOut";
                        MouseEvent.MOUSE_OVER = "mouseOver";
                        MouseEvent.MOUSE_UP = "mouseUp";
                        MouseEvent.RELEASE_OUTSIDE = "releaseOutside";
                        MouseEvent.MOUSE_WHEEL = "mouseWheel";
                        MouseEvent.ROLL_OUT = "rollOut";
                        MouseEvent.ROLL_OVER = "rollOver";
                        MouseEvent.MIDDLE_CLICK = "middleClick";
                        MouseEvent.MIDDLE_MOUSE_DOWN = "middleMouseDown";
                        MouseEvent.MIDDLE_MOUSE_UP = "middleMouseUp";
                        MouseEvent.RIGHT_CLICK = "rightClick";
                        MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
                        MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
                        MouseEvent.CONTEXT_MENU = "contextMenu";
                        return MouseEvent;
                    })(flash.events.Event);
                    events.MouseEvent = MouseEvent;
                })(events = flash.events || (flash.events = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var events;
                (function (events) {
                    var NetStatusEvent = (function (_super) {
                        __extends(NetStatusEvent, _super);
                        function NetStatusEvent(type, bubbles, cancelable, info) {
                            if (bubbles === void 0) { bubbles = false; }
                            if (cancelable === void 0) { cancelable = false; }
                            if (info === void 0) { info = null; }
                            false && _super.call(this, undefined, undefined, undefined);
                        }
                        Object.defineProperty(NetStatusEvent.prototype, "info", {
                            get: function () {
                                return this._info;
                            },
                            set: function (value) {
                                this._info = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        NetStatusEvent.prototype.clone = function () {
                            return new flash.events.NetStatusEvent(this.type, this.bubbles, this.cancelable, this.info);
                        };
                        NetStatusEvent.prototype.toString = function () {
                            return this.formatToString('NetStatusEvent', 'type', 'bubbles', 'cancelable', 'eventPhase', 'info');
                        };
                        NetStatusEvent.classInitializer = null;
                        NetStatusEvent.initializer = null;
                        NetStatusEvent.classSymbols = null;
                        NetStatusEvent.instanceSymbols = null;
                        NetStatusEvent.NET_STATUS = "netStatus";
                        return NetStatusEvent;
                    })(flash.events.Event);
                    events.NetStatusEvent = NetStatusEvent;
                })(events = flash.events || (flash.events = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var events;
                (function (events) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var ProgressEvent = (function (_super) {
                        __extends(ProgressEvent, _super);
                        function ProgressEvent(type, bubbles, cancelable, bytesLoaded, bytesTotal) {
                            if (bubbles === void 0) { bubbles = false; }
                            if (cancelable === void 0) { cancelable = false; }
                            if (bytesLoaded === void 0) { bytesLoaded = 0; }
                            if (bytesTotal === void 0) { bytesTotal = 0; }
                            _super.call(this, undefined, undefined, undefined);
                            dummyConstructor("public flash.events.ProgressEvent");
                        }
                        Object.defineProperty(ProgressEvent.prototype, "bytesLoaded", {
                            get: function () {
                                return this._bytesLoaded;
                            },
                            set: function (value) {
                                this._bytesLoaded = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ProgressEvent.prototype, "bytesTotal", {
                            get: function () {
                                return this._bytesTotal;
                            },
                            set: function (value) {
                                this._bytesTotal = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        ProgressEvent.prototype.clone = function () {
                            return new flash.events.ProgressEvent(this._type, this._bubbles, this._cancelable, this._bytesLoaded, this._bytesTotal);
                        };
                        ProgressEvent.prototype.toString = function () {
                            return this.formatToString('ProgressEvent', 'bubbles', 'cancelable', 'eventPhase', 'bytesLoaded', 'bytesTotal');
                        };
                        ProgressEvent.classInitializer = null;
                        ProgressEvent.initializer = null;
                        ProgressEvent.classSymbols = null;
                        ProgressEvent.instanceSymbols = null;
                        ProgressEvent.PROGRESS = "progress";
                        ProgressEvent.SOCKET_DATA = "socketData";
                        return ProgressEvent;
                    })(flash.events.Event);
                    events.ProgressEvent = ProgressEvent;
                })(events = flash.events || (flash.events = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var events;
                (function (events) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var SecurityErrorEvent = (function (_super) {
                        __extends(SecurityErrorEvent, _super);
                        function SecurityErrorEvent(type, bubbles, cancelable, text, id) {
                            if (bubbles === void 0) { bubbles = false; }
                            if (cancelable === void 0) { cancelable = false; }
                            if (text === void 0) { text = ""; }
                            if (id === void 0) { id = 0; }
                            _super.call(this, undefined, undefined, undefined, undefined, undefined);
                            dummyConstructor("public flash.events.SecurityErrorEvent");
                        }
                        SecurityErrorEvent.classInitializer = null;
                        SecurityErrorEvent.initializer = null;
                        SecurityErrorEvent.classSymbols = null;
                        SecurityErrorEvent.instanceSymbols = null;
                        SecurityErrorEvent.SECURITY_ERROR = "securityError";
                        return SecurityErrorEvent;
                    })(flash.events.ErrorEvent);
                    events.SecurityErrorEvent = SecurityErrorEvent;
                })(events = flash.events || (flash.events = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var events;
                (function (events) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var TimerEvent = (function (_super) {
                        __extends(TimerEvent, _super);
                        function TimerEvent(type, bubbles, cancelable) {
                            _super.call(this, undefined, undefined, undefined);
                            dummyConstructor("public flash.events.TimerEvent");
                        }
                        TimerEvent.prototype.clone = function () {
                            return new events.TimerEvent(this.type, this.bubbles, this.cancelable);
                        };
                        TimerEvent.prototype.toString = function () {
                            return this.formatToString('TimerEvent', 'type', 'bubbles', 'cancelable', 'eventPhase');
                        };
                        TimerEvent.prototype.updateAfterEvent = function () {
                            Shumway.AVM2.Runtime.AVM2.instance.globals['Shumway.Player.Utils'].requestRendering();
                        };
                        TimerEvent.classInitializer = null;
                        TimerEvent.initializer = null;
                        TimerEvent.classSymbols = null;
                        TimerEvent.instanceSymbols = null;
                        TimerEvent.TIMER = "timer";
                        TimerEvent.TIMER_COMPLETE = "timerComplete";
                        return TimerEvent;
                    })(flash.events.Event);
                    events.TimerEvent = TimerEvent;
                })(events = flash.events || (flash.events = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var events;
                (function (events) {
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var TouchEvent = (function (_super) {
                        __extends(TouchEvent, _super);
                        function TouchEvent(type, bubbles, cancelable, touchPointID, isPrimaryTouchPoint, localX, localY, sizeX, sizeY, pressure, relatedObject, ctrlKey, altKey, shiftKey) {
                            if (bubbles === void 0) { bubbles = true; }
                            if (cancelable === void 0) { cancelable = false; }
                            if (touchPointID === void 0) { touchPointID = 0; }
                            if (isPrimaryTouchPoint === void 0) { isPrimaryTouchPoint = false; }
                            if (localX === void 0) { localX = NaN; }
                            if (localY === void 0) { localY = NaN; }
                            if (sizeX === void 0) { sizeX = NaN; }
                            if (sizeY === void 0) { sizeY = NaN; }
                            if (pressure === void 0) { pressure = NaN; }
                            if (relatedObject === void 0) { relatedObject = null; }
                            if (ctrlKey === void 0) { ctrlKey = false; }
                            if (altKey === void 0) { altKey = false; }
                            if (shiftKey === void 0) { shiftKey = false; }
                            _super.call(this, undefined, undefined, undefined);
                            dummyConstructor("public flash.events.TouchEvent");
                        }
                        Object.defineProperty(TouchEvent.prototype, "touchPointID", {
                            get: function () {
                                return this._touchPointID;
                            },
                            set: function (value) {
                                this._touchPointID = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TouchEvent.prototype, "isPrimaryTouchPoint", {
                            get: function () {
                                return this._isPrimaryTouchPoint;
                            },
                            set: function (value) {
                                this._isPrimaryTouchPoint = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TouchEvent.prototype, "localX", {
                            get: function () {
                                return this._localX;
                            },
                            set: function (value) {
                                this._localX = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TouchEvent.prototype, "localY", {
                            get: function () {
                                return this._localY;
                            },
                            set: function (value) {
                                this._localY = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TouchEvent.prototype, "sizeX", {
                            get: function () {
                                return this._sizeX;
                            },
                            set: function (value) {
                                this._sizeX = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TouchEvent.prototype, "sizeY", {
                            get: function () {
                                return this._sizeY;
                            },
                            set: function (value) {
                                this._sizeY = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TouchEvent.prototype, "pressure", {
                            get: function () {
                                return this._pressure;
                            },
                            set: function (value) {
                                this._pressure = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TouchEvent.prototype, "relatedObject", {
                            get: function () {
                                return this._relatedObject;
                            },
                            set: function (value) {
                                this._relatedObject = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TouchEvent.prototype, "ctrlKey", {
                            get: function () {
                                return this._ctrlKey;
                            },
                            set: function (value) {
                                this._ctrlKey = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TouchEvent.prototype, "altKey", {
                            get: function () {
                                return this._altKey;
                            },
                            set: function (value) {
                                this._altKey = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TouchEvent.prototype, "shiftKey", {
                            get: function () {
                                return this._shiftKey;
                            },
                            set: function (value) {
                                this._shiftKey = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TouchEvent.prototype, "stageX", {
                            get: function () {
                                somewhatImplemented('TouchEvent::get stageX');
                                return this._localX;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TouchEvent.prototype, "stageY", {
                            get: function () {
                                somewhatImplemented('TouchEvent::get stageY');
                                return this._localY;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TouchEvent.prototype, "isRelatedObjectInaccessible", {
                            get: function () {
                                return this._isRelatedObjectInaccessible;
                            },
                            set: function (value) {
                                this._isRelatedObjectInaccessible = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        TouchEvent.prototype.clone = function () {
                            return new events.TouchEvent(this.type, this.bubbles, this.cancelable, this.touchPointID, this.isPrimaryTouchPoint, this.localX, this.localY, this.sizeX, this.sizeY, this.pressure, this.relatedObject, this.ctrlKey, this.altKey, this.shiftKey);
                        };
                        TouchEvent.prototype.toString = function () {
                            return this.formatToString('TouchEvent', 'type', 'bubbles', 'cancelable', 'eventPhase', 'touchPointID', 'isPrimaryTouchPoint', 'localX', 'localY', 'sizeX', 'sizeY', 'pressure', 'relatedObject', 'ctrlKey', 'altKey', 'shiftKey');
                        };
                        TouchEvent.prototype.updateAfterEvent = function () {
                            Shumway.AVM2.Runtime.AVM2.instance.globals['Shumway.Player.Utils'].requestRendering();
                        };
                        TouchEvent.classInitializer = null;
                        TouchEvent.initializer = null;
                        TouchEvent.classSymbols = null;
                        TouchEvent.instanceSymbols = null;
                        TouchEvent.TOUCH_BEGIN = "touchBegin";
                        TouchEvent.TOUCH_END = "touchEnd";
                        TouchEvent.TOUCH_MOVE = "touchMove";
                        TouchEvent.TOUCH_OVER = "touchOver";
                        TouchEvent.TOUCH_OUT = "touchOut";
                        TouchEvent.TOUCH_ROLL_OVER = "touchRollOver";
                        TouchEvent.TOUCH_ROLL_OUT = "touchRollOut";
                        TouchEvent.TOUCH_TAP = "touchTap";
                        TouchEvent.PROXIMITY_BEGIN = "proximityBegin";
                        TouchEvent.PROXIMITY_END = "proximityEnd";
                        TouchEvent.PROXIMITY_MOVE = "proximityMove";
                        TouchEvent.PROXIMITY_OUT = "proximityOut";
                        TouchEvent.PROXIMITY_OVER = "proximityOver";
                        TouchEvent.PROXIMITY_ROLL_OUT = "proximityRollOut";
                        TouchEvent.PROXIMITY_ROLL_OVER = "proximityRollOver";
                        return TouchEvent;
                    })(flash.events.Event);
                    events.TouchEvent = TouchEvent;
                })(events = flash.events || (flash.events = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var events;
                (function (events) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var UncaughtErrorEvent = (function (_super) {
                        __extends(UncaughtErrorEvent, _super);
                        function UncaughtErrorEvent(type, bubbles, cancelable, error_in) {
                            if (type === void 0) { type = "uncaughtError"; }
                            if (bubbles === void 0) { bubbles = true; }
                            if (cancelable === void 0) { cancelable = true; }
                            if (error_in === void 0) { error_in = null; }
                            _super.call(this, undefined, undefined, undefined, undefined, undefined);
                            dummyConstructor("public flash.events.UncaughtErrorEvent");
                        }
                        UncaughtErrorEvent.classInitializer = null;
                        UncaughtErrorEvent.initializer = null;
                        UncaughtErrorEvent.classSymbols = null;
                        UncaughtErrorEvent.instanceSymbols = null;
                        UncaughtErrorEvent.UNCAUGHT_ERROR = "uncaughtError";
                        return UncaughtErrorEvent;
                    })(flash.events.ErrorEvent);
                    events.UncaughtErrorEvent = UncaughtErrorEvent;
                })(events = flash.events || (flash.events = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var events;
                (function (events) {
                    var UncaughtErrorEvents = (function (_super) {
                        __extends(UncaughtErrorEvents, _super);
                        function UncaughtErrorEvents() {
                            false && _super.call(this);
                            events.EventDispatcher.instanceConstructorNoInitialize.call(this);
                        }
                        UncaughtErrorEvents.classInitializer = null;
                        UncaughtErrorEvents.initializer = null;
                        UncaughtErrorEvents.classSymbols = null;
                        UncaughtErrorEvents.instanceSymbols = null;
                        return UncaughtErrorEvents;
                    })(flash.events.EventDispatcher);
                    events.UncaughtErrorEvents = UncaughtErrorEvents;
                })(events = flash.events || (flash.events = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var isNullOrUndefined = Shumway.isNullOrUndefined;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var throwError = Shumway.AVM2.Runtime.throwError;
                    var checkNullParameter = Shumway.AVM2.Runtime.checkNullParameter;
                    var assert = Shumway.Debug.assert;
                    var Bounds = Shumway.Bounds;
                    var geom = flash.geom;
                    var events = flash.events;
                    var PlaceObjectFlags = Shumway.SWF.Parser.PlaceObjectFlags;
                    (function (DisplayObjectFlags) {
                        DisplayObjectFlags[DisplayObjectFlags["None"] = 0x0000] = "None";
                        DisplayObjectFlags[DisplayObjectFlags["Visible"] = 0x0001] = "Visible";
                        DisplayObjectFlags[DisplayObjectFlags["InvalidLineBounds"] = 0x0002] = "InvalidLineBounds";
                        DisplayObjectFlags[DisplayObjectFlags["InvalidFillBounds"] = 0x0004] = "InvalidFillBounds";
                        DisplayObjectFlags[DisplayObjectFlags["InvalidMatrix"] = 0x0008] = "InvalidMatrix";
                        DisplayObjectFlags[DisplayObjectFlags["InvalidInvertedMatrix"] = 0x0010] = "InvalidInvertedMatrix";
                        DisplayObjectFlags[DisplayObjectFlags["InvalidConcatenatedMatrix"] = 0x0020] = "InvalidConcatenatedMatrix";
                        DisplayObjectFlags[DisplayObjectFlags["InvalidInvertedConcatenatedMatrix"] = 0x0040] = "InvalidInvertedConcatenatedMatrix";
                        DisplayObjectFlags[DisplayObjectFlags["InvalidConcatenatedColorTransform"] = 0x0080] = "InvalidConcatenatedColorTransform";
                        DisplayObjectFlags[DisplayObjectFlags["Constructed"] = 0x0100] = "Constructed";
                        DisplayObjectFlags[DisplayObjectFlags["Destroyed"] = 0x0200] = "Destroyed";
                        DisplayObjectFlags[DisplayObjectFlags["NeedsLoadEvent"] = 0x0400] = "NeedsLoadEvent";
                        DisplayObjectFlags[DisplayObjectFlags["OwnedByTimeline"] = 0x0800] = "OwnedByTimeline";
                        DisplayObjectFlags[DisplayObjectFlags["AnimatedByTimeline"] = 0x1000] = "AnimatedByTimeline";
                        DisplayObjectFlags[DisplayObjectFlags["HasFrameScriptPending"] = 0x2000] = "HasFrameScriptPending";
                        DisplayObjectFlags[DisplayObjectFlags["ContainsFrameScriptPendingChildren"] = 0x4000] = "ContainsFrameScriptPendingChildren";
                        DisplayObjectFlags[DisplayObjectFlags["ContainsMorph"] = 0x8000] = "ContainsMorph";
                        DisplayObjectFlags[DisplayObjectFlags["CacheAsBitmap"] = 0x010000] = "CacheAsBitmap";
                        DisplayObjectFlags[DisplayObjectFlags["DirtyMatrix"] = 0x100000] = "DirtyMatrix";
                        DisplayObjectFlags[DisplayObjectFlags["DirtyChildren"] = 0x200000] = "DirtyChildren";
                        DisplayObjectFlags[DisplayObjectFlags["DirtyGraphics"] = 0x400000] = "DirtyGraphics";
                        DisplayObjectFlags[DisplayObjectFlags["DirtyTextContent"] = 0x800000] = "DirtyTextContent";
                        DisplayObjectFlags[DisplayObjectFlags["DirtyBitmapData"] = 0x1000000] = "DirtyBitmapData";
                        DisplayObjectFlags[DisplayObjectFlags["DirtyNetStream"] = 0x2000000] = "DirtyNetStream";
                        DisplayObjectFlags[DisplayObjectFlags["DirtyColorTransform"] = 0x4000000] = "DirtyColorTransform";
                        DisplayObjectFlags[DisplayObjectFlags["DirtyMask"] = 0x8000000] = "DirtyMask";
                        DisplayObjectFlags[DisplayObjectFlags["DirtyClipDepth"] = 0x10000000] = "DirtyClipDepth";
                        DisplayObjectFlags[DisplayObjectFlags["DirtyDescendents"] = 0x20000000] = "DirtyDescendents";
                        DisplayObjectFlags[DisplayObjectFlags["DirtyMiscellaneousProperties"] = 0x40000000] = "DirtyMiscellaneousProperties";
                        DisplayObjectFlags[DisplayObjectFlags["Dirty"] = DisplayObjectFlags.DirtyMatrix | DisplayObjectFlags.DirtyChildren | DisplayObjectFlags.DirtyGraphics | DisplayObjectFlags.DirtyTextContent | DisplayObjectFlags.DirtyBitmapData | DisplayObjectFlags.DirtyNetStream | DisplayObjectFlags.DirtyColorTransform | DisplayObjectFlags.DirtyMask | DisplayObjectFlags.DirtyClipDepth | DisplayObjectFlags.DirtyMiscellaneousProperties] = "Dirty";
                        DisplayObjectFlags[DisplayObjectFlags["Bubbling"] = DisplayObjectFlags.ContainsFrameScriptPendingChildren | DisplayObjectFlags.ContainsMorph] = "Bubbling";
                    })(display.DisplayObjectFlags || (display.DisplayObjectFlags = {}));
                    var DisplayObjectFlags = display.DisplayObjectFlags;
                    (function (VisitorFlags) {
                        VisitorFlags[VisitorFlags["None"] = 0] = "None";
                        VisitorFlags[VisitorFlags["Continue"] = 0] = "Continue";
                        VisitorFlags[VisitorFlags["Stop"] = 0x01] = "Stop";
                        VisitorFlags[VisitorFlags["Skip"] = 0x02] = "Skip";
                        VisitorFlags[VisitorFlags["FrontToBack"] = 0x08] = "FrontToBack";
                        VisitorFlags[VisitorFlags["Filter"] = 0x10] = "Filter";
                    })(display.VisitorFlags || (display.VisitorFlags = {}));
                    var VisitorFlags = display.VisitorFlags;
                    (function (HitTestingType) {
                        HitTestingType[HitTestingType["HitTestBounds"] = 0] = "HitTestBounds";
                        HitTestingType[HitTestingType["HitTestBoundsAndMask"] = 1] = "HitTestBoundsAndMask";
                        HitTestingType[HitTestingType["HitTestShape"] = 2] = "HitTestShape";
                        HitTestingType[HitTestingType["Mouse"] = 3] = "Mouse";
                        HitTestingType[HitTestingType["ObjectsUnderPoint"] = 4] = "ObjectsUnderPoint";
                        HitTestingType[HitTestingType["Drop"] = 5] = "Drop";
                    })(display.HitTestingType || (display.HitTestingType = {}));
                    var HitTestingType = display.HitTestingType;
                    (function (HitTestingResult) {
                        HitTestingResult[HitTestingResult["None"] = 0] = "None";
                        HitTestingResult[HitTestingResult["Bounds"] = 1] = "Bounds";
                        HitTestingResult[HitTestingResult["Shape"] = 2] = "Shape";
                    })(display.HitTestingResult || (display.HitTestingResult = {}));
                    var HitTestingResult = display.HitTestingResult;
                    var DisplayObject = (function (_super) {
                        __extends(DisplayObject, _super);
                        function DisplayObject() {
                            false && _super.call(this, undefined);
                            events.EventDispatcher.instanceConstructorNoInitialize.call(this);
                            this._addReference();
                            this._setFlags(256 /* Constructed */);
                        }
                        DisplayObject.getNextSyncID = function () {
                            return this._syncID++;
                        };
                        DisplayObject.reset = function () {
                            this._advancableInstances = new Shumway.WeakList();
                        };
                        DisplayObject.prototype.createAnimatedDisplayObject = function (symbol, placeObjectTag, callConstructor) {
                            var symbolClass = symbol.symbolClass;
                            var instance;
                            if (symbolClass.isSubtypeOf(flash.display.BitmapData)) {
                                instance = flash.display.Bitmap.initializeFrom(symbol);
                            }
                            else {
                                instance = symbolClass.initializeFrom(symbol);
                            }
                            if (placeObjectTag.flags & 32 /* HasName */) {
                                instance._name = placeObjectTag.name;
                            }
                            instance._setFlags(4096 /* AnimatedByTimeline */);
                            instance._animate(placeObjectTag);
                            if (callConstructor) {
                                symbolClass.instanceConstructorNoInitialize.call(instance);
                            }
                            return instance;
                        };
                        DisplayObject.performFrameNavigation = function (mainLoop, runScripts) {
                            if (mainLoop) {
                                var timelineData = { instances: 0 };
                                DisplayObject._runScripts = runScripts;
                                AVM2.enterTimeline("DisplayObject.performFrameNavigation", timelineData);
                            }
                            else {
                                runScripts = DisplayObject._runScripts;
                            }
                            release || assert(display.DisplayObject._advancableInstances.length < 1024 * 16, "Too many advancable instances.");
                            display.DisplayObject._advancableInstances.forEach(function (value) {
                                value._initFrame(mainLoop);
                            });
                            if (mainLoop && runScripts) {
                                DisplayObject._broadcastFrameEvent(events.Event.ENTER_FRAME);
                            }
                            display.DisplayObject._advancableInstances.forEach(function (value) {
                                value._constructFrame();
                            });
                            if (runScripts) {
                                DisplayObject._broadcastFrameEvent(events.Event.FRAME_CONSTRUCTED);
                                display.DisplayObject._advancableInstances.forEach(function (value) {
                                    var container = value;
                                    if (display.MovieClip.isInstanceOf(container) && !container.parent) {
                                        container._enqueueFrameScripts();
                                    }
                                });
                                flash.display.DisplayObject._stage._enqueueFrameScripts();
                                display.MovieClip.runFrameScripts();
                                DisplayObject._broadcastFrameEvent(events.Event.EXIT_FRAME);
                            }
                            else {
                                display.MovieClip.reset();
                            }
                            if (mainLoop) {
                                AVM2.leaveTimeline();
                                DisplayObject._runScripts = true;
                            }
                        };
                        DisplayObject._broadcastFrameEvent = function (type) {
                            var event;
                            switch (type) {
                                case events.Event.ENTER_FRAME:
                                case events.Event.FRAME_CONSTRUCTED:
                                case events.Event.EXIT_FRAME:
                                case events.Event.RENDER:
                                    event = events.Event.getBroadcastInstance(type);
                            }
                            release || assert(event, "Invalid frame event.");
                            events.EventDispatcher.broadcastEventDispatchQueue.dispatchEvent(event);
                        };
                        DisplayObject.prototype._setInitialName = function () {
                            this._name = 'instance' + (flash.display.DisplayObject._instanceID++);
                        };
                        DisplayObject.prototype._setParent = function (parent, depth) {
                            var oldParent = this._parent;
                            release || assert(parent !== this);
                            this._parent = parent;
                            this._setDepth(depth);
                            if (parent) {
                                this._addReference();
                                var bubblingFlags = 0 /* None */;
                                if (this._hasFlags(8192 /* HasFrameScriptPending */)) {
                                    bubblingFlags |= 16384 /* ContainsFrameScriptPendingChildren */;
                                }
                                if (this._hasAnyFlags(DisplayObjectFlags.Bubbling)) {
                                    bubblingFlags |= this._displayObjectFlags & DisplayObjectFlags.Bubbling;
                                }
                                if (bubblingFlags) {
                                    parent._propagateFlagsUp(bubblingFlags);
                                }
                            }
                            if (oldParent) {
                                this._removeReference();
                            }
                        };
                        DisplayObject.prototype._setDepth = function (value) {
                            if (value > -1) {
                                this._setFlags(2048 /* OwnedByTimeline */);
                            }
                            else {
                                this._removeFlags(2048 /* OwnedByTimeline */);
                            }
                            this._depth = value;
                        };
                        DisplayObject.prototype._setFillAndLineBoundsFromWidthAndHeight = function (width, height) {
                            this._fillBounds.width = width;
                            this._fillBounds.height = height;
                            this._lineBounds.width = width;
                            this._lineBounds.height = height;
                            this._removeFlags(2 /* InvalidLineBounds */ | 4 /* InvalidFillBounds */);
                            this._invalidateParentFillAndLineBounds(true, true);
                        };
                        DisplayObject.prototype._setFillAndLineBoundsFromSymbol = function (symbol) {
                            release || assert(symbol.fillBounds || symbol.lineBounds, "Fill or Line bounds are not defined in the symbol.");
                            if (symbol.fillBounds) {
                                this._fillBounds.copyFrom(symbol.fillBounds);
                                this._removeFlags(4 /* InvalidFillBounds */);
                            }
                            if (symbol.lineBounds) {
                                this._lineBounds.copyFrom(symbol.lineBounds);
                                this._removeFlags(2 /* InvalidLineBounds */);
                            }
                            this._invalidateParentFillAndLineBounds(!!symbol.fillBounds, !!symbol.lineBounds);
                        };
                        DisplayObject.prototype._setFlags = function (flags) {
                            this._displayObjectFlags |= flags;
                        };
                        DisplayObject.prototype._setDirtyFlags = function (flags) {
                            this._displayObjectFlags |= flags;
                            if (this._parent) {
                                this._parent._propagateFlagsUp(536870912 /* DirtyDescendents */);
                            }
                        };
                        DisplayObject.prototype._toggleFlags = function (flags, on) {
                            if (on) {
                                this._displayObjectFlags |= flags;
                            }
                            else {
                                this._displayObjectFlags &= ~flags;
                            }
                        };
                        DisplayObject.prototype._removeFlags = function (flags) {
                            this._displayObjectFlags &= ~flags;
                        };
                        DisplayObject.prototype._hasFlags = function (flags) {
                            return (this._displayObjectFlags & flags) === flags;
                        };
                        DisplayObject.prototype._hasAnyFlags = function (flags) {
                            return !!(this._displayObjectFlags & flags);
                        };
                        DisplayObject.prototype._propagateFlagsUp = function (flags) {
                            if (this._hasFlags(flags)) {
                                return;
                            }
                            this._setFlags(flags);
                            var parent = this._parent;
                            if (parent) {
                                parent._propagateFlagsUp(flags);
                            }
                        };
                        DisplayObject.prototype._propagateFlagsDown = function (flags) {
                            this._setFlags(flags);
                        };
                        DisplayObject.prototype._findNearestAncestor = function (flags, on) {
                            var node = this;
                            while (node) {
                                if (node._hasFlags(flags) === on) {
                                    return node;
                                }
                                node = node._parent;
                            }
                            return null;
                        };
                        DisplayObject.prototype._findFurthestAncestorOrSelf = function () {
                            var node = this;
                            while (node) {
                                if (!node._parent) {
                                    return node;
                                }
                                node = node._parent;
                            }
                        };
                        DisplayObject.prototype._isAncestor = function (child) {
                            var node = child;
                            while (node) {
                                if (node === this) {
                                    return true;
                                }
                                node = node._parent;
                            }
                            return false;
                        };
                        DisplayObject._clampRotation = function (value) {
                            value %= 360;
                            if (value > 180) {
                                value -= 360;
                            }
                            else if (value < -180) {
                                value += 360;
                            }
                            return value;
                        };
                        DisplayObject._getAncestors = function (node, last) {
                            var path = DisplayObject._path;
                            path.length = 0;
                            while (node && node !== last) {
                                path.push(node);
                                node = node._parent;
                            }
                            release || assert(node === last, "Last ancestor is not an ancestor.");
                            return path;
                        };
                        DisplayObject.prototype._getConcatenatedMatrix = function () {
                            if (this._hasFlags(32 /* InvalidConcatenatedMatrix */)) {
                                if (this._parent) {
                                    this._parent._getConcatenatedMatrix().preMultiplyInto(this._getMatrix(), this._concatenatedMatrix);
                                }
                                else {
                                    this._concatenatedMatrix.copyFrom(this._getMatrix());
                                }
                                this._removeFlags(32 /* InvalidConcatenatedMatrix */);
                            }
                            return this._concatenatedMatrix;
                        };
                        DisplayObject.prototype._getInvertedConcatenatedMatrix = function () {
                            if (this._hasFlags(64 /* InvalidInvertedConcatenatedMatrix */)) {
                                this._getConcatenatedMatrix().invertInto(this._invertedConcatenatedMatrix);
                                this._removeFlags(64 /* InvalidInvertedConcatenatedMatrix */);
                            }
                            return this._invertedConcatenatedMatrix;
                        };
                        DisplayObject.prototype._setMatrix = function (matrix, toTwips) {
                            if (!toTwips && this._matrix.equals(matrix)) {
                                return;
                            }
                            var m = this._matrix;
                            m.copyFrom(matrix);
                            if (toTwips) {
                                m.toTwipsInPlace();
                            }
                            this._scaleX = m.getScaleX();
                            this._scaleY = m.getScaleY();
                            this._skewX = matrix.getSkewX();
                            this._skewY = matrix.getSkewY();
                            this._rotation = DisplayObject._clampRotation(this._skewY * 180 / Math.PI);
                            this._removeFlags(8 /* InvalidMatrix */);
                            this._setFlags(16 /* InvalidInvertedMatrix */);
                            this._setDirtyFlags(1048576 /* DirtyMatrix */);
                            this._invalidatePosition();
                        };
                        DisplayObject.prototype._getMatrix = function () {
                            if (this._hasFlags(8 /* InvalidMatrix */)) {
                                this._matrix.updateScaleAndRotation(this._scaleX, this._scaleY, this._skewX, this._skewY);
                                this._removeFlags(8 /* InvalidMatrix */);
                            }
                            return this._matrix;
                        };
                        DisplayObject.prototype._getInvertedMatrix = function () {
                            if (this._hasFlags(16 /* InvalidInvertedMatrix */)) {
                                this._getMatrix().invertInto(this._invertedMatrix);
                                this._removeFlags(16 /* InvalidInvertedMatrix */);
                            }
                            return this._invertedMatrix;
                        };
                        DisplayObject.prototype._getConcatenatedColorTransform = function () {
                            if (!this.stage) {
                                return this._colorTransform.clone();
                            }
                            if (this._hasFlags(128 /* InvalidConcatenatedColorTransform */)) {
                                var ancestor = this._findNearestAncestor(128 /* InvalidConcatenatedColorTransform */, false);
                                var path = DisplayObject._getAncestors(this, ancestor);
                                var i = path.length - 1;
                                if (flash.display.Stage.isType(path[i])) {
                                    i--;
                                }
                                var m = ancestor && !flash.display.Stage.isType(ancestor) ? ancestor._concatenatedColorTransform.clone() : new geom.ColorTransform();
                                while (i >= 0) {
                                    ancestor = path[i--];
                                    release || assert(ancestor._hasFlags(128 /* InvalidConcatenatedColorTransform */));
                                    m.preMultiply(ancestor._colorTransform);
                                    m.convertToFixedPoint();
                                    ancestor._concatenatedColorTransform.copyFrom(m);
                                    ancestor._removeFlags(128 /* InvalidConcatenatedColorTransform */);
                                }
                            }
                            return this._concatenatedColorTransform;
                        };
                        DisplayObject.prototype._setColorTransform = function (colorTransform) {
                            this._colorTransform.copyFrom(colorTransform);
                            this._colorTransform.convertToFixedPoint();
                            this._propagateFlagsDown(128 /* InvalidConcatenatedColorTransform */);
                            this._setDirtyFlags(67108864 /* DirtyColorTransform */);
                        };
                        DisplayObject.prototype._invalidateFillAndLineBounds = function (fill, line) {
                            this._propagateFlagsUp((line ? 2 /* InvalidLineBounds */ : 0) | (fill ? 4 /* InvalidFillBounds */ : 0));
                        };
                        DisplayObject.prototype._invalidateParentFillAndLineBounds = function (fill, line) {
                            if (this._parent) {
                                this._parent._invalidateFillAndLineBounds(fill, line);
                            }
                        };
                        DisplayObject.prototype._getContentBounds = function (includeStrokes) {
                            if (includeStrokes === void 0) { includeStrokes = true; }
                            var invalidFlag;
                            var bounds;
                            if (includeStrokes) {
                                invalidFlag = 2 /* InvalidLineBounds */;
                                bounds = this._lineBounds;
                            }
                            else {
                                invalidFlag = 4 /* InvalidFillBounds */;
                                bounds = this._fillBounds;
                            }
                            if (this._hasFlags(invalidFlag)) {
                                var graphics = this._getGraphics();
                                if (graphics) {
                                    bounds.copyFrom(graphics._getContentBounds(includeStrokes));
                                }
                                else {
                                    bounds.setToSentinels();
                                }
                                this._getChildBounds(bounds, includeStrokes);
                                this._removeFlags(invalidFlag);
                            }
                            return bounds;
                        };
                        DisplayObject.prototype._getChildBounds = function (bounds, includeStrokes) {
                        };
                        DisplayObject.prototype._getTransformedBounds = function (targetCoordinateSpace, includeStroke) {
                            var bounds = this._getContentBounds(includeStroke).clone();
                            if (targetCoordinateSpace === this || bounds.isEmpty()) {
                                return bounds;
                            }
                            var m;
                            if (targetCoordinateSpace) {
                                m = geom.Matrix.TEMP_MATRIX;
                                var invertedTargetMatrix = targetCoordinateSpace._getInvertedConcatenatedMatrix();
                                invertedTargetMatrix.preMultiplyInto(this._getConcatenatedMatrix(), m);
                            }
                            else {
                                m = this._getConcatenatedMatrix();
                            }
                            m.transformBounds(bounds);
                            return bounds;
                        };
                        DisplayObject.prototype._stopTimelineAnimation = function () {
                            this._removeFlags(4096 /* AnimatedByTimeline */);
                        };
                        DisplayObject.prototype._invalidateMatrix = function () {
                            this._setDirtyFlags(1048576 /* DirtyMatrix */);
                            this._setFlags(8 /* InvalidMatrix */ | 16 /* InvalidInvertedMatrix */);
                            this._invalidatePosition();
                        };
                        DisplayObject.prototype._invalidatePosition = function () {
                            this._propagateFlagsDown(32 /* InvalidConcatenatedMatrix */ | 64 /* InvalidInvertedConcatenatedMatrix */);
                            this._invalidateParentFillAndLineBounds(true, true);
                        };
                        DisplayObject.prototype._animate = function (placeObjectTag) {
                            release || assert(this._hasFlags(4096 /* AnimatedByTimeline */));
                            var reset = !(placeObjectTag.flags & 1 /* Move */) && placeObjectTag.flags & 2 /* HasCharacter */;
                            if (placeObjectTag.flags & 4 /* HasMatrix */) {
                                geom.Matrix.TEMP_MATRIX.copyFromUntyped(placeObjectTag.matrix);
                                this._setMatrix(geom.Matrix.TEMP_MATRIX, false);
                            }
                            else if (reset) {
                                this._setMatrix(geom.Matrix.FROZEN_IDENTITY_MATRIX, false);
                            }
                            if (placeObjectTag.flags & 8 /* HasColorTransform */) {
                                geom.ColorTransform.TEMP_COLOR_TRANSFORM.copyFromUntyped(placeObjectTag.cxform);
                                this._setColorTransform(geom.ColorTransform.TEMP_COLOR_TRANSFORM);
                            }
                            else if (reset) {
                                this._setColorTransform(geom.ColorTransform.FROZEN_IDENTITY_COLOR_TRANSFORM);
                            }
                            if (placeObjectTag.flags & 16 /* HasRatio */ || reset) {
                                var ratio = placeObjectTag.ratio | 0;
                                if (ratio !== this._ratio) {
                                    release || assert(ratio >= 0 && ratio <= 0xffff);
                                    this._ratio = ratio;
                                    this._setDirtyFlags(1073741824 /* DirtyMiscellaneousProperties */);
                                }
                            }
                            if (placeObjectTag.flags & 64 /* HasClipDepth */ || reset) {
                                var clipDepth = placeObjectTag.clipDepth === undefined ? -1 : placeObjectTag.clipDepth;
                                if (clipDepth !== this._clipDepth) {
                                    this._clipDepth = clipDepth;
                                    this._setDirtyFlags(268435456 /* DirtyClipDepth */);
                                }
                            }
                            if (placeObjectTag.flags & 256 /* HasFilterList */) {
                                var filters = [];
                                var swfFilters = placeObjectTag.filters;
                                for (var i = 0; i < swfFilters.length; i++) {
                                    var obj = swfFilters[i];
                                    var filter;
                                    switch (obj.type) {
                                        case 0:
                                            filter = flash.filters.DropShadowFilter.FromUntyped(obj);
                                            break;
                                        case 1:
                                            filter = flash.filters.BlurFilter.FromUntyped(obj);
                                            break;
                                        case 2:
                                            filter = flash.filters.GlowFilter.FromUntyped(obj);
                                            break;
                                        case 3:
                                            filter = flash.filters.BevelFilter.FromUntyped(obj);
                                            break;
                                        case 4:
                                            filter = flash.filters.GradientGlowFilter.FromUntyped(obj);
                                            break;
                                        case 5:
                                            filter = flash.filters.ConvolutionFilter.FromUntyped(obj);
                                            break;
                                        case 6:
                                            filter = flash.filters.ColorMatrixFilter.FromUntyped(obj);
                                            break;
                                        case 7:
                                            filter = flash.filters.GradientBevelFilter.FromUntyped(obj);
                                            break;
                                        default:
                                            release || assert(filter, "Unknown filter type.");
                                    }
                                    filters.push(filter);
                                }
                                this._filters = filters;
                                this._setDirtyFlags(1073741824 /* DirtyMiscellaneousProperties */);
                            }
                            else if (reset) {
                                this._filters = null;
                                this._setDirtyFlags(1073741824 /* DirtyMiscellaneousProperties */);
                            }
                            if (placeObjectTag.flags & 512 /* HasBlendMode */ || reset) {
                                var blendMode = flash.display.BlendMode.fromNumber(placeObjectTag.blendMode === undefined ? 1 : placeObjectTag.blendMode);
                                if (blendMode !== this._blendMode) {
                                    this._blendMode = blendMode;
                                    this._setDirtyFlags(1073741824 /* DirtyMiscellaneousProperties */);
                                }
                            }
                            if (placeObjectTag.flags & 1024 /* HasCacheAsBitmap */ || reset) {
                                var cacheAsBitmap = placeObjectTag.bmpCache > 0;
                                if (cacheAsBitmap !== this._hasFlags(65536 /* CacheAsBitmap */)) {
                                    this._toggleFlags(65536 /* CacheAsBitmap */, cacheAsBitmap);
                                    this._setDirtyFlags(1073741824 /* DirtyMiscellaneousProperties */);
                                }
                            }
                            if (placeObjectTag.flags & 8192 /* HasVisible */ || reset) {
                                var visible = placeObjectTag.visibility !== 0;
                                if (visible !== this._hasFlags(1 /* Visible */)) {
                                    this._toggleFlags(1 /* Visible */, visible);
                                    this._setDirtyFlags(1073741824 /* DirtyMiscellaneousProperties */);
                                }
                            }
                        };
                        DisplayObject.prototype._propagateEvent = function (event) {
                            this.visit(function (node) {
                                node.dispatchEvent(event);
                                return 0 /* Continue */;
                            }, 0 /* None */);
                        };
                        Object.defineProperty(DisplayObject.prototype, "x", {
                            get: function () {
                                return this._getX();
                            },
                            set: function (value) {
                                value = (value * 20) | 0;
                                this._stopTimelineAnimation();
                                if (this._canHaveTextContent()) {
                                    var bounds = this._getContentBounds();
                                    value -= bounds.xMin;
                                }
                                if (value === this._matrix.tx) {
                                    return;
                                }
                                this._matrix.tx = value;
                                this._invertedMatrix.tx = -value;
                                this._invalidatePosition();
                                this._setDirtyFlags(1048576 /* DirtyMatrix */);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DisplayObject.prototype._getX = function () {
                            var value = this._matrix.tx;
                            if (this._canHaveTextContent()) {
                                var bounds = this._getContentBounds();
                                value += bounds.xMin;
                            }
                            return value / 20;
                        };
                        Object.defineProperty(DisplayObject.prototype, "y", {
                            get: function () {
                                return this._getY();
                            },
                            set: function (value) {
                                value = (value * 20) | 0;
                                this._stopTimelineAnimation();
                                if (this._canHaveTextContent()) {
                                    var bounds = this._getContentBounds();
                                    value -= bounds.yMin;
                                }
                                if (value === this._matrix.ty) {
                                    return;
                                }
                                this._matrix.ty = value;
                                this._invertedMatrix.ty = -value;
                                this._invalidatePosition();
                                this._setDirtyFlags(1048576 /* DirtyMatrix */);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DisplayObject.prototype._getY = function () {
                            var value = this._matrix.ty;
                            if (this._canHaveTextContent()) {
                                var bounds = this._getContentBounds();
                                value += bounds.yMin;
                            }
                            return value / 20;
                        };
                        Object.defineProperty(DisplayObject.prototype, "scaleX", {
                            get: function () {
                                return Math.abs(this._scaleX);
                            },
                            set: function (value) {
                                value = +value;
                                this._stopTimelineAnimation();
                                if (value === this._scaleX) {
                                    return;
                                }
                                this._scaleX = value;
                                this._invalidateMatrix();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplayObject.prototype, "scaleY", {
                            get: function () {
                                return this._scaleY;
                            },
                            set: function (value) {
                                value = +value;
                                this._stopTimelineAnimation();
                                if (value === this._scaleY) {
                                    return;
                                }
                                this._scaleY = value;
                                this._invalidateMatrix();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplayObject.prototype, "scaleZ", {
                            get: function () {
                                return this._scaleZ;
                            },
                            set: function (value) {
                                value = +value;
                                notImplemented("public DisplayObject::set scaleZ");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplayObject.prototype, "rotation", {
                            get: function () {
                                return this._rotation;
                            },
                            set: function (value) {
                                value = +value;
                                this._stopTimelineAnimation();
                                value = DisplayObject._clampRotation(value);
                                if (value === this._rotation) {
                                    return;
                                }
                                var delta = value - this._rotation;
                                var angle = delta / 180 * Math.PI;
                                this._skewX += angle;
                                this._skewY += angle;
                                this._rotation = value;
                                this._invalidateMatrix();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplayObject.prototype, "rotationX", {
                            get: function () {
                                return this._rotationX;
                            },
                            set: function (value) {
                                value = +value;
                                notImplemented("public DisplayObject::set rotationX");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplayObject.prototype, "rotationY", {
                            get: function () {
                                return this._rotationY;
                            },
                            set: function (value) {
                                value = +value;
                                notImplemented("public DisplayObject::set rotationY");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplayObject.prototype, "rotationZ", {
                            get: function () {
                                return this._rotationZ;
                            },
                            set: function (value) {
                                value = +value;
                                notImplemented("public DisplayObject::set rotationZ");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplayObject.prototype, "width", {
                            get: function () {
                                return this._getWidth();
                            },
                            set: function (value) {
                                this._setWidth(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DisplayObject.prototype._getWidth = function () {
                            return this._getTransformedBounds(this._parent, true).width / 20;
                        };
                        DisplayObject.prototype._setWidth = function (value) {
                            value = (value * 20) | 0;
                            this._stopTimelineAnimation();
                            if (value < 0) {
                                return;
                            }
                            var contentBounds = this._getContentBounds(true);
                            if (this._canHaveTextContent()) {
                                var bounds = this._getContentBounds();
                                this._setFillAndLineBoundsFromWidthAndHeight(value, contentBounds.height);
                                return;
                            }
                            var bounds = this._getTransformedBounds(this._parent, true);
                            var angle = this._rotation / 180 * Math.PI;
                            var baseWidth = contentBounds.getBaseWidth(angle);
                            if (!baseWidth) {
                                return;
                            }
                            var baseHeight = contentBounds.getBaseHeight(angle);
                            this._scaleY = bounds.height / baseHeight;
                            this._scaleX = value / baseWidth;
                            this._invalidateMatrix();
                        };
                        Object.defineProperty(DisplayObject.prototype, "height", {
                            get: function () {
                                return this._getHeight();
                            },
                            set: function (value) {
                                this._setHeight(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DisplayObject.prototype._getHeight = function () {
                            var bounds = this._getTransformedBounds(this._parent, true);
                            return bounds.height / 20;
                        };
                        DisplayObject.prototype._setHeight = function (value) {
                            value = (value * 20) | 0;
                            this._stopTimelineAnimation();
                            if (value < 0) {
                                return;
                            }
                            var contentBounds = this._getContentBounds(true);
                            if (this._canHaveTextContent()) {
                                var bounds = this._getContentBounds();
                                this._setFillAndLineBoundsFromWidthAndHeight(contentBounds.width, value);
                                return;
                            }
                            var bounds = this._getTransformedBounds(this._parent, true);
                            var angle = this._rotation / 180 * Math.PI;
                            var baseHeight = contentBounds.getBaseHeight(angle);
                            if (!baseHeight) {
                                return;
                            }
                            var baseWidth = contentBounds.getBaseWidth(angle);
                            this._scaleY = value / baseHeight;
                            this._scaleX = bounds.width / baseWidth;
                            this._invalidateMatrix();
                        };
                        Object.defineProperty(DisplayObject.prototype, "mask", {
                            get: function () {
                                return this._mask;
                            },
                            set: function (value) {
                                if (this._mask === value || value === this) {
                                    return;
                                }
                                if (value && value._maskedObject) {
                                    value._maskedObject.mask = null;
                                }
                                this._mask = value;
                                if (value) {
                                    value._maskedObject = this;
                                }
                                this._setDirtyFlags(134217728 /* DirtyMask */);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplayObject.prototype, "transform", {
                            get: function () {
                                return this._getTransform();
                            },
                            set: function (value) {
                                this._stopTimelineAnimation();
                                if (value.matrix3D) {
                                    this._matrix3D = value.matrix3D;
                                }
                                else {
                                    this._setMatrix(value.matrix, true);
                                }
                                this._setColorTransform(value.colorTransform);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DisplayObject.prototype._getTransform = function () {
                            return new flash.geom.Transform(this);
                        };
                        DisplayObject.prototype.destroy = function () {
                            this._setFlags(512 /* Destroyed */);
                        };
                        Object.defineProperty(DisplayObject.prototype, "root", {
                            get: function () {
                                var node = this;
                                do {
                                    if (node._root === node) {
                                        return node;
                                    }
                                    node = node._parent;
                                } while (node);
                                return null;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplayObject.prototype, "stage", {
                            get: function () {
                                var node = this;
                                do {
                                    if (node._stage === node) {
                                        release || assert(flash.display.Stage.isType(node));
                                        return node;
                                    }
                                    node = node._parent;
                                } while (node);
                                return null;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplayObject.prototype, "name", {
                            get: function () {
                                return this._name;
                            },
                            set: function (value) {
                                checkNullParameter(value, "name");
                                this._name = asCoerceString(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplayObject.prototype, "parent", {
                            get: function () {
                                return this._parent;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplayObject.prototype, "alpha", {
                            get: function () {
                                return this._colorTransform.alphaMultiplier;
                            },
                            set: function (value) {
                                this._stopTimelineAnimation();
                                value = +value;
                                if (value === this._colorTransform.alphaMultiplier) {
                                    return;
                                }
                                this._colorTransform.alphaMultiplier = value;
                                this._colorTransform.convertToFixedPoint();
                                this._propagateFlagsDown(128 /* InvalidConcatenatedColorTransform */);
                                this._setDirtyFlags(67108864 /* DirtyColorTransform */);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplayObject.prototype, "blendMode", {
                            get: function () {
                                return this._blendMode;
                            },
                            set: function (value) {
                                this._stopTimelineAnimation();
                                value = asCoerceString(value);
                                if (value === this._blendMode) {
                                    return;
                                }
                                if (display.BlendMode.toNumber(value) < 0) {
                                    throwError("ArgumentError", AVM2.Errors.InvalidEnumError, "blendMode");
                                }
                                this._blendMode = value;
                                this._setDirtyFlags(1073741824 /* DirtyMiscellaneousProperties */);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplayObject.prototype, "scale9Grid", {
                            get: function () {
                                return this._getScale9Grid();
                            },
                            set: function (innerRectangle) {
                                this._stopTimelineAnimation();
                                this._scale9Grid = Bounds.FromRectangle(innerRectangle);
                                this._setDirtyFlags(1073741824 /* DirtyMiscellaneousProperties */);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DisplayObject.prototype._getScale9Grid = function () {
                            return this._scale9Grid ? flash.geom.Rectangle.FromBounds(this._scale9Grid) : null;
                        };
                        Object.defineProperty(DisplayObject.prototype, "cacheAsBitmap", {
                            get: function () {
                                return this._getCacheAsBitmap();
                            },
                            set: function (value) {
                                if (this._hasFlags(65536 /* CacheAsBitmap */)) {
                                    return;
                                }
                                this._toggleFlags(65536 /* CacheAsBitmap */, !!value);
                                this._setDirtyFlags(1073741824 /* DirtyMiscellaneousProperties */);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DisplayObject.prototype._getCacheAsBitmap = function () {
                            return (this._filters && this._filters.length > 0) || this._hasFlags(65536 /* CacheAsBitmap */);
                        };
                        Object.defineProperty(DisplayObject.prototype, "filters", {
                            get: function () {
                                return this._getFilters();
                            },
                            set: function (value) {
                                if (!this._filters) {
                                    this._filters = [];
                                }
                                var changed = false;
                                if (isNullOrUndefined(value)) {
                                    changed = this.filters.length > 0;
                                    this._filters.length = 0;
                                }
                                else {
                                    this._filters = value.map(function (x) {
                                        release || assert(flash.filters.BitmapFilter.isType(x));
                                        return x.clone();
                                    });
                                    changed = true;
                                }
                                if (changed) {
                                    this._setDirtyFlags(1073741824 /* DirtyMiscellaneousProperties */);
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DisplayObject.prototype._getFilters = function () {
                            return this._filters ? this._filters.map(function (x) {
                                return x.clone();
                            }) : [];
                        };
                        Object.defineProperty(DisplayObject.prototype, "visible", {
                            get: function () {
                                return this._hasFlags(1 /* Visible */);
                            },
                            set: function (value) {
                                value = !!value;
                                if (value === this._hasFlags(1 /* Visible */)) {
                                    return;
                                }
                                this._toggleFlags(1 /* Visible */, value);
                                this._setDirtyFlags(1073741824 /* DirtyMiscellaneousProperties */);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplayObject.prototype, "z", {
                            get: function () {
                                return this._z;
                            },
                            set: function (value) {
                                value = +value;
                                this._z = value;
                                notImplemented("public DisplayObject::set z");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DisplayObject.prototype.getBounds = function (targetCoordinateSpace) {
                            targetCoordinateSpace = targetCoordinateSpace || this;
                            return geom.Rectangle.FromBounds(this._getTransformedBounds(targetCoordinateSpace, true));
                        };
                        DisplayObject.prototype.getRect = function (targetCoordinateSpace) {
                            targetCoordinateSpace = targetCoordinateSpace || this;
                            return geom.Rectangle.FromBounds(this._getTransformedBounds(targetCoordinateSpace, false));
                        };
                        DisplayObject.prototype.globalToLocal = function (point) {
                            var m = this._getInvertedConcatenatedMatrix();
                            var p = m.transformPointInPlace(point.clone().toTwips()).round();
                            return p.toPixels();
                        };
                        DisplayObject.prototype.localToGlobal = function (point) {
                            var m = this._getConcatenatedMatrix();
                            var p = m.transformPointInPlace(point.clone().toTwips()).round();
                            return p.toPixels();
                        };
                        DisplayObject.prototype.globalToLocal3D = function (point) {
                            notImplemented("public DisplayObject::globalToLocal3D");
                            return null;
                        };
                        DisplayObject.prototype.localToGlobal3D = function (point) {
                            notImplemented("public DisplayObject::localToGlobal3D");
                            return null;
                        };
                        DisplayObject.prototype.local3DToGlobal = function (point3d) {
                            notImplemented("public DisplayObject::local3DToGlobal");
                            return null;
                        };
                        DisplayObject.prototype.visit = function (visitor, visitorFlags, displayObjectFlags) {
                            if (displayObjectFlags === void 0) { displayObjectFlags = 0 /* None */; }
                            var stack;
                            var displayObject;
                            var displayObjectContainer;
                            var frontToBack = visitorFlags & 8 /* FrontToBack */;
                            stack = [this];
                            while (stack.length > 0) {
                                displayObject = stack.pop();
                                var flags = 0 /* None */;
                                if (visitorFlags & 16 /* Filter */ && !displayObject._hasAnyFlags(displayObjectFlags)) {
                                    flags = 2 /* Skip */;
                                }
                                else {
                                    flags = visitor(displayObject);
                                }
                                if (flags === 0 /* Continue */) {
                                    var children = displayObject._children;
                                    if (children) {
                                        var length = children.length;
                                        for (var i = 0; i < length; i++) {
                                            var child = children[frontToBack ? i : length - 1 - i];
                                            stack.push(child);
                                        }
                                    }
                                }
                                else if (flags === 1 /* Stop */) {
                                    return;
                                }
                            }
                        };
                        Object.defineProperty(DisplayObject.prototype, "loaderInfo", {
                            get: function () {
                                var root = this.root;
                                if (root) {
                                    release || assert(root._loaderInfo, "No LoaderInfo object found on root.");
                                    return root._loaderInfo;
                                }
                                return null;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DisplayObject.prototype._canHaveGraphics = function () {
                            return false;
                        };
                        DisplayObject.prototype._getGraphics = function () {
                            return null;
                        };
                        DisplayObject.prototype._canHaveTextContent = function () {
                            return false;
                        };
                        DisplayObject.prototype._getTextContent = function () {
                            return null;
                        };
                        DisplayObject.prototype._ensureGraphics = function () {
                            release || assert(this._canHaveGraphics());
                            if (this._graphics) {
                                return this._graphics;
                            }
                            this._graphics = new flash.display.Graphics();
                            this._graphics._setParent(this);
                            this._invalidateFillAndLineBounds(true, true);
                            this._setDirtyFlags(4194304 /* DirtyGraphics */);
                            return this._graphics;
                        };
                        DisplayObject.prototype._setStaticContentFromSymbol = function (symbol) {
                            release || assert(!symbol.dynamic);
                            if (this._canHaveGraphics()) {
                                release || assert(symbol instanceof flash.display.ShapeSymbol);
                                this._graphics = symbol.graphics;
                                this._setDirtyFlags(4194304 /* DirtyGraphics */);
                            }
                            else if (flash.text.StaticText.isType(this)) {
                                release || assert(symbol instanceof flash.text.TextSymbol);
                                var textSymbol = symbol;
                                this._textContent = textSymbol.textContent;
                                this._setDirtyFlags(8388608 /* DirtyTextContent */);
                            }
                            this._symbol = symbol;
                            this._setFillAndLineBoundsFromSymbol(symbol);
                        };
                        DisplayObject.prototype.hitTestObject = function (other) {
                            release || assert(other && DisplayObject.isType(other));
                            var a = this, b = other;
                            var aBounds = a._getContentBounds(false).clone();
                            var bBounds = b._getContentBounds(false).clone();
                            a._getConcatenatedMatrix().transformBounds(aBounds);
                            b._getConcatenatedMatrix().transformBounds(bBounds);
                            return aBounds.intersects(bBounds);
                        };
                        DisplayObject.prototype.hitTestPoint = function (globalX, globalY, shapeFlag) {
                            globalX = +globalX * 20 | 0;
                            globalY = +globalY * 20 | 0;
                            shapeFlag = !!shapeFlag;
                            var testingType = shapeFlag ? 2 /* HitTestShape */ : 0 /* HitTestBounds */;
                            return !!this._containsGlobalPoint(globalX, globalY, testingType, null);
                        };
                        DisplayObject.prototype._containsPoint = function (globalX, globalY, localX, localY, testingType, objects) {
                            var result = this._boundsAndMaskContainPoint(globalX, globalY, localX, localY, testingType);
                            if (result === 0 /* None */ || testingType < 2 /* HitTestShape */) {
                                return result;
                            }
                            var containsPoint = this._containsPointDirectly(localX, localY, globalX, globalY);
                            if (containsPoint && objects) {
                                if (testingType === 5 /* Drop */) {
                                    objects[0] = this;
                                }
                                else if (testingType === 4 /* ObjectsUnderPoint */ || display.InteractiveObject.isType(this) && this._mouseEnabled) {
                                    objects.push(this);
                                }
                            }
                            return containsPoint ? 2 /* Shape */ : result;
                        };
                        DisplayObject.prototype._containsGlobalPoint = function (globalX, globalY, testingType, objects) {
                            var matrix = this._getInvertedConcatenatedMatrix();
                            var localX = matrix.transformX(globalX, globalY);
                            var localY = matrix.transformY(globalX, globalY);
                            return this._containsPoint(globalX, globalY, localX, localY, testingType, objects);
                        };
                        DisplayObject.prototype._boundsAndMaskContainPoint = function (globalX, globalY, localX, localY, testingType) {
                            if (testingType >= 1 /* HitTestBoundsAndMask */ && this._hasFlags(32768 /* ContainsMorph */)) {
                                return 1 /* Bounds */;
                            }
                            if (testingType >= 3 /* Mouse */ && !this._hasFlags(1 /* Visible */) || !this._getContentBounds().contains(localX, localY)) {
                                return 0 /* None */;
                            }
                            if (testingType === 0 /* HitTestBounds */ || !this._mask) {
                                return 1 /* Bounds */;
                            }
                            return this._mask._containsGlobalPoint(globalX, globalY, 1 /* HitTestBoundsAndMask */, null);
                        };
                        DisplayObject.prototype._containsPointDirectly = function (localX, localY, globalX, globalY) {
                            return false;
                        };
                        Object.defineProperty(DisplayObject.prototype, "scrollRect", {
                            get: function () {
                                return this._getScrollRect();
                            },
                            set: function (value) {
                                value = value;
                                this._scrollRect = value ? value.clone() : null;
                                somewhatImplemented("public DisplayObject::set scrollRect");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DisplayObject.prototype._getScrollRect = function () {
                            return this._scrollRect ? this._scrollRect.clone() : null;
                        };
                        Object.defineProperty(DisplayObject.prototype, "opaqueBackground", {
                            get: function () {
                                return this._opaqueBackground;
                            },
                            set: function (value) {
                                release || assert(value === null || Shumway.isInteger(value));
                                this._opaqueBackground = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DisplayObject.prototype._getDistance = function (ancestor) {
                            var d = 0;
                            var node = this;
                            while (node !== ancestor) {
                                d++;
                                node = node._parent;
                            }
                            return d;
                        };
                        DisplayObject.prototype.findNearestCommonAncestor = function (node) {
                            if (!node) {
                                return null;
                            }
                            var ancestor = this;
                            var d1 = ancestor._getDistance(null);
                            var d2 = node._getDistance(null);
                            while (d1 > d2) {
                                ancestor = ancestor._parent;
                                d1--;
                            }
                            while (d2 > d1) {
                                node = node._parent;
                                d2--;
                            }
                            while (ancestor !== node) {
                                ancestor = ancestor._parent;
                                node = node._parent;
                            }
                            return ancestor;
                        };
                        DisplayObject.prototype._getLocalMousePosition = function () {
                            var position = flash.ui.Mouse._currentPosition;
                            if (this._parent) {
                                position = this._parent.globalToLocal(flash.ui.Mouse._currentPosition);
                            }
                            return position;
                        };
                        Object.defineProperty(DisplayObject.prototype, "mouseX", {
                            get: function () {
                                return this._getLocalMousePosition().x;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplayObject.prototype, "mouseY", {
                            get: function () {
                                return this._getLocalMousePosition().y;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DisplayObject.prototype.debugName = function (withFlags) {
                            if (withFlags === void 0) { withFlags = false; }
                            var name = this._id + " [" + this._depth + "]: (" + this._referenceCount + ") " + this;
                            if (withFlags) {
                                var flagNames = [];
                                for (var i = 0; i < 32; i++) {
                                    if (this._hasFlags(1 << i)) {
                                        flagNames.push(DisplayObjectFlags[1 << i]);
                                    }
                                }
                                name += " " + flagNames.join("|");
                            }
                            return name;
                        };
                        DisplayObject.prototype.debugTrace = function (maxDistance, name) {
                            if (maxDistance === void 0) { maxDistance = 1024; }
                            if (name === void 0) { name = ""; }
                            var self = this;
                            var writer = new Shumway.IndentingWriter();
                            this.visit(function (node) {
                                var distance = node._getDistance(self);
                                if (distance > maxDistance) {
                                    return 2 /* Skip */;
                                }
                                var prefix = name + Shumway.StringUtilities.multiple(" ", distance);
                                writer.writeObject(prefix + node.debugName() + ", bounds: " + node.getBounds(null).toString(), { "...": { value: node } });
                                return 0 /* Continue */;
                            }, 0 /* None */);
                        };
                        DisplayObject.prototype._addReference = function () {
                            this._referenceCount++;
                        };
                        DisplayObject.prototype._removeReference = function () {
                            this._referenceCount--;
                            if (this._referenceCount !== 0 || !this._children) {
                                return;
                            }
                            var children = this._children;
                            for (var i = 0; i < children.length; i++) {
                                children[i]._removeReference();
                            }
                        };
                        Object.defineProperty(DisplayObject.prototype, "accessibilityProperties", {
                            get: function () {
                                return this._accessibilityProperties;
                            },
                            set: function (value) {
                                this._accessibilityProperties = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplayObject.prototype, "blendShader", {
                            set: function (value) {
                                notImplemented("public DisplayObject::set blendShader");
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DisplayObject._syncID = 0;
                        DisplayObject._instanceID = 1;
                        DisplayObject.classInitializer = function () {
                            this.reset();
                        };
                        DisplayObject.initializer = function (symbol) {
                            release || AVM2.counter.count("DisplayObject::initializer");
                            var self = this;
                            self._id = flash.display.DisplayObject.getNextSyncID();
                            self._displayObjectFlags = 1 /* Visible */ | 2 /* InvalidLineBounds */ | 4 /* InvalidFillBounds */ | 32 /* InvalidConcatenatedMatrix */ | 64 /* InvalidInvertedConcatenatedMatrix */ | 536870912 /* DirtyDescendents */ | 4194304 /* DirtyGraphics */ | 1048576 /* DirtyMatrix */ | 67108864 /* DirtyColorTransform */ | 134217728 /* DirtyMask */ | 268435456 /* DirtyClipDepth */ | 1073741824 /* DirtyMiscellaneousProperties */;
                            self._root = null;
                            self._stage = null;
                            self._setInitialName();
                            self._parent = null;
                            self._mask = null;
                            self._z = 0;
                            self._scaleX = 1;
                            self._scaleY = 1;
                            self._skewX = 0;
                            self._skewY = 0;
                            self._scaleZ = 1;
                            self._rotation = 0;
                            self._rotationX = 0;
                            self._rotationY = 0;
                            self._rotationZ = 0;
                            self._width = 0;
                            self._height = 0;
                            self._opaqueBackground = null;
                            self._scrollRect = null;
                            self._filters = null;
                            self._blendMode = display.BlendMode.NORMAL;
                            release || assert(self._blendMode);
                            self._scale9Grid = null;
                            self._loaderInfo = null;
                            self._accessibilityProperties = null;
                            self._fillBounds = new Bounds(0, 0, 0, 0);
                            self._lineBounds = new Bounds(0, 0, 0, 0);
                            self._clipDepth = -1;
                            self._concatenatedMatrix = new geom.Matrix();
                            self._invertedConcatenatedMatrix = new geom.Matrix();
                            self._matrix = new geom.Matrix();
                            self._invertedMatrix = new geom.Matrix();
                            self._matrix3D = null;
                            self._colorTransform = new geom.ColorTransform();
                            self._concatenatedColorTransform = new geom.ColorTransform();
                            self._depth = -1;
                            self._ratio = 0;
                            self._index = -1;
                            self._maskedObject = null;
                            self._mouseOver = false;
                            self._mouseDown = false;
                            self._symbol = null;
                            self._graphics = null;
                            self._children = null;
                            self._referenceCount = 0;
                            if (symbol) {
                                if (symbol.scale9Grid) {
                                    self._scale9Grid = symbol.scale9Grid;
                                }
                                self._symbol = symbol;
                            }
                        };
                        DisplayObject.classSymbols = null;
                        DisplayObject.instanceSymbols = null;
                        DisplayObject._runScripts = true;
                        DisplayObject._path = [];
                        return DisplayObject;
                    })(flash.events.EventDispatcher);
                    display.DisplayObject = DisplayObject;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var assert = Shumway.Debug.assert;
                    var throwError = Shumway.AVM2.Runtime.throwError;
                    var Bitmap = (function (_super) {
                        __extends(Bitmap, _super);
                        function Bitmap(bitmapData, pixelSnapping, smoothing) {
                            if (bitmapData === void 0) { bitmapData = null; }
                            if (pixelSnapping === void 0) { pixelSnapping = "auto"; }
                            if (smoothing === void 0) { smoothing = false; }
                            false && _super.call(this);
                            display.DisplayObject.instanceConstructorNoInitialize.call(this);
                            if (this._symbol) {
                                this._bitmapData.class.instanceConstructorNoInitialize.call(this._bitmapData);
                            }
                            else {
                                this.bitmapData = bitmapData;
                            }
                            this._pixelSnapping = asCoerceString(pixelSnapping);
                            this._smoothing = !!smoothing;
                        }
                        Object.defineProperty(Bitmap.prototype, "pixelSnapping", {
                            get: function () {
                                return this._pixelSnapping;
                            },
                            set: function (value) {
                                if (display.PixelSnapping.toNumber(value) < 0) {
                                    throwError("ArgumentError", AVM2.Errors.InvalidEnumError, "pixelSnapping");
                                }
                                this._pixelSnapping = asCoerceString(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Bitmap.prototype, "smoothing", {
                            get: function () {
                                return this._smoothing;
                            },
                            set: function (value) {
                                this._smoothing = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Bitmap.prototype, "bitmapData", {
                            get: function () {
                                return this._bitmapData;
                            },
                            set: function (value) {
                                if (this._bitmapData !== value) {
                                    if (this._bitmapData) {
                                        this._bitmapData._removeBitmapReferrer(this);
                                    }
                                    if (value) {
                                        value._addBitmapReferrer(this);
                                    }
                                }
                                this._bitmapData = value;
                                if (value) {
                                    this._setFillAndLineBoundsFromWidthAndHeight(value.width * 20 | 0, value.height * 20 | 0);
                                }
                                this._invalidateParentFillAndLineBounds(true, true);
                                this._setDirtyFlags(16777216 /* DirtyBitmapData */);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Bitmap.prototype._getContentBounds = function (includeStrokes) {
                            if (includeStrokes === void 0) { includeStrokes = true; }
                            if (this._bitmapData) {
                                return this._bitmapData._getContentBounds();
                            }
                            return new Shumway.Bounds(0, 0, 0, 0);
                        };
                        Bitmap.prototype._containsPointDirectly = function (localX, localY, globalX, globalY) {
                            release || assert(this._getContentBounds().contains(localX, localY));
                            return true;
                        };
                        Bitmap.classInitializer = null;
                        Bitmap.initializer = function (symbol) {
                            var self = this;
                            self._bitmapData = null;
                            self._pixelSnapping = null;
                            self._smoothing = null;
                            if (symbol) {
                                var symbolClass = symbol.symbolClass;
                                if (symbolClass.isSubtypeOf(flash.display.Bitmap)) {
                                    symbolClass = flash.display.BitmapData;
                                }
                                self._bitmapData = symbolClass.initializeFrom(symbol);
                                self._setFillAndLineBoundsFromWidthAndHeight(symbol.width * 20 | 0, symbol.height * 20 | 0);
                            }
                        };
                        Bitmap.classSymbols = null;
                        Bitmap.instanceSymbols = null;
                        return Bitmap;
                    })(flash.display.DisplayObject);
                    display.Bitmap = Bitmap;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var warning = Shumway.Debug.warning;
                    var Shape = (function (_super) {
                        __extends(Shape, _super);
                        function Shape() {
                            false && _super.call(this);
                            display.DisplayObject.instanceConstructorNoInitialize.call(this);
                        }
                        Shape.prototype._canHaveGraphics = function () {
                            return true;
                        };
                        Shape.prototype._getGraphics = function () {
                            return this._graphics;
                        };
                        Object.defineProperty(Shape.prototype, "graphics", {
                            get: function () {
                                return this._ensureGraphics();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Shape.prototype._containsPointDirectly = function (localX, localY, globalX, globalY) {
                            var graphics = this._getGraphics();
                            return !!graphics && graphics._containsPoint(localX, localY, true, 0);
                        };
                        Shape.classSymbols = null;
                        Shape.instanceSymbols = null;
                        Shape.classInitializer = null;
                        Shape.initializer = function (symbol) {
                            var self = this;
                            self._graphics = null;
                            if (symbol) {
                                this._setStaticContentFromSymbol(symbol);
                            }
                        };
                        return Shape;
                    })(flash.display.DisplayObject);
                    display.Shape = Shape;
                    var ShapeSymbol = (function (_super) {
                        __extends(ShapeSymbol, _super);
                        function ShapeSymbol(data, symbolClass) {
                            _super.call(this, data, symbolClass, false);
                            this.graphics = null;
                        }
                        ShapeSymbol.FromData = function (data, loaderInfo) {
                            var symbol = new ShapeSymbol(data, flash.display.Shape);
                            symbol._setBoundsFromData(data);
                            symbol.graphics = flash.display.Graphics.FromData(data);
                            symbol.processRequires(data.require, loaderInfo);
                            return symbol;
                        };
                        ShapeSymbol.prototype.processRequires = function (dependencies, loaderInfo) {
                            if (!dependencies) {
                                return;
                            }
                            var textures = this.graphics.getUsedTextures();
                            for (var i = 0; i < dependencies.length; i++) {
                                var symbol = loaderInfo.getSymbolById(dependencies[i]);
                                if (!symbol) {
                                    if (dependencies[i] !== 65535) {
                                        warning("Bitmap symbol " + dependencies[i] + " required by shape, but not defined.");
                                    }
                                    textures.push(null);
                                    continue;
                                }
                                textures.push(symbol.getSharedInstance());
                            }
                        };
                        return ShapeSymbol;
                    })(Shumway.Timeline.DisplaySymbol);
                    display.ShapeSymbol = ShapeSymbol;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var DisplayObject = flash.display.DisplayObject;
                    var events = flash.events;
                    var InteractiveObject = (function (_super) {
                        __extends(InteractiveObject, _super);
                        function InteractiveObject() {
                            false && _super.call(this);
                            DisplayObject.instanceConstructorNoInitialize.call(this);
                        }
                        Object.defineProperty(InteractiveObject.prototype, "tabEnabled", {
                            get: function () {
                                return this._tabEnabled;
                            },
                            set: function (enabled) {
                                enabled = !!enabled;
                                var old = this._tabEnabled;
                                this._tabEnabled = enabled;
                                if (old !== enabled) {
                                    this.dispatchEvent(events.Event.getInstance(events.Event.TAB_ENABLED_CHANGE, true));
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(InteractiveObject.prototype, "tabIndex", {
                            get: function () {
                                return this._tabIndex;
                            },
                            set: function (index) {
                                index = index | 0;
                                var old = this._tabIndex;
                                this._tabIndex = index;
                                if (old !== index) {
                                    this.dispatchEvent(events.Event.getInstance(events.Event.TAB_INDEX_CHANGE, true));
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(InteractiveObject.prototype, "focusRect", {
                            get: function () {
                                return this._focusRect;
                            },
                            set: function (focusRect) {
                                somewhatImplemented("public flash.display.InteractiveObject::set focusRect");
                                this._focusRect = focusRect;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(InteractiveObject.prototype, "mouseEnabled", {
                            get: function () {
                                return this._mouseEnabled;
                            },
                            set: function (enabled) {
                                this._mouseEnabled = !!enabled;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(InteractiveObject.prototype, "doubleClickEnabled", {
                            get: function () {
                                return this._doubleClickEnabled;
                            },
                            set: function (enabled) {
                                this._doubleClickEnabled = !!enabled;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(InteractiveObject.prototype, "accessibilityImplementation", {
                            get: function () {
                                return this._accessibilityImplementation;
                            },
                            set: function (value) {
                                value = value;
                                notImplemented("public flash.display.InteractiveObject::set accessibilityImplementation");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(InteractiveObject.prototype, "softKeyboardInputAreaOfInterest", {
                            get: function () {
                                return this._softKeyboardInputAreaOfInterest;
                            },
                            set: function (value) {
                                value = value;
                                notImplemented("public flash.display.InteractiveObject::set softKeyboardInputAreaOfInterest");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(InteractiveObject.prototype, "needsSoftKeyboard", {
                            get: function () {
                                return this._needsSoftKeyboard;
                            },
                            set: function (value) {
                                value = !!value;
                                notImplemented("public flash.display.InteractiveObject::set needsSoftKeyboard");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(InteractiveObject.prototype, "contextMenu", {
                            get: function () {
                                return this._contextMenu;
                            },
                            set: function (cm) {
                                cm = cm;
                                somewhatImplemented("public flash.display.InteractiveObject::set contextMenu");
                                this._contextMenu = cm;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        InteractiveObject.prototype.requestSoftKeyboard = function () {
                            notImplemented("public flash.display.InteractiveObject::requestSoftKeyboard");
                            return;
                        };
                        InteractiveObject.classInitializer = null;
                        InteractiveObject.initializer = function () {
                            var self = this;
                            self._tabEnabled = false;
                            self._tabIndex = -1;
                            self._focusRect = null;
                            self._mouseEnabled = true;
                            self._doubleClickEnabled = false;
                            self._accessibilityImplementation = null;
                            self._softKeyboardInputAreaOfInterest = null;
                            self._needsSoftKeyboard = false;
                            self._contextMenu = null;
                        };
                        InteractiveObject.classSymbols = null;
                        InteractiveObject.instanceSymbols = null;
                        return InteractiveObject;
                    })(flash.display.DisplayObject);
                    display.InteractiveObject = InteractiveObject;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var assert = Shumway.Debug.assert;
                    var SimpleButton = (function (_super) {
                        __extends(SimpleButton, _super);
                        function SimpleButton(upState, overState, downState, hitTestState) {
                            if (upState === void 0) { upState = null; }
                            if (overState === void 0) { overState = null; }
                            if (downState === void 0) { downState = null; }
                            if (hitTestState === void 0) { hitTestState = null; }
                            false && _super.call(this);
                            display.InteractiveObject.instanceConstructorNoInitialize.call(this);
                            if (upState) {
                                this.upState = upState;
                            }
                            if (overState) {
                                this.overState = overState;
                            }
                            if (downState) {
                                this.downState = downState;
                            }
                            if (hitTestState) {
                                this.hitTestState = hitTestState;
                            }
                            this._updateButton();
                        }
                        SimpleButton.prototype._initFrame = function (advance) {
                            if (advance) {
                                this._updateButton();
                            }
                        };
                        SimpleButton.prototype._constructFrame = function () {
                        };
                        Object.defineProperty(SimpleButton.prototype, "useHandCursor", {
                            get: function () {
                                return this._useHandCursor;
                            },
                            set: function (value) {
                                this._useHandCursor = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SimpleButton.prototype, "enabled", {
                            get: function () {
                                return this._enabled;
                            },
                            set: function (value) {
                                this._enabled = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SimpleButton.prototype, "trackAsMenu", {
                            get: function () {
                                return this._trackAsMenu;
                            },
                            set: function (value) {
                                value = !!value;
                                notImplemented("public flash.display.SimpleButton::set trackAsMenu");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SimpleButton.prototype, "upState", {
                            get: function () {
                                return this._upState;
                            },
                            set: function (value) {
                                var old = this._upState;
                                if (value._parent) {
                                    value._parent.removeChild(value);
                                }
                                this._upState = value;
                                if (this._currentState === old) {
                                    this._updateButton();
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SimpleButton.prototype, "overState", {
                            get: function () {
                                return this._overState;
                            },
                            set: function (value) {
                                var old = this._overState;
                                if (value._parent) {
                                    value._parent.removeChild(value);
                                }
                                this._overState = value;
                                if (this._currentState === old) {
                                    this._updateButton();
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SimpleButton.prototype, "downState", {
                            get: function () {
                                return this._downState;
                            },
                            set: function (value) {
                                var old = this._downState;
                                if (value._parent) {
                                    value._parent.removeChild(value);
                                }
                                this._downState = value;
                                if (this._currentState === old) {
                                    this._updateButton();
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SimpleButton.prototype, "hitTestState", {
                            get: function () {
                                return this._hitTestState;
                            },
                            set: function (value) {
                                this._hitTestState = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SimpleButton.prototype, "soundTransform", {
                            get: function () {
                                notImplemented("public flash.display.SimpleButton::get soundTransform");
                                return;
                            },
                            set: function (sndTransform) {
                                sndTransform = sndTransform;
                                notImplemented("public flash.display.SimpleButton::set soundTransform");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        SimpleButton.prototype._containsPoint = function (globalX, globalY, localX, localY, testingType, objects) {
                            var target = testingType === 3 /* Mouse */ ? this._hitTestState : this._currentState;
                            if (!target) {
                                return 0 /* None */;
                            }
                            target._parent = this;
                            var result = target._containsGlobalPoint(globalX, globalY, testingType, objects);
                            target._parent = null;
                            if (result !== 0 /* None */ && testingType === 3 /* Mouse */ && objects && this._mouseEnabled) {
                                objects[0] = this;
                                release || assert(objects.length === 1);
                            }
                            return result;
                        };
                        SimpleButton.prototype._getChildBounds = function (bounds, includeStrokes) {
                            if (!this._currentState) {
                                return;
                            }
                            this._currentState._parent = this;
                            bounds.unionInPlace(this._currentState._getTransformedBounds(this, includeStrokes));
                            this._currentState._parent = null;
                        };
                        SimpleButton.prototype._propagateFlagsDown = function (flags) {
                            if (this._hasFlags(flags)) {
                                return;
                            }
                            this._setFlags(flags);
                            this._upState && this._upState._propagateFlagsDown(flags);
                            this._overState && this._overState._propagateFlagsDown(flags);
                            this._downState && this._downState._propagateFlagsDown(flags);
                            this._hitTestState && this._hitTestState._propagateFlagsDown(flags);
                        };
                        SimpleButton.prototype._updateButton = function () {
                            var state;
                            if (this._mouseOver) {
                                state = this._mouseDown ? this._downState : this._overState;
                            }
                            else {
                                state = this._upState;
                            }
                            if (state === this._currentState) {
                                return;
                            }
                            if (this._currentState) {
                            }
                            this._currentState = state;
                            if (this._stage) {
                            }
                            if (state) {
                                this._children[0] = state;
                            }
                            else {
                                this._children.length = 0;
                            }
                            this._setDirtyFlags(2097152 /* DirtyChildren */);
                            this._invalidateFillAndLineBounds(true, true);
                        };
                        SimpleButton.classInitializer = null;
                        SimpleButton.initializer = function (symbol) {
                            var self = this;
                            display.DisplayObject._advancableInstances.push(self);
                            self._useHandCursor = true;
                            self._enabled = true;
                            self._trackAsMenu = false;
                            self._upState = null;
                            self._overState = null;
                            self._downState = null;
                            self._hitTestState = null;
                            self._currentState = null;
                            self._children = [];
                            self._symbol = symbol;
                            if (symbol) {
                                if (symbol.upState) {
                                    self._upState = self.createAnimatedDisplayObject(symbol.upState.symbol, symbol.upState.placeObjectTag, true);
                                }
                                if (symbol.overState) {
                                    self._overState = self.createAnimatedDisplayObject(symbol.overState.symbol, symbol.overState.placeObjectTag, true);
                                }
                                if (symbol.downState) {
                                    self._downState = self.createAnimatedDisplayObject(symbol.downState.symbol, symbol.downState.placeObjectTag, true);
                                }
                                if (symbol.hitTestState) {
                                    self._hitTestState = self.createAnimatedDisplayObject(symbol.hitTestState.symbol, symbol.hitTestState.placeObjectTag, true);
                                }
                            }
                        };
                        SimpleButton.classSymbols = null;
                        SimpleButton.instanceSymbols = null;
                        return SimpleButton;
                    })(flash.display.InteractiveObject);
                    display.SimpleButton = SimpleButton;
                    var ButtonState = (function () {
                        function ButtonState(symbol, placeObjectTag) {
                            this.symbol = symbol;
                            this.placeObjectTag = placeObjectTag;
                        }
                        return ButtonState;
                    })();
                    display.ButtonState = ButtonState;
                    var ButtonSymbol = (function (_super) {
                        __extends(ButtonSymbol, _super);
                        function ButtonSymbol(data, loaderInfo) {
                            _super.call(this, data, flash.display.SimpleButton, true);
                            this.upState = null;
                            this.overState = null;
                            this.downState = null;
                            this.hitTestState = null;
                            this.loaderInfo = loaderInfo;
                        }
                        ButtonSymbol.FromData = function (data, loaderInfo) {
                            var symbol = new ButtonSymbol(data, loaderInfo);
                            if (loaderInfo.actionScriptVersion === display.ActionScriptVersion.ACTIONSCRIPT2) {
                                symbol.isAVM1Object = true;
                            }
                            var states = data.states;
                            var character = null;
                            var placeObjectTag;
                            for (var stateName in states) {
                                var controlTags = states[stateName];
                                if (controlTags.length === 1) {
                                    placeObjectTag = controlTags[0];
                                    character = loaderInfo.getSymbolById(placeObjectTag.symbolId);
                                    if (!character) {
                                        continue;
                                    }
                                }
                                else {
                                    placeObjectTag = { flags: 1 /* Move */, depth: 1 };
                                    character = new flash.display.SpriteSymbol({ id: -1, className: null }, loaderInfo);
                                    character.frames.push(new Shumway.SWF.SWFFrame(controlTags));
                                }
                                symbol[stateName + 'State'] = new ButtonState(character, placeObjectTag);
                            }
                            return symbol;
                        };
                        return ButtonSymbol;
                    })(Shumway.Timeline.DisplaySymbol);
                    display.ButtonSymbol = ButtonSymbol;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var assert = Shumway.Debug.assert;
                    var notImplemented = Shumway.Debug.notImplemented;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var throwError = Shumway.AVM2.Runtime.throwError;
                    var checkParameterType = Shumway.AVM2.Runtime.checkParameterType;
                    var clamp = Shumway.NumberUtilities.clamp;
                    var Multiname = Shumway.AVM2.ABC.Multiname;
                    var events = flash.events;
                    var DisplayObjectContainer = (function (_super) {
                        __extends(DisplayObjectContainer, _super);
                        function DisplayObjectContainer() {
                            false && _super.call(this);
                            display.InteractiveObject.instanceConstructorNoInitialize.call(this);
                            this._setDirtyFlags(2097152 /* DirtyChildren */);
                        }
                        DisplayObjectContainer.prototype._invalidateChildren = function () {
                            this._setDirtyFlags(2097152 /* DirtyChildren */);
                            this._invalidateFillAndLineBounds(true, true);
                        };
                        DisplayObjectContainer.prototype._propagateFlagsDown = function (flags) {
                            if (this._hasFlags(flags)) {
                                return;
                            }
                            this._setFlags(flags);
                            var children = this._children;
                            for (var i = 0; i < children.length; i++) {
                                children[i]._propagateFlagsDown(flags);
                            }
                        };
                        DisplayObjectContainer.prototype._constructChildren = function () {
                            release || AVM2.counter.count("DisplayObjectContainer::_constructChildren");
                            var children = this._children;
                            for (var i = 0; i < children.length; i++) {
                                var child = children[i];
                                if (child._hasFlags(256 /* Constructed */)) {
                                    continue;
                                }
                                child.class.instanceConstructorNoInitialize.call(child);
                                child._removeReference();
                                if (child._name) {
                                    this[Multiname.getPublicQualifiedName(child._name)] = child;
                                }
                                child._setFlags(256 /* Constructed */);
                                if (child._symbol && child._symbol.isAVM1Object) {
                                    child.dispatchEvent(events.Event.getInstance(events.Event.AVM1_INIT));
                                    child.dispatchEvent(events.Event.getInstance(events.Event.AVM1_CONSTRUCT));
                                    child._setFlags(1024 /* NeedsLoadEvent */);
                                    if (child._hasAnyFlags(8192 /* HasFrameScriptPending */ | 16384 /* ContainsFrameScriptPendingChildren */)) {
                                        this._setFlags(16384 /* ContainsFrameScriptPendingChildren */);
                                    }
                                }
                                child.dispatchEvent(events.Event.getInstance(events.Event.ADDED, true));
                                if (child.stage) {
                                    child.dispatchEvent(events.Event.getInstance(events.Event.ADDED_TO_STAGE));
                                }
                            }
                        };
                        DisplayObjectContainer.prototype._enqueueFrameScripts = function () {
                            if (this._hasFlags(16384 /* ContainsFrameScriptPendingChildren */)) {
                                this._removeFlags(16384 /* ContainsFrameScriptPendingChildren */);
                                var children = this._children;
                                for (var i = 0; i < children.length; i++) {
                                    var child = children[i];
                                    if (DisplayObjectContainer.isType(child) || display.AVM1Movie.isType(child)) {
                                        child._enqueueFrameScripts();
                                    }
                                }
                            }
                        };
                        Object.defineProperty(DisplayObjectContainer.prototype, "numChildren", {
                            get: function () {
                                return this._getNumChildren();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DisplayObjectContainer.prototype._getNumChildren = function () {
                            return this._children.length;
                        };
                        Object.defineProperty(DisplayObjectContainer.prototype, "textSnapshot", {
                            get: function () {
                                notImplemented("public DisplayObjectContainer::get textSnapshot");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplayObjectContainer.prototype, "tabChildren", {
                            get: function () {
                                return this._getTabChildren();
                            },
                            set: function (enable) {
                                this._setTabChildren(enable);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DisplayObjectContainer.prototype._getTabChildren = function () {
                            return this._tabChildren;
                        };
                        DisplayObjectContainer.prototype._setTabChildren = function (enable) {
                            enable = !!enable;
                            var old = this._tabChildren;
                            this._tabChildren = enable;
                            if (old !== enable) {
                                this.dispatchEvent(events.Event.getInstance(events.Event.TAB_CHILDREN_CHANGE, true));
                            }
                        };
                        Object.defineProperty(DisplayObjectContainer.prototype, "mouseChildren", {
                            get: function () {
                                return this._getMouseChildren();
                            },
                            set: function (enable) {
                                this._setMouseChildren(enable);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DisplayObjectContainer.prototype._getMouseChildren = function () {
                            return this._mouseChildren;
                        };
                        DisplayObjectContainer.prototype._setMouseChildren = function (enable) {
                            this._mouseChildren = !!enable;
                        };
                        DisplayObjectContainer.prototype.addChild = function (child) {
                            checkParameterType(child, "child", flash.display.DisplayObject);
                            return this.addChildAt(child, this._children.length);
                        };
                        DisplayObjectContainer.prototype.addChildAt = function (child, index) {
                            checkParameterType(child, "child", flash.display.DisplayObject);
                            release || AVM2.counter.count("DisplayObjectContainer::addChildAt");
                            index = index | 0;
                            release || assert(child._hasFlags(256 /* Constructed */), "Child is not fully constructed.");
                            if (child === this) {
                                throwError('ArgumentError', AVM2.Errors.CantAddSelfError);
                            }
                            if (DisplayObjectContainer.isType(child) && child.contains(this)) {
                                throwError('ArgumentError', AVM2.Errors.CantAddParentError);
                            }
                            var children = this._children;
                            if (index < 0 || index > children.length) {
                                throwError('RangeError', AVM2.Errors.ParamRangeError);
                            }
                            if (child._parent === this) {
                                this.setChildIndex(child, clamp(index, 0, children.length - 1));
                                return child;
                            }
                            if (child._parent) {
                                DisplayObjectContainer.prototype.removeChildAt.call(child._parent, child._parent.getChildIndex(child));
                                index = clamp(index, 0, children.length);
                            }
                            for (var i = children.length - 1; i >= index; i--) {
                                children[i]._index++;
                            }
                            children.splice(index, 0, child);
                            child._setParent(this, -1);
                            child._index = index;
                            child._invalidatePosition();
                            child.dispatchEvent(events.Event.getInstance(events.Event.ADDED, true));
                            if (child.stage) {
                                child._propagateEvent(events.Event.getInstance(events.Event.ADDED_TO_STAGE));
                            }
                            this._invalidateChildren();
                            child._addReference();
                            return child;
                        };
                        DisplayObjectContainer.prototype.addTimelineObjectAtDepth = function (child, depth) {
                            release || AVM2.counter.count("DisplayObjectContainer::addTimelineObjectAtDepth");
                            depth = depth | 0;
                            var children = this._children;
                            var maxIndex = children.length - 1;
                            var index = maxIndex + 1;
                            for (var i = maxIndex; i >= 0; i--) {
                                var current = children[i];
                                if (current._depth > -1) {
                                    if (current._depth < depth) {
                                        index = i + 1;
                                        break;
                                    }
                                    index = i;
                                }
                            }
                            if (index > maxIndex) {
                                children.push(child);
                                child._index = index;
                            }
                            else {
                                children.splice(index, 0, child);
                                for (var i = index; i < children.length; i++) {
                                    children[i]._index = i;
                                }
                            }
                            child._setParent(this, depth);
                            child._invalidatePosition();
                            this._invalidateChildren();
                        };
                        DisplayObjectContainer.prototype.removeChild = function (child) {
                            checkParameterType(child, "child", flash.display.DisplayObject);
                            return this.removeChildAt(this.getChildIndex(child));
                        };
                        DisplayObjectContainer.prototype.removeChildAt = function (index) {
                            release || AVM2.counter.count("DisplayObjectContainer::removeChildAt");
                            index = index | 0;
                            var children = this._children;
                            if (index < 0 || index >= children.length) {
                                throwError('RangeError', AVM2.Errors.ParamRangeError);
                            }
                            var child = children[index];
                            if (child._hasFlags(256 /* Constructed */)) {
                                child.dispatchEvent(events.Event.getInstance(events.Event.REMOVED, true));
                                if (this.stage) {
                                    child._propagateEvent(events.Event.getInstance(events.Event.REMOVED_FROM_STAGE));
                                }
                                index = this.getChildIndex(child);
                            }
                            children.splice(index, 1);
                            for (var i = children.length - 1; i >= index; i--) {
                                children[i]._index--;
                            }
                            child._setParent(null, -1);
                            child._index = -1;
                            child._invalidatePosition();
                            this._invalidateChildren();
                            return child;
                        };
                        DisplayObjectContainer.prototype.getChildIndex = function (child) {
                            checkParameterType(child, "child", flash.display.DisplayObject);
                            if (child._parent !== this) {
                                throwError('ArgumentError', AVM2.Errors.NotAChildError);
                            }
                            return child._index;
                        };
                        DisplayObjectContainer.prototype.setChildIndex = function (child, index) {
                            index = index | 0;
                            checkParameterType(child, "child", flash.display.DisplayObject);
                            var children = this._children;
                            if (index < 0 || index >= children.length) {
                                throwError('RangeError', AVM2.Errors.ParamRangeError);
                            }
                            if (child._parent !== this) {
                                throwError('ArgumentError', AVM2.Errors.NotAChildError);
                            }
                            child._setDepth(-1);
                            var currentIndex = this.getChildIndex(child);
                            if (children.length === 1 || currentIndex === index) {
                                return;
                            }
                            if (index === currentIndex + 1 || index === currentIndex - 1) {
                                this._swapChildrenAt(currentIndex, index);
                            }
                            else {
                                children.splice(currentIndex, 1);
                                children.splice(index, 0, child);
                                var i = currentIndex < index ? currentIndex : index;
                                while (i < children.length) {
                                    children[i]._index = i++;
                                }
                            }
                            this._invalidateChildren();
                        };
                        DisplayObjectContainer.prototype.getChildAt = function (index) {
                            index = index | 0;
                            var children = this._children;
                            if (index < 0 || index >= children.length) {
                                throwError('RangeError', AVM2.Errors.ParamRangeError);
                            }
                            var child = this._lookupChildByIndex(index);
                            if (!child) {
                                return null;
                            }
                            child._addReference();
                            return child;
                        };
                        DisplayObjectContainer.prototype.getTimelineObjectAtDepth = function (depth) {
                            depth = depth | 0;
                            var children = this._children;
                            for (var i = 0; i < children.length; i++) {
                                var child = children[i];
                                if (child._depth > depth) {
                                    break;
                                }
                                if (child._depth === depth) {
                                    return child;
                                }
                            }
                            return null;
                        };
                        DisplayObjectContainer.prototype.getClipDepthIndex = function (depth) {
                            depth = depth | 0;
                            var children = this._children;
                            var index = this._children.length - 1;
                            var first = true;
                            for (var i = index; i >= 0; i--) {
                                var child = children[i];
                                if (child._depth < 0) {
                                    continue;
                                }
                                if (child._depth <= depth) {
                                    return first ? index : i;
                                }
                                first = false;
                            }
                            return 0;
                        };
                        DisplayObjectContainer.prototype.getChildByName = function (name) {
                            name = asCoerceString(name);
                            var child = this._lookupChildByName(name);
                            if (child) {
                                child._addReference();
                                return child;
                            }
                            return null;
                        };
                        DisplayObjectContainer.prototype._lookupChildByIndex = function (index) {
                            var child = this._children[index];
                            if (child && child._hasFlags(256 /* Constructed */)) {
                                return child;
                            }
                            return null;
                        };
                        DisplayObjectContainer.prototype._lookupChildByName = function (name) {
                            var children = this._children;
                            for (var i = 0; i < children.length; i++) {
                                var child = children[i];
                                if (!child._hasFlags(256 /* Constructed */)) {
                                    continue;
                                }
                                if (child.name === name) {
                                    return child;
                                }
                            }
                            return null;
                        };
                        DisplayObjectContainer.prototype._containsPoint = function (globalX, globalY, localX, localY, testingType, objects) {
                            return this._containsPointImpl(globalX, globalY, localX, localY, testingType, objects, false);
                        };
                        DisplayObjectContainer.prototype._containsPointImpl = function (globalX, globalY, localX, localY, testingType, objects, skipBoundsCheck) {
                            var result;
                            if (!skipBoundsCheck) {
                                result = this._boundsAndMaskContainPoint(globalX, globalY, localX, localY, testingType);
                                if (result === 0 /* None */ || testingType < 2 /* HitTestShape */) {
                                    return result;
                                }
                            }
                            var anyChildHit = false;
                            var children = this._getUnclippedChildren(testingType, globalX, globalY);
                            for (var i = children ? children.length : 0; i--;) {
                                var child = children[i];
                                if (child._maskedObject) {
                                    continue;
                                }
                                result = child._containsGlobalPoint(globalX, globalY, testingType, objects);
                                if (result !== 2 /* Shape */) {
                                    continue;
                                }
                                if (testingType < 3 /* Mouse */) {
                                    return result;
                                }
                                anyChildHit = true;
                                if (testingType >= 4 /* ObjectsUnderPoint */) {
                                    continue;
                                }
                                release || assert(testingType === 3 /* Mouse */);
                                release || assert(objects.length <= 1);
                                if (!this._mouseEnabled) {
                                    objects.length = 0;
                                    return result;
                                }
                                if (!this._mouseChildren) {
                                    objects[0] = this;
                                }
                                if (objects.length !== 0) {
                                    release || assert(display.InteractiveObject.isType(objects[0]));
                                    return 2 /* Shape */;
                                }
                            }
                            if (anyChildHit && testingType < 4 /* ObjectsUnderPoint */) {
                                if (testingType === 3 /* Mouse */ && objects.length === 0) {
                                    objects[0] = this;
                                }
                                return 2 /* Shape */;
                            }
                            var selfHit = this._containsPointDirectly(localX, localY, globalX, globalY);
                            if (selfHit) {
                                if (testingType === 5 /* Drop */) {
                                    objects[0] = this;
                                }
                                else if (testingType === 4 /* ObjectsUnderPoint */ || objects && this._mouseEnabled) {
                                    objects.push(this);
                                }
                            }
                            return anyChildHit || selfHit ? 2 /* Shape */ : 0 /* None */;
                        };
                        DisplayObjectContainer.prototype._getUnclippedChildren = function (testingType, globalX, globalY) {
                            var children = this._children;
                            if (!children) {
                                return null;
                            }
                            var unclippedChildren;
                            for (var i = 0; children && i < children.length; i++) {
                                var child = children[i];
                                if (child._clipDepth !== -1) {
                                    if (!unclippedChildren) {
                                        unclippedChildren = children.slice(0, i);
                                    }
                                    if (testingType === 2 /* HitTestShape */) {
                                        continue;
                                    }
                                    release || assert(testingType >= 3 /* Mouse */);
                                    var containsPoint = child._containsGlobalPoint(globalX, globalY, 2 /* HitTestShape */, null);
                                    if (!containsPoint) {
                                        i = this.getClipDepthIndex(child._clipDepth);
                                    }
                                    continue;
                                }
                                if (unclippedChildren) {
                                    unclippedChildren.push(child);
                                }
                            }
                            return unclippedChildren || children;
                        };
                        DisplayObjectContainer.prototype._getChildBounds = function (bounds, includeStrokes) {
                            var children = this._children;
                            for (var i = 0; i < children.length; i++) {
                                bounds.unionInPlace(children[i]._getTransformedBounds(this, includeStrokes));
                            }
                        };
                        DisplayObjectContainer.prototype.getObjectsUnderPoint = function (globalPoint) {
                            release || AVM2.counter.count("DisplayObjectContainer::getObjectsUnderPoint");
                            var globalX = globalPoint.x * 20 | 0;
                            var globalY = globalPoint.y * 20 | 0;
                            var objects = [];
                            this._containsGlobalPoint(globalX, globalY, 4 /* ObjectsUnderPoint */, objects);
                            return objects.reverse();
                        };
                        DisplayObjectContainer.prototype.areInaccessibleObjectsUnderPoint = function (point) {
                            point = point;
                            notImplemented("public DisplayObjectContainer::areInaccessibleObjectsUnderPoint");
                            return;
                        };
                        DisplayObjectContainer.prototype.contains = function (child) {
                            checkParameterType(child, "child", flash.display.DisplayObject);
                            return this._isAncestor(child);
                        };
                        DisplayObjectContainer.prototype.swapChildrenAt = function (index1, index2) {
                            index1 = index1 | 0;
                            index2 = index2 | 0;
                            var children = this._children;
                            if (index1 < 0 || index1 >= children.length || index2 < 0 || index2 >= children.length) {
                                throwError('RangeError', AVM2.Errors.ParamRangeError);
                            }
                            this._swapChildrenAt(index1, index2);
                            if (index1 !== index2) {
                                this._invalidateChildren();
                            }
                        };
                        DisplayObjectContainer.prototype._swapChildrenAt = function (index1, index2) {
                            var children = this._children;
                            var child1 = children[index1];
                            var child2 = children[index2];
                            children[index2] = child1;
                            child1._setDepth(-1);
                            child1._index = index2;
                            children[index1] = child2;
                            child2._setDepth(-1);
                            child2._index = index1;
                        };
                        DisplayObjectContainer.prototype.swapChildren = function (child1, child2) {
                            checkParameterType(child1, "child", flash.display.DisplayObject);
                            checkParameterType(child2, "child", flash.display.DisplayObject);
                            this.swapChildrenAt(this.getChildIndex(child1), this.getChildIndex(child2));
                        };
                        DisplayObjectContainer.prototype.removeChildren = function (beginIndex, endIndex) {
                            if (beginIndex === void 0) { beginIndex = 0; }
                            if (endIndex === void 0) { endIndex = 2147483647; }
                            beginIndex = beginIndex | 0;
                            endIndex = endIndex | 0;
                            if (beginIndex < 0 || endIndex < 0 || endIndex < beginIndex || endIndex >= this._children.length) {
                                throwError('RangeError', AVM2.Errors.ParamRangeError);
                            }
                            var count = endIndex - beginIndex + 1;
                            if (count > 0) {
                                while (count--) {
                                    this.removeChildAt(beginIndex);
                                }
                            }
                        };
                        DisplayObjectContainer.bindings = null;
                        DisplayObjectContainer.classSymbols = null;
                        DisplayObjectContainer.classInitializer = null;
                        DisplayObjectContainer.initializer = function () {
                            var self = this;
                            self._tabChildren = true;
                            self._mouseChildren = true;
                            self._children = [];
                        };
                        return DisplayObjectContainer;
                    })(flash.display.InteractiveObject);
                    display.DisplayObjectContainer = DisplayObjectContainer;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var JointStyle = (function (_super) {
                        __extends(JointStyle, _super);
                        function JointStyle() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.JointStyle");
                        }
                        JointStyle.fromNumber = function (n) {
                            switch (n) {
                                case 0:
                                    return JointStyle.ROUND;
                                case 1:
                                    return JointStyle.BEVEL;
                                case 2:
                                    return JointStyle.MITER;
                                default:
                                    return null;
                            }
                        };
                        JointStyle.toNumber = function (value) {
                            switch (value) {
                                case JointStyle.ROUND:
                                    return 0;
                                case JointStyle.BEVEL:
                                    return 1;
                                case JointStyle.MITER:
                                    return 2;
                                default:
                                    return -1;
                            }
                        };
                        JointStyle.classInitializer = null;
                        JointStyle.initializer = null;
                        JointStyle.classSymbols = null;
                        JointStyle.instanceSymbols = null;
                        JointStyle.ROUND = "round";
                        JointStyle.BEVEL = "bevel";
                        JointStyle.MITER = "miter";
                        return JointStyle;
                    })(AS.ASNative);
                    display.JointStyle = JointStyle;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var CapsStyle = (function (_super) {
                        __extends(CapsStyle, _super);
                        function CapsStyle() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.CapsStyle");
                        }
                        CapsStyle.fromNumber = function (n) {
                            switch (n) {
                                case 0:
                                    return CapsStyle.ROUND;
                                case 1:
                                    return CapsStyle.NONE;
                                case 2:
                                    return CapsStyle.SQUARE;
                                default:
                                    return null;
                            }
                        };
                        CapsStyle.toNumber = function (value) {
                            switch (value) {
                                case CapsStyle.ROUND:
                                    return 0;
                                case CapsStyle.NONE:
                                    return 1;
                                case CapsStyle.SQUARE:
                                    return 2;
                                default:
                                    return -1;
                            }
                        };
                        CapsStyle.classInitializer = null;
                        CapsStyle.initializer = null;
                        CapsStyle.classSymbols = null;
                        CapsStyle.instanceSymbols = null;
                        CapsStyle.ROUND = "round";
                        CapsStyle.NONE = "none";
                        CapsStyle.SQUARE = "square";
                        return CapsStyle;
                    })(AS.ASNative);
                    display.CapsStyle = CapsStyle;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var LineScaleMode = (function (_super) {
                        __extends(LineScaleMode, _super);
                        function LineScaleMode() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.LineScaleMode");
                        }
                        LineScaleMode.fromNumber = function (n) {
                            switch (n) {
                                case 0:
                                    return LineScaleMode.NONE;
                                case 1:
                                    return LineScaleMode.NORMAL;
                                case 2:
                                    return LineScaleMode.VERTICAL;
                                case 3:
                                    return LineScaleMode.HORIZONTAL;
                                default:
                                    return null;
                            }
                        };
                        LineScaleMode.toNumber = function (value) {
                            switch (value) {
                                case LineScaleMode.NONE:
                                    return 0;
                                case LineScaleMode.NORMAL:
                                    return 1;
                                case LineScaleMode.VERTICAL:
                                    return 2;
                                case LineScaleMode.HORIZONTAL:
                                    return 3;
                                default:
                                    return -1;
                            }
                        };
                        LineScaleMode.classInitializer = null;
                        LineScaleMode.initializer = null;
                        LineScaleMode.classSymbols = null;
                        LineScaleMode.instanceSymbols = null;
                        LineScaleMode.NORMAL = "normal";
                        LineScaleMode.VERTICAL = "vertical";
                        LineScaleMode.HORIZONTAL = "horizontal";
                        LineScaleMode.NONE = "none";
                        return LineScaleMode;
                    })(AS.ASNative);
                    display.LineScaleMode = LineScaleMode;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var GradientType = (function (_super) {
                        __extends(GradientType, _super);
                        function GradientType() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.GradientType");
                        }
                        GradientType.fromNumber = function (n) {
                            switch (n) {
                                case 16 /* Linear */:
                                    return GradientType.LINEAR;
                                case 18 /* Radial */:
                                    return GradientType.RADIAL;
                                default:
                                    return null;
                            }
                        };
                        GradientType.toNumber = function (value) {
                            switch (value) {
                                case GradientType.LINEAR:
                                    return 16 /* Linear */;
                                case GradientType.RADIAL:
                                    return 18 /* Radial */;
                                default:
                                    return -1;
                            }
                        };
                        GradientType.classInitializer = null;
                        GradientType.initializer = null;
                        GradientType.classSymbols = null;
                        GradientType.instanceSymbols = null;
                        GradientType.LINEAR = "linear";
                        GradientType.RADIAL = "radial";
                        return GradientType;
                    })(AS.ASNative);
                    display.GradientType = GradientType;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var GradientSpreadMethod = Shumway.GradientSpreadMethod;
                    var SpreadMethod = (function (_super) {
                        __extends(SpreadMethod, _super);
                        function SpreadMethod() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.SpreadMethod");
                        }
                        SpreadMethod.fromNumber = function (n) {
                            switch (n) {
                                case 0 /* Pad */:
                                    return SpreadMethod.PAD;
                                case 1 /* Reflect */:
                                    return SpreadMethod.REFLECT;
                                case 2 /* Repeat */:
                                    return SpreadMethod.REPEAT;
                                default:
                                    return null;
                            }
                        };
                        SpreadMethod.toNumber = function (value) {
                            switch (value) {
                                case SpreadMethod.PAD:
                                    return 0 /* Pad */;
                                case SpreadMethod.REFLECT:
                                    return 1 /* Reflect */;
                                case SpreadMethod.REPEAT:
                                    return 2 /* Repeat */;
                                default:
                                    return -1;
                            }
                        };
                        SpreadMethod.classInitializer = null;
                        SpreadMethod.initializer = null;
                        SpreadMethod.classSymbols = null;
                        SpreadMethod.instanceSymbols = null;
                        SpreadMethod.PAD = "pad";
                        SpreadMethod.REFLECT = "reflect";
                        SpreadMethod.REPEAT = "repeat";
                        return SpreadMethod;
                    })(AS.ASNative);
                    display.SpreadMethod = SpreadMethod;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var GradientInterpolationMethod = Shumway.GradientInterpolationMethod;
                    var InterpolationMethod = (function (_super) {
                        __extends(InterpolationMethod, _super);
                        function InterpolationMethod() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.InterpolationMethod");
                        }
                        InterpolationMethod.fromNumber = function (n) {
                            switch (n) {
                                case 0 /* RGB */:
                                    return InterpolationMethod.RGB;
                                case 1 /* LinearRGB */:
                                    return InterpolationMethod.LINEAR_RGB;
                                default:
                                    return null;
                            }
                        };
                        InterpolationMethod.toNumber = function (value) {
                            switch (value) {
                                case InterpolationMethod.RGB:
                                    return 0 /* RGB */;
                                case InterpolationMethod.LINEAR_RGB:
                                    return 1 /* LinearRGB */;
                                default:
                                    return -1;
                            }
                        };
                        InterpolationMethod.classInitializer = null;
                        InterpolationMethod.initializer = null;
                        InterpolationMethod.classSymbols = null;
                        InterpolationMethod.instanceSymbols = null;
                        InterpolationMethod.RGB = "rgb";
                        InterpolationMethod.LINEAR_RGB = "linearRGB";
                        return InterpolationMethod;
                    })(AS.ASNative);
                    display.InterpolationMethod = InterpolationMethod;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var GraphicsBitmapFill = (function (_super) {
                        __extends(GraphicsBitmapFill, _super);
                        function GraphicsBitmapFill(bitmapData, matrix, repeat, smooth) {
                            if (bitmapData === void 0) { bitmapData = null; }
                            if (matrix === void 0) { matrix = null; }
                            if (repeat === void 0) { repeat = true; }
                            if (smooth === void 0) { smooth = false; }
                            false && _super.call(this);
                            this.bitmapData = bitmapData;
                            this.matrix = matrix;
                            this.repeat = !!repeat;
                            this.smooth = !!smooth;
                        }
                        GraphicsBitmapFill.classInitializer = null;
                        GraphicsBitmapFill.initializer = null;
                        GraphicsBitmapFill.classSymbols = null;
                        GraphicsBitmapFill.instanceSymbols = null;
                        return GraphicsBitmapFill;
                    })(AS.ASNative);
                    display.GraphicsBitmapFill = GraphicsBitmapFill;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var GraphicsEndFill = (function (_super) {
                        __extends(GraphicsEndFill, _super);
                        function GraphicsEndFill() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.GraphicsEndFill");
                        }
                        GraphicsEndFill.classInitializer = null;
                        GraphicsEndFill.initializer = null;
                        GraphicsEndFill.classSymbols = null;
                        GraphicsEndFill.instanceSymbols = null;
                        return GraphicsEndFill;
                    })(AS.ASNative);
                    display.GraphicsEndFill = GraphicsEndFill;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var GraphicsGradientFill = (function (_super) {
                        __extends(GraphicsGradientFill, _super);
                        function GraphicsGradientFill(type, colors, alphas, ratios, matrix, spreadMethod, interpolationMethod, focalPointRatio) {
                            if (type === void 0) { type = "linear"; }
                            if (colors === void 0) { colors = null; }
                            if (alphas === void 0) { alphas = null; }
                            if (ratios === void 0) { ratios = null; }
                            if (matrix === void 0) { matrix = null; }
                            if (spreadMethod === void 0) { spreadMethod = "pad"; }
                            if (interpolationMethod === void 0) { interpolationMethod = "rgb"; }
                            if (focalPointRatio === void 0) { focalPointRatio = 0; }
                            false && _super.call(this);
                            this.type = asCoerceString(type);
                            this.colors = colors;
                            this.alphas = alphas;
                            this.ratios = ratios;
                            this.matrix = matrix;
                            this.spreadMethod = spreadMethod;
                            this.interpolationMethod = asCoerceString(interpolationMethod);
                            this.focalPointRatio = +focalPointRatio;
                        }
                        GraphicsGradientFill.classInitializer = null;
                        GraphicsGradientFill.initializer = null;
                        GraphicsGradientFill.classSymbols = null;
                        GraphicsGradientFill.instanceSymbols = null;
                        return GraphicsGradientFill;
                    })(AS.ASNative);
                    display.GraphicsGradientFill = GraphicsGradientFill;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var GraphicsPath = (function (_super) {
                        __extends(GraphicsPath, _super);
                        function GraphicsPath(commands, data, winding) {
                            if (commands === void 0) { commands = null; }
                            if (data === void 0) { data = null; }
                            if (winding === void 0) { winding = "evenOdd"; }
                            false && _super.call(this);
                            this.commands = commands;
                            this.data = data;
                            this.winding = asCoerceString(winding);
                        }
                        GraphicsPath.classInitializer = null;
                        GraphicsPath.initializer = null;
                        GraphicsPath.classSymbols = null;
                        GraphicsPath.instanceSymbols = null;
                        return GraphicsPath;
                    })(AS.ASNative);
                    display.GraphicsPath = GraphicsPath;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var GraphicsPathCommand = (function (_super) {
                        __extends(GraphicsPathCommand, _super);
                        function GraphicsPathCommand() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.GraphicsPathCommand");
                        }
                        GraphicsPathCommand.classInitializer = null;
                        GraphicsPathCommand.initializer = null;
                        GraphicsPathCommand.classSymbols = null;
                        GraphicsPathCommand.instanceSymbols = null;
                        GraphicsPathCommand.NO_OP = undefined;
                        GraphicsPathCommand.MOVE_TO = 1;
                        GraphicsPathCommand.LINE_TO = 2;
                        GraphicsPathCommand.CURVE_TO = 3;
                        GraphicsPathCommand.WIDE_MOVE_TO = 4;
                        GraphicsPathCommand.WIDE_LINE_TO = 5;
                        GraphicsPathCommand.CUBIC_CURVE_TO = 6;
                        return GraphicsPathCommand;
                    })(AS.ASNative);
                    display.GraphicsPathCommand = GraphicsPathCommand;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var GraphicsPathWinding = (function (_super) {
                        __extends(GraphicsPathWinding, _super);
                        function GraphicsPathWinding() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.GraphicsPathWinding");
                        }
                        GraphicsPathWinding.classInitializer = null;
                        GraphicsPathWinding.initializer = null;
                        GraphicsPathWinding.classSymbols = null;
                        GraphicsPathWinding.instanceSymbols = null;
                        GraphicsPathWinding.EVEN_ODD = "evenOdd";
                        GraphicsPathWinding.NON_ZERO = "nonZero";
                        return GraphicsPathWinding;
                    })(AS.ASNative);
                    display.GraphicsPathWinding = GraphicsPathWinding;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var GraphicsSolidFill = (function (_super) {
                        __extends(GraphicsSolidFill, _super);
                        function GraphicsSolidFill(color, alpha) {
                            if (color === void 0) { color = 0; }
                            if (alpha === void 0) { alpha = 1; }
                            false && _super.call(this);
                            this.color = color >>> 0;
                            this.alpha = +alpha;
                        }
                        GraphicsSolidFill.classInitializer = null;
                        GraphicsSolidFill.initializer = null;
                        GraphicsSolidFill.classSymbols = null;
                        GraphicsSolidFill.instanceSymbols = null;
                        return GraphicsSolidFill;
                    })(AS.ASNative);
                    display.GraphicsSolidFill = GraphicsSolidFill;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var GraphicsStroke = (function (_super) {
                        __extends(GraphicsStroke, _super);
                        function GraphicsStroke(thickness, pixelHinting, scaleMode, caps, joints, miterLimit, fill) {
                            if (thickness === void 0) { thickness = NaN; }
                            if (pixelHinting === void 0) { pixelHinting = false; }
                            if (scaleMode === void 0) { scaleMode = "normal"; }
                            if (caps === void 0) { caps = "none"; }
                            if (joints === void 0) { joints = "round"; }
                            if (miterLimit === void 0) { miterLimit = 3; }
                            if (fill === void 0) { fill = null; }
                            false && _super.call(this);
                            this.thickness = +thickness;
                            this.pixelHinting = !!pixelHinting;
                            this.scaleMode = asCoerceString(scaleMode);
                            this.caps = asCoerceString(caps);
                            this.joints = asCoerceString(joints);
                            this.miterLimit = +miterLimit;
                            this.fill = fill;
                        }
                        GraphicsStroke.classInitializer = null;
                        GraphicsStroke.initializer = null;
                        GraphicsStroke.classSymbols = null;
                        GraphicsStroke.instanceSymbols = null;
                        return GraphicsStroke;
                    })(AS.ASNative);
                    display.GraphicsStroke = GraphicsStroke;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var GraphicsTrianglePath = (function (_super) {
                        __extends(GraphicsTrianglePath, _super);
                        function GraphicsTrianglePath(vertices, indices, uvtData, culling) {
                            if (vertices === void 0) { vertices = null; }
                            if (indices === void 0) { indices = null; }
                            if (uvtData === void 0) { uvtData = null; }
                            if (culling === void 0) { culling = "none"; }
                            vertices = vertices;
                            indices = indices;
                            uvtData = uvtData;
                            culling = asCoerceString(culling);
                            false && _super.call(this);
                            dummyConstructor("public flash.display.GraphicsTrianglePath");
                        }
                        GraphicsTrianglePath.classInitializer = null;
                        GraphicsTrianglePath.initializer = null;
                        GraphicsTrianglePath.classSymbols = null;
                        GraphicsTrianglePath.instanceSymbols = null;
                        return GraphicsTrianglePath;
                    })(AS.ASNative);
                    display.GraphicsTrianglePath = GraphicsTrianglePath;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var throwError = Shumway.AVM2.Runtime.throwError;
                    var clamp = Shumway.NumberUtilities.clamp;
                    var Bounds = Shumway.Bounds;
                    var assert = Shumway.Debug.assert;
                    var assertUnreachable = Shumway.Debug.assertUnreachable;
                    var GradientType = flash.display.GradientType;
                    var SpreadMethod = flash.display.SpreadMethod;
                    var InterpolationMethod = flash.display.InterpolationMethod;
                    var LineScaleMode = flash.display.LineScaleMode;
                    var CapsStyle = flash.display.CapsStyle;
                    var JointStyle = flash.display.JointStyle;
                    var PathCommand = Shumway.PathCommand;
                    var ShapeData = Shumway.ShapeData;
                    function distanceSq(x1, y1, x2, y2) {
                        var dX = x2 - x1;
                        var dY = y2 - y1;
                        return dX * dX + dY * dY;
                    }
                    function quadraticBezier(from, cp, to, t) {
                        var inverseT = 1 - t;
                        return from * inverseT * inverseT + 2 * cp * inverseT * t + to * t * t;
                    }
                    function quadraticBezierExtreme(from, cp, to) {
                        var t = (from - cp) / (from - 2 * cp + to);
                        if (t < 0) {
                            return from;
                        }
                        if (t > 1) {
                            return to;
                        }
                        return quadraticBezier(from, cp, to, t);
                    }
                    function cubicBezier(from, cp, cp2, to, t) {
                        var tSq = t * t;
                        var inverseT = 1 - t;
                        var inverseTSq = inverseT * inverseT;
                        return from * inverseT * inverseTSq + 3 * cp * t * inverseTSq + 3 * cp2 * inverseT * tSq + to * t * tSq;
                    }
                    function cubicBezierExtremes(from, cp, cp2, to) {
                        var d1 = cp - from;
                        var d2 = cp2 - cp;
                        d2 *= 2;
                        var d3 = to - cp2;
                        if (d1 + d3 === d2) {
                            d3 *= 1.0001;
                        }
                        var fHead = 2 * d1 - d2;
                        var part1 = d2 - 2 * d1;
                        var fCenter = Math.sqrt(part1 * part1 - 4 * d1 * (d1 - d2 + d3));
                        var fTail = 2 * (d1 - d2 + d3);
                        var t1 = (fHead + fCenter) / fTail;
                        var t2 = (fHead - fCenter) / fTail;
                        var result = [];
                        if (t1 >= 0 && t1 <= 1) {
                            result.push(Math.round(cubicBezier(from, cp, cp2, to, t1)));
                        }
                        if (t2 >= 0 && t2 <= 1) {
                            result.push(Math.round(cubicBezier(from, cp, cp2, to, t2)));
                        }
                        return result;
                    }
                    function cubicXAtY(x0, y0, cx, cy, cx1, cy1, x1, y1, y) {
                        var dX = 3.0 * (cx - x0);
                        var dY = 3.0 * (cy - y0);
                        var bX = 3.0 * (cx1 - cx) - dX;
                        var bY = 3.0 * (cy1 - cy) - dY;
                        var c3X = x1 - x0 - dX - bX;
                        var c3Y = y1 - y0 - dY - bY;
                        function f(t) {
                            return t * (dY + t * (bY + t * c3Y)) + y0 - y;
                        }
                        function pointAt(t) {
                            if (t < 0) {
                                t = 0;
                            }
                            else if (t > 1) {
                                t = 1;
                            }
                            return x0 + t * (dX + t * (bX + t * c3X));
                        }
                        function bisectCubicBezierRange(f, l, r, limit) {
                            if (Math.abs(r - l) <= limit) {
                                return;
                            }
                            var middle = 0.5 * (l + r);
                            if (f(l) * f(r) <= 0) {
                                left = l;
                                right = r;
                                return;
                            }
                            bisectCubicBezierRange(f, l, middle, limit);
                            bisectCubicBezierRange(f, middle, r, limit);
                        }
                        var left = 0;
                        var right = 1;
                        bisectCubicBezierRange(f, 0, 1, 0.05);
                        var t0 = findRoot(left, right, f, 50, 0.000001);
                        var evalResult = Math.abs(f(t0));
                        if (evalResult > 0.00001) {
                            return [];
                        }
                        var result = [];
                        if (t0 <= 1) {
                            result.push(pointAt(t0));
                        }
                        var a = c3Y;
                        var b = t0 * a + bY;
                        var c = t0 * b + dY;
                        var d = b * b - 4 * a * c;
                        if (d < 0) {
                            return result;
                        }
                        d = Math.sqrt(d);
                        a = 1 / (a + a);
                        var t1 = (d - b) * a;
                        var t2 = (-b - d) * a;
                        if (t1 >= 0 && t1 <= 1) {
                            result.push(pointAt(t1));
                        }
                        if (t2 >= 0 && t2 <= 1) {
                            result.push(pointAt(t2));
                        }
                        return result;
                    }
                    function findRoot(x0, x2, f, maxIterations, epsilon) {
                        var x1;
                        var y0;
                        var y1;
                        var y2;
                        var b;
                        var c;
                        var y10;
                        var y20;
                        var y21;
                        var xm;
                        var ym;
                        var temp;
                        var xmlast = x0;
                        y0 = f(x0);
                        if (y0 === 0) {
                            return x0;
                        }
                        y2 = f(x2);
                        if (y2 === 0) {
                            return x2;
                        }
                        if (y2 * y0 > 0) {
                            return x0;
                        }
                        var __iter = 0;
                        for (var i = 0; i < maxIterations; ++i) {
                            __iter++;
                            x1 = 0.5 * (x2 + x0);
                            y1 = f(x1);
                            if (y1 === 0) {
                                return x1;
                            }
                            if (Math.abs(x1 - x0) < epsilon) {
                                return x1;
                            }
                            if (y1 * y0 > 0) {
                                temp = x0;
                                x0 = x2;
                                x2 = temp;
                                temp = y0;
                                y0 = y2;
                                y2 = temp;
                            }
                            y10 = y1 - y0;
                            y21 = y2 - y1;
                            y20 = y2 - y0;
                            if (y2 * y20 < 2 * y1 * y10) {
                                x2 = x1;
                                y2 = y1;
                            }
                            else {
                                b = (x1 - x0) / y10;
                                c = (y10 - y21) / (y21 * y20);
                                xm = x0 - b * y0 * (1 - c * y1);
                                ym = f(xm);
                                if (ym === 0) {
                                    return xm;
                                }
                                if (Math.abs(xm - xmlast) < epsilon) {
                                    return xm;
                                }
                                xmlast = xm;
                                if (ym * y0 < 0) {
                                    x2 = xm;
                                    y2 = ym;
                                }
                                else {
                                    x0 = xm;
                                    y0 = ym;
                                    x2 = x1;
                                    y2 = y1;
                                }
                            }
                        }
                        return x1;
                    }
                    function rayIntersectsLine(x, y, x1, y1, x2, y2) {
                        return (y2 > y) !== (y1 > y) && x < (x1 - x2) * (y - y2) / (y1 - y2) + x2;
                    }
                    function rayFullyCrossesCurve(x, y, fromX, fromY, cpX, cpY, toX, toY) {
                        if ((cpY > y) === (fromY > y) && (toY > y) === (fromY > y)) {
                            return false;
                        }
                        if (fromX >= x && cpX >= x && toX >= x) {
                            return true;
                        }
                        var a = fromY - 2 * cpY + toY;
                        var c = fromY - y;
                        var b = 2 * (cpY - fromY);
                        var d = b * b - 4 * a * c;
                        if (d < 0) {
                            return false;
                        }
                        d = Math.sqrt(d);
                        a = 1 / (a + a);
                        var t1 = (d - b) * a;
                        var t2 = (-b - d) * a;
                        var crosses = false;
                        if (t1 >= 0 && t1 <= 1 && quadraticBezier(fromX, cpX, toX, t1) > x) {
                            crosses = !crosses;
                        }
                        if (t2 >= 0 && t2 <= 1 && quadraticBezier(fromX, cpX, toX, t2) > x) {
                            crosses = !crosses;
                        }
                        return crosses;
                    }
                    function rayFullyCrossesCubicCurve(x, y, fromX, fromY, cpX, cpY, cp2X, cp2Y, toX, toY) {
                        var curveStartsAfterY = fromY > y;
                        if ((cpY > y) === curveStartsAfterY && (cp2Y > y) === curveStartsAfterY && (toY > y) === curveStartsAfterY) {
                            return false;
                        }
                        if (fromX < x && cpX < x && cp2X < x && toX < x) {
                            return false;
                        }
                        var crosses = false;
                        var roots = cubicXAtY(fromX, fromY, cpX, cpY, cp2X, cp2Y, toX, toY, y);
                        for (var i = roots.length; i; i--) {
                            if (roots[i] >= x) {
                                crosses = !crosses;
                            }
                        }
                        return crosses;
                    }
                    var Graphics = (function (_super) {
                        __extends(Graphics, _super);
                        function Graphics() {
                            false && _super.call(this);
                            this._id = flash.display.DisplayObject.getNextSyncID();
                            this._graphicsData = new ShapeData();
                            this._textures = [];
                            this._fillBounds = new Bounds(0x8000000, 0x8000000, 0x8000000, 0x8000000);
                            this._lineBounds = new Bounds(0x8000000, 0x8000000, 0x8000000, 0x8000000);
                            this._lastX = this._lastY = 0;
                            this._boundsIncludeLastCoordinates = true;
                            this._parent = null;
                            this._topLeftStrokeWidth = this._bottomRightStrokeWidth = 0;
                            this._isDirty = true;
                        }
                        Graphics.FromData = function (data) {
                            var graphics = new flash.display.Graphics();
                            graphics._graphicsData = ShapeData.FromPlainObject(data.shape);
                            if (data.lineBounds) {
                                graphics._lineBounds.copyFrom(data.lineBounds);
                                graphics._fillBounds.copyFrom(data.fillBounds || data.lineBounds);
                            }
                            return graphics;
                        };
                        Graphics.prototype.getGraphicsData = function () {
                            return this._graphicsData;
                        };
                        Graphics.prototype.getUsedTextures = function () {
                            return this._textures;
                        };
                        Graphics.prototype._setStrokeWidth = function (width) {
                            switch (width) {
                                case 1:
                                    this._topLeftStrokeWidth = 0;
                                    this._bottomRightStrokeWidth = 1;
                                    break;
                                case 3:
                                    this._topLeftStrokeWidth = 1;
                                    this._bottomRightStrokeWidth = 2;
                                    break;
                                default:
                                    var half = Math.ceil(width * 0.5) | 0;
                                    this._topLeftStrokeWidth = half;
                                    this._bottomRightStrokeWidth = half;
                                    break;
                            }
                        };
                        Graphics.prototype._setParent = function (parent) {
                            release || assert(!this._parent);
                            this._parent = parent;
                        };
                        Graphics.prototype._invalidate = function () {
                            release || assert(this._parent, "Graphics instances must have a parent.");
                            this._parent._invalidateFillAndLineBounds(true, true);
                            this._parent._propagateFlagsUp(536870912 /* DirtyDescendents */);
                            this._isDirty = true;
                        };
                        Graphics.prototype._getContentBounds = function (includeStrokes) {
                            if (includeStrokes === void 0) { includeStrokes = true; }
                            return includeStrokes ? this._lineBounds : this._fillBounds;
                        };
                        Graphics.prototype.clear = function () {
                            if (this._graphicsData.isEmpty()) {
                                return;
                            }
                            this._graphicsData.clear();
                            this._textures.length = 0;
                            this._fillBounds.setToSentinels();
                            this._lineBounds.setToSentinels();
                            this._lastX = this._lastY = 0;
                            this._boundsIncludeLastCoordinates = false;
                            this._invalidate();
                        };
                        Graphics.prototype.beginFill = function (color, alpha) {
                            if (alpha === void 0) { alpha = 1; }
                            color = color >>> 0 & 0xffffff;
                            alpha = Math.round(clamp(+alpha, -1, 1) * 0xff) | 0;
                            this._graphicsData.beginFill((color << 8) | alpha);
                        };
                        Graphics.prototype.beginGradientFill = function (type, colors, alphas, ratios, matrix, spreadMethod, interpolationMethod, focalPointRatio) {
                            if (matrix === void 0) { matrix = null; }
                            if (spreadMethod === void 0) { spreadMethod = "pad"; }
                            if (interpolationMethod === void 0) { interpolationMethod = "rgb"; }
                            if (focalPointRatio === void 0) { focalPointRatio = 0; }
                            this._writeGradientStyle(2 /* BeginGradientFill */, type, colors, alphas, ratios, matrix, spreadMethod, interpolationMethod, focalPointRatio, false);
                        };
                        Graphics.prototype.beginBitmapFill = function (bitmap, matrix, repeat, smooth) {
                            if (matrix === void 0) { matrix = null; }
                            if (repeat === void 0) { repeat = true; }
                            if (smooth === void 0) { smooth = false; }
                            this._writeBitmapStyle(3 /* BeginBitmapFill */, bitmap, matrix, repeat, smooth, false);
                        };
                        Graphics.prototype.endFill = function () {
                            this._graphicsData.endFill();
                        };
                        Graphics.prototype.lineStyle = function (thickness, color, alpha, pixelHinting, scaleMode, caps, joints, miterLimit) {
                            if (color === void 0) { color = 0; }
                            if (alpha === void 0) { alpha = 1; }
                            if (pixelHinting === void 0) { pixelHinting = false; }
                            if (scaleMode === void 0) { scaleMode = "normal"; }
                            if (caps === void 0) { caps = null; }
                            if (joints === void 0) { joints = null; }
                            if (miterLimit === void 0) { miterLimit = 3; }
                            thickness = +thickness;
                            color = color >>> 0 & 0xffffff;
                            alpha = Math.round(clamp(+alpha, -1, 1) * 0xff);
                            pixelHinting = !!pixelHinting;
                            scaleMode = asCoerceString(scaleMode);
                            caps = asCoerceString(caps);
                            joints = asCoerceString(joints);
                            miterLimit = clamp(+miterLimit | 0, 0, 0xff);
                            if (isNaN(thickness)) {
                                this._setStrokeWidth(0);
                                this._graphicsData.endLine();
                                return;
                            }
                            thickness = clamp(+thickness, 0, 0xff) * 20 | 0;
                            this._setStrokeWidth(thickness);
                            var lineScaleMode = LineScaleMode.toNumber(asCoerceString(scaleMode));
                            if (lineScaleMode < 0) {
                                lineScaleMode = LineScaleMode.toNumber(LineScaleMode.NORMAL);
                            }
                            var capsStyle = CapsStyle.toNumber(asCoerceString(caps));
                            if (capsStyle < 0) {
                                capsStyle = CapsStyle.toNumber(CapsStyle.ROUND);
                            }
                            var jointStyle = JointStyle.toNumber(asCoerceString(joints));
                            if (jointStyle < 0) {
                                jointStyle = JointStyle.toNumber(JointStyle.ROUND);
                            }
                            this._graphicsData.lineStyle(thickness, (color << 8) | alpha, pixelHinting, lineScaleMode, capsStyle, jointStyle, miterLimit);
                        };
                        Graphics.prototype.lineGradientStyle = function (type, colors, alphas, ratios, matrix, spreadMethod, interpolationMethod, focalPointRatio) {
                            if (matrix === void 0) { matrix = null; }
                            if (spreadMethod === void 0) { spreadMethod = "pad"; }
                            if (interpolationMethod === void 0) { interpolationMethod = "rgb"; }
                            if (focalPointRatio === void 0) { focalPointRatio = 0; }
                            this._writeGradientStyle(6 /* LineStyleGradient */, type, colors, alphas, ratios, matrix, spreadMethod, interpolationMethod, focalPointRatio, !this._graphicsData.hasLines);
                        };
                        Graphics.prototype.lineBitmapStyle = function (bitmap, matrix, repeat, smooth) {
                            if (matrix === void 0) { matrix = null; }
                            if (repeat === void 0) { repeat = true; }
                            if (smooth === void 0) { smooth = false; }
                            this._writeBitmapStyle(7 /* LineStyleBitmap */, bitmap, matrix, repeat, smooth, !this._graphicsData.hasLines);
                        };
                        Graphics.prototype.drawRect = function (x, y, width, height) {
                            x = x * 20 | 0;
                            y = y * 20 | 0;
                            var x2 = x + (width * 20 | 0);
                            var y2 = y + (height * 20 | 0);
                            if (x !== this._lastX || y !== this._lastY) {
                                this._graphicsData.moveTo(x, y);
                            }
                            this._graphicsData.lineTo(x2, y);
                            this._graphicsData.lineTo(x2, y2);
                            this._graphicsData.lineTo(x, y2);
                            this._graphicsData.lineTo(x, y);
                            this._extendBoundsByPoint(x2, y2);
                            this._applyLastCoordinates(x, y);
                            this._invalidate();
                        };
                        Graphics.prototype.drawRoundRect = function (x, y, width, height, ellipseWidth, ellipseHeight) {
                            x = +x;
                            y = +y;
                            width = +width;
                            height = +height;
                            ellipseWidth = +ellipseWidth;
                            ellipseHeight = +ellipseHeight;
                            if (!ellipseHeight || !ellipseWidth) {
                                this.drawRect(x, y, width, height);
                                return;
                            }
                            var radiusX = (ellipseWidth / 2) | 0;
                            var radiusY = (ellipseHeight / 2) | 0;
                            var hw = width / 2;
                            var hh = height / 2;
                            if (radiusX > hw) {
                                radiusX = hw;
                            }
                            if (radiusY > hh) {
                                radiusY = hh;
                            }
                            if (hw === radiusX && hh === radiusY) {
                                if (radiusX === radiusY) {
                                    this.drawCircle(x + radiusX, y + radiusY, radiusX);
                                }
                                else {
                                    this.drawEllipse(x, y, radiusX * 2, radiusY * 2);
                                }
                                return;
                            }
                            var right = x + width;
                            var bottom = y + height;
                            var xlw = x + radiusX;
                            var xrw = right - radiusX;
                            var ytw = y + radiusY;
                            var ybw = bottom - radiusY;
                            this.moveTo(right, ybw);
                            this.curveTo(right, bottom, xrw, bottom);
                            this.lineTo(xlw, bottom);
                            this.curveTo(x, bottom, x, ybw);
                            this.lineTo(x, ytw);
                            this.curveTo(x, y, xlw, y);
                            this.lineTo(xrw, y);
                            this.curveTo(right, y, right, ytw);
                            this.lineTo(right, ybw);
                        };
                        Graphics.prototype.drawRoundRectComplex = function (x, y, width, height, topLeftRadius, topRightRadius, bottomLeftRadius, bottomRightRadius) {
                            x = +x;
                            y = +y;
                            width = +width;
                            height = +height;
                            topLeftRadius = +topLeftRadius;
                            topRightRadius = +topRightRadius;
                            bottomLeftRadius = +bottomLeftRadius;
                            bottomRightRadius = +bottomRightRadius;
                            if (!(topLeftRadius | topRightRadius | bottomLeftRadius | bottomRightRadius)) {
                                this.drawRect(x, y, width, height);
                                return;
                            }
                            var right = x + width;
                            var bottom = y + height;
                            var xtl = x + topLeftRadius;
                            this.moveTo(right, bottom - bottomRightRadius);
                            this.curveTo(right, bottom, right - bottomRightRadius, bottom);
                            this.lineTo(x + bottomLeftRadius, bottom);
                            this.curveTo(x, bottom, x, bottom - bottomLeftRadius);
                            this.lineTo(x, y + topLeftRadius);
                            this.curveTo(x, y, xtl, y);
                            this.lineTo(right - topRightRadius, y);
                            this.curveTo(right, y, right, y + topRightRadius);
                            this.lineTo(right, bottom - bottomRightRadius);
                        };
                        Graphics.prototype.drawCircle = function (x, y, radius) {
                            radius = +radius;
                            this.drawEllipse(+x - radius, +y - radius, radius * 2, radius * 2);
                        };
                        Graphics.prototype.drawEllipse = function (x, y, width, height) {
                            x = +x;
                            y = +y;
                            width = +width;
                            height = +height;
                            var rx = width / 2;
                            var ry = height / 2;
                            x += rx;
                            y += ry;
                            var currentX = x + rx;
                            var currentY = y;
                            this.moveTo(currentX, currentY);
                            var startAngle = 0;
                            var u = 1;
                            var v = 0;
                            for (var i = 0; i < 4; i++) {
                                var endAngle = startAngle + Math.PI / 2;
                                var kappa = (4 / 3) * Math.tan((endAngle - startAngle) / 4);
                                var cp1x = currentX - v * kappa * rx;
                                var cp1y = currentY + u * kappa * ry;
                                u = Math.cos(endAngle);
                                v = Math.sin(endAngle);
                                currentX = x + u * rx;
                                currentY = y + v * ry;
                                var cp2x = currentX + v * kappa * rx;
                                var cp2y = currentY - u * kappa * ry;
                                this.cubicCurveTo(cp1x, cp1y, cp2x, cp2y, currentX, currentY);
                                startAngle = endAngle;
                            }
                        };
                        Graphics.prototype.moveTo = function (x, y) {
                            x = x * 20 | 0;
                            y = y * 20 | 0;
                            this._graphicsData.moveTo(x, y);
                            this._lastX = x;
                            this._lastY = y;
                            this._boundsIncludeLastCoordinates = false;
                        };
                        Graphics.prototype.lineTo = function (x, y) {
                            x = x * 20 | 0;
                            y = y * 20 | 0;
                            this._graphicsData.lineTo(x, y);
                            this._applyLastCoordinates(x, y);
                            this._invalidate();
                        };
                        Graphics.prototype.curveTo = function (controlX, controlY, anchorX, anchorY) {
                            controlX = controlX * 20 | 0;
                            controlY = controlY * 20 | 0;
                            anchorX = anchorX * 20 | 0;
                            anchorY = anchorY * 20 | 0;
                            this._graphicsData.curveTo(controlX, controlY, anchorX, anchorY);
                            if (controlX < this._lastX || controlX > anchorX) {
                                this._extendBoundsByX(quadraticBezierExtreme(this._lastX, controlX, anchorX) | 0);
                            }
                            if (controlY < this._lastY || controlY > anchorY) {
                                this._extendBoundsByY(quadraticBezierExtreme(this._lastY, controlY, anchorY) | 0);
                            }
                            this._applyLastCoordinates(anchorX, anchorY);
                            this._invalidate();
                        };
                        Graphics.prototype.cubicCurveTo = function (controlX1, controlY1, controlX2, controlY2, anchorX, anchorY) {
                            controlX1 = controlX1 * 20 | 0;
                            controlY1 = controlY1 * 20 | 0;
                            controlX2 = controlX2 * 20 | 0;
                            controlY2 = controlY2 * 20 | 0;
                            anchorX = anchorX * 20 | 0;
                            anchorY = anchorY * 20 | 0;
                            this._graphicsData.cubicCurveTo(controlX1, controlY1, controlX2, controlY2, anchorX, anchorY);
                            var extremes;
                            var i;
                            var fromX = this._lastX;
                            var fromY = this._lastY;
                            if (controlX1 < fromX || controlX2 < fromX || controlX1 > anchorX || controlX2 > anchorX) {
                                extremes = cubicBezierExtremes(fromX, controlX1, controlX2, anchorX);
                                for (i = extremes.length; i--;) {
                                    this._extendBoundsByX(extremes[i] | 0);
                                }
                            }
                            if (controlY1 < fromY || controlY2 < fromY || controlY1 > anchorY || controlY2 > anchorY) {
                                extremes = cubicBezierExtremes(fromY, controlY1, controlY2, anchorY);
                                for (i = extremes.length; i--;) {
                                    this._extendBoundsByY(extremes[i] | 0);
                                }
                            }
                            this._applyLastCoordinates(anchorX, anchorY);
                            this._invalidate();
                        };
                        Graphics.prototype.copyFrom = function (sourceGraphics) {
                            this._graphicsData = sourceGraphics._graphicsData.clone();
                            this._fillBounds = sourceGraphics._fillBounds.clone();
                            this._lineBounds = sourceGraphics._lineBounds.clone();
                            this._textures = sourceGraphics._textures.concat();
                            this._lastX = sourceGraphics._lastX;
                            this._lastY = sourceGraphics._lastY;
                            this._boundsIncludeLastCoordinates = sourceGraphics._boundsIncludeLastCoordinates;
                            this._invalidate();
                        };
                        Graphics.prototype.drawPath = function (commands, data, winding) {
                            if (winding === void 0) { winding = "evenOdd"; }
                            commands = commands;
                            data = data;
                            winding = asCoerceString(winding);
                            notImplemented("public flash.display.Graphics::drawPath");
                            return;
                        };
                        Graphics.prototype.drawTriangles = function (vertices, indices, uvtData, culling) {
                            if (indices === void 0) { indices = null; }
                            if (uvtData === void 0) { uvtData = null; }
                            if (culling === void 0) { culling = "none"; }
                            vertices = vertices;
                            indices = indices;
                            uvtData = uvtData;
                            culling = asCoerceString(culling);
                            notImplemented("public flash.display.Graphics::drawTriangles");
                            return;
                        };
                        Graphics.prototype.drawGraphicsData = function (graphicsData) {
                            graphicsData = graphicsData;
                            notImplemented("public flash.display.Graphics::drawGraphicsData");
                            return;
                        };
                        Graphics.prototype._containsPoint = function (x, y, includeLines, ratio) {
                            var hasLines = this._graphicsData.hasLines;
                            if (!ratio && !(includeLines && hasLines ? this._lineBounds : this._fillBounds).contains(x, y)) {
                                return false;
                            }
                            var containsPoint = false;
                            if (this._graphicsData.hasFills) {
                                containsPoint = this._fillContainsPoint(x, y, ratio);
                            }
                            else {
                                release || assert(hasLines, "Can't have non-empty bounds without line or fill set.");
                            }
                            if (!containsPoint && includeLines) {
                                containsPoint = this._linesContainsPoint(x, y, ratio);
                            }
                            return containsPoint;
                        };
                        Graphics.prototype._fillContainsPoint = function (x, y, ratio) {
                            var data = this._graphicsData;
                            var commands = data.commands;
                            var commandsCount = data.commandsPosition;
                            var coordinates = data.coordinates;
                            var morphCoordinates = data.morphCoordinates;
                            var coordinatesIndex = 0;
                            var fromX = 0;
                            var fromY = 0;
                            var toX = 0;
                            var toY = 0;
                            var cpX;
                            var cpY;
                            var formOpen = false;
                            var fillActive = false;
                            var formOpenX = 0;
                            var formOpenY = 0;
                            var inside = false;
                            for (var commandIndex = 0; commandIndex < commandsCount; commandIndex++) {
                                var command = commands[commandIndex];
                                switch (command) {
                                    case 9 /* MoveTo */:
                                        release || assert(coordinatesIndex <= data.coordinatesPosition - 2);
                                        if (formOpen && fillActive && rayIntersectsLine(x, y, fromX, fromY, formOpenX, formOpenY)) {
                                            inside = !inside;
                                        }
                                        formOpen = true;
                                        fromX = formOpenX = coordinates[coordinatesIndex++];
                                        fromY = formOpenY = coordinates[coordinatesIndex++];
                                        if (ratio) {
                                            fromX = formOpenX += (morphCoordinates[coordinatesIndex - 2] - formOpenX) * ratio;
                                            fromY = formOpenY += (morphCoordinates[coordinatesIndex - 2] - formOpenY) * ratio;
                                        }
                                        continue;
                                    case 10 /* LineTo */:
                                        release || assert(coordinatesIndex <= data.coordinatesPosition - 2);
                                        toX = coordinates[coordinatesIndex++];
                                        toY = coordinates[coordinatesIndex++];
                                        if (ratio) {
                                            toX += (morphCoordinates[coordinatesIndex - 2] - toX) * ratio;
                                            toY += (morphCoordinates[coordinatesIndex - 1] - toY) * ratio;
                                        }
                                        if (fillActive && rayIntersectsLine(x, y, fromX, fromY, toX, toY)) {
                                            inside = !inside;
                                        }
                                        break;
                                    case 11 /* CurveTo */:
                                        release || assert(coordinatesIndex <= data.coordinatesPosition - 4);
                                        cpX = coordinates[coordinatesIndex++];
                                        cpY = coordinates[coordinatesIndex++];
                                        toX = coordinates[coordinatesIndex++];
                                        toY = coordinates[coordinatesIndex++];
                                        if (ratio) {
                                            cpX += (morphCoordinates[coordinatesIndex - 4] - cpX) * ratio;
                                            cpY += (morphCoordinates[coordinatesIndex - 3] - cpY) * ratio;
                                            toX += (morphCoordinates[coordinatesIndex - 2] - toX) * ratio;
                                            toY += (morphCoordinates[coordinatesIndex - 1] - toY) * ratio;
                                        }
                                        if (fillActive && rayFullyCrossesCurve(x, y, fromX, fromY, cpX, cpY, toX, toY)) {
                                            inside = !inside;
                                        }
                                        break;
                                    case 12 /* CubicCurveTo */:
                                        release || assert(coordinatesIndex <= data.coordinatesPosition - 6);
                                        cpX = coordinates[coordinatesIndex++];
                                        cpY = coordinates[coordinatesIndex++];
                                        var cp2X = coordinates[coordinatesIndex++];
                                        var cp2Y = coordinates[coordinatesIndex++];
                                        toX = coordinates[coordinatesIndex++];
                                        toY = coordinates[coordinatesIndex++];
                                        if (ratio) {
                                            cpX += (morphCoordinates[coordinatesIndex - 6] - cpX) * ratio;
                                            cpY += (morphCoordinates[coordinatesIndex - 5] - cpY) * ratio;
                                            cp2X += (morphCoordinates[coordinatesIndex - 4] - cp2X) * ratio;
                                            cp2Y += (morphCoordinates[coordinatesIndex - 3] - cp2Y) * ratio;
                                            toX += (morphCoordinates[coordinatesIndex - 2] - toX) * ratio;
                                            toY += (morphCoordinates[coordinatesIndex - 1] - toY) * ratio;
                                        }
                                        if (fillActive && rayFullyCrossesCubicCurve(x, y, fromX, fromY, cpX, cpY, cp2X, cp2Y, toX, toY)) {
                                            inside = !inside;
                                        }
                                        break;
                                    case 1 /* BeginSolidFill */:
                                    case 2 /* BeginGradientFill */:
                                    case 3 /* BeginBitmapFill */:
                                    case 4 /* EndFill */:
                                        if (formOpen && fillActive && rayIntersectsLine(x, y, fromX, fromY, formOpenX, formOpenY)) {
                                            inside = !inside;
                                        }
                                        if (inside) {
                                            return true;
                                        }
                                        formOpen = false;
                                        fillActive = command !== 4 /* EndFill */;
                                        break;
                                    case 5 /* LineStyleSolid */:
                                        coordinatesIndex++;
                                        break;
                                    case 6 /* LineStyleGradient */:
                                    case 7 /* LineStyleBitmap */:
                                    case 8 /* LineEnd */:
                                        break;
                                    default:
                                        release || assertUnreachable('Invalid command ' + command + ' encountered at index' + (commandIndex - 1) + ' of ' + commandsCount);
                                }
                                fromX = toX;
                                fromY = toY;
                            }
                            release || assert(commandIndex === commandsCount);
                            release || assert(coordinatesIndex === data.coordinatesPosition);
                            if (formOpen && fillActive && rayIntersectsLine(x, y, fromX, fromY, formOpenX, formOpenY)) {
                                inside = !inside;
                            }
                            return inside;
                        };
                        Graphics.prototype._linesContainsPoint = function (x, y, ratio) {
                            var data = this._graphicsData;
                            var commands = data.commands;
                            var commandsCount = data.commandsPosition;
                            var coordinates = data.coordinates;
                            var morphCoordinates = data.morphCoordinates;
                            var coordinatesIndex = 0;
                            var fromX = 0;
                            var fromY = 0;
                            var toX = 0;
                            var toY = 0;
                            var cpX;
                            var cpY;
                            var curveX;
                            var curveY;
                            var t;
                            var width = 0;
                            var halfWidth = 0;
                            var halfWidthSq = 0;
                            var minX = 0;
                            var maxX = 0;
                            var minY = 0;
                            var maxY = 0;
                            for (var commandIndex = 0; commandIndex < commandsCount; commandIndex++) {
                                var command = commands[commandIndex];
                                switch (command) {
                                    case 9 /* MoveTo */:
                                        release || assert(coordinatesIndex <= data.coordinatesPosition - 2);
                                        fromX = coordinates[coordinatesIndex++];
                                        fromY = coordinates[coordinatesIndex++];
                                        if (ratio) {
                                            fromX += (morphCoordinates[coordinatesIndex - 2] - fromX) * ratio;
                                            fromY += (morphCoordinates[coordinatesIndex - 1] - fromY) * ratio;
                                        }
                                        continue;
                                    case 10 /* LineTo */:
                                        release || assert(coordinatesIndex <= data.coordinatesPosition - 2);
                                        if (width === 0) {
                                            fromX = coordinates[coordinatesIndex++];
                                            fromY = coordinates[coordinatesIndex++];
                                            if (ratio) {
                                                fromX += (morphCoordinates[coordinatesIndex - 2] - fromX) * ratio;
                                                fromY += (morphCoordinates[coordinatesIndex - 1] - fromY) * ratio;
                                            }
                                            continue;
                                        }
                                        toX = coordinates[coordinatesIndex++];
                                        toY = coordinates[coordinatesIndex++];
                                        if (ratio) {
                                            toX += (morphCoordinates[coordinatesIndex - 2] - toX) * ratio;
                                            toY += (morphCoordinates[coordinatesIndex - 1] - toY) * ratio;
                                        }
                                        if (fromX === toX && fromY === toY) {
                                            break;
                                        }
                                        if (maxX < fromX && maxX < toX || minX > fromX && minX > toX || maxY < fromY && maxY < toY || minY > fromY && minY > toY) {
                                            break;
                                        }
                                        if (toX === fromX || toY === fromY) {
                                            return true;
                                        }
                                        t = ((x - fromX) * (toX - fromX) + (y - fromY) * (toY - fromY)) / distanceSq(fromX, fromY, toX, toY);
                                        if (t < 0) {
                                            if (distanceSq(x, y, fromX, fromY) <= halfWidthSq) {
                                                return true;
                                            }
                                            break;
                                        }
                                        if (t > 1) {
                                            if (distanceSq(x, y, toX, toY) <= halfWidthSq) {
                                                return true;
                                            }
                                            break;
                                        }
                                        if (distanceSq(x, y, fromX + t * (toX - fromX), fromY + t * (toY - fromY)) <= halfWidthSq) {
                                            return true;
                                        }
                                        break;
                                    case 11 /* CurveTo */:
                                        release || assert(coordinatesIndex <= data.coordinatesPosition - 4);
                                        if (width === 0) {
                                            coordinatesIndex += 2;
                                            fromX = coordinates[coordinatesIndex++];
                                            fromY = coordinates[coordinatesIndex++];
                                            if (ratio) {
                                                fromX += (morphCoordinates[coordinatesIndex - 2] - fromX) * ratio;
                                                fromY += (morphCoordinates[coordinatesIndex - 1] - fromY) * ratio;
                                            }
                                            continue;
                                        }
                                        cpX = coordinates[coordinatesIndex++];
                                        cpY = coordinates[coordinatesIndex++];
                                        toX = coordinates[coordinatesIndex++];
                                        toY = coordinates[coordinatesIndex++];
                                        if (ratio) {
                                            cpX += (morphCoordinates[coordinatesIndex - 4] - cpX) * ratio;
                                            cpY += (morphCoordinates[coordinatesIndex - 3] - cpY) * ratio;
                                            toX += (morphCoordinates[coordinatesIndex - 2] - toX) * ratio;
                                            toY += (morphCoordinates[coordinatesIndex - 1] - toY) * ratio;
                                        }
                                        var extremeX = quadraticBezierExtreme(fromX, cpX, toX);
                                        if (maxX < fromX && maxX < extremeX && maxX < toX || minX > fromX && minX > extremeX && minX > toX) {
                                            break;
                                        }
                                        var extremeY = quadraticBezierExtreme(fromY, cpY, toY);
                                        if (maxY < fromY && maxY < extremeY && maxY < toY || minY > fromY && minY > extremeY && minY > toY) {
                                            break;
                                        }
                                        for (t = 0; t < 1; t += 0.02) {
                                            curveX = quadraticBezier(fromX, cpX, toX, t);
                                            if (curveX < minX || curveX > maxX) {
                                                continue;
                                            }
                                            curveY = quadraticBezier(fromY, cpY, toY, t);
                                            if (curveY < minY || curveY > maxY) {
                                                continue;
                                            }
                                            if ((x - curveX) * (x - curveX) + (y - curveY) * (y - curveY) < halfWidthSq) {
                                                return true;
                                            }
                                        }
                                        break;
                                    case 12 /* CubicCurveTo */:
                                        release || assert(coordinatesIndex <= data.coordinatesPosition - 6);
                                        if (width === 0) {
                                            coordinatesIndex += 4;
                                            fromX = coordinates[coordinatesIndex++];
                                            fromX = coordinates[coordinatesIndex++];
                                            if (ratio) {
                                                fromX += (morphCoordinates[coordinatesIndex - 2] - fromX) * ratio;
                                                fromY += (morphCoordinates[coordinatesIndex - 1] - fromY) * ratio;
                                            }
                                            continue;
                                        }
                                        cpX = coordinates[coordinatesIndex++];
                                        cpY = coordinates[coordinatesIndex++];
                                        var cp2X = coordinates[coordinatesIndex++];
                                        var cp2Y = coordinates[coordinatesIndex++];
                                        toX = coordinates[coordinatesIndex++];
                                        toY = coordinates[coordinatesIndex++];
                                        if (ratio) {
                                            cpX += (morphCoordinates[coordinatesIndex - 6] - cpX) * ratio;
                                            cpY += (morphCoordinates[coordinatesIndex - 5] - cpY) * ratio;
                                            cp2X += (morphCoordinates[coordinatesIndex - 4] - cp2X) * ratio;
                                            cp2Y += (morphCoordinates[coordinatesIndex - 3] - cp2Y) * ratio;
                                            toX += (morphCoordinates[coordinatesIndex - 2] - toX) * ratio;
                                            toY += (morphCoordinates[coordinatesIndex - 1] - toY) * ratio;
                                        }
                                        var extremesX = cubicBezierExtremes(fromX, cpX, cp2X, toX);
                                        while (extremesX.length < 2) {
                                            extremesX.push(toX);
                                        }
                                        if (maxX < fromX && maxX < toX && maxX < extremesX[0] && maxX < extremesX[1] || minX > fromX && minX > toX && minX > extremesX[0] && minX > extremesX[1]) {
                                            break;
                                        }
                                        var extremesY = cubicBezierExtremes(fromY, cpY, cp2Y, toY);
                                        while (extremesY.length < 2) {
                                            extremesY.push(toY);
                                        }
                                        if (maxY < fromY && maxY < toY && maxY < extremesY[0] && maxY < extremesY[1] || minY > fromY && minY > toY && minY > extremesY[0] && minY > extremesY[1]) {
                                            break;
                                        }
                                        for (t = 0; t < 1; t += 0.02) {
                                            curveX = cubicBezier(fromX, cpX, cp2X, toX, t);
                                            if (curveX < minX || curveX > maxX) {
                                                continue;
                                            }
                                            curveY = cubicBezier(fromY, cpY, cp2Y, toY, t);
                                            if (curveY < minY || curveY > maxY) {
                                                continue;
                                            }
                                            if ((x - curveX) * (x - curveX) + (y - curveY) * (y - curveY) < halfWidthSq) {
                                                return true;
                                            }
                                        }
                                        break;
                                    case 5 /* LineStyleSolid */:
                                        width = coordinates[coordinatesIndex++];
                                        if (ratio) {
                                            width += (morphCoordinates[coordinatesIndex - 1] - width) * ratio;
                                        }
                                        halfWidth = width >> 2;
                                        halfWidthSq = halfWidth * halfWidth;
                                        minX = x - halfWidth;
                                        maxX = x + halfWidth;
                                        minY = y - halfWidth;
                                        maxY = y + halfWidth;
                                        break;
                                    case 1 /* BeginSolidFill */:
                                    case 2 /* BeginGradientFill */:
                                    case 3 /* BeginBitmapFill */:
                                    case 4 /* EndFill */:
                                    case 6 /* LineStyleGradient */:
                                    case 7 /* LineStyleBitmap */:
                                    case 8 /* LineEnd */:
                                        break;
                                    default:
                                        release || assertUnreachable('Invalid command ' + command + ' encountered at index' + (commandIndex - 1) + ' of ' + commandsCount);
                                }
                                fromX = toX;
                                fromY = toY;
                            }
                            release || assert(commandIndex === commandsCount);
                            release || assert(coordinatesIndex === data.coordinatesPosition);
                            return false;
                        };
                        Graphics.prototype._writeBitmapStyle = function (pathCommand, bitmap, matrix, repeat, smooth, skipWrite) {
                            if (Shumway.isNullOrUndefined(bitmap)) {
                                throwError('TypeError', AVM2.Errors.NullPointerError, 'bitmap');
                            }
                            else if (!(flash.display.BitmapData.isType(bitmap))) {
                                throwError('TypeError', AVM2.Errors.CheckTypeFailedError, 'bitmap', 'flash.display.BitmapData');
                            }
                            if (Shumway.isNullOrUndefined(matrix)) {
                                matrix = flash.geom.Matrix.FROZEN_IDENTITY_MATRIX;
                            }
                            else if (!(flash.geom.Matrix.isType(matrix))) {
                                throwError('TypeError', AVM2.Errors.CheckTypeFailedError, 'matrix', 'flash.geom.Matrix');
                            }
                            repeat = !!repeat;
                            smooth = !!smooth;
                            if (skipWrite) {
                                return;
                            }
                            var index = this._textures.length;
                            this._textures.push(bitmap);
                            this._graphicsData.beginBitmap(pathCommand, index, matrix, repeat, smooth);
                        };
                        Graphics.prototype._writeGradientStyle = function (pathCommand, type, colors, alphas, ratios, matrix, spreadMethod, interpolationMethod, focalPointRatio, skipWrite) {
                            if (Shumway.isNullOrUndefined(type)) {
                                throwError('TypeError', AVM2.Errors.NullPointerError, 'type');
                            }
                            var gradientType = GradientType.toNumber(asCoerceString(type));
                            if (gradientType < 0) {
                                throwError("ArgumentError", AVM2.Errors.InvalidEnumError, "type");
                            }
                            if (Shumway.isNullOrUndefined(colors)) {
                                throwError('TypeError', AVM2.Errors.NullPointerError, 'colors');
                            }
                            if (!(colors instanceof Array)) {
                                throwError('TypeError', AVM2.Errors.CheckTypeFailedError, 'colors', 'Array');
                            }
                            if (!(alphas instanceof Array)) {
                                throwError('TypeError', AVM2.Errors.CheckTypeFailedError, 'alphas', 'Array');
                            }
                            if (Shumway.isNullOrUndefined(alphas)) {
                                throwError('TypeError', AVM2.Errors.NullPointerError, 'alphas');
                            }
                            if (!(ratios instanceof Array)) {
                                throwError('TypeError', AVM2.Errors.CheckTypeFailedError, 'ratios', 'Array');
                            }
                            if (Shumway.isNullOrUndefined(ratios)) {
                                throwError('TypeError', AVM2.Errors.NullPointerError, 'ratios');
                            }
                            var colorsRGBA = [];
                            var coercedRatios = [];
                            var colorStops = colors.length;
                            var recordsValid = colorStops === alphas.length && colorStops === ratios.length;
                            if (recordsValid) {
                                for (var i = 0; i < colorStops; i++) {
                                    var ratio = +ratios[i];
                                    if (ratio > 0xff || ratio < 0) {
                                        recordsValid = false;
                                        break;
                                    }
                                    colorsRGBA[i] = (colors[i] << 8 & 0xffffff00) | clamp(+alphas[i], 0, 1) * 0xff;
                                    coercedRatios[i] = ratio;
                                }
                            }
                            if (!recordsValid) {
                                return;
                            }
                            if (Shumway.isNullOrUndefined(matrix)) {
                                matrix = flash.geom.Matrix.FROZEN_IDENTITY_MATRIX;
                            }
                            else if (!(flash.geom.Matrix.isType(matrix))) {
                                throwError('TypeError', AVM2.Errors.CheckTypeFailedError, 'matrix', 'flash.geom.Matrix');
                            }
                            if (skipWrite) {
                                return;
                            }
                            var spread = SpreadMethod.toNumber(asCoerceString(spreadMethod));
                            if (spread < 0) {
                                spread = SpreadMethod.toNumber(SpreadMethod.PAD);
                            }
                            var interpolation = InterpolationMethod.toNumber(asCoerceString(interpolationMethod));
                            if (interpolation < 0) {
                                interpolation = InterpolationMethod.toNumber(InterpolationMethod.RGB);
                            }
                            focalPointRatio = clamp(+focalPointRatio, -1, 1) / 2 * 0xff | 0;
                            this._graphicsData.beginGradient(pathCommand, colorsRGBA, coercedRatios, gradientType, matrix, spread, interpolation, focalPointRatio);
                        };
                        Graphics.prototype._extendBoundsByPoint = function (x, y) {
                            this._extendBoundsByX(x);
                            this._extendBoundsByY(y);
                        };
                        Graphics.prototype._extendBoundsByX = function (x) {
                            this._fillBounds.extendByX(x);
                            var bounds = this._lineBounds;
                            if (bounds.xMin === 0x8000000) {
                                bounds.xMin = x - this._topLeftStrokeWidth;
                                bounds.xMax = x + this._bottomRightStrokeWidth;
                            }
                            else {
                                bounds.xMin = Math.min(x - this._topLeftStrokeWidth, bounds.xMin);
                                bounds.xMax = Math.max(x + this._bottomRightStrokeWidth, bounds.xMax);
                            }
                        };
                        Graphics.prototype._extendBoundsByY = function (y) {
                            this._fillBounds.extendByY(y);
                            var bounds = this._lineBounds;
                            if (bounds.yMin === 0x8000000) {
                                bounds.yMin = y - this._topLeftStrokeWidth;
                                bounds.yMax = y + this._bottomRightStrokeWidth;
                            }
                            else {
                                bounds.yMin = Math.min(y - this._topLeftStrokeWidth, bounds.yMin);
                                bounds.yMax = Math.max(y + this._bottomRightStrokeWidth, bounds.yMax);
                            }
                        };
                        Graphics.prototype._applyLastCoordinates = function (x, y) {
                            if (!this._boundsIncludeLastCoordinates) {
                                this._extendBoundsByPoint(this._lastX, this._lastY);
                            }
                            this._boundsIncludeLastCoordinates = true;
                            this._lastX = x;
                            this._lastY = y;
                            this._extendBoundsByPoint(x, y);
                        };
                        Graphics.classInitializer = null;
                        Graphics.initializer = null;
                        Graphics.classSymbols = null;
                        Graphics.instanceSymbols = null;
                        return Graphics;
                    })(AS.ASNative);
                    display.Graphics = Graphics;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var Timeline = Shumway.Timeline;
                    var SwfTag = Shumway.SWF.Parser.SwfTag;
                    var PlaceObjectFlags = Shumway.SWF.Parser.PlaceObjectFlags;
                    var clamp = Shumway.NumberUtilities.clamp;
                    var DragMode;
                    (function (DragMode) {
                        DragMode[DragMode["Inactive"] = 0] = "Inactive";
                        DragMode[DragMode["LockToPointer"] = 1] = "LockToPointer";
                        DragMode[DragMode["PreserveDistance"] = 2] = "PreserveDistance";
                    })(DragMode || (DragMode = {}));
                    var Sprite = (function (_super) {
                        __extends(Sprite, _super);
                        function Sprite() {
                            false && _super.call(this);
                            display.DisplayObjectContainer.instanceConstructorNoInitialize.call(this);
                            this._constructChildren();
                        }
                        Sprite.prototype._addFrame = function (frame) {
                            var frames = this._symbol.frames;
                            frames.push(frame);
                            if (frames.length === 1) {
                                this._initializeChildren(frame);
                            }
                        };
                        Sprite.prototype._initializeChildren = function (frame) {
                            if (frame.controlTags) {
                                this._processControlTags(frame.controlTags, false);
                            }
                        };
                        Sprite.prototype._processControlTags = function (tags, backwards) {
                            if (backwards) {
                                var children = this._children.slice();
                                for (var i = 0; i < children.length; i++) {
                                    var child = children[i];
                                    if (child._depth < 0) {
                                        continue;
                                    }
                                    var tag = null;
                                    for (var j = 0; j < tags.length; j++) {
                                        if (tags[j].depth === child._depth) {
                                            tag = tags[j];
                                            break;
                                        }
                                    }
                                    if (!tag || child._symbol.id !== tag.symbolId || child._ratio !== (tag.ratio | 0)) {
                                        this._removeAnimatedChild(child);
                                    }
                                }
                            }
                            var loaderInfo = this._symbol.loaderInfo;
                            for (var i = 0; i < tags.length; i++) {
                                var parsedOrUnparsedTag = tags[i];
                                var tag = parsedOrUnparsedTag.tagCode === undefined ? parsedOrUnparsedTag : loaderInfo._file.getParsedTag(parsedOrUnparsedTag);
                                switch (tag.code) {
                                    case 5 /* CODE_REMOVE_OBJECT */:
                                    case 28 /* CODE_REMOVE_OBJECT2 */:
                                        var child = this.getTimelineObjectAtDepth(tag.depth | 0);
                                        if (child) {
                                            this._removeAnimatedChild(child);
                                        }
                                        break;
                                    case 4 /* CODE_PLACE_OBJECT */:
                                    case 26 /* CODE_PLACE_OBJECT2 */:
                                    case 70 /* CODE_PLACE_OBJECT3 */:
                                        var placeObjectTag = tag;
                                        var depth = placeObjectTag.depth;
                                        var child = this.getTimelineObjectAtDepth(depth);
                                        var hasCharacter = placeObjectTag.symbolId > -1;
                                        if (placeObjectTag.flags & 1 /* Move */) {
                                            if (!child) {
                                                break;
                                            }
                                        }
                                        else if (!hasCharacter || (child && !(backwards && hasCharacter))) {
                                            Shumway.Debug.warning("Warning: Failed to place object at depth " + depth + ".");
                                            break;
                                        }
                                        var symbol = null;
                                        if (hasCharacter) {
                                            symbol = loaderInfo.getSymbolById(placeObjectTag.symbolId);
                                            if (!symbol) {
                                                break;
                                            }
                                        }
                                        if (child) {
                                            if (symbol && !symbol.dynamic) {
                                                child._setStaticContentFromSymbol(symbol);
                                            }
                                            if (child._hasFlags(4096 /* AnimatedByTimeline */)) {
                                                child._animate(tag);
                                            }
                                        }
                                        else {
                                            child = this.createAnimatedDisplayObject(symbol, placeObjectTag, false);
                                            this.addTimelineObjectAtDepth(child, depth);
                                            if (symbol.isAVM1Object) {
                                                Shumway.AVM1.Lib.initializeAVM1Object(child, symbol.avm1Context, placeObjectTag);
                                            }
                                        }
                                        break;
                                }
                            }
                        };
                        Sprite.prototype._removeAnimatedChild = function (child) {
                            this.removeChild(child);
                            if (child._name) {
                                var mn = Shumway.AVM2.ABC.Multiname.getPublicQualifiedName(child._name);
                                if (this[mn] === child) {
                                    this[mn] = null;
                                }
                            }
                        };
                        Sprite.prototype._canHaveGraphics = function () {
                            return true;
                        };
                        Sprite.prototype._getGraphics = function () {
                            return this._graphics;
                        };
                        Object.defineProperty(Sprite.prototype, "graphics", {
                            get: function () {
                                return this._ensureGraphics();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Sprite.prototype, "buttonMode", {
                            get: function () {
                                return this._buttonMode;
                            },
                            set: function (value) {
                                this._buttonMode = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Sprite.prototype, "dropTarget", {
                            get: function () {
                                return this._dropTarget;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Sprite.prototype, "hitArea", {
                            get: function () {
                                return this._hitArea;
                            },
                            set: function (value) {
                                value = value;
                                if (this._hitArea === value) {
                                    return;
                                }
                                if (value && value._hitTarget) {
                                    value._hitTarget._hitArea = null;
                                }
                                this._hitArea = value;
                                if (value) {
                                    value._hitTarget = this;
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Sprite.prototype, "useHandCursor", {
                            get: function () {
                                return this._useHandCursor;
                            },
                            set: function (value) {
                                this._useHandCursor = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Sprite.prototype, "soundTransform", {
                            get: function () {
                                notImplemented("public flash.display.Sprite::get soundTransform");
                                return;
                            },
                            set: function (sndTransform) {
                                sndTransform = sndTransform;
                                notImplemented("public flash.display.Sprite::set soundTransform");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Sprite.prototype.startDrag = function (lockCenter, bounds) {
                            if (lockCenter === void 0) { lockCenter = false; }
                            if (bounds === void 0) { bounds = null; }
                            lockCenter = !!lockCenter;
                            if (lockCenter) {
                                this._dragMode = 1 /* LockToPointer */;
                            }
                            else {
                                this._dragMode = 2 /* PreserveDistance */;
                                var mousePosition = this._getLocalMousePosition();
                                this._dragDeltaX = this.x - mousePosition.x;
                                this._dragDeltaY = this.y - mousePosition.y;
                            }
                            this._dragBounds = bounds;
                            flash.ui.Mouse.draggableObject = this;
                        };
                        Sprite.prototype.stopDrag = function () {
                            if (flash.ui.Mouse.draggableObject === this) {
                                flash.ui.Mouse.draggableObject = null;
                                this._dragMode = 0 /* Inactive */;
                                this._dragDeltaX = 0;
                                this._dragDeltaY = 0;
                                this._dragBounds = null;
                            }
                        };
                        Sprite.prototype._updateDragState = function (dropTarget) {
                            if (dropTarget === void 0) { dropTarget = null; }
                            var mousePosition = this._getLocalMousePosition();
                            var newX = mousePosition.x;
                            var newY = mousePosition.y;
                            if (this._dragMode === 2 /* PreserveDistance */) {
                                newX += this._dragDeltaX;
                                newY += this._dragDeltaY;
                            }
                            if (this._dragBounds) {
                                var bounds = this._dragBounds;
                                newX = clamp(newX, bounds.left, bounds.right);
                                newY = clamp(newY, bounds.top, bounds.bottom);
                            }
                            this.x = newX;
                            this.y = newY;
                            this._dropTarget = dropTarget;
                        };
                        Sprite.prototype.startTouchDrag = function (touchPointID, lockCenter, bounds) {
                            if (lockCenter === void 0) { lockCenter = false; }
                            if (bounds === void 0) { bounds = null; }
                            touchPointID = touchPointID | 0;
                            lockCenter = !!lockCenter;
                            bounds = bounds;
                            notImplemented("public flash.display.Sprite::startTouchDrag");
                            return;
                        };
                        Sprite.prototype.stopTouchDrag = function (touchPointID) {
                            touchPointID = touchPointID | 0;
                            notImplemented("public flash.display.Sprite::stopTouchDrag");
                            return;
                        };
                        Sprite.prototype._containsPoint = function (globalX, globalY, localX, localY, testingType, objects) {
                            if (testingType === 5 /* Drop */ && this._dragMode > 0 /* Inactive */) {
                                return;
                            }
                            var result = this._boundsAndMaskContainPoint(globalX, globalY, localX, localY, testingType);
                            if (!result && testingType === 3 /* Mouse */ && this._hitArea && this._mouseEnabled) {
                                var matrix = this._hitArea._getInvertedConcatenatedMatrix();
                                var hitAreaLocalX = matrix.transformX(globalX, globalY);
                                var hitAreaLocalY = matrix.transformY(globalX, globalY);
                                result = this._hitArea._boundsAndMaskContainPoint(globalX, globalY, hitAreaLocalX, hitAreaLocalY, testingType);
                            }
                            if (result === 0 /* None */ || testingType < 2 /* HitTestShape */) {
                                return result;
                            }
                            return this._containsPointImpl(globalX, globalY, localX, localY, testingType, objects, true);
                        };
                        Sprite.prototype._containsPointDirectly = function (localX, localY, globalX, globalY) {
                            if (this._hitArea) {
                                return !!this._hitArea._containsGlobalPoint(globalX, globalY, 2 /* HitTestShape */, null);
                            }
                            var graphics = this._getGraphics();
                            return !!graphics && graphics._containsPoint(localX, localY, true, 0);
                        };
                        Sprite.classInitializer = null;
                        Sprite.initializer = function (symbol) {
                            var self = this;
                            self._graphics = null;
                            self._buttonMode = false;
                            self._dropTarget = null;
                            self._hitArea = null;
                            self._useHandCursor = true;
                            self._dragMode = 0 /* Inactive */;
                            self._dragDeltaX = 0;
                            self._dragDeltaY = 0;
                            self._dragBounds = null;
                            self._hitTarget = null;
                            if (symbol) {
                                if (symbol.isRoot) {
                                    self._root = self;
                                }
                                if (symbol.numFrames && symbol.frames.length > 0) {
                                    self._initializeChildren(symbol.frames[0]);
                                }
                            }
                        };
                        Sprite.classSymbols = null;
                        Sprite.instanceSymbols = null;
                        return Sprite;
                    })(flash.display.DisplayObjectContainer);
                    display.Sprite = Sprite;
                    var SpriteSymbol = (function (_super) {
                        __extends(SpriteSymbol, _super);
                        function SpriteSymbol(data, loaderInfo) {
                            _super.call(this, data, flash.display.MovieClip, true);
                            this.numFrames = 1;
                            this.frames = [];
                            this.labels = [];
                            this.frameScripts = [];
                            this.loaderInfo = loaderInfo;
                        }
                        SpriteSymbol.FromData = function (data, loaderInfo) {
                            var symbol = new SpriteSymbol(data, loaderInfo);
                            symbol.numFrames = data.frameCount;
                            if (loaderInfo.actionScriptVersion === display.ActionScriptVersion.ACTIONSCRIPT2) {
                                symbol.isAVM1Object = true;
                                symbol.avm1Context = loaderInfo._avm1Context;
                            }
                            symbol.frameScripts = [];
                            var frames = data.frames;
                            for (var i = 0; i < frames.length; i++) {
                                var frame = loaderInfo.getFrame(data, i);
                                var actionBlocks = frame.actionBlocks;
                                if (actionBlocks) {
                                    for (var j = 0; j < actionBlocks.length; j++) {
                                        symbol.frameScripts.push(i);
                                        symbol.frameScripts.push(actionBlocks[j]);
                                    }
                                }
                                if (frame.labelName) {
                                    symbol.labels.push(new flash.display.FrameLabel(frame.labelName, i + 1));
                                }
                                symbol.frames.push(frame);
                            }
                            return symbol;
                        };
                        return SpriteSymbol;
                    })(Timeline.DisplaySymbol);
                    display.SpriteSymbol = SpriteSymbol;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var assert = Shumway.Debug.assert;
                    var assertUnreachable = Shumway.Debug.assertUnreachable;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var throwError = Shumway.AVM2.Runtime.throwError;
                    var Telemetry = Shumway.Telemetry;
                    var events = flash.events;
                    var SwfTag = Shumway.SWF.Parser.SwfTag;
                    (function (FrameNavigationModel) {
                        FrameNavigationModel[FrameNavigationModel["SWF1"] = 1] = "SWF1";
                        FrameNavigationModel[FrameNavigationModel["SWF9"] = 9] = "SWF9";
                        FrameNavigationModel[FrameNavigationModel["SWF10"] = 10] = "SWF10";
                    })(display.FrameNavigationModel || (display.FrameNavigationModel = {}));
                    var FrameNavigationModel = display.FrameNavigationModel;
                    var MovieClipSoundsManager = (function () {
                        function MovieClipSoundsManager(mc) {
                            this._mc = mc;
                            this._startSoundRegistrations = null;
                            this._soundStream = null;
                        }
                        MovieClipSoundsManager.prototype.registerStartSounds = function (frameNum, soundStartInfo) {
                            if (this._startSoundRegistrations === null) {
                                this._startSoundRegistrations = {};
                            }
                            this._startSoundRegistrations[frameNum] = soundStartInfo;
                        };
                        MovieClipSoundsManager.prototype.initSoundStream = function (streamInfo) {
                            this._soundStream = new display.MovieClipSoundStream(streamInfo, this._mc);
                        };
                        MovieClipSoundsManager.prototype.addSoundStreamBlock = function (frameNum, streamBlock) {
                            if (this._soundStream) {
                                this._soundStream.appendBlock(frameNum, streamBlock);
                            }
                        };
                        MovieClipSoundsManager.prototype._startSounds = function (frameNum) {
                            var starts = this._startSoundRegistrations[frameNum];
                            if (starts) {
                                var sounds = this._soundClips || (this._soundClips = {});
                                var loaderInfo = this._mc.loaderInfo;
                                for (var i = 0; i < starts.length; i++) {
                                    var start = starts[i];
                                    var symbolId = start.soundId;
                                    var info = start.soundInfo;
                                    var sound = sounds[symbolId];
                                    if (!sound) {
                                        var symbolInfo = loaderInfo.getSymbolById(symbolId);
                                        if (!symbolInfo) {
                                            continue;
                                        }
                                        var symbolClass = symbolInfo.symbolClass;
                                        var soundObj = symbolClass.initializeFrom(symbolInfo);
                                        symbolClass.instanceConstructorNoInitialize.call(soundObj);
                                        sounds[symbolId] = sound = { object: soundObj };
                                    }
                                    if (sound.channel) {
                                        sound.channel.stop();
                                        sound.channel = null;
                                    }
                                    if (!info.stop) {
                                        var loops = info.hasLoops ? info.loopCount : 0;
                                        sound.channel = sound.object.play(0, loops);
                                    }
                                }
                            }
                        };
                        MovieClipSoundsManager.prototype.syncSounds = function (frameNum) {
                            if (this._startSoundRegistrations !== null) {
                                this._startSounds(frameNum);
                            }
                            if (this._soundStream) {
                                this._soundStream.playFrame(frameNum);
                            }
                        };
                        return MovieClipSoundsManager;
                    })();
                    var MovieClip = (function (_super) {
                        __extends(MovieClip, _super);
                        function MovieClip() {
                            false && _super.call(this);
                            display.Sprite.instanceConstructorNoInitialize.call(this);
                        }
                        MovieClip.reset = function () {
                            MovieClip.frameNavigationModel = 10 /* SWF10 */;
                            MovieClip._callQueue = [];
                        };
                        MovieClip.runFrameScripts = function () {
                            AVM2.enterTimeline("MovieClip.executeFrame");
                            var queue = MovieClip._callQueue;
                            MovieClip._callQueue = [];
                            for (var i = 0; i < queue.length; i++) {
                                var instance = queue[i];
                                if (instance._hasFlags(1024 /* NeedsLoadEvent */)) {
                                    instance._removeFlags(1024 /* NeedsLoadEvent */);
                                    instance.dispatchEvent(events.Event.getInstance(events.Event.AVM1_LOAD));
                                    continue;
                                }
                                instance._allowFrameNavigation = display.MovieClip.frameNavigationModel === 1 /* SWF1 */;
                                instance.callFrame(instance._currentFrame);
                                instance._allowFrameNavigation = true;
                                if (instance._nextFrame !== instance._currentFrame) {
                                    if (display.MovieClip.frameNavigationModel === 9 /* SWF9 */) {
                                        instance._advanceFrame();
                                        instance._constructFrame();
                                        instance._removeFlags(8192 /* HasFrameScriptPending */);
                                        instance.callFrame(instance._currentFrame);
                                    }
                                    else {
                                        display.DisplayObject.performFrameNavigation(false, true);
                                    }
                                }
                            }
                            AVM2.leaveTimeline();
                        };
                        MovieClip.prototype._addFrame = function (frameInfo) {
                            var spriteSymbol = this._symbol;
                            var frames = spriteSymbol.frames;
                            frames.push(frameInfo);
                            if (frameInfo.labelName) {
                                this.addFrameLabel(frameInfo.labelName, frames.length);
                            }
                            if (frameInfo.soundStreamHead) {
                                this._initSoundStream(frameInfo.soundStreamHead);
                            }
                            if (frameInfo.soundStreamBlock) {
                                this._addSoundStreamBlock(frames.length, frameInfo.soundStreamBlock);
                            }
                            if (spriteSymbol.isAVM1Object) {
                                Shumway.AVM1.Lib.getAVM1Object(this, spriteSymbol.avm1Context).addFrameActionBlocks(frames.length - 1, frameInfo);
                                if (frameInfo.exports) {
                                    var exports = frameInfo.exports;
                                    for (var i = 0; i < exports.length; i++) {
                                        var asset = exports[i];
                                        spriteSymbol.avm1Context.addAsset(asset.className, asset.symbolId, null);
                                    }
                                }
                            }
                            if (frames.length === 1) {
                                this._initializeChildren(frames[0]);
                            }
                        };
                        MovieClip.prototype._initFrame = function (advance) {
                            if (advance) {
                                if (this.buttonMode) {
                                    var state = null;
                                    if (this._mouseOver) {
                                        state = this._mouseDown ? '_down' : '_over';
                                    }
                                    else if (this._currentButtonState !== null) {
                                        state = '_up';
                                    }
                                    if (state !== this._currentButtonState && this._buttonFrames[state]) {
                                        this.stop();
                                        this._gotoFrame(state, null);
                                        this._currentButtonState = state;
                                        this._advanceFrame();
                                        return;
                                    }
                                }
                                if (this._totalFrames > 1 && !this._stopped && this._hasFlags(256 /* Constructed */)) {
                                    this._nextFrame++;
                                }
                            }
                            this._advanceFrame();
                        };
                        MovieClip.prototype._constructFrame = function () {
                            this._constructChildren();
                        };
                        MovieClip.prototype._enqueueFrameScripts = function () {
                            if (this._hasFlags(1024 /* NeedsLoadEvent */)) {
                                MovieClip._callQueue.push(this);
                            }
                            if (this._hasFlags(8192 /* HasFrameScriptPending */)) {
                                this._removeFlags(8192 /* HasFrameScriptPending */);
                                MovieClip._callQueue.push(this);
                            }
                            _super.prototype._enqueueFrameScripts.call(this);
                        };
                        Object.defineProperty(MovieClip.prototype, "currentFrame", {
                            get: function () {
                                return this._currentFrame - this._sceneForFrameIndex(this._currentFrame).offset;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MovieClip.prototype, "framesLoaded", {
                            get: function () {
                                return this._frames.length;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MovieClip.prototype, "totalFrames", {
                            get: function () {
                                return this._totalFrames;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MovieClip.prototype, "trackAsMenu", {
                            get: function () {
                                return this._trackAsMenu;
                            },
                            set: function (value) {
                                this._trackAsMenu = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MovieClip.prototype, "scenes", {
                            get: function () {
                                return this._scenes.map(function (scene) {
                                    return scene.clone();
                                });
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MovieClip.prototype, "currentScene", {
                            get: function () {
                                var scene = this._sceneForFrameIndex(this._currentFrame);
                                return scene.clone();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MovieClip.prototype, "currentLabel", {
                            get: function () {
                                var label = this._labelForFrame(this._currentFrame);
                                return label ? label.name : null;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MovieClip.prototype, "currentLabels", {
                            get: function () {
                                return this._sceneForFrameIndex(this._currentFrame).labels;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MovieClip.prototype, "currentFrameLabel", {
                            get: function () {
                                var scene = this._sceneForFrameIndex(this._currentFrame);
                                var label = scene.getLabelByFrame(this._currentFrame - scene.offset);
                                return label && label.name;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MovieClip.prototype, "enabled", {
                            get: function () {
                                return this._enabled;
                            },
                            set: function (value) {
                                this._enabled = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MovieClip.prototype, "isPlaying", {
                            get: function () {
                                return this._isPlaying;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        MovieClip.prototype.play = function () {
                            if (this._totalFrames > 1) {
                                this._isPlaying = true;
                            }
                            this._stopped = false;
                        };
                        MovieClip.prototype.stop = function () {
                            this._isPlaying = false;
                            this._stopped = true;
                        };
                        MovieClip.prototype._getAbsFrameNumber = function (frame, sceneName) {
                            var legacyMode = display.MovieClip.frameNavigationModel !== 10 /* SWF10 */;
                            var scene;
                            if (sceneName !== null) {
                                sceneName = asCoerceString(sceneName);
                                var scenes = this._scenes;
                                release || assert(scenes.length, "There should be at least one scene defined.");
                                for (var i = 0; i < scenes.length; i++) {
                                    scene = scenes[i];
                                    if (scene.name === sceneName) {
                                        break;
                                    }
                                }
                                if (i === scenes.length) {
                                    if (legacyMode) {
                                        return undefined;
                                    }
                                    throwError('ArgumentError', AVM2.Errors.SceneNotFoundError, sceneName);
                                }
                            }
                            else {
                                scene = this._sceneForFrameIndex(this._currentFrame);
                            }
                            var frameNum = parseInt(frame, 10);
                            if (frameNum != frame) {
                                var label = scene.getLabelByName(frame, legacyMode);
                                if (!label) {
                                    if (legacyMode) {
                                        return undefined;
                                    }
                                    throwError('ArgumentError', AVM2.Errors.FrameLabelNotFoundError, frame, sceneName);
                                }
                                frameNum = label.frame;
                            }
                            return scene.offset + frameNum;
                        };
                        MovieClip.prototype._gotoFrame = function (frame, sceneName) {
                            var frameNum = this._getAbsFrameNumber(frame, sceneName);
                            if (frameNum === undefined) {
                                return;
                            }
                            this._gotoFrameAbs(frameNum);
                        };
                        MovieClip.prototype._gotoFrameAbs = function (frame) {
                            if (frame < 1) {
                                frame = 1;
                            }
                            else if (frame > this._totalFrames) {
                                frame = this._totalFrames;
                            }
                            if (frame === this._nextFrame) {
                                return;
                            }
                            this._nextFrame = frame;
                            if (this._allowFrameNavigation) {
                                if (display.MovieClip.frameNavigationModel === 9 /* SWF9 */) {
                                    this._advanceFrame();
                                    this._constructFrame();
                                }
                                else {
                                    display.DisplayObject.performFrameNavigation(false, true);
                                }
                            }
                        };
                        MovieClip.prototype._advanceFrame = function () {
                            var currentFrame = this._currentFrame;
                            var nextFrame = this._nextFrame;
                            if (nextFrame > this._totalFrames) {
                                nextFrame = 1;
                            }
                            if (currentFrame === nextFrame) {
                                this._nextFrame = nextFrame;
                                return;
                            }
                            if (nextFrame > this.framesLoaded) {
                                this._nextFrame = nextFrame;
                                return;
                            }
                            var currentSwfFrame = this._frames[currentFrame - 1];
                            var nextSwfFrame = this._frames[nextFrame - 1];
                            if (nextSwfFrame !== currentSwfFrame) {
                                this._seekToFrame(nextFrame);
                                if (nextSwfFrame.controlTags) {
                                    var tags = nextSwfFrame.controlTags;
                                    var soundStarts;
                                    for (var i = 0; i < tags.length; i++) {
                                        var tag = tags[i];
                                        if (tag.tagCode === 15 /* CODE_START_SOUND */) {
                                            var loaderInfo = this._symbol.loaderInfo;
                                            tag = loaderInfo._file.getParsedTag(tag);
                                        }
                                        if (tag.code === 15 /* CODE_START_SOUND */) {
                                            if (!soundStarts) {
                                                soundStarts = [];
                                            }
                                            soundStarts.push(new Shumway.Timeline.SoundStart(tag.soundId, tag.soundInfo));
                                        }
                                    }
                                    if (soundStarts) {
                                        this._registerStartSounds(nextFrame, soundStarts);
                                    }
                                }
                            }
                            if (this._frameScripts[nextFrame]) {
                                this._setFlags(8192 /* HasFrameScriptPending */);
                                this._parent && this._propagateFlagsUp(16384 /* ContainsFrameScriptPendingChildren */);
                            }
                            this._currentFrame = this._nextFrame = nextFrame;
                            this._syncSounds(nextFrame);
                        };
                        MovieClip.prototype._seekToFrame = function (frame) {
                            var currentFrame = this._currentFrame;
                            var frames = this._frames;
                            if (frame === currentFrame + 1) {
                                var nextSwfFrame = frames[frame - 1];
                                if (nextSwfFrame.controlTags) {
                                    this._processControlTags(nextSwfFrame.controlTags, false);
                                }
                                return;
                            }
                            var currentSwfFrame = frames[currentFrame - 1];
                            var loaderInfo = this._symbol.loaderInfo;
                            var backwards = frame < currentFrame;
                            var controlTags = [];
                            var removedObjects;
                            var i = frame;
                            var n = backwards ? 0 : currentFrame;
                            while (i-- > n) {
                                var swfFrame = frames[i];
                                if (swfFrame === currentSwfFrame) {
                                    continue;
                                }
                                currentSwfFrame = swfFrame;
                                var tags = swfFrame.controlTags;
                                if (!tags) {
                                    continue;
                                }
                                var j = tags.length;
                                while (j--) {
                                    var parsedOrUnparsedTag = tags[j];
                                    var tag = parsedOrUnparsedTag.tagCode === undefined ? parsedOrUnparsedTag : loaderInfo._file.getParsedTag(parsedOrUnparsedTag);
                                    switch (tag.code) {
                                        case 5 /* CODE_REMOVE_OBJECT */:
                                        case 28 /* CODE_REMOVE_OBJECT2 */:
                                            if (!removedObjects) {
                                                removedObjects = Object.create(null);
                                            }
                                            removedObjects[tag.depth] = true;
                                            if (!backwards) {
                                                controlTags.push(tag);
                                            }
                                            break;
                                        case 4 /* CODE_PLACE_OBJECT */:
                                        case 26 /* CODE_PLACE_OBJECT2 */:
                                        case 70 /* CODE_PLACE_OBJECT3 */:
                                            if (!(removedObjects && removedObjects[tag.depth])) {
                                                controlTags.push(tag);
                                            }
                                            break;
                                        default:
                                            controlTags.push(tag);
                                    }
                                }
                            }
                            controlTags.reverse();
                            this._processControlTags(controlTags, backwards);
                        };
                        MovieClip.prototype._sceneForFrameIndex = function (frameIndex) {
                            var scenes = this._scenes;
                            if (frameIndex === 0) {
                                return scenes[0];
                            }
                            for (var i = 0; i < scenes.length; i++) {
                                var scene = scenes[i];
                                if (scene.offset < frameIndex && scene.offset + scene.numFrames >= frameIndex) {
                                    return scene;
                                }
                            }
                            release || assertUnreachable("Must have at least one scene covering all frames.");
                        };
                        MovieClip.prototype._labelForFrame = function (frame) {
                            var scenes = this._scenes;
                            var label = null;
                            for (var i = 0; i < scenes.length; i++) {
                                var scene = scenes[i];
                                if (scene.offset > frame) {
                                    return label;
                                }
                                var labels = scene.labels;
                                for (var j = 0; j < labels.length; j++) {
                                    var currentLabel = labels[j];
                                    if (currentLabel.frame > frame - scene.offset) {
                                        return label;
                                    }
                                    label = currentLabel;
                                }
                            }
                            return label;
                        };
                        MovieClip.prototype.callFrame = function (frame) {
                            frame = frame | 0;
                            var frameScript = this._frameScripts[frame];
                            if (!frameScript) {
                                return;
                            }
                            try {
                                frameScript.call(this);
                            }
                            catch (e) {
                                Telemetry.instance.reportTelemetry({ topic: 'error', error: 2 /* AVM2_ERROR */ });
                                this.stop();
                                throw e;
                            }
                        };
                        MovieClip.prototype.nextFrame = function () {
                            this.gotoAndStop(this._currentFrame + 1);
                        };
                        MovieClip.prototype.prevFrame = function () {
                            this.gotoAndStop(this._currentFrame - 1);
                        };
                        MovieClip.prototype.gotoAndPlay = function (frame, scene) {
                            if (scene === void 0) { scene = null; }
                            if (arguments.length === 0 || arguments.length > 2) {
                                throwError('ArgumentError', AVM2.Errors.WrongArgumentCountError, 'flash.display::MovieClip/gotoAndPlay()', 1, arguments.length);
                            }
                            scene = asCoerceString(scene);
                            frame = asCoerceString(frame) + '';
                            this.play();
                            this._gotoFrame(frame, scene);
                        };
                        MovieClip.prototype.gotoAndStop = function (frame, scene) {
                            if (scene === void 0) { scene = null; }
                            if (arguments.length === 0 || arguments.length > 2) {
                                throwError('ArgumentError', AVM2.Errors.WrongArgumentCountError, 'flash.display::MovieClip/gotoAndPlay()', 1, arguments.length);
                            }
                            scene = asCoerceString(scene);
                            frame = asCoerceString(frame) + '';
                            this.stop();
                            this._gotoFrame(frame, scene);
                        };
                        MovieClip.prototype.addFrameScript = function (frameIndex, script) {
                            if (!this._currentFrame) {
                                return;
                            }
                            var numArgs = arguments.length;
                            if (numArgs & 1) {
                                throwError('ArgumentError', AVM2.Errors.TooFewArgumentsError, numArgs, numArgs + 1);
                            }
                            var frameScripts = this._frameScripts;
                            var totalFrames = this._totalFrames;
                            for (var i = 0; i < numArgs; i += 2) {
                                var frameNum = (arguments[i] | 0) + 1;
                                if (frameNum < 1 || frameNum > totalFrames) {
                                    continue;
                                }
                                frameScripts[frameNum] = arguments[i + 1];
                                if (frameNum === this._currentFrame) {
                                    this._setFlags(8192 /* HasFrameScriptPending */);
                                    this._parent && this._propagateFlagsUp(16384 /* ContainsFrameScriptPendingChildren */);
                                }
                            }
                        };
                        Object.defineProperty(MovieClip.prototype, "_avm1SymbolClass", {
                            get: function () {
                                return (this._symbol && this._symbol.avm1SymbolClass) || null;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MovieClip.prototype, "_isFullyLoaded", {
                            get: function () {
                                return this.framesLoaded >= this.totalFrames;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        MovieClip.prototype._registerStartSounds = function (frameNum, soundStartInfo) {
                            if (this._sounds === null) {
                                this._sounds = new MovieClipSoundsManager(this);
                            }
                            this._sounds.registerStartSounds(frameNum, soundStartInfo);
                        };
                        MovieClip.prototype._initSoundStream = function (streamInfo) {
                            if (this._sounds === null) {
                                this._sounds = new MovieClipSoundsManager(this);
                            }
                            this._sounds.initSoundStream(streamInfo);
                        };
                        MovieClip.prototype._addSoundStreamBlock = function (frameNum, streamBlock) {
                            this._sounds.addSoundStreamBlock(frameNum, streamBlock);
                        };
                        MovieClip.prototype._syncSounds = function (frameNum) {
                            if (this._sounds !== null) {
                                this._sounds.syncSounds(frameNum);
                            }
                        };
                        MovieClip.prototype.addScene = function (name, labels, offset, numFrames) {
                            this._scenes.push(new display.Scene(name, labels, offset, numFrames));
                        };
                        MovieClip.prototype.addFrameLabel = function (name, frame) {
                            var scene = this._sceneForFrameIndex(frame);
                            if (!scene.getLabelByName(name, false)) {
                                scene.labels.push(new flash.display.FrameLabel(name, frame - scene.offset));
                            }
                        };
                        MovieClip.prototype.prevScene = function () {
                            var currentScene = this._sceneForFrameIndex(this._currentFrame);
                            if (currentScene.offset === 0) {
                                return;
                            }
                            this._gotoFrameAbs(this._sceneForFrameIndex(currentScene.offset).offset + 1);
                        };
                        MovieClip.prototype.nextScene = function () {
                            var currentScene = this._sceneForFrameIndex(this._currentFrame);
                            if (currentScene.offset + currentScene.numFrames === this._totalFrames) {
                                return;
                            }
                            this._gotoFrameAbs(currentScene.offset + currentScene.numFrames + 1);
                        };
                        MovieClip.prototype._containsPointImpl = function (globalX, globalY, localX, localY, testingType, objects, skipBoundsCheck) {
                            var result = _super.prototype._containsPointImpl.call(this, globalX, globalY, localX, localY, testingType, objects, true);
                            if (result === 2 /* Shape */ && testingType === 3 /* Mouse */ && '_as2Object' in this && !this.buttonMode && objects[0] === this) {
                                objects.length = 0;
                            }
                            return result;
                        };
                        MovieClip.classInitializer = function () {
                            MovieClip.reset();
                        };
                        MovieClip.initializer = function (symbol) {
                            var self = this;
                            display.DisplayObject._advancableInstances.push(self);
                            self._currentFrame = 0;
                            self._totalFrames = 1;
                            self._trackAsMenu = false;
                            self._scenes = [];
                            self._enabled = true;
                            self._isPlaying = false;
                            self._frames = [];
                            self._frameScripts = [];
                            self._nextFrame = 1;
                            self._stopped = false;
                            self._allowFrameNavigation = true;
                            self._sounds = null;
                            self._buttonFrames = Object.create(null);
                            self._currentButtonState = null;
                            if (symbol) {
                                self._totalFrames = symbol.numFrames;
                                self._currentFrame = 1;
                                if (!symbol.isRoot) {
                                    self.addScene('', symbol.labels, 0, symbol.numFrames);
                                }
                                self._frames = symbol.frames;
                                if (symbol.isAVM1Object) {
                                    if (symbol.frameScripts) {
                                        var avm1MovieClip = Shumway.AVM1.Lib.getAVM1Object(this, symbol.avm1Context);
                                        avm1MovieClip.context = symbol.avm1Context;
                                        var data = symbol.frameScripts;
                                        for (var i = 0; i < data.length; i += 2) {
                                            avm1MovieClip.addFrameScript(data[i], data[i + 1]);
                                        }
                                    }
                                    if (symbol.avm1Name) {
                                        self.name = symbol.avm1Name;
                                    }
                                }
                            }
                            else {
                                self.addScene('', [], 0, self._totalFrames);
                            }
                        };
                        MovieClip.classSymbols = null;
                        MovieClip.instanceSymbols = null;
                        return MovieClip;
                    })(flash.display.Sprite);
                    display.MovieClip = MovieClip;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var MP3DecoderSession = Shumway.SWF.MP3DecoderSession;
                    var MP3_MIME_TYPE = 'audio/mpeg';
                    var HTMLAudioElementAdapter = (function () {
                        function HTMLAudioElementAdapter(element) {
                            this._element = element;
                        }
                        Object.defineProperty(HTMLAudioElementAdapter.prototype, "isReady", {
                            get: function () {
                                return !!this._channel;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(HTMLAudioElementAdapter.prototype, "element", {
                            get: function () {
                                return this._element;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(HTMLAudioElementAdapter.prototype, "currentTime", {
                            get: function () {
                                return this._element.currentTime;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        HTMLAudioElementAdapter.prototype.playFrom = function (time) {
                            var element = this._element;
                            if (element.paused) {
                                element.play();
                                element.addEventListener('playing', function setTime(e) {
                                    element.removeEventListener('playing', setTime);
                                    element.currentTime = time;
                                });
                            }
                            else {
                                element.currentTime = time;
                            }
                        };
                        Object.defineProperty(HTMLAudioElementAdapter.prototype, "paused", {
                            get: function () {
                                return this._element.paused;
                            },
                            set: function (value) {
                                var element = this._element;
                                if (value) {
                                    if (!element.paused) {
                                        element.pause();
                                    }
                                }
                                else {
                                    if (element.paused) {
                                        element.play();
                                    }
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        HTMLAudioElementAdapter.prototype.createChannel = function () {
                            this._channel = flash.media.SoundChannel.initializeFrom({ element: this._element });
                        };
                        HTMLAudioElementAdapter.prototype.queueData = function (frame) {
                            Shumway.Debug.abstractMethod('HTMLAudioElementAdapter::queueData');
                        };
                        HTMLAudioElementAdapter.prototype.finish = function () {
                            Shumway.Debug.abstractMethod('HTMLAudioElementAdapter::finish');
                        };
                        return HTMLAudioElementAdapter;
                    })();
                    var MediaSourceStreamAdapter = (function (_super) {
                        __extends(MediaSourceStreamAdapter, _super);
                        function MediaSourceStreamAdapter(element) {
                            _super.call(this, element);
                            this._mediaSource = new MediaSource();
                            this._sourceBuffer = null;
                            this._updating = false;
                            this._loading = true;
                            this._rawFrames = [];
                            this._isReady = false;
                            this._mediaSource.addEventListener('sourceopen', this._openMediaSource.bind(this));
                            this.element.src = URL.createObjectURL(this._mediaSource);
                        }
                        MediaSourceStreamAdapter.prototype._appendSoundData = function () {
                            if (this._rawFrames.length === 0 || this._updating || !this._sourceBuffer) {
                                return;
                            }
                            if (!this._loading) {
                                this._mediaSource.endOfStream();
                                return;
                            }
                            this._updating = true;
                            this._sourceBuffer.appendBuffer(this._rawFrames.shift());
                            if (!this._isReady) {
                                this._isReady = true;
                                this.createChannel();
                            }
                        };
                        MediaSourceStreamAdapter.prototype._openMediaSource = function () {
                            var sourceBuffer = this._mediaSource.addSourceBuffer(MP3_MIME_TYPE);
                            sourceBuffer.addEventListener('update', function () {
                                this._updating = false;
                                this._appendSoundData();
                            }.bind(this));
                            this._sourceBuffer = sourceBuffer;
                            this._appendSoundData();
                        };
                        MediaSourceStreamAdapter.prototype.queueData = function (frame) {
                            this._rawFrames.push(frame.data);
                            this._appendSoundData();
                        };
                        MediaSourceStreamAdapter.prototype.finish = function () {
                            this._loading = false;
                            this._appendSoundData();
                        };
                        return MediaSourceStreamAdapter;
                    })(HTMLAudioElementAdapter);
                    var BlobStreamAdapter = (function (_super) {
                        __extends(BlobStreamAdapter, _super);
                        function BlobStreamAdapter(element) {
                            _super.call(this, element);
                            this._rawFrames = [];
                        }
                        BlobStreamAdapter.prototype.queueData = function (frame) {
                            this._rawFrames.push(frame.data);
                        };
                        BlobStreamAdapter.prototype.finish = function () {
                            var blob = new Blob(this._rawFrames);
                            this.element.src = URL.createObjectURL(blob);
                            this.createChannel();
                        };
                        return BlobStreamAdapter;
                    })(HTMLAudioElementAdapter);
                    function syncTime(element, movieClip) {
                        var initialized = false;
                        var startMediaTime, startRealTime;
                        element.addEventListener('timeupdate', function (e) {
                            if (!initialized) {
                                startMediaTime = element.currentTime;
                                startRealTime = performance.now();
                                initialized = true;
                                return;
                            }
                            var mediaDelta = element.currentTime - startMediaTime;
                            var realDelta = performance.now() - startRealTime;
                        });
                        element.addEventListener('pause', function (e) {
                            initialized = false;
                        });
                        element.addEventListener('seeking', function (e) {
                            initialized = false;
                        });
                    }
                    var WebAudioAdapter = (function () {
                        function WebAudioAdapter(data) {
                            this._channel = null;
                            this._sound = null;
                            this._data = data;
                            this._position = 0;
                        }
                        Object.defineProperty(WebAudioAdapter.prototype, "currentTime", {
                            get: function () {
                                return NaN;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        WebAudioAdapter.prototype.playFrom = function (time) {
                        };
                        Object.defineProperty(WebAudioAdapter.prototype, "paused", {
                            get: function () {
                                return false;
                            },
                            set: function (value) {
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(WebAudioAdapter.prototype, "isReady", {
                            get: function () {
                                return !!this._channel;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        WebAudioAdapter.prototype.queueData = function (frame) {
                            this._data.pcm.set(frame.pcm, this._position);
                            this._position += frame.pcm.length;
                        };
                        WebAudioAdapter.prototype.finish = function () {
                            var sound = flash.media.Sound.initializeFrom(this._data);
                            var channel = sound.play();
                            this._sound = sound;
                            this._channel = channel;
                        };
                        return WebAudioAdapter;
                    })();
                    var WebAudioMP3Adapter = (function (_super) {
                        __extends(WebAudioMP3Adapter, _super);
                        function WebAudioMP3Adapter(data) {
                            _super.call(this, data);
                            this._decoderPosition = 0;
                            this._decoderSession = new MP3DecoderSession();
                            this._decoderSession.onframedata = function (frameData) {
                                var position = this._decoderPosition;
                                data.pcm.set(frameData, position);
                                this._decoderPosition = position + frameData.length;
                            }.bind(this);
                            this._decoderSession.onclosed = function () {
                                WebAudioAdapter.prototype.finish.call(this);
                            }.bind(this);
                            this._decoderSession.onerror = function (error) {
                                console.warn('MP3DecoderSession error: ' + error);
                            };
                        }
                        WebAudioMP3Adapter.prototype.queueData = function (frame) {
                            this._decoderSession.pushAsync(frame.data);
                        };
                        WebAudioMP3Adapter.prototype.finish = function () {
                            this._decoderSession.close();
                        };
                        return WebAudioMP3Adapter;
                    })(WebAudioAdapter);
                    var MovieClipSoundStream = (function () {
                        function MovieClipSoundStream(streamInfo, movieClip) {
                            this.movieClip = movieClip;
                            this.decode = streamInfo.decode;
                            this.data = {
                                sampleRate: streamInfo.sampleRate,
                                channels: streamInfo.channels
                            };
                            this.seekIndex = [];
                            this.position = 0;
                            this.wasFullyLoaded = false;
                            this.expectedFrame = 0;
                            this.waitFor = 0;
                            var isMP3 = streamInfo.format === 'mp3';
                            if (isMP3 && !AS.webAudioMP3Option.value) {
                                var element = document.createElement('audio');
                                element.preload = 'metadata';
                                element.loop = false;
                                syncTime(element, movieClip);
                                if (element.canPlayType(MP3_MIME_TYPE)) {
                                    this.element = element;
                                    if (!AS.mediaSourceMP3Option.value) {
                                        this.soundStreamAdapter = new BlobStreamAdapter(element);
                                    }
                                    else if (typeof MediaSource !== 'undefined' && MediaSource.isTypeSupported(MP3_MIME_TYPE)) {
                                        this.soundStreamAdapter = new MediaSourceStreamAdapter(element);
                                    }
                                    else {
                                        console.warn('MediaSource is not supported');
                                        this.soundStreamAdapter = new BlobStreamAdapter(element);
                                    }
                                    return;
                                }
                            }
                            var totalSamples = (streamInfo.samplesCount + 1) * this.movieClip.totalFrames * streamInfo.channels;
                            this.data.pcm = new Float32Array(totalSamples);
                            this.soundStreamAdapter = !isMP3 ? new WebAudioAdapter(this.data) : new WebAudioMP3Adapter(this.data);
                        }
                        MovieClipSoundStream.prototype.appendBlock = function (frameNum, streamBlock) {
                            var decodedBlock = this.decode(streamBlock);
                            var streamPosition = this.position;
                            this.seekIndex[frameNum] = streamPosition + decodedBlock.seek * this.data.channels;
                            this.position = streamPosition + decodedBlock.samplesCount * this.data.channels;
                            this.soundStreamAdapter.queueData(decodedBlock);
                        };
                        MovieClipSoundStream.prototype.playFrame = function (frameNum) {
                            if (isNaN(this.seekIndex[frameNum])) {
                                return;
                            }
                            var PAUSE_WHEN_OF_SYNC_GREATER = 1.0;
                            var PLAYBACK_ADJUSTMENT = 0.25;
                            if (!this.wasFullyLoaded && this.movieClip._isFullyLoaded) {
                                this.wasFullyLoaded = true;
                                this.soundStreamAdapter.finish();
                            }
                            if (this.soundStreamAdapter.isReady && !isNaN(this.soundStreamAdapter.currentTime)) {
                                var soundStreamData = this.data;
                                var time = this.seekIndex[frameNum] / soundStreamData.sampleRate / soundStreamData.channels;
                                var elementTime = this.soundStreamAdapter.currentTime;
                                if (this.expectedFrame !== frameNum) {
                                    this.soundStreamAdapter.playFrom(time);
                                }
                                else if (this.waitFor > 0) {
                                    if (this.waitFor <= time) {
                                        this.soundStreamAdapter.paused = false;
                                        this.waitFor = 0;
                                    }
                                }
                                else if (elementTime - time > PAUSE_WHEN_OF_SYNC_GREATER) {
                                    console.warn('Sound is faster than frames by ' + (elementTime - time));
                                    this.waitFor = elementTime - PLAYBACK_ADJUSTMENT;
                                    this.soundStreamAdapter.paused = true;
                                }
                                else if (time - elementTime > PAUSE_WHEN_OF_SYNC_GREATER) {
                                    console.warn('Sound is slower than frames by ' + (time - elementTime));
                                    this.soundStreamAdapter.playFrom(time + PLAYBACK_ADJUSTMENT);
                                }
                                this.expectedFrame = frameNum + 1;
                            }
                        };
                        return MovieClipSoundStream;
                    })();
                    display.MovieClipSoundStream = MovieClipSoundStream;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var assert = Shumway.Debug.assert;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var throwError = Shumway.AVM2.Runtime.throwError;
                    var Stage = (function (_super) {
                        __extends(Stage, _super);
                        function Stage() {
                            false && _super.call(this);
                            display.DisplayObjectContainer.instanceConstructorNoInitialize.call(this);
                            this._root = this;
                            this._stage = this;
                            this._frameRate = 24;
                            this._scaleMode = display.StageScaleMode.SHOW_ALL;
                            this._align = "";
                            this._stageWidth = 0;
                            this._stageHeight = 0;
                            this._showDefaultContextMenu = true;
                            this._focus = null;
                            this._colorCorrection = display.ColorCorrection.DEFAULT;
                            this._colorCorrectionSupport = display.ColorCorrectionSupport.DEFAULT_OFF;
                            this._stageFocusRect = true;
                            this._quality = display.StageQuality.HIGH;
                            this._displayState = null;
                            this._fullScreenSourceRect = null;
                            this._mouseLock = false;
                            this._stageVideos = new AS.GenericVector(0, true, AS.ASObject);
                            this._stage3Ds = null;
                            this._colorARGB = 0xFFFFFFFF;
                            this._fullScreenWidth = 0;
                            this._fullScreenHeight = 0;
                            this._wmodeGPU = false;
                            this._softKeyboardRect = new flash.geom.Rectangle();
                            this._allowsFullScreen = false;
                            this._allowsFullScreenInteractive = false;
                            this._contentsScaleFactor = 1;
                            this._displayContextInfo = null;
                            this._timeout = -1;
                            this._stageContainerWidth = -1;
                            this._stageContainerHeight = -1;
                            this._invalidated = false;
                        }
                        Stage.prototype.setRoot = function (root) {
                            this.addTimelineObjectAtDepth(root, 0);
                        };
                        Object.defineProperty(Stage.prototype, "frameRate", {
                            get: function () {
                                return this._frameRate;
                            },
                            set: function (value) {
                                this._frameRate = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "scaleMode", {
                            get: function () {
                                return this._scaleMode;
                            },
                            set: function (value) {
                                value = asCoerceString(value);
                                if (flash.display.StageScaleMode.toNumber(value) < 0) {
                                    throwError("ArgumentError", AVM2.Errors.InvalidEnumError, "scaleMode");
                                }
                                this._scaleMode = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "align", {
                            get: function () {
                                return this._align;
                            },
                            set: function (value) {
                                value = asCoerceString(value);
                                var n = flash.display.StageAlign.toNumber(value);
                                release || assert(n >= 0);
                                this._align = flash.display.StageAlign.fromNumber(n);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "stageWidth", {
                            get: function () {
                                if (this.scaleMode !== display.StageScaleMode.NO_SCALE) {
                                    return this._stageWidth / 20 | 0;
                                }
                                release || assert(this._stageContainerWidth >= 0);
                                return this._stageContainerWidth;
                            },
                            set: function (value) {
                                value = value | 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Stage.prototype._setInitialName = function () {
                            this._name = null;
                        };
                        Stage.prototype.setStageWidth = function (value) {
                            release || assert((value | 0) === value);
                            this._stageWidth = (value * 20) | 0;
                        };
                        Object.defineProperty(Stage.prototype, "stageHeight", {
                            get: function () {
                                if (this.scaleMode !== display.StageScaleMode.NO_SCALE) {
                                    return this._stageHeight / 20 | 0;
                                }
                                release || assert(this._stageContainerHeight >= 0);
                                return this._stageContainerHeight;
                            },
                            set: function (value) {
                                value = value | 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Stage.prototype.setStageHeight = function (value) {
                            release || assert((value | 0) === value);
                            this._stageHeight = (value * 20) | 0;
                        };
                        Stage.prototype.setStageColor = function (value) {
                            this._colorARGB = value;
                        };
                        Stage.prototype.setStageContainerSize = function (width, height, pixelRatio) {
                            this._contentsScaleFactor = pixelRatio;
                            var sizeHasChanged = this._stageContainerWidth !== width || this._stageContainerHeight !== height;
                            if (sizeHasChanged) {
                                this._stageContainerWidth = width;
                                this._stageContainerHeight = height;
                                if (this.scaleMode === display.StageScaleMode.NO_SCALE) {
                                    this.dispatchEvent(flash.events.Event.getInstance(flash.events.Event.RESIZE));
                                }
                            }
                        };
                        Object.defineProperty(Stage.prototype, "showDefaultContextMenu", {
                            get: function () {
                                return this._showDefaultContextMenu;
                            },
                            set: function (value) {
                                this._showDefaultContextMenu = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "focus", {
                            get: function () {
                                return this._focus;
                            },
                            set: function (newFocus) {
                                this._focus = newFocus;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "colorCorrection", {
                            get: function () {
                                return this._colorCorrection;
                            },
                            set: function (value) {
                                notImplemented("public flash.display.Stage::set colorCorrection");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "colorCorrectionSupport", {
                            get: function () {
                                return this._colorCorrectionSupport;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "stageFocusRect", {
                            get: function () {
                                return this._stageFocusRect;
                            },
                            set: function (on) {
                                this._stageFocusRect = !!on;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "quality", {
                            get: function () {
                                return this._quality.toUpperCase();
                            },
                            set: function (value) {
                                value = (asCoerceString(value) || '').toLowerCase();
                                if (flash.display.StageQuality.toNumber(value) < 0) {
                                    value = flash.display.StageQuality.HIGH;
                                }
                                this._quality = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "displayState", {
                            get: function () {
                                return this._displayState;
                            },
                            set: function (value) {
                                value = asCoerceString(value);
                                if (flash.display.StageDisplayState.toNumber(value) < 0) {
                                    value = flash.display.StageDisplayState.NORMAL;
                                }
                                this._displayState = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "fullScreenSourceRect", {
                            get: function () {
                                return this._fullScreenSourceRect;
                            },
                            set: function (value) {
                                notImplemented("public flash.display.Stage::set fullScreenSourceRect");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "mouseLock", {
                            get: function () {
                                return this._mouseLock;
                            },
                            set: function (value) {
                                somewhatImplemented("public flash.display.Stage::set mouseLock");
                                this._mouseLock = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "stageVideos", {
                            get: function () {
                                somewhatImplemented("public flash.display.Stage::get stageVideos");
                                return this._stageVideos;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "stage3Ds", {
                            get: function () {
                                notImplemented("public flash.display.Stage::get stage3Ds");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "color", {
                            get: function () {
                                return this._colorARGB;
                            },
                            set: function (rgb) {
                                this._colorARGB = rgb | 0xff000000;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "alpha", {
                            get: function () {
                                return this._colorTransform.alphaMultiplier;
                            },
                            set: function (alpha) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "fullScreenWidth", {
                            get: function () {
                                return this._fullScreenWidth;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "fullScreenHeight", {
                            get: function () {
                                return this._fullScreenHeight;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "wmodeGPU", {
                            get: function () {
                                return this._wmodeGPU;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "softKeyboardRect", {
                            get: function () {
                                return this._softKeyboardRect;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "allowsFullScreen", {
                            get: function () {
                                return this._allowsFullScreen;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "allowsFullScreenInteractive", {
                            get: function () {
                                return this._allowsFullScreenInteractive;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "contentsScaleFactor", {
                            get: function () {
                                return this._contentsScaleFactor;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "displayContextInfo", {
                            get: function () {
                                return this._displayContextInfo;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Stage.prototype.removeChildAt = function (index) {
                            this.requireOwnerPermissions();
                            return _super.prototype.removeChildAt.call(this, index);
                        };
                        Stage.prototype.swapChildrenAt = function (index1, index2) {
                            this.requireOwnerPermissions();
                            _super.prototype.swapChildrenAt.call(this, index1, index2);
                        };
                        Object.defineProperty(Stage.prototype, "width", {
                            get: function () {
                                this.requireOwnerPermissions();
                                return this._getWidth();
                            },
                            set: function (value) {
                                this.requireOwnerPermissions();
                                this._setWidth(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "height", {
                            get: function () {
                                this.requireOwnerPermissions();
                                return this._getHeight();
                            },
                            set: function (value) {
                                this.requireOwnerPermissions();
                                this._setHeight(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "mouseChildren", {
                            get: function () {
                                this.requireOwnerPermissions();
                                return this._getMouseChildren();
                            },
                            set: function (value) {
                                this.requireOwnerPermissions();
                                this._setMouseChildren(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "numChildren", {
                            get: function () {
                                this.requireOwnerPermissions();
                                return this._getNumChildren();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "tabChildren", {
                            get: function () {
                                this.requireOwnerPermissions();
                                return this._getTabChildren();
                            },
                            set: function (value) {
                                this.requireOwnerPermissions();
                                this._setTabChildren(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Stage.prototype.addChild = function (child) {
                            this.requireOwnerPermissions();
                            return _super.prototype.addChild.call(this, child);
                        };
                        Stage.prototype.addChildAt = function (child, index) {
                            this.requireOwnerPermissions();
                            return _super.prototype.addChildAt.call(this, child, index);
                        };
                        Stage.prototype.setChildIndex = function (child, index) {
                            this.requireOwnerPermissions();
                            _super.prototype.setChildIndex.call(this, child, index);
                        };
                        Stage.prototype.addEventListener = function (type, listener, useCapture, priority, useWeakReference) {
                            this.requireOwnerPermissions();
                            _super.prototype.addEventListener.call(this, type, listener, useCapture, priority, useWeakReference);
                        };
                        Stage.prototype.hasEventListener = function (type) {
                            this.requireOwnerPermissions();
                            return _super.prototype.hasEventListener.call(this, type);
                        };
                        Stage.prototype.willTrigger = function (type) {
                            this.requireOwnerPermissions();
                            return _super.prototype.willTrigger.call(this, type);
                        };
                        Stage.prototype.dispatchEvent = function (event) {
                            this.requireOwnerPermissions();
                            return _super.prototype.dispatchEvent.call(this, event);
                        };
                        Stage.prototype.invalidate = function () {
                            this._invalidated = true;
                        };
                        Stage.prototype.isFocusInaccessible = function () {
                            notImplemented("public flash.display.Stage::isFocusInaccessible");
                            return;
                        };
                        Stage.prototype.requireOwnerPermissions = function () {
                        };
                        Stage.prototype.render = function () {
                            if (!this._invalidated) {
                                return;
                            }
                            display.DisplayObject._broadcastFrameEvent(flash.events.Event.RENDER);
                            this._invalidated = false;
                        };
                        Object.defineProperty(Stage.prototype, "name", {
                            get: function () {
                                return this._name;
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "mask", {
                            get: function () {
                                return this._mask;
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "visible", {
                            get: function () {
                                return this._hasFlags(1 /* Visible */);
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "x", {
                            get: function () {
                                return this._getX();
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "y", {
                            get: function () {
                                return this._getY();
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "z", {
                            get: function () {
                                return this._z;
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "scaleX", {
                            get: function () {
                                return Math.abs(this._scaleX);
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "scaleY", {
                            get: function () {
                                return this._scaleY;
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "scaleZ", {
                            get: function () {
                                return this._scaleZ;
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "rotation", {
                            get: function () {
                                return this._rotation;
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "rotationX", {
                            get: function () {
                                return this._rotationX;
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "rotationY", {
                            get: function () {
                                return this._rotationX;
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "rotationZ", {
                            get: function () {
                                return this._rotationX;
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "cacheAsBitmap", {
                            get: function () {
                                return this._getCacheAsBitmap();
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "opaqueBackground", {
                            get: function () {
                                return this._opaqueBackground;
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "scrollRect", {
                            get: function () {
                                return this._getScrollRect();
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "filters", {
                            get: function () {
                                return this._getFilters();
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "blendMode", {
                            get: function () {
                                return this._blendMode;
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "transform", {
                            get: function () {
                                return this._getTransform();
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "accessibilityProperties", {
                            get: function () {
                                return this._accessibilityProperties;
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "scale9Grid", {
                            get: function () {
                                return this._getScale9Grid();
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "tabEnabled", {
                            get: function () {
                                return this._tabEnabled;
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "tabIndex", {
                            get: function () {
                                return this._tabIndex;
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "focusRect", {
                            get: function () {
                                return this._focusRect;
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "mouseEnabled", {
                            get: function () {
                                return this._mouseEnabled;
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "accessibilityImplementation", {
                            get: function () {
                                return this._accessibilityImplementation;
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "textSnapshot", {
                            get: function () {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                                return null;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Stage.prototype, "contextMenu", {
                            get: function () {
                                return this._contextMenu;
                            },
                            set: function (value) {
                                throwError('IllegalOperationError', AVM2.Errors.InvalidStageMethodError);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Stage.classInitializer = null;
                        Stage.classSymbols = null;
                        Stage.instanceSymbols = null;
                        Stage.initializer = null;
                        return Stage;
                    })(flash.display.DisplayObjectContainer);
                    display.Stage = Stage;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var ActionScriptVersion = (function (_super) {
                        __extends(ActionScriptVersion, _super);
                        function ActionScriptVersion() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.ActionScriptVersion");
                        }
                        ActionScriptVersion.classInitializer = null;
                        ActionScriptVersion.initializer = null;
                        ActionScriptVersion.classSymbols = null;
                        ActionScriptVersion.instanceSymbols = null;
                        ActionScriptVersion.ACTIONSCRIPT2 = 2;
                        ActionScriptVersion.ACTIONSCRIPT3 = 3;
                        return ActionScriptVersion;
                    })(AS.ASNative);
                    display.ActionScriptVersion = ActionScriptVersion;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var BlendMode = (function (_super) {
                        __extends(BlendMode, _super);
                        function BlendMode() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.BlendMode");
                        }
                        BlendMode.fromNumber = function (n) {
                            switch (n) {
                                case 0:
                                case 1:
                                    return BlendMode.NORMAL;
                                case 2:
                                    return BlendMode.LAYER;
                                case 3:
                                    return BlendMode.MULTIPLY;
                                case 4:
                                    return BlendMode.SCREEN;
                                case 5:
                                    return BlendMode.LIGHTEN;
                                case 6:
                                    return BlendMode.DARKEN;
                                case 7:
                                    return BlendMode.DIFFERENCE;
                                case 8:
                                    return BlendMode.ADD;
                                case 9:
                                    return BlendMode.SUBTRACT;
                                case 10:
                                    return BlendMode.INVERT;
                                case 11:
                                    return BlendMode.ALPHA;
                                case 12:
                                    return BlendMode.ERASE;
                                case 13:
                                    return BlendMode.OVERLAY;
                                case 14:
                                    return BlendMode.HARDLIGHT;
                                default:
                                    return null;
                            }
                        };
                        BlendMode.toNumber = function (value) {
                            switch (value) {
                                case BlendMode.NORMAL:
                                    return 1;
                                case BlendMode.LAYER:
                                    return 2;
                                case BlendMode.MULTIPLY:
                                    return 3;
                                case BlendMode.SCREEN:
                                    return 4;
                                case BlendMode.LIGHTEN:
                                    return 5;
                                case BlendMode.DARKEN:
                                    return 6;
                                case BlendMode.DIFFERENCE:
                                    return 7;
                                case BlendMode.ADD:
                                    return 8;
                                case BlendMode.SUBTRACT:
                                    return 9;
                                case BlendMode.INVERT:
                                    return 10;
                                case BlendMode.ALPHA:
                                    return 11;
                                case BlendMode.ERASE:
                                    return 12;
                                case BlendMode.OVERLAY:
                                    return 13;
                                case BlendMode.HARDLIGHT:
                                    return 14;
                                default:
                                    return -1;
                            }
                        };
                        BlendMode.classInitializer = null;
                        BlendMode.initializer = null;
                        BlendMode.classSymbols = null;
                        BlendMode.instanceSymbols = null;
                        BlendMode.NORMAL = "normal";
                        BlendMode.LAYER = "layer";
                        BlendMode.MULTIPLY = "multiply";
                        BlendMode.SCREEN = "screen";
                        BlendMode.LIGHTEN = "lighten";
                        BlendMode.DARKEN = "darken";
                        BlendMode.ADD = "add";
                        BlendMode.SUBTRACT = "subtract";
                        BlendMode.DIFFERENCE = "difference";
                        BlendMode.INVERT = "invert";
                        BlendMode.OVERLAY = "overlay";
                        BlendMode.HARDLIGHT = "hardlight";
                        BlendMode.ALPHA = "alpha";
                        BlendMode.ERASE = "erase";
                        BlendMode.SHADER = "shader";
                        return BlendMode;
                    })(AS.ASNative);
                    display.BlendMode = BlendMode;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var ColorCorrection = (function (_super) {
                        __extends(ColorCorrection, _super);
                        function ColorCorrection() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.ColorCorrection");
                        }
                        ColorCorrection.fromNumber = function (n) {
                            switch (n) {
                                case 0:
                                    return ColorCorrection.DEFAULT;
                                case 1:
                                    return ColorCorrection.ON;
                                case 2:
                                    return ColorCorrection.OFF;
                                default:
                                    return null;
                            }
                        };
                        ColorCorrection.toNumber = function (value) {
                            switch (value) {
                                case ColorCorrection.DEFAULT:
                                    return 0;
                                case ColorCorrection.ON:
                                    return 1;
                                case ColorCorrection.OFF:
                                    return 2;
                                default:
                                    return -1;
                            }
                        };
                        ColorCorrection.classInitializer = null;
                        ColorCorrection.initializer = null;
                        ColorCorrection.classSymbols = null;
                        ColorCorrection.instanceSymbols = null;
                        ColorCorrection.DEFAULT = "default";
                        ColorCorrection.ON = "on";
                        ColorCorrection.OFF = "off";
                        return ColorCorrection;
                    })(AS.ASNative);
                    display.ColorCorrection = ColorCorrection;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var ColorCorrectionSupport = (function (_super) {
                        __extends(ColorCorrectionSupport, _super);
                        function ColorCorrectionSupport() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.ColorCorrectionSupport");
                        }
                        ColorCorrectionSupport.fromNumber = function (n) {
                            switch (n) {
                                case 0:
                                    return ColorCorrectionSupport.UNSUPPORTED;
                                case 1:
                                    return ColorCorrectionSupport.DEFAULT_ON;
                                case 2:
                                    return ColorCorrectionSupport.DEFAULT_OFF;
                                default:
                                    return null;
                            }
                        };
                        ColorCorrectionSupport.toNumber = function (value) {
                            switch (value) {
                                case ColorCorrectionSupport.UNSUPPORTED:
                                    return 0;
                                case ColorCorrectionSupport.DEFAULT_ON:
                                    return 1;
                                case ColorCorrectionSupport.DEFAULT_OFF:
                                    return 2;
                                default:
                                    return -1;
                            }
                        };
                        ColorCorrectionSupport.classInitializer = null;
                        ColorCorrectionSupport.initializer = null;
                        ColorCorrectionSupport.classSymbols = null;
                        ColorCorrectionSupport.instanceSymbols = null;
                        ColorCorrectionSupport.UNSUPPORTED = "unsupported";
                        ColorCorrectionSupport.DEFAULT_ON = "defaultOn";
                        ColorCorrectionSupport.DEFAULT_OFF = "defaultOff";
                        return ColorCorrectionSupport;
                    })(AS.ASNative);
                    display.ColorCorrectionSupport = ColorCorrectionSupport;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var FocusDirection = (function (_super) {
                        __extends(FocusDirection, _super);
                        function FocusDirection() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.FocusDirection");
                        }
                        FocusDirection.classInitializer = null;
                        FocusDirection.initializer = null;
                        FocusDirection.classSymbols = null;
                        FocusDirection.instanceSymbols = null;
                        FocusDirection.TOP = "top";
                        FocusDirection.BOTTOM = "bottom";
                        FocusDirection.NONE = "none";
                        return FocusDirection;
                    })(AS.ASNative);
                    display.FocusDirection = FocusDirection;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var FrameLabel = (function (_super) {
                        __extends(FrameLabel, _super);
                        function FrameLabel(name, frame) {
                            false && _super.call(this, undefined);
                            this._name = asCoerceString(name);
                            this._frame = frame | 0;
                        }
                        Object.defineProperty(FrameLabel.prototype, "name", {
                            get: function () {
                                return this._name;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(FrameLabel.prototype, "frame", {
                            get: function () {
                                return this._frame;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        FrameLabel.prototype.clone = function () {
                            return new FrameLabel(this._name, this._frame);
                        };
                        FrameLabel.classInitializer = null;
                        FrameLabel.initializer = null;
                        FrameLabel.classSymbols = null;
                        FrameLabel.instanceSymbols = null;
                        return FrameLabel;
                    })(flash.events.EventDispatcher);
                    display.FrameLabel = FrameLabel;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var assert = Shumway.Debug.assert;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var DataBuffer = Shumway.ArrayUtilities.DataBuffer;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var throwError = Shumway.AVM2.Runtime.throwError;
                    var AVM2 = Shumway.AVM2.Runtime.AVM2;
                    var swap32 = Shumway.IntegerUtilities.swap32;
                    var premultiplyARGB = Shumway.ColorUtilities.premultiplyARGB;
                    var unpremultiplyARGB = Shumway.ColorUtilities.unpremultiplyARGB;
                    var RGBAToARGB = Shumway.ColorUtilities.RGBAToARGB;
                    var indexOf = Shumway.ArrayUtilities.indexOf;
                    var Rectangle = flash.geom.Rectangle;
                    var BitmapData = (function (_super) {
                        __extends(BitmapData, _super);
                        function BitmapData(width, height, transparent, fillColorARGB) {
                            if (transparent === void 0) { transparent = true; }
                            if (fillColorARGB === void 0) { fillColorARGB = 4294967295; }
                            width = width | 0;
                            height = height | 0;
                            transparent = !!transparent;
                            fillColorARGB = fillColorARGB | 0;
                            false && _super.call(this);
                            var symbol = this._symbol;
                            if (symbol) {
                                width = symbol.width | 0;
                                height = symbol.height | 0;
                            }
                            if (width > BitmapData.MAXIMUM_WIDTH || width <= 0 || height > BitmapData.MAXIMUM_HEIGHT || height <= 0 || width * height > BitmapData.MAXIMUM_DIMENSION) {
                                throwError('ArgumentError', AVM2.Errors.InvalidBitmapData);
                            }
                            this._rect = new Rectangle(0, 0, width, height);
                            this._transparent = transparent;
                            if (symbol) {
                                release || assert(symbol.syncId);
                                this._id = symbol.syncId;
                                if (symbol.type === 1 /* PremultipliedAlphaARGB */ || symbol.type === 2 /* StraightAlphaARGB */ || symbol.type === 3 /* StraightAlphaRGBA */) {
                                    release || assert(symbol.data);
                                    this._setData(symbol.data, symbol.type);
                                }
                                else {
                                    this._isDirty = false;
                                    this._isRemoteDirty = true;
                                }
                                this._solidFillColorPBGRA = null;
                            }
                            else {
                                this._id = flash.display.DisplayObject.getNextSyncID();
                                this._setData(new Uint8Array(width * height * 4), 1 /* PremultipliedAlphaARGB */);
                                var alpha = fillColorARGB >> 24;
                                if (alpha === 0 && transparent) {
                                    this._solidFillColorPBGRA = 0;
                                }
                                else {
                                    this.fillRect(this._rect, fillColorARGB);
                                }
                            }
                            this._bitmapReferrers = [];
                            release || assert(this._isDirty === !!this._data);
                            release || assert(this._isRemoteDirty === !this._data);
                        }
                        BitmapData.prototype._setData = function (data, type) {
                            if (data instanceof Uint8ClampedArray) {
                                data = new Uint8Array(data.buffer);
                            }
                            release || assert(data instanceof Uint8Array);
                            this._data = data;
                            this._type = type;
                            this._view = new Int32Array(data.buffer);
                            this._dataBuffer = DataBuffer.FromArrayBuffer(data.buffer);
                            this._isDirty = true;
                            this._isRemoteDirty = false;
                        };
                        BitmapData.prototype._addBitmapReferrer = function (bitmap) {
                            var index = indexOf(this._bitmapReferrers, bitmap);
                            release || assert(index < 0);
                            this._bitmapReferrers.push(bitmap);
                        };
                        BitmapData.prototype._removeBitmapReferrer = function (bitmap) {
                            var index = indexOf(this._bitmapReferrers, bitmap);
                            release || assert(index >= 0);
                            this._bitmapReferrers[index] = null;
                        };
                        BitmapData.prototype._invalidate = function () {
                            if (this._isDirty) {
                                return;
                            }
                            this._isDirty = true;
                            this._isRemoteDirty = false;
                            for (var i = 0; i < this._bitmapReferrers.length; i++) {
                                var bitmap = this._bitmapReferrers[i];
                                if (bitmap) {
                                    bitmap._setDirtyFlags(16777216 /* DirtyBitmapData */);
                                }
                            }
                        };
                        BitmapData.prototype._getTemporaryRectangleFrom = function (rect, index) {
                            if (index === void 0) { index = 0; }
                            release || assert(index >= 0 && index < BitmapData._temporaryRectangles.length);
                            var r = BitmapData._temporaryRectangles[index];
                            if (rect) {
                                r.copyFrom(rect);
                            }
                            return r;
                        };
                        BitmapData.prototype.getDataBuffer = function () {
                            return this._dataBuffer;
                        };
                        BitmapData.prototype._getContentBounds = function () {
                            return Shumway.Bounds.FromRectangle(this._rect);
                        };
                        BitmapData.prototype._getPixelData = function (rect) {
                            var r = this._getTemporaryRectangleFrom(this._rect).intersectInPlace(rect);
                            if (r.isEmpty()) {
                                return;
                            }
                            var xMin = r.x;
                            var xMax = r.x + r.width;
                            var yMin = r.y;
                            var yMax = r.y + r.height;
                            var view = this._view;
                            var width = this._rect.width;
                            var output = new Int32Array(r.area);
                            var p = 0;
                            for (var y = yMin; y < yMax; y++) {
                                var offset = y * width;
                                for (var x = xMin; x < xMax; x++) {
                                    var colorBGRA = view[offset + x];
                                    var alpha = colorBGRA & 0xff;
                                    var colorBGR = colorBGRA >>> 8;
                                    colorBGRA = ((255 * colorBGR) / alpha) << 8 | alpha;
                                    output[p++] = colorBGRA;
                                }
                            }
                            return output;
                        };
                        BitmapData.prototype._putPixelData = function (rect, input) {
                            var r = this._getTemporaryRectangleFrom(this._rect).intersectInPlace(rect);
                            if (r.isEmpty()) {
                                return;
                            }
                            var xMin = r.x;
                            var xMax = r.x + r.width;
                            var yMin = r.y;
                            var yMax = r.y + r.height;
                            var view = this._view;
                            var width = this._rect.width;
                            var p = (rect.width * rect.height - r.height) + (xMin - rect.x);
                            var padding = rect.width - r.width;
                            var alphaMask = this._transparent ? 0x00 : 0xff;
                            for (var y = yMin; y < yMax; y++) {
                                var offset = y * width;
                                for (var x = xMin; x < xMax; x++) {
                                    var colorBGRA = input[p++];
                                    var alpha = colorBGRA & alphaMask;
                                    var colorBGR = colorBGRA >>> 8;
                                    view[offset + x] = (((colorBGR * alpha + 254) / 255) & 0x00ffffff) << 8 | alpha;
                                }
                                p += padding;
                            }
                            this._invalidate();
                        };
                        Object.defineProperty(BitmapData.prototype, "width", {
                            get: function () {
                                return this._rect.width;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(BitmapData.prototype, "height", {
                            get: function () {
                                return this._rect.height;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(BitmapData.prototype, "rect", {
                            get: function () {
                                return this._rect.clone();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(BitmapData.prototype, "transparent", {
                            get: function () {
                                return this._transparent;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        BitmapData.prototype.clone = function () {
                            somewhatImplemented("public flash.display.BitmapData::clone");
                            var bd = new BitmapData(this._rect.width, this._rect.height, this._transparent, this._solidFillColorPBGRA);
                            bd._view.set(this._view);
                            return bd;
                        };
                        BitmapData.prototype.getPixel = function (x, y) {
                            x = x | 0;
                            y = y | 0;
                            return this.getPixel32(x, y) & 0x00ffffff;
                        };
                        BitmapData.prototype.getPixel32 = function (x, y) {
                            x = x | 0;
                            y = y | 0;
                            if (!this._rect.contains(x, y)) {
                                return 0;
                            }
                            this._ensureBitmapData();
                            var value = this._view[y * this._rect.width + x];
                            switch (this._type) {
                                case 1 /* PremultipliedAlphaARGB */:
                                    var pARGB = swap32(value);
                                    var uARGB = unpremultiplyARGB(pARGB);
                                    return uARGB >>> 0;
                                case 3 /* StraightAlphaRGBA */:
                                    return RGBAToARGB(swap32(value));
                                default:
                                    Shumway.Debug.notImplemented(Shumway.ImageType[this._type]);
                                    return 0;
                            }
                        };
                        BitmapData.prototype.setPixel = function (x, y, uARGB) {
                            x = x | 0;
                            y = y | 0;
                            uARGB = uARGB | 0;
                            if (!this._rect.contains(x, y)) {
                                return;
                            }
                            this._ensureBitmapData();
                            var i = y * this._rect.width + x;
                            var a = this._view[i] & 0xff;
                            uARGB = uARGB & 0x00ffffff | a << 24;
                            var pARGB = premultiplyARGB(uARGB);
                            this._view[i] = swap32(pARGB);
                            this._invalidate();
                            this._solidFillColorPBGRA = null;
                        };
                        BitmapData.prototype.setPixel32 = function (x, y, uARGB) {
                            x = x | 0;
                            y = y | 0;
                            if (!this._rect.contains(x, y)) {
                                return;
                            }
                            this._ensureBitmapData();
                            var a = uARGB >>> 24;
                            var uRGB = uARGB & 0x00ffffff;
                            if (this._transparent) {
                                var uARGB = uRGB | a << 24;
                                var pARGB = premultiplyARGB(uARGB);
                            }
                            else {
                                var pARGB = uRGB | 0xff000000;
                            }
                            this._view[y * this._rect.width + x] = swap32(pARGB);
                            this._invalidate();
                            this._solidFillColorPBGRA = null;
                        };
                        BitmapData.prototype.applyFilter = function (sourceBitmapData, sourceRect, destPoint, filter) {
                            sourceBitmapData = sourceBitmapData;
                            sourceRect = sourceRect;
                            destPoint = destPoint;
                            filter = filter;
                            somewhatImplemented("public flash.display.BitmapData::applyFilter " + filter);
                            return;
                        };
                        BitmapData.prototype.colorTransform = function (rect, colorTransform) {
                            rect = rect;
                            colorTransform = colorTransform;
                            somewhatImplemented("public flash.display.BitmapData::colorTransform");
                            return;
                        };
                        BitmapData.prototype.compare = function (otherBitmapData) {
                            otherBitmapData = otherBitmapData;
                            notImplemented("public flash.display.BitmapData::compare");
                            return;
                        };
                        BitmapData.prototype.copyChannel = function (sourceBitmapData, sourceRect, destPoint, sourceChannel, destChannel) {
                            sourceBitmapData = sourceBitmapData;
                            sourceRect = sourceRect;
                            destPoint = destPoint;
                            sourceChannel = sourceChannel >>> 0;
                            destChannel = destChannel >>> 0;
                            notImplemented("public flash.display.BitmapData::copyChannel");
                            return;
                        };
                        BitmapData.prototype.copyPixels = function (sourceBitmapData, sourceRect, destPoint, alphaBitmapData, alphaPoint, mergeAlpha) {
                            if (alphaBitmapData === void 0) { alphaBitmapData = null; }
                            if (alphaPoint === void 0) { alphaPoint = null; }
                            if (mergeAlpha === void 0) { mergeAlpha = false; }
                            mergeAlpha = !!mergeAlpha;
                            if (alphaBitmapData || alphaPoint) {
                                notImplemented("public flash.display.BitmapData::copyPixels - Alpha");
                                return;
                            }
                            var sRect = this._getTemporaryRectangleFrom(sourceRect, 0).roundInPlace();
                            var tBRect = this._rect;
                            var sBRect = sourceBitmapData._rect;
                            var sL = Math.max(sRect.x, 0);
                            var sT = Math.max(sRect.y, 0);
                            var sR = Math.min(sRect.x + sRect.width, sBRect.width);
                            var sB = Math.min(sRect.y + sRect.height, sBRect.height);
                            var oX = sL - sRect.x;
                            var oY = sT - sRect.y;
                            var tL = destPoint.x | 0 + oX;
                            var tT = destPoint.y | 0 + oY;
                            if (tL < 0) {
                                sL -= tL;
                                tL = 0;
                            }
                            if (tT < 0) {
                                sT -= tT;
                                tT = 0;
                            }
                            var tW = Math.min(sR - sL, tBRect.width - tL);
                            var tH = Math.min(sB - sT, tBRect.height - tT);
                            if (tW <= 0 || tH <= 0) {
                                return;
                            }
                            var sX = sL;
                            var sY = sT;
                            var tX = tL;
                            var tY = tT;
                            var sStride = sourceBitmapData._rect.width;
                            var tStride = this._rect.width;
                            this._ensureBitmapData();
                            sourceBitmapData._ensureBitmapData();
                            var s = sourceBitmapData._view;
                            var t = this._view;
                            if (sourceBitmapData._type !== this._type) {
                                somewhatImplemented("public flash.display.BitmapData::copyPixels - Color Format Conversion");
                            }
                            if (mergeAlpha && this._type !== 1 /* PremultipliedAlphaARGB */) {
                                notImplemented("public flash.display.BitmapData::copyPixels - Merge Alpha");
                                return;
                            }
                            if (this._solidFillColorPBGRA !== null && this._solidFillColorPBGRA === sourceBitmapData._solidFillColorPBGRA) {
                                return;
                            }
                            if (sourceBitmapData._solidFillColorPBGRA !== null && (sourceBitmapData._solidFillColorPBGRA & 0xFF) === 0xFF) {
                                mergeAlpha = false;
                            }
                            if (mergeAlpha) {
                                this._copyPixelsAndMergeAlpha(s, sX, sY, sStride, t, tX, tY, tStride, tW, tH);
                            }
                            else {
                                var sP = (sY * sStride + sX) | 0;
                                var tP = (tY * tStride + tX) | 0;
                                if ((tW & 3) === 0) {
                                    for (var y = 0; y < tH; y = y + 1 | 0) {
                                        for (var x = 0; x < tW; x = x + 4 | 0) {
                                            t[(tP + x + 0) | 0] = s[(sP + x + 0) | 0];
                                            t[(tP + x + 1) | 0] = s[(sP + x + 1) | 0];
                                            t[(tP + x + 2) | 0] = s[(sP + x + 2) | 0];
                                            t[(tP + x + 3) | 0] = s[(sP + x + 3) | 0];
                                        }
                                        sP = sP + sStride | 0;
                                        tP = tP + tStride | 0;
                                    }
                                }
                                else {
                                    for (var y = 0; y < tH; y = y + 1 | 0) {
                                        for (var x = 0; x < tW; x = x + 1 | 0) {
                                            t[tP + x | 0] = s[sP + x | 0];
                                        }
                                        sP = sP + sStride | 0;
                                        tP = tP + tStride | 0;
                                    }
                                }
                            }
                            this._solidFillColorPBGRA = null;
                            this._invalidate();
                        };
                        BitmapData.prototype._copyPixelsAndMergeAlpha = function (s, sX, sY, sStride, t, tX, tY, tStride, tW, tH) {
                            var sP = (sY * sStride + sX) | 0;
                            var tP = (tY * tStride + tX) | 0;
                            for (var y = 0; y < tH; y = y + 1 | 0) {
                                for (var x = 0; x < tW; x = x + 1 | 0) {
                                    var spBGRA = s[sP + x | 0];
                                    var sA = spBGRA & 0xff;
                                    if (sA === 0xff) {
                                        t[tP + x | 0] = spBGRA;
                                    }
                                    else if (sA === 0) {
                                    }
                                    else {
                                        var sGA = spBGRA & 0x00ff00ff;
                                        var sBR = spBGRA >> 8 & 0x00ff00ff;
                                        var tpBGRA = t[tP + x | 0];
                                        var tGA = tpBGRA & 0x00ff00ff;
                                        var tBR = tpBGRA >> 8 & 0x00ff00ff;
                                        var A = 256 - sA;
                                        tGA = Math.imul(tGA, A) >> 8;
                                        tBR = Math.imul(tBR, A) >> 8;
                                        t[tP + x | 0] = ((sBR + tBR & 0x00ff00ff) << 8) | (sGA + tGA & 0x00ff00ff);
                                    }
                                }
                                sP = sP + sStride | 0;
                                tP = tP + tStride | 0;
                            }
                        };
                        BitmapData.prototype.dispose = function () {
                            this._rect.setEmpty();
                            this._view = null;
                            this._invalidate();
                        };
                        BitmapData.prototype.draw = function (source, matrix, colorTransform, blendMode, clipRect, smoothing) {
                            if (matrix === void 0) { matrix = null; }
                            if (colorTransform === void 0) { colorTransform = null; }
                            if (blendMode === void 0) { blendMode = null; }
                            if (clipRect === void 0) { clipRect = null; }
                            if (smoothing === void 0) { smoothing = false; }
                            somewhatImplemented("public flash.display.BitmapData::draw");
                            var serializer = AVM2.instance.globals['Shumway.Player.Utils'];
                            if (matrix) {
                                matrix = matrix.clone().toTwipsInPlace();
                            }
                            serializer.drawToBitmap(this, source, matrix, colorTransform, blendMode, clipRect, smoothing);
                            this._isRemoteDirty = true;
                        };
                        BitmapData.prototype.drawWithQuality = function (source, matrix, colorTransform, blendMode, clipRect, smoothing, quality) {
                            if (matrix === void 0) { matrix = null; }
                            if (colorTransform === void 0) { colorTransform = null; }
                            if (blendMode === void 0) { blendMode = null; }
                            if (clipRect === void 0) { clipRect = null; }
                            if (smoothing === void 0) { smoothing = false; }
                            if (quality === void 0) { quality = null; }
                            source = source;
                            matrix = matrix;
                            colorTransform = colorTransform;
                            blendMode = asCoerceString(blendMode);
                            clipRect = clipRect;
                            smoothing = !!smoothing;
                            quality = asCoerceString(quality);
                            notImplemented("public flash.display.BitmapData::drawWithQuality");
                            return;
                        };
                        BitmapData.prototype.fillRect = function (rect, uARGB) {
                            this._ensureBitmapData();
                            release || assert(this._type === 1 /* PremultipliedAlphaARGB */);
                            if (this._transparent) {
                                var pARGB = premultiplyARGB(uARGB);
                            }
                            else {
                                var pARGB = uARGB | 0xff000000;
                            }
                            var pBGRA = swap32(pARGB);
                            var r = this._getTemporaryRectangleFrom(this._rect).intersectInPlace(rect);
                            if (r.isEmpty()) {
                                return;
                            }
                            if (this._solidFillColorPBGRA === pBGRA) {
                                return;
                            }
                            var view = this._view;
                            if (r.equals(this._rect)) {
                                var length = view.length | 0;
                                if ((length & 0x3) === 0) {
                                    for (var i = 0; i < length; i += 4) {
                                        view[i] = pBGRA;
                                        view[i + 1] = pBGRA;
                                        view[i + 2] = pBGRA;
                                        view[i + 3] = pBGRA;
                                    }
                                }
                                else {
                                    for (var i = 0; i < length; i++) {
                                        view[i] = pBGRA;
                                    }
                                }
                                this._solidFillColorPBGRA = pBGRA;
                            }
                            else {
                                var xMin = r.x | 0;
                                var xMax = r.x + r.width | 0;
                                var yMin = r.y | 0;
                                var yMax = r.y + r.height | 0;
                                var width = this._rect.width | 0;
                                for (var y = yMin; y < yMax; y++) {
                                    var offset = y * width | 0;
                                    for (var x = xMin; x < xMax; x++) {
                                        view[offset + x] = pBGRA;
                                    }
                                }
                                this._solidFillColorPBGRA = null;
                            }
                            this._invalidate();
                        };
                        BitmapData.prototype.floodFill = function (x, y, color) {
                            x = x | 0;
                            y = y | 0;
                            color = color >>> 0;
                            notImplemented("public flash.display.BitmapData::floodFill");
                            return;
                        };
                        BitmapData.prototype.generateFilterRect = function (sourceRect, filter) {
                            sourceRect = sourceRect;
                            filter = filter;
                            notImplemented("public flash.display.BitmapData::generateFilterRect");
                            return;
                        };
                        BitmapData.prototype.getColorBoundsRect = function (mask, color, findColor) {
                            if (findColor === void 0) { findColor = true; }
                            mask = mask >>> 0;
                            color = color >>> 0;
                            findColor = !!findColor;
                            notImplemented("public flash.display.BitmapData::getColorBoundsRect");
                            return;
                        };
                        BitmapData.prototype.getPixels = function (rect) {
                            var outputByteArray = new flash.utils.ByteArray();
                            this.copyPixelsToByteArray(rect, outputByteArray);
                            return outputByteArray;
                        };
                        BitmapData.prototype.copyPixelsToByteArray = function (rect, data) {
                            var pixelData = this._getPixelData(rect);
                            if (!pixelData) {
                                return;
                            }
                            data.writeRawBytes(new Uint8Array(pixelData));
                        };
                        BitmapData.prototype.getVector = function (rect) {
                            var outputVector = new AS.Uint32Vector(pixelData.length);
                            var pixelData = this._getPixelData(rect);
                            if (!pixelData) {
                                return outputVector;
                            }
                            outputVector.length = pixelData.length;
                            outputVector._view().set(pixelData);
                            return outputVector;
                        };
                        BitmapData.prototype.hitTest = function (firstPoint, firstAlphaThreshold, secondObject, secondBitmapDataPoint, secondAlphaThreshold) {
                            if (secondBitmapDataPoint === void 0) { secondBitmapDataPoint = null; }
                            if (secondAlphaThreshold === void 0) { secondAlphaThreshold = 1; }
                            firstPoint = firstPoint;
                            firstAlphaThreshold = firstAlphaThreshold >>> 0;
                            secondObject = secondObject;
                            secondBitmapDataPoint = secondBitmapDataPoint;
                            secondAlphaThreshold = secondAlphaThreshold >>> 0;
                            notImplemented("public flash.display.BitmapData::hitTest");
                            return;
                        };
                        BitmapData.prototype.merge = function (sourceBitmapData, sourceRect, destPoint, redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier) {
                            sourceBitmapData = sourceBitmapData;
                            sourceRect = sourceRect;
                            destPoint = destPoint;
                            redMultiplier = redMultiplier >>> 0;
                            greenMultiplier = greenMultiplier >>> 0;
                            blueMultiplier = blueMultiplier >>> 0;
                            alphaMultiplier = alphaMultiplier >>> 0;
                            somewhatImplemented("public flash.display.BitmapData::merge");
                        };
                        BitmapData.prototype.noise = function (randomSeed, low, high, channelOptions, grayScale) {
                            if (low === void 0) { low = 0; }
                            if (high === void 0) { high = 255; }
                            if (channelOptions === void 0) { channelOptions = 7; }
                            if (grayScale === void 0) { grayScale = false; }
                            randomSeed = randomSeed | 0;
                            low = low >>> 0;
                            high = high >>> 0;
                            channelOptions = channelOptions >>> 0;
                            grayScale = !!grayScale;
                            somewhatImplemented("public flash.display.BitmapData::noise");
                        };
                        BitmapData.prototype.paletteMap = function (sourceBitmapData, sourceRect, destPoint, redArray, greenArray, blueArray, alphaArray) {
                            if (redArray === void 0) { redArray = null; }
                            if (greenArray === void 0) { greenArray = null; }
                            if (blueArray === void 0) { blueArray = null; }
                            if (alphaArray === void 0) { alphaArray = null; }
                            sourceBitmapData = sourceBitmapData;
                            sourceRect = sourceRect;
                            destPoint = destPoint;
                            redArray = redArray;
                            greenArray = greenArray;
                            blueArray = blueArray;
                            alphaArray = alphaArray;
                            somewhatImplemented("public flash.display.BitmapData::paletteMap");
                        };
                        BitmapData.prototype.perlinNoise = function (baseX, baseY, numOctaves, randomSeed, stitch, fractalNoise, channelOptions, grayScale, offsets) {
                            if (channelOptions === void 0) { channelOptions = 7; }
                            if (grayScale === void 0) { grayScale = false; }
                            if (offsets === void 0) { offsets = null; }
                            baseX = +baseX;
                            baseY = +baseY;
                            numOctaves = numOctaves >>> 0;
                            randomSeed = randomSeed | 0;
                            stitch = !!stitch;
                            fractalNoise = !!fractalNoise;
                            channelOptions = channelOptions >>> 0;
                            grayScale = !!grayScale;
                            offsets = offsets;
                            somewhatImplemented("public flash.display.BitmapData::perlinNoise");
                        };
                        BitmapData.prototype.pixelDissolve = function (sourceBitmapData, sourceRect, destPoint, randomSeed, numPixels, fillColor) {
                            if (randomSeed === void 0) { randomSeed = 0; }
                            if (numPixels === void 0) { numPixels = 0; }
                            if (fillColor === void 0) { fillColor = 0; }
                            sourceBitmapData = sourceBitmapData;
                            sourceRect = sourceRect;
                            destPoint = destPoint;
                            randomSeed = randomSeed | 0;
                            numPixels = numPixels | 0;
                            fillColor = fillColor >>> 0;
                            notImplemented("public flash.display.BitmapData::pixelDissolve");
                            return;
                        };
                        BitmapData.prototype.scroll = function (x, y) {
                            x = x | 0;
                            y = y | 0;
                            notImplemented("public flash.display.BitmapData::scroll");
                            return;
                        };
                        BitmapData.prototype.setPixels = function (rect, inputByteArray) {
                            this._putPixelData(rect, new Int32Array(inputByteArray.readRawBytes()));
                        };
                        BitmapData.prototype.setVector = function (rect, inputVector) {
                            this._putPixelData(rect, inputVector._view());
                        };
                        BitmapData.prototype.threshold = function (sourceBitmapData, sourceRect, destPoint, operation, threshold, color, mask, copySource) {
                            if (color === void 0) { color = 0; }
                            if (mask === void 0) { mask = 4294967295; }
                            if (copySource === void 0) { copySource = false; }
                            sourceBitmapData = sourceBitmapData;
                            sourceRect = sourceRect;
                            destPoint = destPoint;
                            operation = asCoerceString(operation);
                            threshold = threshold >>> 0;
                            color = color >>> 0;
                            mask = mask >>> 0;
                            copySource = !!copySource;
                            notImplemented("public flash.display.BitmapData::threshold");
                            return;
                        };
                        BitmapData.prototype.lock = function () {
                            this._locked = true;
                        };
                        BitmapData.prototype.unlock = function (changeRect) {
                            if (changeRect === void 0) { changeRect = null; }
                            this._locked = false;
                        };
                        BitmapData.prototype.histogram = function (hRect) {
                            if (hRect === void 0) { hRect = null; }
                            hRect = hRect;
                            notImplemented("public flash.display.BitmapData::histogram");
                            return;
                        };
                        BitmapData.prototype.encode = function (rect, compressor, byteArray) {
                            if (byteArray === void 0) { byteArray = null; }
                            rect = rect;
                            compressor = compressor;
                            byteArray = byteArray;
                            notImplemented("public flash.display.BitmapData::encode");
                            return;
                        };
                        BitmapData.prototype._ensureBitmapData = function () {
                            if (this._isRemoteDirty) {
                                var serializer = Shumway.AVM2.Runtime.AVM2.instance.globals['Shumway.Player.Utils'];
                                var data = serializer.requestBitmapData(this);
                                this._setData(data.getBytes(), 3 /* StraightAlphaRGBA */);
                                this._isRemoteDirty = false;
                                this._isDirty = false;
                                this._solidFillColorPBGRA = null;
                            }
                            release || assert(!(this._type === 4 /* JPEG */ || this._type === 5 /* PNG */ || this._type === 6 /* GIF */));
                            if (this._type !== 1 /* PremultipliedAlphaARGB */) {
                                Shumway.ColorUtilities.convertImage(this._type, 1 /* PremultipliedAlphaARGB */, this._view, this._view);
                                this._type = 1 /* PremultipliedAlphaARGB */;
                                this._solidFillColorPBGRA = null;
                            }
                            release || assert(this._data);
                            release || assert(this._dataBuffer);
                            release || assert(this._view);
                        };
                        BitmapData.classInitializer = function () {
                        };
                        BitmapData.initializer = function (symbol) {
                            this._symbol = symbol;
                        };
                        BitmapData.classSymbols = null;
                        BitmapData.instanceSymbols = null;
                        BitmapData.MAXIMUM_WIDTH = 8191;
                        BitmapData.MAXIMUM_HEIGHT = 8191;
                        BitmapData.MAXIMUM_DIMENSION = 16777215;
                        BitmapData._temporaryRectangles = [
                            new flash.geom.Rectangle(),
                            new flash.geom.Rectangle(),
                            new flash.geom.Rectangle()
                        ];
                        return BitmapData;
                    })(AS.ASNative);
                    display.BitmapData = BitmapData;
                    var BitmapSymbol = (function (_super) {
                        __extends(BitmapSymbol, _super);
                        function BitmapSymbol(data) {
                            _super.call(this, data, flash.display.BitmapData, false);
                            this.ready = false;
                        }
                        BitmapSymbol.FromData = function (data) {
                            var symbol = new BitmapSymbol(data);
                            symbol.width = data.width || -1;
                            symbol.height = data.height || -1;
                            symbol.syncId = flash.display.DisplayObject.getNextSyncID();
                            symbol.data = data.data;
                            switch (data.mimeType) {
                                case "application/octet-stream":
                                    symbol.type = data.dataType;
                                    symbol.ready = true;
                                    break;
                                case "image/jpeg":
                                    symbol.type = 4 /* JPEG */;
                                    break;
                                case "image/png":
                                    symbol.type = 5 /* PNG */;
                                    break;
                                case "image/gif":
                                    symbol.type = 6 /* GIF */;
                                    break;
                                default:
                                    notImplemented(data.mimeType);
                            }
                            return symbol;
                        };
                        BitmapSymbol.prototype.getSharedInstance = function () {
                            return this.sharedInstance || this.createSharedInstance();
                        };
                        BitmapSymbol.prototype.createSharedInstance = function () {
                            release || assert(this.ready);
                            this.sharedInstance = this.symbolClass.initializeFrom(this);
                            this.symbolClass.instanceConstructorNoInitialize.call(this.sharedInstance);
                            return this.sharedInstance;
                        };
                        Object.defineProperty(BitmapSymbol.prototype, "resolveAssetCallback", {
                            get: function () {
                                return this._unboundResolveAssetCallback.bind(this);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        BitmapSymbol.prototype._unboundResolveAssetCallback = function (data) {
                            release || assert(!this.ready);
                            this.ready = true;
                            if (!data) {
                                release || Shumway.Debug.error("Error while decoding image");
                                return;
                            }
                            release || assert(data.width);
                            release || assert(data.height);
                            this.width = data.width;
                            this.height = data.height;
                        };
                        return BitmapSymbol;
                    })(Shumway.Timeline.DisplaySymbol);
                    display.BitmapSymbol = BitmapSymbol;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var BitmapDataChannel = (function (_super) {
                        __extends(BitmapDataChannel, _super);
                        function BitmapDataChannel() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.BitmapDataChannel");
                        }
                        BitmapDataChannel.classInitializer = null;
                        BitmapDataChannel.initializer = null;
                        BitmapDataChannel.classSymbols = null;
                        BitmapDataChannel.instanceSymbols = null;
                        BitmapDataChannel.RED = 1;
                        BitmapDataChannel.GREEN = 2;
                        BitmapDataChannel.BLUE = 4;
                        BitmapDataChannel.ALPHA = 8;
                        return BitmapDataChannel;
                    })(AS.ASNative);
                    display.BitmapDataChannel = BitmapDataChannel;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var BitmapEncodingColorSpace = (function (_super) {
                        __extends(BitmapEncodingColorSpace, _super);
                        function BitmapEncodingColorSpace() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.BitmapEncodingColorSpace");
                        }
                        BitmapEncodingColorSpace.classInitializer = null;
                        BitmapEncodingColorSpace.initializer = null;
                        BitmapEncodingColorSpace.classSymbols = null;
                        BitmapEncodingColorSpace.instanceSymbols = null;
                        BitmapEncodingColorSpace.COLORSPACE_AUTO = "auto";
                        BitmapEncodingColorSpace.COLORSPACE_4_4_4 = "4:4:4";
                        BitmapEncodingColorSpace.COLORSPACE_4_2_2 = "4:2:2";
                        BitmapEncodingColorSpace.COLORSPACE_4_2_0 = "4:2:0";
                        return BitmapEncodingColorSpace;
                    })(AS.ASNative);
                    display.BitmapEncodingColorSpace = BitmapEncodingColorSpace;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var JPEGEncoderOptions = (function (_super) {
                        __extends(JPEGEncoderOptions, _super);
                        function JPEGEncoderOptions(quality) {
                            if (quality === void 0) { quality = 80; }
                            quality = quality >>> 0;
                            false && _super.call(this);
                            dummyConstructor("public flash.display.JPEGEncoderOptions");
                        }
                        JPEGEncoderOptions.classInitializer = null;
                        JPEGEncoderOptions.initializer = null;
                        JPEGEncoderOptions.classSymbols = null;
                        JPEGEncoderOptions.instanceSymbols = null;
                        return JPEGEncoderOptions;
                    })(AS.ASNative);
                    display.JPEGEncoderOptions = JPEGEncoderOptions;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var assert = Shumway.Debug.assert;
                    var throwError = Shumway.AVM2.Runtime.throwError;
                    var ActionScriptVersion = flash.display.ActionScriptVersion;
                    var AVM2 = Shumway.AVM2.Runtime.AVM2;
                    var events = flash.events;
                    var FileLoader = Shumway.FileLoader;
                    var AbcFile = Shumway.AVM2.ABC.AbcFile;
                    var SWFFile = Shumway.SWF.SWFFile;
                    var LoadStatus;
                    (function (LoadStatus) {
                        LoadStatus[LoadStatus["Unloaded"] = 0] = "Unloaded";
                        LoadStatus[LoadStatus["Opened"] = 1] = "Opened";
                        LoadStatus[LoadStatus["Initialized"] = 2] = "Initialized";
                        LoadStatus[LoadStatus["Complete"] = 3] = "Complete";
                    })(LoadStatus || (LoadStatus = {}));
                    var LoadingType;
                    (function (LoadingType) {
                        LoadingType[LoadingType["External"] = 0] = "External";
                        LoadingType[LoadingType["Bytes"] = 1] = "Bytes";
                    })(LoadingType || (LoadingType = {}));
                    var Loader = (function (_super) {
                        __extends(Loader, _super);
                        function Loader() {
                            false && _super.call(this);
                            display.DisplayObjectContainer.instanceConstructorNoInitialize.call(this);
                            this._content = null;
                            if (Loader._rootLoader) {
                                this._contentID = display.DisplayObject._instanceID++;
                            }
                            else {
                            }
                            this._contentLoaderInfo = new display.LoaderInfo(display.LoaderInfo.CtorToken);
                            this._contentLoaderInfo._loader = this;
                            this._fileLoader = null;
                            this._loadStatus = 0 /* Unloaded */;
                        }
                        Loader.getRootLoader = function () {
                            if (Loader._rootLoader) {
                                return Loader._rootLoader;
                            }
                            var loader = new flash.display.Loader();
                            flash.display.DisplayObject._instanceID--;
                            loader._contentLoaderInfo._loader = null;
                            Loader._rootLoader = loader;
                            return loader;
                        };
                        Loader.reset = function () {
                            Loader._loadQueue.forEach(function (loader) { return loader.unload(); });
                            Loader.classInitializer();
                        };
                        Loader.processEvents = function () {
                            Loader.processEarlyEvents();
                            Loader.processLateEvents();
                        };
                        Loader.processEarlyEvents = function () {
                            var queue = Loader._loadQueue;
                            for (var i = 0; i < queue.length; i++) {
                                var instance = queue[i];
                                release || assert(instance._loadStatus !== 3 /* Complete */);
                                var loaderInfo = instance._contentLoaderInfo;
                                var imageSymbol = instance._imageSymbol;
                                if (loaderInfo._file instanceof Shumway.ImageFile) {
                                    if (!imageSymbol || !imageSymbol.ready || instance._queuedLoadUpdate) {
                                        continue;
                                    }
                                    release || assert(loaderInfo.bytesLoaded === loaderInfo.bytesTotal);
                                    instance._applyDecodedImage(imageSymbol);
                                    release || assert(instance._content);
                                }
                                if (instance._loadStatus === 1 /* Opened */ && instance._content) {
                                    loaderInfo.dispatchEvent(events.Event.getInstance(events.Event.INIT));
                                    instance._loadStatus = 2 /* Initialized */;
                                    if (instance === Loader._rootLoader) {
                                        loaderInfo.dispatchEvent(new events.ProgressEvent(events.ProgressEvent.PROGRESS, false, false, loaderInfo.bytesLoaded, loaderInfo.bytesTotal));
                                    }
                                }
                                if (instance._loadStatus === 2 /* Initialized */ && loaderInfo.bytesLoaded === loaderInfo.bytesTotal) {
                                    queue.splice(i--, 1);
                                    release || assert(queue.indexOf(instance) === -1);
                                    instance._loadStatus = 3 /* Complete */;
                                    loaderInfo.dispatchEvent(events.Event.getInstance(events.Event.COMPLETE));
                                }
                            }
                        };
                        Loader.processLateEvents = function () {
                            var queue = Loader._loadQueue;
                            for (var i = 0; i < queue.length; i++) {
                                var instance = queue[i];
                                release || assert(instance._loadStatus !== 3 /* Complete */);
                                var loaderInfo = instance._contentLoaderInfo;
                                var update = instance._queuedLoadUpdate;
                                var bytesTotal = loaderInfo._bytesTotal;
                                if ((!update || !bytesTotal) && instance._loadStatus !== 1 /* Opened */) {
                                    continue;
                                }
                                instance._queuedLoadUpdate = null;
                                if (instance._loadStatus === 0 /* Unloaded */) {
                                    if (instance._loadingType === 0 /* External */) {
                                        loaderInfo.dispatchEvent(events.Event.getInstance(events.Event.OPEN));
                                    }
                                    loaderInfo.dispatchEvent(new events.ProgressEvent(events.ProgressEvent.PROGRESS, false, false, 0, bytesTotal));
                                    instance._loadStatus = 1 /* Opened */;
                                }
                                if (update) {
                                    instance._applyLoadUpdate(update);
                                    loaderInfo.dispatchEvent(new events.ProgressEvent(events.ProgressEvent.PROGRESS, false, false, update.bytesLoaded, bytesTotal));
                                }
                            }
                        };
                        Loader.prototype._setStage = function (stage) {
                            release || assert(this === Loader.getRootLoader());
                            this._stage = stage;
                        };
                        Loader.prototype._initFrame = function (advance) {
                        };
                        Loader.prototype._constructFrame = function () {
                            if (this === Loader.getRootLoader() && this._content) {
                                display.DisplayObject._advancableInstances.remove(this);
                                this._children[0] = this._content;
                                this._constructChildren();
                                this._children.length = 0;
                                return;
                            }
                            this._constructChildren();
                        };
                        Loader.prototype.addChild = function (child) {
                            throwError('IllegalOperationError', AVM2.Errors.InvalidLoaderMethodError);
                            return null;
                        };
                        Loader.prototype.addChildAt = function (child, index) {
                            throwError('IllegalOperationError', AVM2.Errors.InvalidLoaderMethodError);
                            return null;
                        };
                        Loader.prototype.removeChild = function (child) {
                            throwError('IllegalOperationError', AVM2.Errors.InvalidLoaderMethodError);
                            return null;
                        };
                        Loader.prototype.removeChildAt = function (index) {
                            throwError('IllegalOperationError', AVM2.Errors.InvalidLoaderMethodError);
                            return null;
                        };
                        Loader.prototype.setChildIndex = function (child, index) {
                            throwError('IllegalOperationError', AVM2.Errors.InvalidLoaderMethodError);
                        };
                        Loader.prototype._describeData = function (data) {
                            var keyValueParis = [];
                            for (var k in data) {
                                keyValueParis.push(k + ":" + Shumway.StringUtilities.toSafeString(data[k]));
                            }
                            return "{" + keyValueParis.join(", ") + "}";
                        };
                        Object.defineProperty(Loader.prototype, "content", {
                            get: function () {
                                if (this._loadStatus === 0 /* Unloaded */) {
                                    return null;
                                }
                                return this._content;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Loader.prototype, "contentLoaderInfo", {
                            get: function () {
                                return this._contentLoaderInfo;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Loader.prototype._getJPEGLoaderContextdeblockingfilter = function (context) {
                            if (flash.system.JPEGLoaderContext.isType(context)) {
                                return context.deblockingFilter;
                            }
                            return 0.0;
                        };
                        Object.defineProperty(Loader.prototype, "uncaughtErrorEvents", {
                            get: function () {
                                return this._uncaughtErrorEvents;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Loader.prototype.load = function (request, context) {
                            this.close();
                            this._contentLoaderInfo._url = request.url;
                            this._applyLoaderContext(context);
                            this._loadingType = 0 /* External */;
                            this._fileLoader = new FileLoader(this);
                            if (!release && AS.traceLoaderOption.value) {
                                console.log("Loading url " + request.url);
                            }
                            this._fileLoader.loadFile(request._toFileRequest());
                            this._queuedLoadUpdate = null;
                            release || assert(Loader._loadQueue.indexOf(this) === -1);
                            Loader._loadQueue.push(this);
                        };
                        Loader.prototype.loadBytes = function (data, context) {
                            this.close();
                            this._contentLoaderInfo._url = (this.loaderInfo ? this.loaderInfo._url : '') + '/[[DYNAMIC]]/' + (++Loader._embeddedContentLoadCount);
                            this._applyLoaderContext(context);
                            this._loadingType = 1 /* Bytes */;
                            this._fileLoader = new FileLoader(this);
                            this._queuedLoadUpdate = null;
                            if (!release && AS.traceLoaderOption.value) {
                                console.log("Loading embedded symbol " + this._contentLoaderInfo._url);
                            }
                            this._fileLoader.loadBytes(new Uint8Array(data.bytes, 0, data.length));
                            release || assert(Loader._loadQueue.indexOf(this) === -1);
                            Loader._loadQueue.push(this);
                        };
                        Loader.prototype.close = function () {
                            var queueIndex = Loader._loadQueue.indexOf(this);
                            if (queueIndex > -1) {
                                Loader._loadQueue.splice(queueIndex, 1);
                            }
                            this._contentLoaderInfo.reset();
                            if (!this._fileLoader) {
                                return;
                            }
                            this._fileLoader.abortLoad();
                            this._fileLoader = null;
                        };
                        Loader.prototype._unload = function (stopExecution, gc) {
                            if (this._loadStatus < 2 /* Initialized */) {
                                this._loadStatus = 0 /* Unloaded */;
                                return;
                            }
                            this.close();
                            this._content = null;
                            this._contentLoaderInfo._loader = null;
                            this._loadStatus = 0 /* Unloaded */;
                            this.dispatchEvent(events.Event.getInstance(events.Event.UNLOAD));
                        };
                        Loader.prototype.unload = function () {
                            this._unload(false, false);
                        };
                        Loader.prototype.unloadAndStop = function (gc) {
                            this._unload(true, !!gc);
                        };
                        Loader.prototype._applyLoaderContext = function (context) {
                            var parameters = {};
                            if (context && context.parameters) {
                                var contextParameters = context.parameters;
                                for (var key in contextParameters) {
                                    var value = contextParameters[key];
                                    if (!Shumway.isString(value)) {
                                        throwError('IllegalOperationError', AVM2.Errors.ObjectWithStringsParamError, 'LoaderContext.parameters');
                                    }
                                    parameters[key] = value;
                                }
                            }
                            if (context && context.applicationDomain) {
                                var domain = new flash.system.ApplicationDomain(flash.system.ApplicationDomain.currentDomain);
                                this._contentLoaderInfo._applicationDomain = domain;
                            }
                            this._contentLoaderInfo._parameters = parameters;
                        };
                        Loader.prototype.onLoadOpen = function (file) {
                            this._contentLoaderInfo.setFile(file);
                        };
                        Loader.prototype.onLoadProgress = function (update) {
                            release || assert(update);
                            this._queuedLoadUpdate = update;
                        };
                        Loader.prototype.onNewEagerlyParsedSymbols = function (dictionaryEntries, delta) {
                            var promises = [];
                            for (var i = dictionaryEntries.length - delta; i < dictionaryEntries.length; i++) {
                                var dictionaryEntry = dictionaryEntries[i];
                                var symbol = this._contentLoaderInfo.getSymbolById(dictionaryEntry.id);
                                if (symbol.ready) {
                                    continue;
                                }
                                release || assert(symbol.resolveAssetPromise);
                                release || assert(symbol.ready === false);
                                promises.push(symbol.resolveAssetPromise.promise);
                            }
                            return Promise.all(promises);
                        };
                        Loader.prototype.onImageBytesLoaded = function () {
                            var file = this._contentLoaderInfo._file;
                            release || assert(file instanceof Shumway.ImageFile);
                            var data = {
                                id: -1,
                                data: file.data,
                                mimeType: file.mimeType,
                                dataType: file.type,
                                type: 'image'
                            };
                            var symbol = display.BitmapSymbol.FromData(data);
                            this._imageSymbol = symbol;
                            var resolver = AVM2.instance.globals['Shumway.Player.Utils'];
                            resolver.registerFontOrImage(symbol, data);
                            release || assert(symbol.resolveAssetPromise);
                            release || assert(symbol.ready === false);
                        };
                        Loader.prototype._applyDecodedImage = function (symbol) {
                            var bitmapData = symbol.createSharedInstance();
                            this._content = new flash.display.Bitmap(bitmapData);
                            this._contentLoaderInfo._width = this._content.width * 20;
                            this._contentLoaderInfo._height = this._content.height * 20;
                            this.addTimelineObjectAtDepth(this._content, 0);
                        };
                        Loader.prototype._applyLoadUpdate = function (update) {
                            var loaderInfo = this._contentLoaderInfo;
                            loaderInfo._bytesLoaded = update.bytesLoaded;
                            var file = loaderInfo._file;
                            if (!(file instanceof SWFFile)) {
                                return;
                            }
                            if (file.framesLoaded === 0) {
                                return;
                            }
                            if (loaderInfo._allowCodeExecution) {
                                var appDomain = AVM2.instance.applicationDomain;
                                var abcBlocksLoaded = file.abcBlocks.length;
                                var abcBlocksLoadedDelta = abcBlocksLoaded - loaderInfo._abcBlocksLoaded;
                                if (abcBlocksLoadedDelta > 0) {
                                    for (var i = loaderInfo._abcBlocksLoaded; i < abcBlocksLoaded; i++) {
                                        var abcBlock = file.abcBlocks[i];
                                        var abc = new AbcFile(abcBlock.data, abcBlock.name);
                                        if (abcBlock.flags) {
                                            appDomain.loadAbc(abc);
                                        }
                                        else {
                                            appDomain.executeAbc(abc);
                                        }
                                    }
                                    loaderInfo._abcBlocksLoaded = abcBlocksLoaded;
                                }
                                var mappedSymbolsLoaded = file.symbolClassesList.length;
                                var mappedSymbolsLoadedDelta = mappedSymbolsLoaded - loaderInfo._mappedSymbolsLoaded;
                                if (mappedSymbolsLoadedDelta > 0) {
                                    for (var i = loaderInfo._mappedSymbolsLoaded; i < mappedSymbolsLoaded; i++) {
                                        var symbolMapping = file.symbolClassesList[i];
                                        var symbolClass = appDomain.getClass(symbolMapping.className);
                                        Object.defineProperty(symbolClass, "defaultInitializerArgument", { get: loaderInfo.getSymbolResolver(symbolClass, symbolMapping.id), configurable: true });
                                    }
                                    loaderInfo._mappedSymbolsLoaded = mappedSymbolsLoaded;
                                }
                            }
                            if (inFirefox) {
                                var fontsLoaded = file.fonts.length;
                                var fontsLoadedDelta = fontsLoaded - loaderInfo._fontsLoaded;
                                if (fontsLoadedDelta > 0) {
                                    for (var i = loaderInfo._fontsLoaded; i < fontsLoaded; i++) {
                                        flash.text.Font.registerEmbeddedFont(file.fonts[i], loaderInfo);
                                    }
                                    loaderInfo._fontsLoaded = fontsLoaded;
                                }
                            }
                            var rootSymbol = loaderInfo.getRootSymbol();
                            var framesLoadedDelta = file.framesLoaded - rootSymbol.frames.length;
                            if (framesLoadedDelta === 0) {
                                return;
                            }
                            var root = this._content;
                            if (!root) {
                                root = this.createContentRoot(rootSymbol, file.sceneAndFrameLabelData);
                            }
                            var rootSprite = root;
                            for (var i = 0; i < framesLoadedDelta; i++) {
                                var frameInfo = loaderInfo.getFrame(null, rootSymbol.frames.length);
                                rootSprite._addFrame(frameInfo);
                            }
                        };
                        Loader.prototype.onLoadComplete = function () {
                        };
                        Loader.prototype.onLoadError = function () {
                            release || Shumway.Debug.warning('Not implemented: flash.display.Loader loading-error handling');
                        };
                        Loader.prototype.createContentRoot = function (symbol, sceneData) {
                            if (symbol.isAVM1Object) {
                                this._initAvm1(symbol);
                            }
                            var root = symbol.symbolClass.initializeFrom(symbol);
                            flash.display.DisplayObject._instanceID--;
                            if (this === Loader._rootLoader) {
                                root._name = 'root1';
                            }
                            else {
                                root._name = 'instance' + this._contentID;
                            }
                            if (display.MovieClip.isType(root)) {
                                var mc = root;
                                if (sceneData) {
                                    var scenes = sceneData.scenes;
                                    for (var i = 0, n = scenes.length; i < n; i++) {
                                        var sceneInfo = scenes[i];
                                        var offset = sceneInfo.offset;
                                        var endFrame = i < n - 1 ? scenes[i + 1].offset : symbol.numFrames;
                                        mc.addScene(sceneInfo.name, [], offset, endFrame - offset);
                                    }
                                    var labels = sceneData.labels;
                                    for (var i = 0; i < labels.length; i++) {
                                        var labelInfo = labels[i];
                                        mc.addFrameLabel(labelInfo.name, labelInfo.frame + 1);
                                    }
                                }
                                else {
                                    mc.addScene('Scene 1', [], 0, symbol.numFrames);
                                }
                            }
                            var loaderInfo = this._contentLoaderInfo;
                            root._loaderInfo = loaderInfo;
                            var rootTimeline = root;
                            if (loaderInfo.actionScriptVersion === ActionScriptVersion.ACTIONSCRIPT2) {
                                root = this._initAvm1Root(root);
                            }
                            else if (this === Loader.getRootLoader()) {
                                display.MovieClip.frameNavigationModel = loaderInfo.swfVersion < 10 ? 9 /* SWF9 */ : 10 /* SWF10 */;
                            }
                            this._content = root;
                            if (this === Loader.getRootLoader()) {
                                Loader.runtimeStartTime = Date.now();
                                this._stage.setRoot(root);
                            }
                            else {
                                this.addTimelineObjectAtDepth(root, 0);
                            }
                            return rootTimeline;
                        };
                        Loader.prototype._initAvm1 = function (symbol) {
                            var contentLoaderInfo = this._contentLoaderInfo;
                            var context;
                            if (this.loaderInfo && this.loaderInfo._avm1Context) {
                                context = contentLoaderInfo._avm1Context = this.loaderInfo._avm1Context;
                            }
                            else {
                                Shumway.AVM1.Lib.installObjectMethods();
                                context = Shumway.AVM1.AVM1Context.create(contentLoaderInfo);
                                contentLoaderInfo._avm1Context = context;
                                if (this === Loader.getRootLoader()) {
                                    context.globals.Key._bind(this._stage, context);
                                    context.globals.Mouse._bind(this._stage, context);
                                    display.MovieClip.frameNavigationModel = 1 /* SWF1 */;
                                }
                            }
                            symbol.avm1Context = context;
                        };
                        Loader.prototype._initAvm1Root = function (root) {
                            var avm1Context = this._contentLoaderInfo._avm1Context;
                            var as2Object = Shumway.AVM1.Lib.getAVM1Object(root, avm1Context);
                            if (this.loaderInfo && this.loaderInfo._avm1Context) {
                                as2Object.context = this.loaderInfo._avm1Context;
                                return root;
                            }
                            avm1Context.root = as2Object;
                            root.addEventListener('frameConstructed', avm1Context.flushPendingScripts.bind(avm1Context), false, Number.MAX_VALUE);
                            var avm1Movie = new flash.display.AVM1Movie(root);
                            var parameters = this._contentLoaderInfo._parameters;
                            for (var paramName in parameters) {
                                if (!(paramName in as2Object)) {
                                    as2Object[paramName] = parameters[paramName];
                                }
                            }
                            return avm1Movie;
                        };
                        Loader.classInitializer = function () {
                            Loader._rootLoader = null;
                            Loader._loadQueue = [];
                            Loader.runtimeStartTime = 0;
                            Loader._embeddedContentLoadCount = 0;
                        };
                        Loader.initializer = function () {
                            var self = this;
                            display.DisplayObject._advancableInstances.push(self);
                        };
                        Loader.classSymbols = null;
                        Loader.instanceSymbols = null;
                        return Loader;
                    })(flash.display.DisplayObjectContainer);
                    display.Loader = Loader;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var assert = Shumway.Debug.assert;
                    var notImplemented = Shumway.Debug.notImplemented;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var SWFFile = Shumway.SWF.SWFFile;
                    var LoaderInfo = (function (_super) {
                        __extends(LoaderInfo, _super);
                        function LoaderInfo(token) {
                            false && _super.call(this);
                            if (token !== LoaderInfo.CtorToken) {
                                throwError('ArgumentError', AVM2.Errors.CantInstantiateError, 'LoaderInfo$');
                            }
                            flash.events.EventDispatcher.instanceConstructorNoInitialize.call(this);
                            this._loader = null;
                            this.reset();
                        }
                        LoaderInfo.prototype.reset = function () {
                            this._url = '';
                            this._file = null;
                            this._bytesLoaded = 0;
                            this._bytesTotal = 0;
                            this._applicationDomain = null;
                            this._parameters = null;
                            this._width = 0;
                            this._height = 0;
                            this._sharedEvents = null;
                            this._parentSandboxBridge = null;
                            this._childSandboxBridge = null;
                            this._content = null;
                            this._bytes = null;
                            this._uncaughtErrorEvents = null;
                            this._allowCodeExecution = true;
                            this._dictionary = [];
                            this._abcBlocksLoaded = 0;
                            this._mappedSymbolsLoaded = 0;
                            this._fontsLoaded = 0;
                            this._avm1Context = null;
                        };
                        LoaderInfo.prototype.setFile = function (file) {
                            release || assert(!this._file);
                            this._file = file;
                            this._bytesTotal = file.bytesTotal;
                            if (file instanceof SWFFile) {
                                var bbox = file.bounds;
                                this._width = bbox.xMax - bbox.xMin;
                                this._height = bbox.yMax - bbox.yMin;
                            }
                            else {
                                release || assert(file instanceof Shumway.ImageFile);
                            }
                        };
                        LoaderInfo.getLoaderInfoByDefinition = function (object) {
                            object = object;
                            notImplemented("public flash.display.LoaderInfo::static getLoaderInfoByDefinition");
                            return;
                        };
                        Object.defineProperty(LoaderInfo.prototype, "loaderURL", {
                            get: function () {
                                return this._loader.loaderInfo.url;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "url", {
                            get: function () {
                                if (!this._file) {
                                    return null;
                                }
                                return this._url;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "isURLInaccessible", {
                            get: function () {
                                somewhatImplemented("public flash.display.LoaderInfo::get isURLInaccessible");
                                return this._file ? false : true;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "bytesLoaded", {
                            get: function () {
                                return this._bytesLoaded;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "bytesTotal", {
                            get: function () {
                                return this._bytesTotal;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "applicationDomain", {
                            get: function () {
                                somewhatImplemented("public flash.display.LoaderInfo::get applicationDomain");
                                return this._file ? flash.system.ApplicationDomain.currentDomain : null;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "swfVersion", {
                            get: function () {
                                if (!this._file) {
                                    throwError('Error', AVM2.Errors.LoadingObjectNotInitializedError);
                                }
                                if (!(this._file instanceof SWFFile)) {
                                    throwError('Error', AVM2.Errors.LoadingObjectNotSWFError);
                                }
                                return this._file.swfVersion;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "actionScriptVersion", {
                            get: function () {
                                if (!this._file) {
                                    throwError('Error', AVM2.Errors.LoadingObjectNotInitializedError);
                                }
                                if (!(this._file instanceof SWFFile)) {
                                    throwError('Error', AVM2.Errors.LoadingObjectNotSWFError);
                                }
                                return this._file.useAVM1 ? display.ActionScriptVersion.ACTIONSCRIPT2 : display.ActionScriptVersion.ACTIONSCRIPT3;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "frameRate", {
                            get: function () {
                                if (!this._file) {
                                    throwError('Error', AVM2.Errors.LoadingObjectNotInitializedError);
                                }
                                if (!(this._file instanceof SWFFile)) {
                                    throwError('Error', AVM2.Errors.LoadingObjectNotSWFError);
                                }
                                return this._file.frameRate;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "width", {
                            get: function () {
                                if (!this._file) {
                                    throwError('Error', AVM2.Errors.LoadingObjectNotInitializedError);
                                }
                                return (this._width / 20) | 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "height", {
                            get: function () {
                                if (!this._file) {
                                    throwError('Error', AVM2.Errors.LoadingObjectNotInitializedError);
                                }
                                return (this._height / 20) | 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "contentType", {
                            get: function () {
                                if (!this._file) {
                                    return null;
                                }
                                return this._file instanceof Shumway.ImageFile ? this._file.mimeType : 'application/x-shockwave-flash';
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "sharedEvents", {
                            get: function () {
                                somewhatImplemented("public flash.display.LoaderInfo::get sharedEvents");
                                if (!this._sharedEvents) {
                                    this._sharedEvents = new flash.events.EventDispatcher();
                                }
                                return this._sharedEvents;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "parentSandboxBridge", {
                            get: function () {
                                somewhatImplemented("public flash.display.LoaderInfo::get parentSandboxBridge");
                                return this._parentSandboxBridge;
                            },
                            set: function (door) {
                                somewhatImplemented("public flash.display.LoaderInfo::set parentSandboxBridge");
                                this._parentSandboxBridge = door;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "childSandboxBridge", {
                            get: function () {
                                somewhatImplemented("public flash.display.LoaderInfo::get childSandboxBridge");
                                return this._childSandboxBridge;
                            },
                            set: function (door) {
                                somewhatImplemented("public flash.display.LoaderInfo::set childSandboxBridge");
                                this._childSandboxBridge = door;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "sameDomain", {
                            get: function () {
                                if (!this._file) {
                                    throwError('Error', AVM2.Errors.LoadingObjectNotInitializedError);
                                }
                                somewhatImplemented("public flash.display.LoaderInfo::get sameDomain");
                                return true;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "childAllowsParent", {
                            get: function () {
                                if (!this._file) {
                                    throwError('Error', AVM2.Errors.LoadingObjectNotInitializedError);
                                }
                                somewhatImplemented("public flash.display.LoaderInfo::get childAllowsParent");
                                return true;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "parentAllowsChild", {
                            get: function () {
                                if (!this._file) {
                                    throwError('Error', AVM2.Errors.LoadingObjectNotInitializedError);
                                }
                                somewhatImplemented("public flash.display.LoaderInfo::get parentAllowsChild");
                                return true;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "loader", {
                            get: function () {
                                return this._loader;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "content", {
                            get: function () {
                                return this._loader && this._loader.content;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "bytes", {
                            get: function () {
                                if (!this._file) {
                                    return new flash.utils.ByteArray();
                                }
                                notImplemented("public flash.display.LoaderInfo::get bytes");
                                return null;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "parameters", {
                            get: function () {
                                somewhatImplemented("public flash.display.LoaderInfo::get parameters");
                                if (this._parameters) {
                                    return Shumway.ObjectUtilities.cloneObject(this._parameters);
                                }
                                return {};
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LoaderInfo.prototype, "uncaughtErrorEvents", {
                            get: function () {
                                somewhatImplemented("public flash.display.LoaderInfo::_getUncaughtErrorEvents");
                                if (!this._uncaughtErrorEvents) {
                                    this._uncaughtErrorEvents = new flash.events.UncaughtErrorEvents();
                                }
                                return this._uncaughtErrorEvents;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        LoaderInfo.prototype.getSymbolResolver = function (classDefinition, symbolId) {
                            return this.resolveClassSymbol.bind(this, classDefinition, symbolId);
                        };
                        LoaderInfo.prototype.getSymbolById = function (id) {
                            var symbol = this._dictionary[id];
                            if (symbol) {
                                if (symbol.ready === false) {
                                    release || Shumway.Debug.warning("Accessing symbol that's not yet ready.");
                                    return null;
                                }
                                return symbol;
                            }
                            release || assert(this._file instanceof SWFFile);
                            var data = this._file.getSymbol(id);
                            if (!data) {
                                if (id !== 65535) {
                                    Shumway.Debug.warning("Unknown symbol requested: " + id);
                                }
                                return null;
                            }
                            switch (data.type) {
                                case 'shape':
                                    symbol = flash.display.ShapeSymbol.FromData(data, this);
                                    break;
                                case 'morphshape':
                                    symbol = flash.display.MorphShapeSymbol.FromData(data, this);
                                    break;
                                case 'image':
                                    if (data.definition) {
                                        data = data.definition;
                                    }
                                    symbol = flash.display.BitmapSymbol.FromData(data);
                                    break;
                                case 'label':
                                    symbol = flash.text.TextSymbol.FromLabelData(data, this);
                                    break;
                                case 'text':
                                    symbol = flash.text.TextSymbol.FromTextData(data, this);
                                    this._syncAVM1Attributes(symbol);
                                    break;
                                case 'button':
                                    symbol = flash.display.ButtonSymbol.FromData(data, this);
                                    this._syncAVM1Attributes(symbol);
                                    break;
                                case 'sprite':
                                    symbol = flash.display.SpriteSymbol.FromData(data, this);
                                    break;
                                case 'font':
                                    if (data.definition) {
                                        data = data.definition;
                                    }
                                    symbol = flash.text.FontSymbol.FromData(data);
                                    var font = flash.text.Font.initializeFrom(symbol);
                                    flash.text.Font.instanceConstructorNoInitialize.call(font);
                                    break;
                                case 'sound':
                                    symbol = flash.media.SoundSymbol.FromData(data);
                                    break;
                                case 'binary':
                                    symbol = Shumway.Timeline.BinarySymbol.FromData(data);
                                    break;
                            }
                            release || assert(symbol, "Unknown symbol type " + data.type);
                            this._dictionary[id] = symbol;
                            if (symbol.ready === false) {
                                var resolver = AVM2.Runtime.AVM2.instance.globals['Shumway.Player.Utils'];
                                resolver.registerFontOrImage(symbol, data);
                            }
                            return symbol;
                        };
                        LoaderInfo.prototype.getRootSymbol = function () {
                            release || assert(this._file instanceof SWFFile);
                            release || assert(this._file.framesLoaded > 0);
                            var symbol = this._dictionary[0];
                            if (!symbol) {
                                symbol = new flash.display.SpriteSymbol({ id: 0, className: this._file.symbolClassesMap[0] }, this);
                                symbol.isRoot = true;
                                symbol.numFrames = this._file.frameCount;
                                this._syncAVM1Attributes(symbol);
                                this._dictionary[0] = symbol;
                            }
                            return symbol;
                        };
                        LoaderInfo.prototype._syncAVM1Attributes = function (symbol) {
                            if (this.actionScriptVersion === display.ActionScriptVersion.ACTIONSCRIPT2) {
                                symbol.isAVM1Object = true;
                                symbol.avm1Context = this._avm1Context;
                            }
                        };
                        LoaderInfo.prototype.getFrame = function (sprite, index) {
                            var file = this._file;
                            release || assert(file instanceof SWFFile);
                            if (!sprite) {
                                sprite = file;
                            }
                            return sprite.frames[index];
                        };
                        LoaderInfo.prototype.resolveClassSymbol = function (classDefinition, symbolId) {
                            var symbol = this.getSymbolById(symbolId);
                            if (!symbol) {
                                Shumway.Debug.warning("Attempt to resolve symbol for AVM2 class failed: Symbol " + symbolId + " not found.");
                            }
                            else {
                                Object.defineProperty(classDefinition, "defaultInitializerArgument", { value: symbol });
                                return symbol;
                            }
                        };
                        LoaderInfo.classInitializer = null;
                        LoaderInfo.initializer = null;
                        LoaderInfo.classSymbols = null;
                        LoaderInfo.instanceSymbols = null;
                        LoaderInfo.CtorToken = {};
                        return LoaderInfo;
                    })(flash.events.EventDispatcher);
                    display.LoaderInfo = LoaderInfo;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var MorphShape = (function (_super) {
                        __extends(MorphShape, _super);
                        function MorphShape() {
                            false && _super.call(this);
                            display.DisplayObject.instanceConstructorNoInitialize.call(this);
                        }
                        MorphShape.prototype._canHaveGraphics = function () {
                            return true;
                        };
                        MorphShape.prototype._getGraphics = function () {
                            return this._graphics;
                        };
                        Object.defineProperty(MorphShape.prototype, "graphics", {
                            get: function () {
                                return this._ensureGraphics();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        MorphShape.prototype._containsPointDirectly = function (localX, localY, globalX, globalY) {
                            var graphics = this._getGraphics();
                            return graphics && graphics._containsPoint(localX, localY, true, this._ratio / 0xffff);
                        };
                        MorphShape.classSymbols = null;
                        MorphShape.instanceSymbols = null;
                        MorphShape.classInitializer = null;
                        MorphShape.initializer = function (symbol) {
                            var self = this;
                            self._graphics = null;
                            if (symbol) {
                                this._setStaticContentFromSymbol(symbol);
                            }
                            this._setFlags(32768 /* ContainsMorph */);
                        };
                        return MorphShape;
                    })(flash.display.DisplayObject);
                    display.MorphShape = MorphShape;
                    var MorphShapeSymbol = (function (_super) {
                        __extends(MorphShapeSymbol, _super);
                        function MorphShapeSymbol(data) {
                            _super.call(this, data, flash.display.MorphShape);
                        }
                        MorphShapeSymbol.FromData = function (data, loaderInfo) {
                            var symbol = new MorphShapeSymbol(data);
                            symbol._setBoundsFromData(data);
                            symbol.graphics = flash.display.Graphics.FromData(data);
                            symbol.processRequires(data.require, loaderInfo);
                            symbol.morphFillBounds = data.morphFillBounds;
                            symbol.morphLineBounds = data.morphLineBounds;
                            return symbol;
                        };
                        return MorphShapeSymbol;
                    })(flash.display.ShapeSymbol);
                    display.MorphShapeSymbol = MorphShapeSymbol;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var NativeMenu = (function (_super) {
                        __extends(NativeMenu, _super);
                        function NativeMenu() {
                            false && _super.call(this, undefined);
                            flash.events.EventDispatcher.instanceConstructorNoInitialize.call(this);
                        }
                        NativeMenu.classInitializer = null;
                        NativeMenu.initializer = null;
                        NativeMenu.classSymbols = null;
                        NativeMenu.instanceSymbols = null;
                        return NativeMenu;
                    })(flash.events.EventDispatcher);
                    display.NativeMenu = NativeMenu;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var NativeMenuItem = (function (_super) {
                        __extends(NativeMenuItem, _super);
                        function NativeMenuItem() {
                            false && _super.call(this, undefined);
                            flash.events.EventDispatcher.instanceConstructorNoInitialize.call(this);
                            this._enabled = true;
                        }
                        Object.defineProperty(NativeMenuItem.prototype, "enabled", {
                            get: function () {
                                somewhatImplemented("public flash.display.NativeMenuItem::get enabled");
                                return this._enabled;
                            },
                            set: function (isSeparator) {
                                isSeparator = !!isSeparator;
                                somewhatImplemented("public flash.display.NativeMenuItem::set enabled");
                                this._enabled = isSeparator;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        NativeMenuItem.classInitializer = null;
                        NativeMenuItem.initializer = null;
                        NativeMenuItem.classSymbols = null;
                        NativeMenuItem.instanceSymbols = null;
                        return NativeMenuItem;
                    })(flash.events.EventDispatcher);
                    display.NativeMenuItem = NativeMenuItem;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var PNGEncoderOptions = (function (_super) {
                        __extends(PNGEncoderOptions, _super);
                        function PNGEncoderOptions(fastCompression) {
                            if (fastCompression === void 0) { fastCompression = false; }
                            fastCompression = !!fastCompression;
                            false && _super.call(this);
                            dummyConstructor("public flash.display.PNGEncoderOptions");
                        }
                        PNGEncoderOptions.classInitializer = null;
                        PNGEncoderOptions.initializer = null;
                        PNGEncoderOptions.classSymbols = null;
                        PNGEncoderOptions.instanceSymbols = null;
                        return PNGEncoderOptions;
                    })(AS.ASNative);
                    display.PNGEncoderOptions = PNGEncoderOptions;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var PixelSnapping = (function (_super) {
                        __extends(PixelSnapping, _super);
                        function PixelSnapping() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.PixelSnapping");
                        }
                        PixelSnapping.fromNumber = function (n) {
                            switch (n) {
                                case 0:
                                    return PixelSnapping.NEVER;
                                case 1:
                                    return PixelSnapping.ALWAYS;
                                case 2:
                                    return PixelSnapping.AUTO;
                                default:
                                    return null;
                            }
                        };
                        PixelSnapping.toNumber = function (value) {
                            switch (value) {
                                case PixelSnapping.NEVER:
                                    return 0;
                                case PixelSnapping.ALWAYS:
                                    return 1;
                                case PixelSnapping.AUTO:
                                    return 2;
                                default:
                                    return -1;
                            }
                        };
                        PixelSnapping.classInitializer = null;
                        PixelSnapping.initializer = null;
                        PixelSnapping.classSymbols = null;
                        PixelSnapping.instanceSymbols = null;
                        PixelSnapping.NEVER = "never";
                        PixelSnapping.ALWAYS = "always";
                        PixelSnapping.AUTO = "auto";
                        return PixelSnapping;
                    })(AS.ASNative);
                    display.PixelSnapping = PixelSnapping;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var SWFVersion = (function (_super) {
                        __extends(SWFVersion, _super);
                        function SWFVersion() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.SWFVersion");
                        }
                        SWFVersion.classInitializer = null;
                        SWFVersion.initializer = null;
                        SWFVersion.classSymbols = null;
                        SWFVersion.instanceSymbols = null;
                        SWFVersion.FLASH1 = 1;
                        SWFVersion.FLASH2 = 2;
                        SWFVersion.FLASH3 = 3;
                        SWFVersion.FLASH4 = 4;
                        SWFVersion.FLASH5 = 5;
                        SWFVersion.FLASH6 = 6;
                        SWFVersion.FLASH7 = 7;
                        SWFVersion.FLASH8 = 8;
                        SWFVersion.FLASH9 = 9;
                        SWFVersion.FLASH10 = 10;
                        SWFVersion.FLASH11 = 11;
                        SWFVersion.FLASH12 = 12;
                        return SWFVersion;
                    })(AS.ASNative);
                    display.SWFVersion = SWFVersion;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var Scene = (function (_super) {
                        __extends(Scene, _super);
                        function Scene(name, labels, offset, numFrames) {
                            false && _super.call(this);
                            this._name = asCoerceString(name);
                            this._labels = labels;
                            this.offset = offset;
                            this._numFrames = numFrames | 0;
                        }
                        Object.defineProperty(Scene.prototype, "name", {
                            get: function () {
                                return this._name;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Scene.prototype, "labels", {
                            get: function () {
                                return this._labels;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Scene.prototype, "numFrames", {
                            get: function () {
                                return this._numFrames;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Scene.prototype.clone = function () {
                            var labels = this._labels.map(function (label) {
                                return label.clone();
                            });
                            return new Scene(this._name, labels, this.offset, this._numFrames);
                        };
                        Scene.prototype.getLabelByName = function (name, ignoreCase) {
                            if (ignoreCase) {
                                name = name.toLowerCase();
                            }
                            var labels = this._labels;
                            for (var i = 0; i < labels.length; i++) {
                                var label = labels[i];
                                if (ignoreCase ? label.name.toLowerCase() === name : label.name === name) {
                                    return label;
                                }
                            }
                            return null;
                        };
                        Scene.prototype.getLabelByFrame = function (frame) {
                            var labels = this._labels;
                            for (var i = 0; i < labels.length; i++) {
                                var label = labels[i];
                                if (label.frame === frame) {
                                    return label;
                                }
                            }
                            return null;
                        };
                        Scene.classInitializer = null;
                        Scene.initializer = null;
                        Scene.classSymbols = null;
                        Scene.instanceSymbols = null;
                        return Scene;
                    })(AS.ASNative);
                    display.Scene = Scene;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var StageAlignFlags = Shumway.Remoting.StageAlignFlags;
                    var StageAlign = (function (_super) {
                        __extends(StageAlign, _super);
                        function StageAlign() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.StageAlign");
                        }
                        StageAlign.fromNumber = function (n) {
                            if (n === 0) {
                                return "";
                            }
                            var s = "";
                            if (n & 1 /* Top */) {
                                s += "T";
                            }
                            if (n & 2 /* Bottom */) {
                                s += "B";
                            }
                            if (n & 4 /* Left */) {
                                s += "L";
                            }
                            if (n & 8 /* Right */) {
                                s += "R";
                            }
                            return s;
                        };
                        StageAlign.toNumber = function (value) {
                            var n = 0;
                            value = value.toUpperCase();
                            if (value.indexOf("T") >= 0) {
                                n |= 1 /* Top */;
                            }
                            if (value.indexOf("B") >= 0) {
                                n |= 2 /* Bottom */;
                            }
                            if (value.indexOf("L") >= 0) {
                                n |= 4 /* Left */;
                            }
                            if (value.indexOf("R") >= 0) {
                                n |= 8 /* Right */;
                            }
                            return n;
                        };
                        StageAlign.classInitializer = null;
                        StageAlign.initializer = null;
                        StageAlign.classSymbols = null;
                        StageAlign.instanceSymbols = null;
                        StageAlign.TOP = "T";
                        StageAlign.LEFT = "L";
                        StageAlign.BOTTOM = "B";
                        StageAlign.RIGHT = "R";
                        StageAlign.TOP_LEFT = "TL";
                        StageAlign.TOP_RIGHT = "TR";
                        StageAlign.BOTTOM_LEFT = "BL";
                        StageAlign.BOTTOM_RIGHT = "BR";
                        return StageAlign;
                    })(AS.ASNative);
                    display.StageAlign = StageAlign;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var StageDisplayState = (function (_super) {
                        __extends(StageDisplayState, _super);
                        function StageDisplayState() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.StageDisplayState");
                        }
                        StageDisplayState.fromNumber = function (n) {
                            switch (n) {
                                case 0:
                                    return StageDisplayState.FULL_SCREEN;
                                case 1:
                                    return StageDisplayState.FULL_SCREEN_INTERACTIVE;
                                case 2:
                                    return StageDisplayState.NORMAL;
                                default:
                                    return null;
                            }
                        };
                        StageDisplayState.toNumber = function (value) {
                            switch (value) {
                                case StageDisplayState.FULL_SCREEN:
                                    return 0;
                                case StageDisplayState.FULL_SCREEN_INTERACTIVE:
                                    return 1;
                                case StageDisplayState.NORMAL:
                                    return 2;
                                default:
                                    return -1;
                            }
                        };
                        StageDisplayState.classInitializer = null;
                        StageDisplayState.initializer = null;
                        StageDisplayState.classSymbols = null;
                        StageDisplayState.instanceSymbols = null;
                        StageDisplayState.FULL_SCREEN = "fullScreen";
                        StageDisplayState.FULL_SCREEN_INTERACTIVE = "fullScreenInteractive";
                        StageDisplayState.NORMAL = "normal";
                        return StageDisplayState;
                    })(AS.ASNative);
                    display.StageDisplayState = StageDisplayState;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var StageQuality = (function (_super) {
                        __extends(StageQuality, _super);
                        function StageQuality() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.StageQuality");
                        }
                        StageQuality.fromNumber = function (n) {
                            switch (n) {
                                case 0:
                                    return StageQuality.LOW;
                                case 1:
                                    return StageQuality.MEDIUM;
                                case 2:
                                    return StageQuality.HIGH;
                                case 3:
                                    return StageQuality.BEST;
                                case 4:
                                    return StageQuality.HIGH_8X8;
                                case 5:
                                    return StageQuality.HIGH_8X8_LINEAR;
                                case 6:
                                    return StageQuality.HIGH_16X16;
                                case 7:
                                    return StageQuality.HIGH_16X16_LINEAR;
                                default:
                                    return null;
                            }
                        };
                        StageQuality.toNumber = function (value) {
                            switch (value) {
                                case StageQuality.LOW:
                                    return 0;
                                case StageQuality.MEDIUM:
                                    return 1;
                                case StageQuality.HIGH:
                                    return 2;
                                case StageQuality.BEST:
                                    return 3;
                                case StageQuality.HIGH_8X8:
                                    return 4;
                                case StageQuality.HIGH_8X8_LINEAR:
                                    return 5;
                                case StageQuality.HIGH_16X16:
                                    return 6;
                                case StageQuality.HIGH_16X16_LINEAR:
                                    return 7;
                                default:
                                    return -1;
                            }
                        };
                        StageQuality.classInitializer = null;
                        StageQuality.initializer = null;
                        StageQuality.classSymbols = null;
                        StageQuality.instanceSymbols = null;
                        StageQuality.LOW = "low";
                        StageQuality.MEDIUM = "medium";
                        StageQuality.HIGH = "high";
                        StageQuality.BEST = "best";
                        StageQuality.HIGH_8X8 = "8x8";
                        StageQuality.HIGH_8X8_LINEAR = "8x8linear";
                        StageQuality.HIGH_16X16 = "16x16";
                        StageQuality.HIGH_16X16_LINEAR = "16x16linear";
                        return StageQuality;
                    })(AS.ASNative);
                    display.StageQuality = StageQuality;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var StageScaleMode = (function (_super) {
                        __extends(StageScaleMode, _super);
                        function StageScaleMode() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.StageScaleMode");
                        }
                        StageScaleMode.fromNumber = function (n) {
                            switch (n) {
                                case 0 /* ShowAll */:
                                    return StageScaleMode.SHOW_ALL;
                                case 1 /* ExactFit */:
                                    return StageScaleMode.EXACT_FIT;
                                case 2 /* NoBorder */:
                                    return StageScaleMode.NO_BORDER;
                                case 4 /* NoScale */:
                                    return StageScaleMode.NO_SCALE;
                                default:
                                    return null;
                            }
                        };
                        StageScaleMode.toNumber = function (value) {
                            switch (value.toLowerCase()) {
                                case StageScaleMode.SHOW_ALL_LOWERCASE:
                                    return 0 /* ShowAll */;
                                case StageScaleMode.EXACT_FIT_LOWERCASE:
                                    return 1 /* ExactFit */;
                                case StageScaleMode.NO_BORDER_LOWERCASE:
                                    return 2 /* NoBorder */;
                                case StageScaleMode.NO_SCALE_LOWERCASE:
                                    return 4 /* NoScale */;
                                default:
                                    return -1;
                            }
                        };
                        StageScaleMode.classInitializer = null;
                        StageScaleMode.initializer = null;
                        StageScaleMode.classSymbols = null;
                        StageScaleMode.instanceSymbols = null;
                        StageScaleMode.SHOW_ALL = "showAll";
                        StageScaleMode.EXACT_FIT = "exactFit";
                        StageScaleMode.NO_BORDER = "noBorder";
                        StageScaleMode.NO_SCALE = "noScale";
                        StageScaleMode.SHOW_ALL_LOWERCASE = "showall";
                        StageScaleMode.EXACT_FIT_LOWERCASE = "exactfit";
                        StageScaleMode.NO_BORDER_LOWERCASE = "noborder";
                        StageScaleMode.NO_SCALE_LOWERCASE = "noscale";
                        return StageScaleMode;
                    })(AS.ASNative);
                    display.StageScaleMode = StageScaleMode;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var TriangleCulling = (function (_super) {
                        __extends(TriangleCulling, _super);
                        function TriangleCulling() {
                            false && _super.call(this);
                            dummyConstructor("public flash.display.TriangleCulling");
                        }
                        TriangleCulling.classInitializer = null;
                        TriangleCulling.initializer = null;
                        TriangleCulling.classSymbols = null;
                        TriangleCulling.instanceSymbols = null;
                        TriangleCulling.NONE = "none";
                        TriangleCulling.POSITIVE = "positive";
                        TriangleCulling.NEGATIVE = "negative";
                        return TriangleCulling;
                    })(AS.ASNative);
                    display.TriangleCulling = TriangleCulling;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var display;
                (function (display) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var AVM1Movie = (function (_super) {
                        __extends(AVM1Movie, _super);
                        function AVM1Movie(content) {
                            false && _super.call(this);
                            flash.display.DisplayObject.instanceConstructorNoInitialize.call(this);
                            this._children = [];
                            this._children[0] = this._content = content;
                            content._setParent(this, 0);
                            this._setDirtyFlags(2097152 /* DirtyChildren */);
                            this._invalidateFillAndLineBounds(true, true);
                            display.DisplayObject._advancableInstances.push(this);
                            this._constructed = false;
                        }
                        AVM1Movie.prototype.call = function (functionName) {
                            notImplemented('AVM1Movie#call');
                        };
                        AVM1Movie.prototype.addCallback = function (functionName, closure) {
                            notImplemented('AVM1Movie#call');
                        };
                        AVM1Movie.prototype._initFrame = function (advance) {
                        };
                        AVM1Movie.prototype._constructFrame = function () {
                            if (!this._constructed) {
                                this._constructed = true;
                                display.DisplayObjectContainer.prototype._constructChildren.call(this);
                            }
                            this._content._constructFrame();
                        };
                        AVM1Movie.prototype._enqueueFrameScripts = function () {
                            this._removeFlags(16384 /* ContainsFrameScriptPendingChildren */);
                            this._content._enqueueFrameScripts();
                        };
                        AVM1Movie.prototype._propagateFlagsDown = function (flags) {
                            if (this._hasFlags(flags)) {
                                return;
                            }
                            this._setFlags(flags);
                            this._content._propagateFlagsDown(flags);
                        };
                        AVM1Movie.prototype._containsPoint = function (globalX, globalY, localX, localY, testingType, objects) {
                            if (testingType === 3 /* Mouse */) {
                                return this._content._containsPoint(globalX, globalY, localX, localY, testingType, objects);
                            }
                            if (testingType !== 0 /* HitTestBounds */ || !this._getContentBounds().contains(localX, localY)) {
                                return 0 /* None */;
                            }
                            return 1 /* Bounds */;
                        };
                        AVM1Movie.prototype._getChildBounds = function (bounds, includeStrokes) {
                            var childBounds = this._content._getContentBounds(includeStrokes).clone();
                            this._getConcatenatedMatrix().transformBounds(childBounds);
                            bounds.unionInPlace(childBounds);
                        };
                        AVM1Movie.classInitializer = null;
                        AVM1Movie.initializer = null;
                        AVM1Movie.classSymbols = null;
                        AVM1Movie.instanceSymbols = null;
                        return AVM1Movie;
                    })(flash.display.DisplayObject);
                    display.AVM1Movie = AVM1Movie;
                })(display = flash.display || (flash.display = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var errors;
                (function (errors) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var IllegalOperationError = (function (_super) {
                        __extends(IllegalOperationError, _super);
                        function IllegalOperationError(message, id) {
                            if (message === void 0) { message = ""; }
                            if (id === void 0) { id = 0; }
                            message = asCoerceString(message);
                            id = id | 0;
                            false && _super.call(this, undefined, undefined);
                            dummyConstructor("public flash.errors.IllegalOperationError");
                        }
                        IllegalOperationError.classInitializer = null;
                        IllegalOperationError.initializer = null;
                        IllegalOperationError.classSymbols = null;
                        IllegalOperationError.instanceSymbols = null;
                        return IllegalOperationError;
                    })(AS.ASError);
                    errors.IllegalOperationError = IllegalOperationError;
                })(errors = flash.errors || (flash.errors = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var external;
                (function (external) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var Telemetry = Shumway.Telemetry;
                    var forEachPublicProperty = Shumway.AVM2.Runtime.forEachPublicProperty;
                    var ExternalInterfaceService = Shumway.ExternalInterfaceService;
                    var ExternalInterface = (function (_super) {
                        __extends(ExternalInterface, _super);
                        function ExternalInterface() {
                            false && _super.call(this);
                            dummyConstructor("public flash.external.ExternalInterface");
                        }
                        ExternalInterface._getAvailable = function () {
                            return ExternalInterfaceService.instance.enabled;
                        };
                        ExternalInterface._initJS = function () {
                            if (ExternalInterface.initialized) {
                                return;
                            }
                            Telemetry.instance.reportTelemetry({ topic: 'feature', feature: 1 /* EXTERNAL_INTERFACE_FEATURE */ });
                            ExternalInterface.initialized = true;
                            ExternalInterfaceService.instance.initJS(ExternalInterface._callIn);
                        };
                        ExternalInterface._callIn = function (functionName, args) {
                            var callback = ExternalInterface.registeredCallbacks[functionName];
                            if (!callback) {
                                return;
                            }
                            return callback(functionName, AS.ASJSON.transformJSValueToAS(args, true));
                        };
                        ExternalInterface._getPropNames = function (obj) {
                            var keys = [];
                            forEachPublicProperty(obj, function (key) {
                                keys.push(key);
                            }, null);
                            return keys;
                        };
                        ExternalInterface._addCallback = function (functionName, closure, hasNullCallback) {
                            if (hasNullCallback) {
                                ExternalInterfaceService.instance.unregisterCallback(functionName);
                                delete ExternalInterface.registeredCallbacks[functionName];
                            }
                            else {
                                ExternalInterfaceService.instance.registerCallback(functionName);
                                ExternalInterface.registeredCallbacks[functionName] = closure;
                            }
                        };
                        ExternalInterface._evalJS = function (expression) {
                            expression = asCoerceString(expression);
                            return ExternalInterfaceService.instance.eval(expression);
                        };
                        ExternalInterface._callOut = function (request) {
                            request = asCoerceString(request);
                            return ExternalInterfaceService.instance.call(request);
                        };
                        Object.defineProperty(ExternalInterface, "available", {
                            get: function () {
                                return ExternalInterface._getAvailable();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ExternalInterface, "objectID", {
                            get: function () {
                                return ExternalInterfaceService.instance.getId();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ExternalInterface, "activeX", {
                            get: function () {
                                return false;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        ExternalInterface.classInitializer = null;
                        ExternalInterface.initializer = null;
                        ExternalInterface.classSymbols = null;
                        ExternalInterface.instanceSymbols = null;
                        ExternalInterface.initialized = false;
                        ExternalInterface.registeredCallbacks = Object.create(null);
                        return ExternalInterface;
                    })(AS.ASNative);
                    external.ExternalInterface = ExternalInterface;
                })(external = flash.external || (flash.external = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var filters;
                (function (filters) {
                    var BitmapFilterQuality = (function (_super) {
                        __extends(BitmapFilterQuality, _super);
                        function BitmapFilterQuality() {
                            false && _super.call(this);
                        }
                        BitmapFilterQuality.classInitializer = null;
                        BitmapFilterQuality.initializer = null;
                        BitmapFilterQuality.classSymbols = null;
                        BitmapFilterQuality.instanceSymbols = null;
                        BitmapFilterQuality.LOW = 1;
                        BitmapFilterQuality.MEDIUM = 2;
                        BitmapFilterQuality.HIGH = 3;
                        return BitmapFilterQuality;
                    })(AS.ASNative);
                    filters.BitmapFilterQuality = BitmapFilterQuality;
                })(filters = flash.filters || (flash.filters = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var filters;
                (function (filters) {
                    var BitmapFilterType = (function (_super) {
                        __extends(BitmapFilterType, _super);
                        function BitmapFilterType() {
                            false && _super.call(this);
                        }
                        BitmapFilterType.classInitializer = null;
                        BitmapFilterType.initializer = null;
                        BitmapFilterType.classSymbols = null;
                        BitmapFilterType.instanceSymbols = null;
                        BitmapFilterType.INNER = "inner";
                        BitmapFilterType.OUTER = "outer";
                        BitmapFilterType.FULL = "full";
                        return BitmapFilterType;
                    })(AS.ASNative);
                    filters.BitmapFilterType = BitmapFilterType;
                })(filters = flash.filters || (flash.filters = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var filters;
                (function (filters) {
                    var BitmapFilter = (function (_super) {
                        __extends(BitmapFilter, _super);
                        function BitmapFilter() {
                            false && _super.call(this);
                        }
                        BitmapFilter._updateBlurBounds = function (bounds, blurX, blurY, quality, isBlurFilter) {
                            if (isBlurFilter === void 0) { isBlurFilter = false; }
                            var stepWidth = BitmapFilter.blurFilterStepWidths[quality - 1];
                            if (isBlurFilter) {
                                var stepWidth4 = stepWidth / 4;
                                blurX -= stepWidth4;
                                blurY -= stepWidth4;
                            }
                            var bh = Math.ceil((blurX < 1 ? 1 : blurX) * stepWidth);
                            var bv = Math.ceil((blurY < 1 ? 1 : blurY) * stepWidth);
                            bounds.inflate(bh, bv);
                        };
                        BitmapFilter.prototype._updateFilterBounds = function (bounds) {
                        };
                        BitmapFilter.prototype._serialize = function (message) {
                            message.writeInt(-1);
                        };
                        BitmapFilter.prototype.clone = function () {
                            return null;
                        };
                        BitmapFilter.classInitializer = null;
                        BitmapFilter.initializer = null;
                        BitmapFilter.classSymbols = null;
                        BitmapFilter.instanceSymbols = null;
                        BitmapFilter.EPS = 0.000000001;
                        BitmapFilter.blurFilterStepWidths = [0.5, 1.05, 1.35, 1.55, 1.75, 1.9, 2, 2.1, 2.2, 2.3, 2.5, 3, 3, 3.5, 3.5];
                        return BitmapFilter;
                    })(AS.ASNative);
                    filters.BitmapFilter = BitmapFilter;
                    var GradientArrays = (function () {
                        function GradientArrays() {
                        }
                        GradientArrays.sanitize = function (colors, alphas, ratios) {
                            if (Shumway.isNullOrUndefined(colors) || colors.length === 0) {
                                this.colors = [];
                                this.alphas = [];
                                this.ratios = [];
                            }
                            else {
                                var len;
                                if (Shumway.isNullOrUndefined(ratios)) {
                                    this.colors = this.sanitizeColors(colors);
                                    len = this.colors.length;
                                    this.ratios = this.initArray(len);
                                    if (Shumway.isNullOrUndefined(alphas)) {
                                        this.alphas = this.initArray(len);
                                    }
                                    else {
                                        this.alphas = this.sanitizeAlphas(alphas, len, len, 1);
                                    }
                                }
                                else {
                                    if (ratios.length === 0) {
                                        this.colors = [];
                                        this.alphas = [];
                                        this.ratios = [];
                                    }
                                    else {
                                        len = Math.min(colors.length, ratios.length, 16);
                                        this.colors = this.sanitizeColors(colors, len);
                                        this.ratios = this.sanitizeRatios(ratios, len);
                                        if (Shumway.isNullOrUndefined(alphas)) {
                                            this.alphas = this.initArray(len);
                                        }
                                        else {
                                            this.alphas = this.sanitizeAlphas(alphas, len, len, 1);
                                        }
                                    }
                                }
                            }
                        };
                        GradientArrays.sanitizeColors = function (colors, maxLen) {
                            if (maxLen === void 0) { maxLen = 16; }
                            var arr = [];
                            for (var i = 0, n = Math.min(colors.length, maxLen); i < n; i++) {
                                arr[i] = (colors[i] >>> 0) & 0xffffff;
                            }
                            return arr;
                        };
                        GradientArrays.sanitizeAlphas = function (alphas, maxLen, minLen, value) {
                            if (maxLen === void 0) { maxLen = 16; }
                            if (minLen === void 0) { minLen = 0; }
                            if (value === void 0) { value = 0; }
                            var arr = [];
                            for (var i = 0, n = Math.min(alphas.length, maxLen); i < n; i++) {
                                arr[i] = Shumway.NumberUtilities.clamp(+alphas[i], 0, 1);
                            }
                            while (i < minLen) {
                                arr[i++] = value;
                            }
                            return arr;
                        };
                        GradientArrays.sanitizeRatios = function (ratios, maxLen, minLen, value) {
                            if (maxLen === void 0) { maxLen = 16; }
                            if (minLen === void 0) { minLen = 0; }
                            if (value === void 0) { value = 0; }
                            var arr = [];
                            for (var i = 0, n = Math.min(ratios.length, maxLen); i < n; i++) {
                                arr[i] = Shumway.NumberUtilities.clamp(+ratios[i], 0, 255);
                            }
                            while (i < minLen) {
                                arr[i++] = value;
                            }
                            return arr;
                        };
                        GradientArrays.initArray = function (len, value) {
                            if (value === void 0) { value = 0; }
                            var arr = Array(len);
                            for (var i = 0; i < len; i++) {
                                arr[i] = value;
                            }
                            return arr;
                        };
                        return GradientArrays;
                    })();
                    filters.GradientArrays = GradientArrays;
                })(filters = flash.filters || (flash.filters = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var filters;
                (function (filters) {
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var assert = Shumway.Debug.assert;
                    var BevelFilter = (function (_super) {
                        __extends(BevelFilter, _super);
                        function BevelFilter(distance, angle, highlightColor, highlightAlpha, shadowColor, shadowAlpha, blurX, blurY, strength, quality, type, knockout) {
                            if (distance === void 0) { distance = 4; }
                            if (angle === void 0) { angle = 45; }
                            if (highlightColor === void 0) { highlightColor = 16777215; }
                            if (highlightAlpha === void 0) { highlightAlpha = 1; }
                            if (shadowColor === void 0) { shadowColor = 0; }
                            if (shadowAlpha === void 0) { shadowAlpha = 1; }
                            if (blurX === void 0) { blurX = 4; }
                            if (blurY === void 0) { blurY = 4; }
                            if (strength === void 0) { strength = 1; }
                            if (quality === void 0) { quality = 1; }
                            if (type === void 0) { type = "inner"; }
                            if (knockout === void 0) { knockout = false; }
                            false && _super.call(this);
                            this.distance = distance;
                            this.angle = angle;
                            this.highlightColor = highlightColor;
                            this.highlightAlpha = highlightAlpha;
                            this.shadowColor = shadowColor;
                            this.shadowAlpha = shadowAlpha;
                            this.blurX = blurX;
                            this.blurY = blurY;
                            this.strength = strength;
                            this.quality = quality;
                            this.type = type;
                            this.knockout = knockout;
                        }
                        BevelFilter.FromUntyped = function (obj) {
                            var highlightColor = obj.highlightColor >>> 8;
                            var highlightAlpha = (obj.highlightColor & 0xff) / 0xff;
                            release || assert(obj.colors && obj.colors.length === 1, "colors must be Array of length 1");
                            var shadowColor = obj.colors[0] >>> 8;
                            var shadowAlpha = (obj.colors[0] & 0xff) / 0xff;
                            var type = flash.filters.BitmapFilterType.OUTER;
                            if (!!obj.onTop) {
                                type = flash.filters.BitmapFilterType.FULL;
                            }
                            else if (!!obj.inner) {
                                type = flash.filters.BitmapFilterType.INNER;
                            }
                            var angle = obj.angle * 180 / Math.PI;
                            return new BevelFilter(obj.distance, angle, highlightColor, highlightAlpha, shadowColor, shadowAlpha, obj.blurX, obj.blurY, obj.strength, obj.quality, type, obj.knockout);
                        };
                        BevelFilter.prototype._updateFilterBounds = function (bounds) {
                            if (this.type !== filters.BitmapFilterType.INNER) {
                                filters.BitmapFilter._updateBlurBounds(bounds, this._blurX, this._blurY, this._quality);
                                if (this._distance !== 0) {
                                    var a = this._angle * Math.PI / 180;
                                    bounds.x += Math.floor(Math.cos(a) * this._distance);
                                    bounds.y += Math.floor(Math.sin(a) * this._distance);
                                    if (bounds.left > 0) {
                                        bounds.left = 0;
                                    }
                                    if (bounds.top > 0) {
                                        bounds.top = 0;
                                    }
                                }
                            }
                        };
                        Object.defineProperty(BevelFilter.prototype, "distance", {
                            get: function () {
                                return this._distance;
                            },
                            set: function (value) {
                                this._distance = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(BevelFilter.prototype, "angle", {
                            get: function () {
                                return this._angle;
                            },
                            set: function (value) {
                                this._angle = +value % 360;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(BevelFilter.prototype, "highlightColor", {
                            get: function () {
                                return this._highlightColor;
                            },
                            set: function (value) {
                                this._highlightColor = (value >>> 0) & 0xffffff;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(BevelFilter.prototype, "highlightAlpha", {
                            get: function () {
                                return this._highlightAlpha;
                            },
                            set: function (value) {
                                this._highlightAlpha = Shumway.NumberUtilities.clamp(+value, 0, 1);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(BevelFilter.prototype, "shadowColor", {
                            get: function () {
                                return this._shadowColor;
                            },
                            set: function (value) {
                                this._shadowColor = (value >>> 0) & 0xffffff;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(BevelFilter.prototype, "shadowAlpha", {
                            get: function () {
                                return this._shadowAlpha;
                            },
                            set: function (value) {
                                this._shadowAlpha = Shumway.NumberUtilities.clamp(+value, 0, 1);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(BevelFilter.prototype, "blurX", {
                            get: function () {
                                return this._blurX;
                            },
                            set: function (value) {
                                this._blurX = Shumway.NumberUtilities.clamp(+value, 0, 255);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(BevelFilter.prototype, "blurY", {
                            get: function () {
                                return this._blurY;
                            },
                            set: function (value) {
                                this._blurY = Shumway.NumberUtilities.clamp(+value, 0, 255);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(BevelFilter.prototype, "knockout", {
                            get: function () {
                                return this._knockout;
                            },
                            set: function (value) {
                                this._knockout = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(BevelFilter.prototype, "quality", {
                            get: function () {
                                return this._quality;
                            },
                            set: function (value) {
                                this._quality = Shumway.NumberUtilities.clamp(value | 0, 0, 15);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(BevelFilter.prototype, "strength", {
                            get: function () {
                                return this._strength;
                            },
                            set: function (value) {
                                this._strength = Shumway.NumberUtilities.clamp(+value, 0, 255);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(BevelFilter.prototype, "type", {
                            get: function () {
                                return this._type;
                            },
                            set: function (value) {
                                value = asCoerceString(value);
                                if (value === null) {
                                    AVM2.Runtime.throwError("TypeError", AVM2.Errors.NullPointerError, "type");
                                }
                                else {
                                    if (value === filters.BitmapFilterType.INNER || value === filters.BitmapFilterType.OUTER) {
                                        this._type = value;
                                    }
                                    else {
                                        this._type = filters.BitmapFilterType.FULL;
                                    }
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        BevelFilter.prototype.clone = function () {
                            return new BevelFilter(this._distance, this._angle, this._highlightColor, this._highlightAlpha, this._shadowColor, this._shadowAlpha, this._blurX, this._blurY, this._strength, this._quality, this._type, this._knockout);
                        };
                        BevelFilter.classInitializer = null;
                        BevelFilter.initializer = null;
                        BevelFilter.classSymbols = null;
                        BevelFilter.instanceSymbols = null;
                        return BevelFilter;
                    })(flash.filters.BitmapFilter);
                    filters.BevelFilter = BevelFilter;
                })(filters = flash.filters || (flash.filters = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var filters;
                (function (filters) {
                    var BlurFilter = (function (_super) {
                        __extends(BlurFilter, _super);
                        function BlurFilter(blurX, blurY, quality) {
                            if (blurX === void 0) { blurX = 4; }
                            if (blurY === void 0) { blurY = 4; }
                            if (quality === void 0) { quality = 1; }
                            false && _super.call(this);
                            this.blurX = blurX;
                            this.blurY = blurY;
                            this.quality = quality;
                        }
                        BlurFilter.FromUntyped = function (obj) {
                            return new BlurFilter(obj.blurX, obj.blurY, obj.quality);
                        };
                        BlurFilter.prototype._updateFilterBounds = function (bounds) {
                            filters.BitmapFilter._updateBlurBounds(bounds, this._blurX, this._blurY, this._quality, true);
                        };
                        BlurFilter.prototype._serialize = function (message) {
                            message.ensureAdditionalCapacity(16);
                            message.writeIntUnsafe(1);
                            message.writeFloatUnsafe(this._blurX);
                            message.writeFloatUnsafe(this._blurY);
                            message.writeIntUnsafe(this._quality);
                        };
                        Object.defineProperty(BlurFilter.prototype, "blurX", {
                            get: function () {
                                return this._blurX;
                            },
                            set: function (value) {
                                this._blurX = Shumway.NumberUtilities.clamp(+value, 0, 255);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(BlurFilter.prototype, "blurY", {
                            get: function () {
                                return this._blurY;
                            },
                            set: function (value) {
                                this._blurY = Shumway.NumberUtilities.clamp(+value, 0, 255);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(BlurFilter.prototype, "quality", {
                            get: function () {
                                return this._quality;
                            },
                            set: function (value) {
                                this._quality = Shumway.NumberUtilities.clamp(value | 0, 0, 15);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        BlurFilter.prototype.clone = function () {
                            return new BlurFilter(this._blurX, this._blurY, this._quality);
                        };
                        BlurFilter.classInitializer = null;
                        BlurFilter.initializer = null;
                        BlurFilter.classSymbols = null;
                        BlurFilter.instanceSymbols = null;
                        return BlurFilter;
                    })(flash.filters.BitmapFilter);
                    filters.BlurFilter = BlurFilter;
                })(filters = flash.filters || (flash.filters = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var filters;
                (function (filters) {
                    var ColorMatrixFilter = (function (_super) {
                        __extends(ColorMatrixFilter, _super);
                        function ColorMatrixFilter(matrix) {
                            if (matrix === void 0) { matrix = null; }
                            false && _super.call(this);
                            if (matrix) {
                                this.matrix = matrix;
                            }
                            else {
                                this._matrix = [
                                    1,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    1,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    1,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    1,
                                    0
                                ];
                            }
                        }
                        ColorMatrixFilter.FromUntyped = function (obj) {
                            return new ColorMatrixFilter(obj.matrix);
                        };
                        ColorMatrixFilter.prototype._serialize = function (message) {
                            var matrix = this._matrix;
                            message.ensureAdditionalCapacity((matrix.length + 1) * 4);
                            message.writeIntUnsafe(6);
                            for (var i = 0; i < matrix.length; i++) {
                                message.writeFloatUnsafe(matrix[i]);
                            }
                        };
                        Object.defineProperty(ColorMatrixFilter.prototype, "matrix", {
                            get: function () {
                                return this._matrix.concat();
                            },
                            set: function (value) {
                                if (!Shumway.isNullOrUndefined(value)) {
                                    var matrix = [
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0
                                    ];
                                    for (var i = 0, n = Math.min(value.length, 20); i < n; i++) {
                                        matrix[i] = Shumway.toNumber(value[i]);
                                    }
                                    this._matrix = matrix;
                                }
                                else {
                                    AVM2.Runtime.throwError("TypeError", AVM2.Errors.NullPointerError, "matrix");
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        ColorMatrixFilter.prototype.clone = function () {
                            return new ColorMatrixFilter(this.matrix);
                        };
                        ColorMatrixFilter.classInitializer = null;
                        ColorMatrixFilter.initializer = null;
                        ColorMatrixFilter.classSymbols = null;
                        ColorMatrixFilter.instanceSymbols = null;
                        return ColorMatrixFilter;
                    })(flash.filters.BitmapFilter);
                    filters.ColorMatrixFilter = ColorMatrixFilter;
                })(filters = flash.filters || (flash.filters = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var filters;
                (function (filters) {
                    var ConvolutionFilter = (function (_super) {
                        __extends(ConvolutionFilter, _super);
                        function ConvolutionFilter(matrixX, matrixY, matrix, divisor, bias, preserveAlpha, clamp, color, alpha) {
                            if (matrixX === void 0) { matrixX = 0; }
                            if (matrixY === void 0) { matrixY = 0; }
                            if (matrix === void 0) { matrix = null; }
                            if (divisor === void 0) { divisor = 1; }
                            if (bias === void 0) { bias = 0; }
                            if (preserveAlpha === void 0) { preserveAlpha = true; }
                            if (clamp === void 0) { clamp = true; }
                            if (color === void 0) { color = 0; }
                            if (alpha === void 0) { alpha = 0; }
                            false && _super.call(this);
                            this.matrixX = matrixX;
                            this.matrixY = matrixY;
                            if (matrix) {
                                this.matrix = matrix;
                            }
                            else {
                                this._matrix = this._expandArray([], this._matrixX * this._matrixY);
                            }
                            this.divisor = divisor;
                            this.bias = bias;
                            this.preserveAlpha = preserveAlpha;
                            this.clamp = clamp;
                            this.color = color;
                            this.alpha = alpha;
                        }
                        ConvolutionFilter.FromUntyped = function (obj) {
                            return new ConvolutionFilter(obj.matrixX, obj.matrixY, obj.matrix, obj.divisor, obj.bias, obj.preserveAlpha, obj.clamp, obj.color >>> 8, (obj.color & 0xff) / 0xff);
                        };
                        ConvolutionFilter.prototype._expandArray = function (a, newLen, value) {
                            if (value === void 0) { value = 0; }
                            if (a) {
                                var i = a.length;
                                while (i < newLen) {
                                    a[i++] = 0;
                                }
                            }
                            return a;
                        };
                        Object.defineProperty(ConvolutionFilter.prototype, "matrix", {
                            get: function () {
                                return this._matrix.slice(0, this._matrixX * this._matrixY);
                            },
                            set: function (value) {
                                if (!Shumway.isNullOrUndefined(value)) {
                                    var actualLen = this._matrixX * this._matrixY;
                                    var minLen = Math.min(value.length, actualLen);
                                    var matrix = Array(minLen);
                                    for (var i = 0; i < minLen; i++) {
                                        matrix[i] = Shumway.toNumber(value[i]);
                                    }
                                    this._expandArray(matrix, actualLen);
                                    this._matrix = matrix;
                                }
                                else {
                                    AVM2.Runtime.throwError("TypeError", AVM2.Errors.NullPointerError, "matrix");
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ConvolutionFilter.prototype, "matrixX", {
                            get: function () {
                                return this._matrixX;
                            },
                            set: function (value) {
                                var mx = Shumway.NumberUtilities.clamp(+value, 0, 15) | 0;
                                if (this._matrixX !== mx) {
                                    this._matrixX = mx;
                                    this._expandArray(this._matrix, mx * this._matrixY);
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ConvolutionFilter.prototype, "matrixY", {
                            get: function () {
                                return this._matrixY;
                            },
                            set: function (value) {
                                var my = Shumway.NumberUtilities.clamp(+value, 0, 15) | 0;
                                if (this._matrixY !== my) {
                                    this._matrixY = my;
                                    this._expandArray(this._matrix, my * this._matrixX);
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ConvolutionFilter.prototype, "divisor", {
                            get: function () {
                                return this._divisor;
                            },
                            set: function (value) {
                                this._divisor = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ConvolutionFilter.prototype, "bias", {
                            get: function () {
                                return this._bias;
                            },
                            set: function (value) {
                                this._bias = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ConvolutionFilter.prototype, "preserveAlpha", {
                            get: function () {
                                return this._preserveAlpha;
                            },
                            set: function (value) {
                                this._preserveAlpha = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ConvolutionFilter.prototype, "clamp", {
                            get: function () {
                                return this._clamp;
                            },
                            set: function (value) {
                                this._clamp = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ConvolutionFilter.prototype, "color", {
                            get: function () {
                                return this._color;
                            },
                            set: function (value) {
                                this._color = value >>> 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ConvolutionFilter.prototype, "alpha", {
                            get: function () {
                                return this._alpha;
                            },
                            set: function (value) {
                                this._alpha = Shumway.NumberUtilities.clamp(+value, 0, 1);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        ConvolutionFilter.prototype.clone = function () {
                            return new ConvolutionFilter(this._matrixX, this._matrixY, this.matrix, this._divisor, this._bias, this._preserveAlpha, this._clamp, this._color, this._alpha);
                        };
                        ConvolutionFilter.classInitializer = null;
                        ConvolutionFilter.initializer = null;
                        ConvolutionFilter.classSymbols = null;
                        ConvolutionFilter.instanceSymbols = null;
                        return ConvolutionFilter;
                    })(flash.filters.BitmapFilter);
                    filters.ConvolutionFilter = ConvolutionFilter;
                })(filters = flash.filters || (flash.filters = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var filters;
                (function (filters) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var DisplacementMapFilterMode = (function (_super) {
                        __extends(DisplacementMapFilterMode, _super);
                        function DisplacementMapFilterMode() {
                            false && _super.call(this);
                            dummyConstructor("public flash.filters.DisplacementMapFilterMode");
                        }
                        DisplacementMapFilterMode.classInitializer = null;
                        DisplacementMapFilterMode.initializer = null;
                        DisplacementMapFilterMode.classSymbols = null;
                        DisplacementMapFilterMode.instanceSymbols = null;
                        DisplacementMapFilterMode.WRAP = "wrap";
                        DisplacementMapFilterMode.CLAMP = "clamp";
                        DisplacementMapFilterMode.IGNORE = "ignore";
                        DisplacementMapFilterMode.COLOR = "color";
                        return DisplacementMapFilterMode;
                    })(AS.ASNative);
                    filters.DisplacementMapFilterMode = DisplacementMapFilterMode;
                })(filters = flash.filters || (flash.filters = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var filters;
                (function (filters) {
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var DisplacementMapFilter = (function (_super) {
                        __extends(DisplacementMapFilter, _super);
                        function DisplacementMapFilter(mapBitmap, mapPoint, componentX, componentY, scaleX, scaleY, mode, color, alpha) {
                            if (mapBitmap === void 0) { mapBitmap = null; }
                            if (mapPoint === void 0) { mapPoint = null; }
                            if (componentX === void 0) { componentX = 0; }
                            if (componentY === void 0) { componentY = 0; }
                            if (scaleX === void 0) { scaleX = 0; }
                            if (scaleY === void 0) { scaleY = 0; }
                            if (mode === void 0) { mode = "wrap"; }
                            if (color === void 0) { color = 0; }
                            if (alpha === void 0) { alpha = 0; }
                            false && _super.call(this);
                            this.mapBitmap = mapBitmap;
                            this.mapPoint = mapPoint;
                            this.componentX = componentX;
                            this.componentY = componentY;
                            this.scaleX = scaleX;
                            this.scaleY = scaleY;
                            this.mode = mode;
                            this.color = color;
                            this.alpha = alpha;
                        }
                        DisplacementMapFilter.FromUntyped = function (obj) {
                            return new DisplacementMapFilter(obj.mapBitmap, obj.mapPoint, obj.componentX, obj.componentY, obj.scaleX, obj.scaleY, obj.mode, obj.color, obj.alpha);
                        };
                        Object.defineProperty(DisplacementMapFilter.prototype, "mapBitmap", {
                            get: function () {
                                somewhatImplemented("public flash.filters.DisplacementMapFilter::get mapBitmap");
                                return this._mapBitmap;
                            },
                            set: function (value) {
                                somewhatImplemented("public flash.filters.DisplacementMapFilter::set mapBitmap");
                                this._mapBitmap = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplacementMapFilter.prototype, "mapPoint", {
                            get: function () {
                                somewhatImplemented("public flash.filters.DisplacementMapFilter::get mapPoint");
                                return this._mapPoint;
                            },
                            set: function (value) {
                                somewhatImplemented("public flash.filters.DisplacementMapFilter::set mapPoint");
                                this._mapPoint = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplacementMapFilter.prototype, "componentX", {
                            get: function () {
                                return this._componentX;
                            },
                            set: function (value) {
                                somewhatImplemented("public flash.filters.DisplacementMapFilter::set componentX");
                                this._componentX = value >>> 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplacementMapFilter.prototype, "componentY", {
                            get: function () {
                                return this._componentY;
                            },
                            set: function (value) {
                                somewhatImplemented("public flash.filters.DisplacementMapFilter::set componentY");
                                this._componentY = value >>> 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplacementMapFilter.prototype, "scaleX", {
                            get: function () {
                                return this._scaleX;
                            },
                            set: function (value) {
                                somewhatImplemented("public flash.filters.DisplacementMapFilter::set scaleX");
                                this._scaleX = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplacementMapFilter.prototype, "scaleY", {
                            get: function () {
                                return this._scaleY;
                            },
                            set: function (value) {
                                somewhatImplemented("public flash.filters.DisplacementMapFilter::set scaleY");
                                this._scaleY = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplacementMapFilter.prototype, "mode", {
                            get: function () {
                                return this._mode;
                            },
                            set: function (value) {
                                somewhatImplemented("public flash.filters.DisplacementMapFilter::set mode");
                                this._mode = asCoerceString(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplacementMapFilter.prototype, "color", {
                            get: function () {
                                return this._color;
                            },
                            set: function (value) {
                                somewhatImplemented("public flash.filters.DisplacementMapFilter::set color");
                                this._color = (value >>> 0) & 0xffffff;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DisplacementMapFilter.prototype, "alpha", {
                            get: function () {
                                return this._alpha;
                            },
                            set: function (value) {
                                somewhatImplemented("public flash.filters.DisplacementMapFilter::set alpha");
                                this._alpha = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DisplacementMapFilter.prototype.clone = function () {
                            return new DisplacementMapFilter(this._mapBitmap, this._mapPoint, this._componentX, this._componentY, this._scaleX, this._scaleY, this._mode, this._color, this._alpha);
                        };
                        DisplacementMapFilter.classInitializer = null;
                        DisplacementMapFilter.initializer = null;
                        DisplacementMapFilter.classSymbols = null;
                        DisplacementMapFilter.instanceSymbols = null;
                        return DisplacementMapFilter;
                    })(flash.filters.BitmapFilter);
                    filters.DisplacementMapFilter = DisplacementMapFilter;
                })(filters = flash.filters || (flash.filters = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var filters;
                (function (filters) {
                    var assert = Shumway.Debug.assert;
                    var DropShadowFilter = (function (_super) {
                        __extends(DropShadowFilter, _super);
                        function DropShadowFilter(distance, angle, color, alpha, blurX, blurY, strength, quality, inner, knockout, hideObject) {
                            if (distance === void 0) { distance = 4; }
                            if (angle === void 0) { angle = 45; }
                            if (color === void 0) { color = 0; }
                            if (alpha === void 0) { alpha = 1; }
                            if (blurX === void 0) { blurX = 4; }
                            if (blurY === void 0) { blurY = 4; }
                            if (strength === void 0) { strength = 1; }
                            if (quality === void 0) { quality = 1; }
                            if (inner === void 0) { inner = false; }
                            if (knockout === void 0) { knockout = false; }
                            if (hideObject === void 0) { hideObject = false; }
                            false && _super.call(this);
                            this.distance = distance;
                            this.angle = angle;
                            this.color = color;
                            this.alpha = alpha;
                            this.blurX = blurX;
                            this.blurY = blurY;
                            this.strength = strength;
                            this.quality = quality;
                            this.inner = inner;
                            this.knockout = knockout;
                            this.hideObject = hideObject;
                        }
                        DropShadowFilter.FromUntyped = function (obj) {
                            release || assert(obj.colors && obj.colors.length === 1, "colors must be Array of length 1");
                            var color = obj.colors[0] >>> 8;
                            var alpha = (obj.colors[0] & 0xff) / 0xff;
                            var angle = obj.angle * 180 / Math.PI;
                            var hideObject = !obj.compositeSource;
                            return new DropShadowFilter(obj.distance, angle, color, alpha, obj.blurX, obj.blurY, obj.strength, obj.quality, obj.inner, obj.knockout, hideObject);
                        };
                        DropShadowFilter.prototype._updateFilterBounds = function (bounds) {
                            if (!this.inner) {
                                filters.BitmapFilter._updateBlurBounds(bounds, this._blurX, this._blurY, this._quality);
                                if (this._distance !== 0) {
                                    var a = this._angle * Math.PI / 180;
                                    bounds.x += Math.floor(Math.cos(a) * this._distance);
                                    bounds.y += Math.floor(Math.sin(a) * this._distance);
                                    if (bounds.left > 0) {
                                        bounds.left = 0;
                                    }
                                    if (bounds.top > 0) {
                                        bounds.top = 0;
                                    }
                                }
                            }
                        };
                        Object.defineProperty(DropShadowFilter.prototype, "distance", {
                            get: function () {
                                return this._distance;
                            },
                            set: function (value) {
                                this._distance = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DropShadowFilter.prototype, "angle", {
                            get: function () {
                                return this._angle;
                            },
                            set: function (value) {
                                this._angle = +value % 360;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DropShadowFilter.prototype, "color", {
                            get: function () {
                                return this._color;
                            },
                            set: function (value) {
                                this._color = (value >>> 0) & 0xffffff;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DropShadowFilter.prototype, "alpha", {
                            get: function () {
                                return this._alpha;
                            },
                            set: function (value) {
                                this._alpha = Shumway.NumberUtilities.clamp(+value, 0, 1);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DropShadowFilter.prototype, "blurX", {
                            get: function () {
                                return this._blurX;
                            },
                            set: function (value) {
                                this._blurX = Shumway.NumberUtilities.clamp(+value, 0, 255);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DropShadowFilter.prototype, "blurY", {
                            get: function () {
                                return this._blurY;
                            },
                            set: function (value) {
                                this._blurY = Shumway.NumberUtilities.clamp(+value, 0, 255);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DropShadowFilter.prototype, "hideObject", {
                            get: function () {
                                return this._hideObject;
                            },
                            set: function (value) {
                                this._hideObject = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DropShadowFilter.prototype, "inner", {
                            get: function () {
                                return this._inner;
                            },
                            set: function (value) {
                                this._inner = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DropShadowFilter.prototype, "knockout", {
                            get: function () {
                                return this._knockout;
                            },
                            set: function (value) {
                                this._knockout = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DropShadowFilter.prototype, "quality", {
                            get: function () {
                                return this._quality;
                            },
                            set: function (value) {
                                this._quality = Shumway.NumberUtilities.clamp(value | 0, 0, 15);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(DropShadowFilter.prototype, "strength", {
                            get: function () {
                                return this._strength;
                            },
                            set: function (value) {
                                this._strength = Shumway.NumberUtilities.clamp(+value, 0, 255);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        DropShadowFilter.prototype.clone = function () {
                            return new DropShadowFilter(this._distance, this._angle, this._color, this._alpha, this._blurX, this._blurY, this._strength, this._quality, this._inner, this._knockout, this._hideObject);
                        };
                        DropShadowFilter.classInitializer = null;
                        DropShadowFilter.initializer = null;
                        DropShadowFilter.classSymbols = null;
                        DropShadowFilter.instanceSymbols = null;
                        return DropShadowFilter;
                    })(flash.filters.BitmapFilter);
                    filters.DropShadowFilter = DropShadowFilter;
                })(filters = flash.filters || (flash.filters = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var filters;
                (function (filters) {
                    var assert = Shumway.Debug.assert;
                    var GlowFilter = (function (_super) {
                        __extends(GlowFilter, _super);
                        function GlowFilter(color, alpha, blurX, blurY, strength, quality, inner, knockout) {
                            if (color === void 0) { color = 16711680; }
                            if (alpha === void 0) { alpha = 1; }
                            if (blurX === void 0) { blurX = 6; }
                            if (blurY === void 0) { blurY = 6; }
                            if (strength === void 0) { strength = 2; }
                            if (quality === void 0) { quality = 1; }
                            if (inner === void 0) { inner = false; }
                            if (knockout === void 0) { knockout = false; }
                            false && _super.call(this);
                            this.color = color;
                            this.alpha = alpha;
                            this.blurX = blurX;
                            this.blurY = blurY;
                            this.strength = strength;
                            this.quality = quality;
                            this.inner = inner;
                            this.knockout = knockout;
                        }
                        GlowFilter.FromUntyped = function (obj) {
                            release || assert(obj.colors && obj.colors.length === 1, "colors must be Array of length 1");
                            var color = obj.colors[0] >>> 8;
                            var alpha = (obj.colors[0] & 0xff) / 0xff;
                            return new GlowFilter(color, alpha, obj.blurX, obj.blurY, obj.strength, obj.quality, obj.inner, obj.knockout);
                        };
                        GlowFilter.prototype._updateFilterBounds = function (bounds) {
                            filters.BitmapFilter._updateBlurBounds(bounds, this._blurX, this._blurY, this._quality);
                        };
                        Object.defineProperty(GlowFilter.prototype, "color", {
                            get: function () {
                                return this._color;
                            },
                            set: function (value) {
                                this._color = (value >>> 0) & 0xffffff;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GlowFilter.prototype, "alpha", {
                            get: function () {
                                return this._alpha;
                            },
                            set: function (value) {
                                this._alpha = Shumway.NumberUtilities.clamp(+value, 0, 1);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GlowFilter.prototype, "blurX", {
                            get: function () {
                                return this._blurX;
                            },
                            set: function (value) {
                                this._blurX = Shumway.NumberUtilities.clamp(+value, 0, 255);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GlowFilter.prototype, "blurY", {
                            get: function () {
                                return this._blurY;
                            },
                            set: function (value) {
                                this._blurY = Shumway.NumberUtilities.clamp(+value, 0, 255);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GlowFilter.prototype, "inner", {
                            get: function () {
                                return this._inner;
                            },
                            set: function (value) {
                                this._inner = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GlowFilter.prototype, "knockout", {
                            get: function () {
                                return this._knockout;
                            },
                            set: function (value) {
                                this._knockout = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GlowFilter.prototype, "quality", {
                            get: function () {
                                return this._quality;
                            },
                            set: function (value) {
                                this._quality = Shumway.NumberUtilities.clamp(value | 0, 0, 15);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GlowFilter.prototype, "strength", {
                            get: function () {
                                return this._strength;
                            },
                            set: function (value) {
                                this._strength = Shumway.NumberUtilities.clamp(+value, 0, 255);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        GlowFilter.prototype.clone = function () {
                            return new GlowFilter(this._color, this._alpha, this._blurX, this._blurY, this._strength, this._quality, this._inner, this._knockout);
                        };
                        GlowFilter.classInitializer = null;
                        GlowFilter.initializer = null;
                        GlowFilter.classSymbols = null;
                        GlowFilter.instanceSymbols = null;
                        return GlowFilter;
                    })(flash.filters.BitmapFilter);
                    filters.GlowFilter = GlowFilter;
                })(filters = flash.filters || (flash.filters = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var filters;
                (function (filters) {
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var GradientBevelFilter = (function (_super) {
                        __extends(GradientBevelFilter, _super);
                        function GradientBevelFilter(distance, angle, colors, alphas, ratios, blurX, blurY, strength, quality, type, knockout) {
                            if (distance === void 0) { distance = 4; }
                            if (angle === void 0) { angle = 45; }
                            if (colors === void 0) { colors = null; }
                            if (alphas === void 0) { alphas = null; }
                            if (ratios === void 0) { ratios = null; }
                            if (blurX === void 0) { blurX = 4; }
                            if (blurY === void 0) { blurY = 4; }
                            if (strength === void 0) { strength = 1; }
                            if (quality === void 0) { quality = 1; }
                            if (type === void 0) { type = "inner"; }
                            if (knockout === void 0) { knockout = false; }
                            false && _super.call(this);
                            this.distance = distance;
                            this.angle = angle;
                            filters.GradientArrays.sanitize(colors, alphas, ratios);
                            this._colors = filters.GradientArrays.colors;
                            this._alphas = filters.GradientArrays.alphas;
                            this._ratios = filters.GradientArrays.ratios;
                            this.blurX = blurX;
                            this.blurY = blurY;
                            this.strength = strength;
                            this.quality = quality;
                            this.type = type;
                            this.knockout = knockout;
                        }
                        GradientBevelFilter.FromUntyped = function (obj) {
                            var colors = [];
                            var alphas = [];
                            for (var i = 0; i < obj.colors.length; i++) {
                                var color = obj.colors[i];
                                colors.push(color >>> 8);
                                alphas.push(color & 0xff) / 0xff;
                            }
                            var type = flash.filters.BitmapFilterType.OUTER;
                            if (!!obj.onTop) {
                                type = flash.filters.BitmapFilterType.FULL;
                            }
                            else if (!!obj.inner) {
                                type = flash.filters.BitmapFilterType.INNER;
                            }
                            var angle = obj.angle * 180 / Math.PI;
                            return new GradientBevelFilter(obj.distance, angle, colors, alphas, obj.ratios, obj.blurX, obj.blurY, obj.strength, obj.quality, type, obj.knockout);
                        };
                        GradientBevelFilter.prototype._updateFilterBounds = function (bounds) {
                            if (this.type !== filters.BitmapFilterType.INNER) {
                                filters.BitmapFilter._updateBlurBounds(bounds, this._blurX, this._blurY, this._quality);
                                if (this._distance !== 0) {
                                    var a = this._angle * Math.PI / 180;
                                    bounds.x += Math.floor(Math.cos(a) * this._distance);
                                    bounds.y += Math.floor(Math.sin(a) * this._distance);
                                    if (bounds.left > 0) {
                                        bounds.left = 0;
                                    }
                                    if (bounds.top > 0) {
                                        bounds.top = 0;
                                    }
                                }
                            }
                        };
                        Object.defineProperty(GradientBevelFilter.prototype, "distance", {
                            get: function () {
                                return this._distance;
                            },
                            set: function (value) {
                                this._distance = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientBevelFilter.prototype, "angle", {
                            get: function () {
                                return this._angle;
                            },
                            set: function (value) {
                                this._angle = +value % 360;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientBevelFilter.prototype, "colors", {
                            get: function () {
                                return this._colors.concat();
                            },
                            set: function (value) {
                                if (!Shumway.isNullOrUndefined(value)) {
                                    this._colors = filters.GradientArrays.sanitizeColors(value);
                                    var len = this._colors.length;
                                    this._alphas = filters.GradientArrays.sanitizeAlphas(this._alphas, len, len);
                                    this._ratios = filters.GradientArrays.sanitizeRatios(this._ratios, len, len);
                                }
                                else {
                                    AVM2.Runtime.throwError("TypeError", AVM2.Errors.NullPointerError, "colors");
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientBevelFilter.prototype, "alphas", {
                            get: function () {
                                return this._alphas.concat();
                            },
                            set: function (value) {
                                if (!Shumway.isNullOrUndefined(value)) {
                                    filters.GradientArrays.sanitize(this._colors, value, this._ratios);
                                    this._colors = filters.GradientArrays.colors;
                                    this._alphas = filters.GradientArrays.alphas;
                                    this._ratios = filters.GradientArrays.ratios;
                                }
                                else {
                                    AVM2.Runtime.throwError("TypeError", AVM2.Errors.NullPointerError, "alphas");
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientBevelFilter.prototype, "ratios", {
                            get: function () {
                                return this._ratios.concat();
                            },
                            set: function (value) {
                                if (!Shumway.isNullOrUndefined(value)) {
                                    filters.GradientArrays.sanitize(this._colors, this._alphas, value);
                                    this._colors = filters.GradientArrays.colors;
                                    this._alphas = filters.GradientArrays.alphas;
                                    this._ratios = filters.GradientArrays.ratios;
                                }
                                else {
                                    AVM2.Runtime.throwError("TypeError", AVM2.Errors.NullPointerError, "ratios");
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientBevelFilter.prototype, "blurX", {
                            get: function () {
                                return this._blurX;
                            },
                            set: function (value) {
                                this._blurX = Shumway.NumberUtilities.clamp(+value, 0, 255);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientBevelFilter.prototype, "blurY", {
                            get: function () {
                                return this._blurY;
                            },
                            set: function (value) {
                                this._blurY = Shumway.NumberUtilities.clamp(+value, 0, 255);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientBevelFilter.prototype, "knockout", {
                            get: function () {
                                return this._knockout;
                            },
                            set: function (value) {
                                this._knockout = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientBevelFilter.prototype, "quality", {
                            get: function () {
                                return this._quality;
                            },
                            set: function (value) {
                                this._quality = Shumway.NumberUtilities.clamp(value | 0, 0, 15);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientBevelFilter.prototype, "strength", {
                            get: function () {
                                return this._strength;
                            },
                            set: function (value) {
                                this._strength = Shumway.NumberUtilities.clamp(+value, 0, 255);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientBevelFilter.prototype, "type", {
                            get: function () {
                                return this._type;
                            },
                            set: function (value) {
                                value = asCoerceString(value);
                                if (value === null) {
                                    AVM2.Runtime.throwError("TypeError", AVM2.Errors.NullPointerError, "type");
                                }
                                else {
                                    if (value === filters.BitmapFilterType.INNER || value === filters.BitmapFilterType.OUTER) {
                                        this._type = value;
                                    }
                                    else {
                                        this._type = filters.BitmapFilterType.FULL;
                                    }
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        GradientBevelFilter.prototype.clone = function () {
                            return new GradientBevelFilter(this._distance, this._angle, this._colors, this._alphas, this._ratios, this._blurX, this._blurY, this._strength, this._quality, this._type, this._knockout);
                        };
                        GradientBevelFilter.classInitializer = null;
                        GradientBevelFilter.initializer = null;
                        GradientBevelFilter.classSymbols = null;
                        GradientBevelFilter.instanceSymbols = null;
                        return GradientBevelFilter;
                    })(flash.filters.BitmapFilter);
                    filters.GradientBevelFilter = GradientBevelFilter;
                })(filters = flash.filters || (flash.filters = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var filters;
                (function (filters) {
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var GradientGlowFilter = (function (_super) {
                        __extends(GradientGlowFilter, _super);
                        function GradientGlowFilter(distance, angle, colors, alphas, ratios, blurX, blurY, strength, quality, type, knockout) {
                            if (distance === void 0) { distance = 4; }
                            if (angle === void 0) { angle = 45; }
                            if (colors === void 0) { colors = null; }
                            if (alphas === void 0) { alphas = null; }
                            if (ratios === void 0) { ratios = null; }
                            if (blurX === void 0) { blurX = 4; }
                            if (blurY === void 0) { blurY = 4; }
                            if (strength === void 0) { strength = 1; }
                            if (quality === void 0) { quality = 1; }
                            if (type === void 0) { type = "inner"; }
                            if (knockout === void 0) { knockout = false; }
                            false && _super.call(this);
                            this.distance = distance;
                            this.angle = angle;
                            filters.GradientArrays.sanitize(colors, alphas, ratios);
                            this._colors = filters.GradientArrays.colors;
                            this._alphas = filters.GradientArrays.alphas;
                            this._ratios = filters.GradientArrays.ratios;
                            this.blurX = blurX;
                            this.blurY = blurY;
                            this.strength = strength;
                            this.quality = quality;
                            this.type = type;
                            this.knockout = knockout;
                        }
                        GradientGlowFilter.FromUntyped = function (obj) {
                            var colors = [];
                            var alphas = [];
                            for (var i = 0; i < obj.colors.length; i++) {
                                var color = obj.colors[i];
                                colors.push(color >>> 8);
                                alphas.push(color & 0xff) / 0xff;
                            }
                            var type = flash.filters.BitmapFilterType.OUTER;
                            if (!!obj.onTop) {
                                type = flash.filters.BitmapFilterType.FULL;
                            }
                            else if (!!obj.inner) {
                                type = flash.filters.BitmapFilterType.INNER;
                            }
                            var angle = obj.angle * 180 / Math.PI;
                            return new GradientGlowFilter(obj.distance, angle, colors, alphas, obj.ratios, obj.blurX, obj.blurY, obj.strength, obj.quality, type, obj.knockout);
                        };
                        GradientGlowFilter.prototype._updateFilterBounds = function (bounds) {
                            if (this.type !== filters.BitmapFilterType.INNER) {
                                filters.BitmapFilter._updateBlurBounds(bounds, this._blurX, this._blurY, this._quality);
                                if (this._distance !== 0) {
                                    var a = this._angle * Math.PI / 180;
                                    bounds.x += Math.floor(Math.cos(a) * this._distance);
                                    bounds.y += Math.floor(Math.sin(a) * this._distance);
                                    if (bounds.left > 0) {
                                        bounds.left = 0;
                                    }
                                    if (bounds.top > 0) {
                                        bounds.top = 0;
                                    }
                                }
                            }
                        };
                        Object.defineProperty(GradientGlowFilter.prototype, "distance", {
                            get: function () {
                                return this._distance;
                            },
                            set: function (value) {
                                this._distance = +value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientGlowFilter.prototype, "angle", {
                            get: function () {
                                return this._angle;
                            },
                            set: function (value) {
                                this._angle = +value % 360;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientGlowFilter.prototype, "colors", {
                            get: function () {
                                return this._colors.concat();
                            },
                            set: function (value) {
                                if (!Shumway.isNullOrUndefined(value)) {
                                    this._colors = filters.GradientArrays.sanitizeColors(value);
                                    var len = this._colors.length;
                                    this._alphas = filters.GradientArrays.sanitizeAlphas(this._alphas, len, len);
                                    this._ratios = filters.GradientArrays.sanitizeRatios(this._ratios, len, len);
                                }
                                else {
                                    AVM2.Runtime.throwError("TypeError", AVM2.Errors.NullPointerError, "colors");
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientGlowFilter.prototype, "alphas", {
                            get: function () {
                                return this._alphas.concat();
                            },
                            set: function (value) {
                                if (!Shumway.isNullOrUndefined(value)) {
                                    filters.GradientArrays.sanitize(this._colors, value, this._ratios);
                                    this._colors = filters.GradientArrays.colors;
                                    this._alphas = filters.GradientArrays.alphas;
                                    this._ratios = filters.GradientArrays.ratios;
                                }
                                else {
                                    AVM2.Runtime.throwError("TypeError", AVM2.Errors.NullPointerError, "alphas");
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientGlowFilter.prototype, "ratios", {
                            get: function () {
                                return this._ratios.concat();
                            },
                            set: function (value) {
                                if (!Shumway.isNullOrUndefined(value)) {
                                    filters.GradientArrays.sanitize(this._colors, this._alphas, value);
                                    this._colors = filters.GradientArrays.colors;
                                    this._alphas = filters.GradientArrays.alphas;
                                    this._ratios = filters.GradientArrays.ratios;
                                }
                                else {
                                    AVM2.Runtime.throwError("TypeError", AVM2.Errors.NullPointerError, "ratios");
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientGlowFilter.prototype, "blurX", {
                            get: function () {
                                return this._blurX;
                            },
                            set: function (value) {
                                this._blurX = Shumway.NumberUtilities.clamp(+value, 0, 255);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientGlowFilter.prototype, "blurY", {
                            get: function () {
                                return this._blurY;
                            },
                            set: function (value) {
                                this._blurY = Shumway.NumberUtilities.clamp(+value, 0, 255);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientGlowFilter.prototype, "knockout", {
                            get: function () {
                                return this._knockout;
                            },
                            set: function (value) {
                                this._knockout = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientGlowFilter.prototype, "quality", {
                            get: function () {
                                return this._quality;
                            },
                            set: function (value) {
                                this._quality = Shumway.NumberUtilities.clamp(value | 0, 0, 15);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientGlowFilter.prototype, "strength", {
                            get: function () {
                                return this._strength;
                            },
                            set: function (value) {
                                this._strength = Shumway.NumberUtilities.clamp(+value, 0, 255);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GradientGlowFilter.prototype, "type", {
                            get: function () {
                                return this._type;
                            },
                            set: function (value) {
                                value = asCoerceString(value);
                                if (value === null) {
                                    AVM2.Runtime.throwError("TypeError", AVM2.Errors.NullPointerError, "type");
                                }
                                else {
                                    if (value === filters.BitmapFilterType.INNER || value === filters.BitmapFilterType.OUTER) {
                                        this._type = value;
                                    }
                                    else {
                                        this._type = filters.BitmapFilterType.FULL;
                                    }
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        GradientGlowFilter.prototype.clone = function () {
                            return new GradientGlowFilter(this._distance, this._angle, this._colors, this._alphas, this._ratios, this._blurX, this._blurY, this._strength, this._quality, this._type, this._knockout);
                        };
                        GradientGlowFilter.classInitializer = null;
                        GradientGlowFilter.initializer = null;
                        GradientGlowFilter.classSymbols = null;
                        GradientGlowFilter.instanceSymbols = null;
                        return GradientGlowFilter;
                    })(flash.filters.BitmapFilter);
                    filters.GradientGlowFilter = GradientGlowFilter;
                })(filters = flash.filters || (flash.filters = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var geom;
                (function (geom) {
                    var toS16 = Shumway.IntegerUtilities.toS16;
                    var clampS8U8 = Shumway.IntegerUtilities.clampS8U8;
                    var ColorTransform = (function (_super) {
                        __extends(ColorTransform, _super);
                        function ColorTransform(redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier, redOffset, greenOffset, blueOffset, alphaOffset) {
                            if (redMultiplier === void 0) { redMultiplier = 1; }
                            if (greenMultiplier === void 0) { greenMultiplier = 1; }
                            if (blueMultiplier === void 0) { blueMultiplier = 1; }
                            if (alphaMultiplier === void 0) { alphaMultiplier = 1; }
                            if (redOffset === void 0) { redOffset = 0; }
                            if (greenOffset === void 0) { greenOffset = 0; }
                            if (blueOffset === void 0) { blueOffset = 0; }
                            if (alphaOffset === void 0) { alphaOffset = 0; }
                            false && _super.call(this);
                            this.redMultiplier = +redMultiplier;
                            this.greenMultiplier = +greenMultiplier;
                            this.blueMultiplier = +blueMultiplier;
                            this.alphaMultiplier = +alphaMultiplier;
                            this.redOffset = +redOffset;
                            this.greenOffset = +greenOffset;
                            this.blueOffset = +blueOffset;
                            this.alphaOffset = +alphaOffset;
                        }
                        Object.defineProperty(ColorTransform.prototype, "native_redMultiplier", {
                            get: function () {
                                return this.redMultiplier;
                            },
                            set: function (redMultiplier) {
                                this.redMultiplier = +redMultiplier;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ColorTransform.prototype, "native_greenMultiplier", {
                            get: function () {
                                return this.greenMultiplier;
                            },
                            set: function (greenMultiplier) {
                                this.greenMultiplier = +greenMultiplier;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ColorTransform.prototype, "native_blueMultiplier", {
                            get: function () {
                                return this.blueMultiplier;
                            },
                            set: function (blueMultiplier) {
                                this.blueMultiplier = +blueMultiplier;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ColorTransform.prototype, "native_alphaMultiplier", {
                            get: function () {
                                return this.alphaMultiplier;
                            },
                            set: function (alphaMultiplier) {
                                this.alphaMultiplier = +alphaMultiplier;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ColorTransform.prototype, "native_redOffset", {
                            get: function () {
                                return this.redOffset;
                            },
                            set: function (redOffset) {
                                this.redOffset = +redOffset;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ColorTransform.prototype, "native_greenOffset", {
                            get: function () {
                                return this.greenOffset;
                            },
                            set: function (greenOffset) {
                                this.greenOffset = +greenOffset;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ColorTransform.prototype, "native_blueOffset", {
                            get: function () {
                                return this.blueOffset;
                            },
                            set: function (blueOffset) {
                                this.blueOffset = +blueOffset;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ColorTransform.prototype, "native_alphaOffset", {
                            get: function () {
                                return this.alphaOffset;
                            },
                            set: function (alphaOffset) {
                                this.alphaOffset = +alphaOffset;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        ColorTransform.prototype.ColorTransform = function (redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier, redOffset, greenOffset, blueOffset, alphaOffset) {
                            if (redMultiplier === void 0) { redMultiplier = 1; }
                            if (greenMultiplier === void 0) { greenMultiplier = 1; }
                            if (blueMultiplier === void 0) { blueMultiplier = 1; }
                            if (alphaMultiplier === void 0) { alphaMultiplier = 1; }
                            if (redOffset === void 0) { redOffset = 0; }
                            if (greenOffset === void 0) { greenOffset = 0; }
                            if (blueOffset === void 0) { blueOffset = 0; }
                            if (alphaOffset === void 0) { alphaOffset = 0; }
                            this.redMultiplier = redMultiplier;
                            this.greenMultiplier = greenMultiplier;
                            this.blueMultiplier = blueMultiplier;
                            this.alphaMultiplier = alphaMultiplier;
                            this.redOffset = redOffset;
                            this.greenOffset = greenOffset;
                            this.blueOffset = blueOffset;
                            this.alphaOffset = alphaOffset;
                        };
                        Object.defineProperty(ColorTransform.prototype, "color", {
                            get: function () {
                                return (this.redOffset << 16) | (this.greenOffset << 8) | this.blueOffset;
                            },
                            set: function (newColor) {
                                this.redOffset = (newColor >> 16) & 0xff;
                                this.greenOffset = (newColor >> 8) & 0xff;
                                this.blueOffset = newColor & 0xff;
                                this.redMultiplier = this.greenMultiplier = this.blueMultiplier = 1;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        ColorTransform.prototype.concat = function (second) {
                            this.redMultiplier *= second.redMultiplier;
                            this.greenMultiplier *= second.greenMultiplier;
                            this.blueMultiplier *= second.blueMultiplier;
                            this.alphaMultiplier *= second.alphaMultiplier;
                            this.redOffset += second.redOffset;
                            this.greenOffset += second.greenOffset;
                            this.blueOffset += second.blueOffset;
                            this.alphaOffset += second.alphaOffset;
                        };
                        ColorTransform.prototype.preMultiply = function (second) {
                            this.redOffset += second.redOffset * this.redMultiplier;
                            this.greenOffset += second.greenOffset * this.greenMultiplier;
                            this.blueOffset += second.blueOffset * this.blueMultiplier;
                            this.alphaOffset += second.alphaOffset * this.alphaMultiplier;
                            this.redMultiplier *= second.redMultiplier;
                            this.greenMultiplier *= second.greenMultiplier;
                            this.blueMultiplier *= second.blueMultiplier;
                            this.alphaMultiplier *= second.alphaMultiplier;
                        };
                        ColorTransform.prototype.copyFrom = function (sourceColorTransform) {
                            this.redMultiplier = sourceColorTransform.redMultiplier;
                            this.greenMultiplier = sourceColorTransform.greenMultiplier;
                            this.blueMultiplier = sourceColorTransform.blueMultiplier;
                            this.alphaMultiplier = sourceColorTransform.alphaMultiplier;
                            this.redOffset = sourceColorTransform.redOffset;
                            this.greenOffset = sourceColorTransform.greenOffset;
                            this.blueOffset = sourceColorTransform.blueOffset;
                            this.alphaOffset = sourceColorTransform.alphaOffset;
                        };
                        ColorTransform.prototype.copyFromUntyped = function (object) {
                            this.redMultiplier = object.redMultiplier / 256;
                            this.greenMultiplier = object.greenMultiplier / 256;
                            this.blueMultiplier = object.blueMultiplier / 256;
                            this.alphaMultiplier = object.alphaMultiplier / 256;
                            this.redOffset = object.redOffset;
                            this.greenOffset = object.greenOffset;
                            this.blueOffset = object.blueOffset;
                            this.alphaOffset = object.alphaOffset;
                        };
                        ColorTransform.prototype.setTo = function (redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier, redOffset, greenOffset, blueOffset, alphaOffset) {
                            this.redMultiplier = redMultiplier;
                            this.greenMultiplier = greenMultiplier;
                            this.blueMultiplier = blueMultiplier;
                            this.alphaMultiplier = alphaMultiplier;
                            this.redOffset = redOffset;
                            this.greenOffset = greenOffset;
                            this.blueOffset = blueOffset;
                            this.alphaOffset = alphaOffset;
                        };
                        ColorTransform.prototype.clone = function () {
                            return new ColorTransform(this.redMultiplier, this.greenMultiplier, this.blueMultiplier, this.alphaMultiplier, this.redOffset, this.greenOffset, this.blueOffset, this.alphaOffset);
                        };
                        ColorTransform.prototype.convertToFixedPoint = function () {
                            this.redMultiplier = clampS8U8(this.redMultiplier);
                            this.greenMultiplier = clampS8U8(this.greenMultiplier);
                            this.blueMultiplier = clampS8U8(this.blueMultiplier);
                            this.alphaMultiplier = clampS8U8(this.alphaMultiplier);
                            this.redOffset = toS16(this.redOffset);
                            this.greenOffset = toS16(this.greenOffset);
                            this.blueOffset = toS16(this.blueOffset);
                            this.alphaOffset = toS16(this.alphaOffset);
                            return this;
                        };
                        ColorTransform.prototype.toString = function () {
                            return "(redMultiplier=" + this.redMultiplier + ", greenMultiplier=" + this.greenMultiplier + ", blueMultiplier=" + this.blueMultiplier + ", alphaMultiplier=" + this.alphaMultiplier + ", redOffset=" + this.redOffset + ", greenOffset=" + this.greenOffset + ", blueOffset=" + this.blueOffset + ", alphaOffset=" + this.alphaOffset + ")";
                        };
                        ColorTransform.classInitializer = null;
                        ColorTransform.initializer = null;
                        ColorTransform.classSymbols = null;
                        ColorTransform.instanceSymbols = null;
                        ColorTransform.FROZEN_IDENTITY_COLOR_TRANSFORM = Object.freeze(new ColorTransform());
                        ColorTransform.TEMP_COLOR_TRANSFORM = new ColorTransform();
                        return ColorTransform;
                    })(AS.ASNative);
                    geom.ColorTransform = ColorTransform;
                })(geom = flash.geom || (flash.geom = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var media;
                (function (media) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var Camera = (function (_super) {
                        __extends(Camera, _super);
                        function Camera() {
                            false && _super.call(this, undefined);
                            dummyConstructor("public flash.media.Camera");
                        }
                        Object.defineProperty(Camera.prototype, "names", {
                            get: function () {
                                notImplemented("public flash.media.Camera::get names");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Camera.prototype, "isSupported", {
                            get: function () {
                                notImplemented("public flash.media.Camera::get isSupported");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Camera.getCamera = function (name) {
                            if (name === void 0) { name = null; }
                            name = asCoerceString(name);
                            notImplemented("public flash.media.Camera::static getCamera");
                            return;
                        };
                        Camera._scanHardware = function () {
                            notImplemented("public flash.media.Camera::static _scanHardware");
                            return;
                        };
                        Object.defineProperty(Camera.prototype, "activityLevel", {
                            get: function () {
                                notImplemented("public flash.media.Camera::get activityLevel");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Camera.prototype, "bandwidth", {
                            get: function () {
                                notImplemented("public flash.media.Camera::get bandwidth");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Camera.prototype, "currentFPS", {
                            get: function () {
                                notImplemented("public flash.media.Camera::get currentFPS");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Camera.prototype, "fps", {
                            get: function () {
                                notImplemented("public flash.media.Camera::get fps");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Camera.prototype, "height", {
                            get: function () {
                                notImplemented("public flash.media.Camera::get height");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Camera.prototype, "index", {
                            get: function () {
                                notImplemented("public flash.media.Camera::get index");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Camera.prototype, "keyFrameInterval", {
                            get: function () {
                                notImplemented("public flash.media.Camera::get keyFrameInterval");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Camera.prototype, "loopback", {
                            get: function () {
                                notImplemented("public flash.media.Camera::get loopback");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Camera.prototype, "motionLevel", {
                            get: function () {
                                notImplemented("public flash.media.Camera::get motionLevel");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Camera.prototype, "motionTimeout", {
                            get: function () {
                                notImplemented("public flash.media.Camera::get motionTimeout");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Camera.prototype, "muted", {
                            get: function () {
                                notImplemented("public flash.media.Camera::get muted");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Camera.prototype, "name", {
                            get: function () {
                                notImplemented("public flash.media.Camera::get name");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Camera.prototype, "position", {
                            get: function () {
                                notImplemented("public flash.media.Camera::get position");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Camera.prototype, "quality", {
                            get: function () {
                                notImplemented("public flash.media.Camera::get quality");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Camera.prototype, "width", {
                            get: function () {
                                notImplemented("public flash.media.Camera::get width");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Camera.prototype.setCursor = function (value) {
                            value = !!value;
                            notImplemented("public flash.media.Camera::setCursor");
                            return;
                        };
                        Camera.prototype.setKeyFrameInterval = function (keyFrameInterval) {
                            keyFrameInterval = keyFrameInterval | 0;
                            notImplemented("public flash.media.Camera::setKeyFrameInterval");
                            return;
                        };
                        Camera.prototype.setLoopback = function (compress) {
                            if (compress === void 0) { compress = false; }
                            compress = !!compress;
                            notImplemented("public flash.media.Camera::setLoopback");
                            return;
                        };
                        Camera.prototype.setMode = function (width, height, fps, favorArea) {
                            if (favorArea === void 0) { favorArea = true; }
                            width = width | 0;
                            height = height | 0;
                            fps = +fps;
                            favorArea = !!favorArea;
                            notImplemented("public flash.media.Camera::setMode");
                            return;
                        };
                        Camera.prototype.setMotionLevel = function (motionLevel, timeout) {
                            if (timeout === void 0) { timeout = 2000; }
                            motionLevel = motionLevel | 0;
                            timeout = timeout | 0;
                            notImplemented("public flash.media.Camera::setMotionLevel");
                            return;
                        };
                        Camera.prototype.setQuality = function (bandwidth, quality) {
                            bandwidth = bandwidth | 0;
                            quality = quality | 0;
                            notImplemented("public flash.media.Camera::setQuality");
                            return;
                        };
                        Camera.prototype.drawToBitmapData = function (destination) {
                            destination = destination;
                            notImplemented("public flash.media.Camera::drawToBitmapData");
                            return;
                        };
                        Camera.prototype.copyToByteArray = function (rect, destination) {
                            rect = rect;
                            destination = destination;
                            notImplemented("public flash.media.Camera::copyToByteArray");
                            return;
                        };
                        Camera.prototype.copyToVector = function (rect, destination) {
                            rect = rect;
                            destination = destination;
                            notImplemented("public flash.media.Camera::copyToVector");
                            return;
                        };
                        Camera.classInitializer = null;
                        Camera.initializer = null;
                        Camera.classSymbols = null;
                        Camera.instanceSymbols = null;
                        return Camera;
                    })(flash.events.EventDispatcher);
                    media.Camera = Camera;
                })(media = flash.media || (flash.media = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var media;
                (function (media) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var ID3Info = (function (_super) {
                        __extends(ID3Info, _super);
                        function ID3Info() {
                            false && _super.call(this);
                            dummyConstructor("public flash.media.ID3Info");
                        }
                        ID3Info.classInitializer = null;
                        ID3Info.initializer = null;
                        ID3Info.classSymbols = null;
                        ID3Info.instanceSymbols = ["songName", "artist", "album", "year", "comment", "genre", "track"];
                        return ID3Info;
                    })(AS.ASNative);
                    media.ID3Info = ID3Info;
                })(media = flash.media || (flash.media = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var media;
                (function (media) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var Microphone = (function (_super) {
                        __extends(Microphone, _super);
                        function Microphone() {
                            false && _super.call(this, undefined);
                            dummyConstructor("public flash.media.Microphone");
                        }
                        Object.defineProperty(Microphone, "names", {
                            get: function () {
                                somewhatImplemented("public flash.media.Microphone::get names");
                                return [];
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Microphone, "isSupported", {
                            get: function () {
                                somewhatImplemented("public flash.media.Microphone::get isSupported");
                                return false;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Microphone.getMicrophone = function (index) {
                            if (index === void 0) { index = -1; }
                            index = index | 0;
                            notImplemented("public flash.media.Microphone::static getMicrophone");
                            return;
                        };
                        Microphone.getEnhancedMicrophone = function (index) {
                            if (index === void 0) { index = -1; }
                            index = index | 0;
                            notImplemented("public flash.media.Microphone::static getEnhancedMicrophone");
                            return;
                        };
                        Object.defineProperty(Microphone.prototype, "rate", {
                            get: function () {
                                notImplemented("public flash.media.Microphone::get rate");
                                return;
                            },
                            set: function (rate) {
                                rate = rate | 0;
                                notImplemented("public flash.media.Microphone::set rate");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Microphone.prototype, "codec", {
                            get: function () {
                                notImplemented("public flash.media.Microphone::get codec");
                                return;
                            },
                            set: function (codec) {
                                codec = asCoerceString(codec);
                                notImplemented("public flash.media.Microphone::set codec");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Microphone.prototype, "framesPerPacket", {
                            get: function () {
                                notImplemented("public flash.media.Microphone::get framesPerPacket");
                                return;
                            },
                            set: function (frames) {
                                frames = frames | 0;
                                notImplemented("public flash.media.Microphone::set framesPerPacket");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Microphone.prototype, "encodeQuality", {
                            get: function () {
                                notImplemented("public flash.media.Microphone::get encodeQuality");
                                return;
                            },
                            set: function (quality) {
                                quality = quality | 0;
                                notImplemented("public flash.media.Microphone::set encodeQuality");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Microphone.prototype, "noiseSuppressionLevel", {
                            get: function () {
                                notImplemented("public flash.media.Microphone::get noiseSuppressionLevel");
                                return;
                            },
                            set: function (level) {
                                level = level | 0;
                                notImplemented("public flash.media.Microphone::set noiseSuppressionLevel");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Microphone.prototype, "enableVAD", {
                            get: function () {
                                notImplemented("public flash.media.Microphone::get enableVAD");
                                return;
                            },
                            set: function (enable) {
                                enable = !!enable;
                                notImplemented("public flash.media.Microphone::set enableVAD");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Microphone.prototype, "activityLevel", {
                            get: function () {
                                notImplemented("public flash.media.Microphone::get activityLevel");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Microphone.prototype, "gain", {
                            get: function () {
                                notImplemented("public flash.media.Microphone::get gain");
                                return;
                            },
                            set: function (gain) {
                                gain = +gain;
                                notImplemented("public flash.media.Microphone::set gain");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Microphone.prototype, "index", {
                            get: function () {
                                notImplemented("public flash.media.Microphone::get index");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Microphone.prototype, "muted", {
                            get: function () {
                                notImplemented("public flash.media.Microphone::get muted");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Microphone.prototype, "name", {
                            get: function () {
                                notImplemented("public flash.media.Microphone::get name");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Microphone.prototype, "silenceLevel", {
                            get: function () {
                                notImplemented("public flash.media.Microphone::get silenceLevel");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Microphone.prototype, "silenceTimeout", {
                            get: function () {
                                notImplemented("public flash.media.Microphone::get silenceTimeout");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Microphone.prototype, "useEchoSuppression", {
                            get: function () {
                                notImplemented("public flash.media.Microphone::get useEchoSuppression");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Microphone.prototype, "soundTransform", {
                            get: function () {
                                notImplemented("public flash.media.Microphone::get soundTransform");
                                return;
                            },
                            set: function (sndTransform) {
                                sndTransform = sndTransform;
                                notImplemented("public flash.media.Microphone::set soundTransform");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Microphone.prototype, "enhancedOptions", {
                            get: function () {
                                notImplemented("public flash.media.Microphone::get enhancedOptions");
                                return;
                            },
                            set: function (options) {
                                options = options;
                                notImplemented("public flash.media.Microphone::set enhancedOptions");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Microphone.prototype.setSilenceLevel = function (silenceLevel, timeout) {
                            if (timeout === void 0) { timeout = -1; }
                            silenceLevel = +silenceLevel;
                            timeout = timeout | 0;
                            notImplemented("public flash.media.Microphone::setSilenceLevel");
                            return;
                        };
                        Microphone.prototype.setUseEchoSuppression = function (useEchoSuppression) {
                            useEchoSuppression = !!useEchoSuppression;
                            notImplemented("public flash.media.Microphone::setUseEchoSuppression");
                            return;
                        };
                        Microphone.prototype.setLoopBack = function (state) {
                            if (state === void 0) { state = true; }
                            state = !!state;
                            notImplemented("public flash.media.Microphone::setLoopBack");
                            return;
                        };
                        Microphone.classInitializer = null;
                        Microphone.initializer = null;
                        Microphone.classSymbols = null;
                        Microphone.instanceSymbols = null;
                        return Microphone;
                    })(flash.events.EventDispatcher);
                    media.Microphone = Microphone;
                })(media = flash.media || (flash.media = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var media;
                (function (media) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var Telemetry = Shumway.Telemetry;
                    var Multiname = Shumway.AVM2.ABC.Multiname;
                    function getAudioDescription(soundData, onComplete) {
                        var audioElement = document.createElement('audio');
                        if (!audioElement.canPlayType(soundData.mimeType)) {
                            onComplete({
                                duration: 0
                            });
                            return;
                        }
                        audioElement.preload = 'metadata';
                        var blob = new Blob([soundData.data], { type: soundData.mimeType });
                        audioElement.src = URL.createObjectURL(blob);
                        audioElement.load();
                        audioElement.addEventListener("loadedmetadata", function () {
                            onComplete({
                                duration: this.duration * 1000
                            });
                        });
                    }
                    var SoundData = (function () {
                        function SoundData() {
                        }
                        return SoundData;
                    })();
                    var Sound = (function (_super) {
                        __extends(Sound, _super);
                        function Sound(stream, context) {
                            false && _super.call(this, undefined);
                            flash.events.EventDispatcher.instanceConstructorNoInitialize.call(this);
                            this._isURLInaccessible = false;
                            this._isBuffering = false;
                            this.load(stream, context);
                        }
                        Object.defineProperty(Sound.prototype, "url", {
                            get: function () {
                                return this._url;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Sound.prototype, "isURLInaccessible", {
                            get: function () {
                                somewhatImplemented("public flash.media.Sound::get isURLInaccessible");
                                return this._isURLInaccessible;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Sound.prototype, "length", {
                            get: function () {
                                return this._length;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Sound.prototype, "isBuffering", {
                            get: function () {
                                somewhatImplemented("public flash.media.Sound::get isBuffering");
                                return this._isBuffering;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Sound.prototype, "bytesLoaded", {
                            get: function () {
                                return this._bytesLoaded;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Sound.prototype, "bytesTotal", {
                            get: function () {
                                return this._bytesTotal;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Sound.prototype, "id3", {
                            get: function () {
                                return this._id3;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Sound.prototype.loadCompressedDataFromByteArray = function (bytes, bytesLength) {
                            bytes = bytes;
                            bytesLength = bytesLength >>> 0;
                            notImplemented("public flash.media.Sound::loadCompressedDataFromByteArray");
                            return;
                        };
                        Sound.prototype.loadPCMFromByteArray = function (bytes, samples, format, stereo, sampleRate) {
                            if (format === void 0) { format = "float"; }
                            if (stereo === void 0) { stereo = true; }
                            if (sampleRate === void 0) { sampleRate = 44100; }
                            bytes = bytes;
                            samples = samples >>> 0;
                            format = asCoerceString(format);
                            stereo = !!stereo;
                            sampleRate = +sampleRate;
                            notImplemented("public flash.media.Sound::loadPCMFromByteArray");
                            return;
                        };
                        Sound.prototype.play = function (startTime, loops, sndTransform) {
                            if (startTime === void 0) { startTime = 0; }
                            if (loops === void 0) { loops = 0; }
                            if (sndTransform === void 0) { sndTransform = null; }
                            startTime = +startTime;
                            loops = loops | 0;
                            var channel = new flash.media.SoundChannel();
                            channel._sound = this;
                            channel._soundTransform = Shumway.isNullOrUndefined(sndTransform) ? new flash.media.SoundTransform() : sndTransform;
                            this._playQueue.push({
                                channel: channel,
                                startTime: startTime
                            });
                            if (AS.disableAudioOption.value) {
                                return channel;
                            }
                            if (this._soundData) {
                                if (!AS.webAudioOption.value && !AS.webAudioMP3Option.value) {
                                    channel._playSoundDataViaAudio(this._soundData, startTime, loops);
                                }
                                else if (!this._soundData.pcm) {
                                    if (this._soundData.mimeType === 'audio/mpeg' && AS.webAudioMP3Option.value) {
                                        Shumway.SWF.MP3DecoderSession.processAll(new Uint8Array(this._soundData.data)).then(function (result) {
                                            this._soundData.pcm = result.data;
                                            this._soundData.end = result.data.length;
                                            channel._playSoundDataViaChannel(this._soundData, startTime, loops);
                                        }.bind(this), function (reason) {
                                            console.warn('Unable to decode MP3 data: ' + reason);
                                        });
                                    }
                                    else {
                                        console.warn('Unable to decode packaged sound data of type: ' + this._soundData.mimeType);
                                    }
                                }
                                else {
                                    channel._playSoundDataViaChannel(this._soundData, startTime, loops);
                                }
                            }
                            return channel;
                        };
                        Sound.prototype.close = function () {
                            somewhatImplemented("public flash.media.Sound::close");
                        };
                        Sound.prototype.extract = function (target, length, startPosition) {
                            if (startPosition === void 0) { startPosition = -1; }
                            target = target;
                            length = +length;
                            startPosition = +startPosition;
                            notImplemented("public flash.media.Sound::extract");
                            return;
                        };
                        Sound.prototype.load = function (request, context) {
                            if (!request) {
                                return;
                            }
                            var checkPolicyFile = context ? context.checkPolicyFile : false;
                            var bufferTime = context ? context.bufferTime : 1000;
                            var _this = this;
                            var stream = this._stream = new flash.net.URLStream();
                            var data = new flash.utils.ByteArray();
                            var dataPosition = 0;
                            var playUsingWebAudio = AS.webAudioOption.value;
                            var mp3DecodingSession = null;
                            var soundData = new SoundData();
                            soundData.completed = false;
                            stream.addEventListener("progress", function (event) {
                                _this._bytesLoaded = event[Multiname.getPublicQualifiedName("bytesLoaded")];
                                _this._bytesTotal = event[Multiname.getPublicQualifiedName("bytesTotal")];
                                if (playUsingWebAudio && !mp3DecodingSession) {
                                    mp3DecodingSession = decodeMP3(soundData, function (duration, final) {
                                        if (_this._length === 0) {
                                            _this._soundData = soundData;
                                            _this._playQueue.forEach(function (item) {
                                                item.channel._playSoundDataViaChannel(soundData, item.startTime);
                                            });
                                        }
                                        _this._length = final ? duration * 1000 : Math.max(duration, mp3DecodingSession.estimateDuration(_this._bytesTotal)) * 1000;
                                    });
                                }
                                var bytesAvailable = stream.bytesAvailable;
                                stream.readBytes(data, dataPosition, bytesAvailable);
                                if (mp3DecodingSession) {
                                    mp3DecodingSession.pushData(new Uint8Array(data._buffer, dataPosition, bytesAvailable));
                                }
                                dataPosition += bytesAvailable;
                                _this.dispatchEvent(event);
                            });
                            stream.addEventListener("complete", function (event) {
                                _this.dispatchEvent(event);
                                soundData.data = data._buffer;
                                soundData.mimeType = 'audio/mpeg';
                                soundData.completed = true;
                                if (!playUsingWebAudio) {
                                    _this._soundData = soundData;
                                    getAudioDescription(soundData, function (description) {
                                        _this._length = description.duration;
                                    });
                                    _this._playQueue.forEach(function (item) {
                                        item.channel._playSoundDataViaAudio(soundData, item.startTime);
                                    });
                                }
                                if (mp3DecodingSession) {
                                    mp3DecodingSession.close();
                                }
                            });
                            stream.load(request);
                        };
                        Sound.classInitializer = null;
                        Sound.initializer = function (symbol) {
                            this._playQueue = [];
                            this._url = null;
                            this._length = 0;
                            this._bytesTotal = 0;
                            this._bytesLoaded = 0;
                            this._id3 = new flash.media.ID3Info();
                            Telemetry.instance.reportTelemetry({ topic: 'feature', feature: 5 /* SOUND_FEATURE */ });
                            if (symbol) {
                                var soundData = new SoundData();
                                soundData.sampleRate = symbol.sampleRate;
                                soundData.channels = symbol.channels;
                                soundData.completed = true;
                                if (symbol.pcm) {
                                    soundData.pcm = symbol.pcm;
                                    soundData.end = symbol.pcm.length;
                                }
                                if (symbol.packaged) {
                                    soundData.data = symbol.packaged.data.buffer;
                                    soundData.mimeType = symbol.packaged.mimeType;
                                }
                                var self = this;
                                getAudioDescription(soundData, function (description) {
                                    self._length = description.duration;
                                });
                                this._soundData = soundData;
                            }
                        };
                        Sound.classSymbols = null;
                        Sound.instanceSymbols = null;
                        return Sound;
                    })(flash.events.EventDispatcher);
                    media.Sound = Sound;
                    var SoundSymbol = (function (_super) {
                        __extends(SoundSymbol, _super);
                        function SoundSymbol(data) {
                            _super.call(this, data, flash.media.Sound);
                        }
                        SoundSymbol.FromData = function (data) {
                            var symbol = new SoundSymbol(data);
                            symbol.channels = data.channels;
                            symbol.sampleRate = data.sampleRate;
                            symbol.pcm = data.pcm;
                            symbol.packaged = data.packaged;
                            return symbol;
                        };
                        return SoundSymbol;
                    })(Shumway.Timeline.Symbol);
                    media.SoundSymbol = SoundSymbol;
                })(media = flash.media || (flash.media = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var media;
                (function (media) {
                    var assert = Shumway.Debug.assert;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var error = Shumway.Debug.error;
                    function createAudioChannel(sampleRate, channels) {
                        if (WebAudioChannel.isSupported) {
                            return new WebAudioChannel(sampleRate, channels);
                        }
                        else {
                            error('PCM data playback is not supported by the browser');
                        }
                    }
                    var AudioResampler = (function () {
                        function AudioResampler(sourceRate, targetRate) {
                            this._sourceRate = sourceRate;
                            this._targetRate = targetRate;
                            this._tail = [];
                            this._sourceOffset = 0;
                        }
                        AudioResampler.prototype.getData = function (channelsData, count) {
                            var k = this._sourceRate / this._targetRate;
                            var offset = this._sourceOffset;
                            var needed = Math.ceil((count - 1) * k + offset) + 1;
                            var sourceData = [];
                            for (var channel = 0; channel < channelsData.length; channel++) {
                                sourceData.push(new Float32Array(needed));
                            }
                            var e = { data: sourceData, count: needed };
                            this.ondatarequested(e);
                            for (var channel = 0; channel < channelsData.length; channel++) {
                                var data = channelsData[channel];
                                var source = sourceData[channel];
                                for (var j = 0; j < count; j++) {
                                    var i = j * k + offset;
                                    var i1 = i | 0, i2 = Math.ceil(i) | 0;
                                    var source_i1 = i1 < 0 ? this._tail[channel] : source[i1];
                                    if (i1 === i2) {
                                        data[j] = source_i1;
                                    }
                                    else {
                                        var alpha = i - i1;
                                        data[j] = source_i1 * (1 - alpha) + source[i2] * alpha;
                                    }
                                }
                                this._tail[channel] = source[needed - 1];
                            }
                            this._sourceOffset = ((count - 1) * k + offset) - (needed - 1);
                        };
                        return AudioResampler;
                    })();
                    var WebAudioChannel = (function () {
                        function WebAudioChannel(sampleRate, channels) {
                            var context = WebAudioChannel._cachedContext;
                            if (!context) {
                                context = new AudioContext();
                                WebAudioChannel._cachedContext = context;
                            }
                            this._context = context;
                            this._contextSampleRate = context.sampleRate || 44100;
                            this._channels = channels;
                            this._sampleRate = sampleRate;
                            if (this._contextSampleRate !== sampleRate) {
                                this._resampler = new AudioResampler(sampleRate, this._contextSampleRate);
                                this._resampler.ondatarequested = function (e) {
                                    this.requestData(e.data, e.count);
                                }.bind(this);
                            }
                        }
                        WebAudioChannel.prototype.setVolume = function (value) {
                        };
                        WebAudioChannel.prototype.start = function () {
                            var source = this._context.createScriptProcessor(2048, 0, this._channels);
                            var self = this;
                            source.onaudioprocess = function (e) {
                                var channelsData = [];
                                for (var i = 0; i < self._channels; i++) {
                                    channelsData.push(e.outputBuffer.getChannelData(i));
                                }
                                var count = channelsData[0].length;
                                if (self._resampler) {
                                    self._resampler.getData(channelsData, count);
                                }
                                else {
                                    self.requestData(channelsData, count);
                                }
                            };
                            source.connect(this._context.destination);
                            this._source = source;
                        };
                        WebAudioChannel.prototype.stop = function () {
                            this._source.disconnect(this._context.destination);
                        };
                        WebAudioChannel.prototype.requestData = function (channelsData, count) {
                            var channels = this._channels;
                            var buffer = new Float32Array(count * channels);
                            var e = { data: buffer, count: buffer.length };
                            this.ondatarequested(e);
                            for (var j = 0, p = 0; j < count; j++) {
                                for (var i = 0; i < channels; i++) {
                                    channelsData[i][j] = buffer[p++];
                                }
                            }
                        };
                        WebAudioChannel.isSupported = function () {
                            return typeof AudioContext !== 'undefined';
                        };
                        return WebAudioChannel;
                    })();
                    var SoundChannel = (function (_super) {
                        __extends(SoundChannel, _super);
                        function SoundChannel() {
                            false && _super.call(this, undefined);
                            dummyConstructor("public flash.media.SoundChannel");
                        }
                        Object.defineProperty(SoundChannel.prototype, "position", {
                            get: function () {
                                return this._position;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SoundChannel.prototype, "soundTransform", {
                            get: function () {
                                return this._soundTransform;
                            },
                            set: function (sndTransform) {
                                somewhatImplemented("public flash.media.SoundChannel::set soundTransform");
                                this._soundTransform = Shumway.isNullOrUndefined(sndTransform) ? new flash.media.SoundTransform() : sndTransform;
                                media.SoundMixer._updateSoundSource(this);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SoundChannel.prototype, "leftPeak", {
                            get: function () {
                                return this._leftPeak;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SoundChannel.prototype, "rightPeak", {
                            get: function () {
                                return this._rightPeak;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        SoundChannel.prototype.stop = function () {
                            if (this._element) {
                                media.SoundMixer._unregisterSoundSource(this);
                                this._element.loop = false;
                                this._element.pause();
                                this._element.removeAttribute('src');
                            }
                            if (this._audioChannel) {
                                media.SoundMixer._unregisterSoundSource(this);
                                this._audioChannel.stop();
                            }
                        };
                        SoundChannel.prototype._playSoundDataViaAudio = function (soundData, startTime, loops) {
                            if (!soundData.mimeType) {
                                return;
                            }
                            media.SoundMixer._registerSoundSource(this);
                            this._position = startTime;
                            var self = this;
                            var lastCurrentTime = 0;
                            var element = document.createElement('audio');
                            if (!element.canPlayType(soundData.mimeType)) {
                                console.error('ERROR: \"' + soundData.mimeType + '\" ' + 'type playback is not supported by the browser');
                                return;
                            }
                            element.preload = 'metadata';
                            element.loop = loops > 0;
                            var blob = new Blob([soundData.data], { type: soundData.mimeType });
                            element.src = URL.createObjectURL(blob);
                            element.addEventListener("loadeddata", function loaded() {
                                element.currentTime = startTime / 1000;
                                element.play();
                            });
                            element.addEventListener("timeupdate", function timeupdate() {
                                var currentTime = element.currentTime;
                                if (loops && lastCurrentTime > currentTime) {
                                    --loops;
                                    if (!loops) {
                                        element.loop = false;
                                    }
                                    if (currentTime < startTime / 1000) {
                                        element.currentTime = startTime / 1000;
                                    }
                                }
                                self._position = (lastCurrentTime = currentTime) * 1000;
                            });
                            element.addEventListener("ended", function ended() {
                                media.SoundMixer._unregisterSoundSource(self);
                                self.dispatchEvent(new flash.events.Event("soundComplete", false, false));
                                self._element = null;
                            });
                            this._element = element;
                            media.SoundMixer._updateSoundSource(this);
                        };
                        SoundChannel.prototype._playSoundDataViaChannel = function (soundData, startTime, loops) {
                            release || assert(soundData.pcm, 'no pcm data found');
                            media.SoundMixer._registerSoundSource(this);
                            var self = this;
                            var startPosition = Math.round(startTime / 1000 * soundData.sampleRate) * soundData.channels;
                            var position = startPosition;
                            this._position = startTime;
                            this._audioChannel = createAudioChannel(soundData.sampleRate, soundData.channels);
                            this._audioChannel.ondatarequested = function (e) {
                                var end = soundData.end;
                                if (position >= end && soundData.completed) {
                                    media.SoundMixer._unregisterSoundSource(this);
                                    self._audioChannel.stop();
                                    self.dispatchEvent(new flash.events.Event("soundComplete", false, false));
                                    return;
                                }
                                var left = e.count;
                                var data = e.data;
                                var source = soundData.pcm;
                                do {
                                    var count = Math.min(end - position, left);
                                    for (var j = 0; j < count; j++) {
                                        data[j] = source[position++];
                                    }
                                    left -= count;
                                    if (position >= end) {
                                        if (!loops) {
                                            break;
                                        }
                                        loops--;
                                        position = startPosition;
                                    }
                                } while (left > 0);
                                self._position = position / soundData.sampleRate / soundData.channels * 1000;
                            };
                            this._audioChannel.start();
                            media.SoundMixer._updateSoundSource(this);
                        };
                        SoundChannel.prototype.stopSound = function () {
                            this.stop();
                        };
                        SoundChannel.prototype.updateSoundLevels = function (volume) {
                            if (this._element) {
                                this._element.volume = volume <= 0 ? 0 : volume >= 1.0 ? 1.0 : volume;
                            }
                            if (this._audioChannel) {
                                this._audioChannel.setVolume(volume);
                            }
                        };
                        SoundChannel.classInitializer = null;
                        SoundChannel.initializer = function (symbol) {
                            this._element = null;
                            this._position = 0;
                            this._leftPeak = 0;
                            this._rightPeak = 0;
                            this._pcmData = null;
                            this._soundTransform = new flash.media.SoundTransform();
                        };
                        SoundChannel.classSymbols = null;
                        SoundChannel.instanceSymbols = null;
                        return SoundChannel;
                    })(flash.events.EventDispatcher);
                    media.SoundChannel = SoundChannel;
                })(media = flash.media || (flash.media = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var media;
                (function (media) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var SoundLoaderContext = (function (_super) {
                        __extends(SoundLoaderContext, _super);
                        function SoundLoaderContext(bufferTime, checkPolicyFile) {
                            if (bufferTime === void 0) { bufferTime = 1000; }
                            if (checkPolicyFile === void 0) { checkPolicyFile = false; }
                            bufferTime = +bufferTime;
                            checkPolicyFile = !!checkPolicyFile;
                            false && _super.call(this);
                            dummyConstructor("public flash.media.SoundLoaderContext");
                        }
                        SoundLoaderContext.classInitializer = null;
                        SoundLoaderContext.initializer = null;
                        SoundLoaderContext.classSymbols = null;
                        SoundLoaderContext.instanceSymbols = null;
                        return SoundLoaderContext;
                    })(AS.ASNative);
                    media.SoundLoaderContext = SoundLoaderContext;
                })(media = flash.media || (flash.media = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var media;
                (function (media) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var SoundMixer = (function (_super) {
                        __extends(SoundMixer, _super);
                        function SoundMixer() {
                            false && _super.call(this);
                            dummyConstructor("public flash.media.SoundMixer");
                        }
                        Object.defineProperty(SoundMixer, "bufferTime", {
                            get: function () {
                                notImplemented("public flash.media.SoundMixer::get bufferTime");
                                return SoundMixer._bufferTime;
                            },
                            set: function (bufferTime) {
                                somewhatImplemented("public flash.media.SoundMixer::set bufferTime");
                                SoundMixer._bufferTime = bufferTime | 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SoundMixer, "soundTransform", {
                            get: function () {
                                somewhatImplemented("public flash.media.SoundMixer::get soundTransform");
                                return Shumway.isNullOrUndefined(SoundMixer._soundTransform) ? new flash.media.SoundTransform() : new flash.media.SoundTransform(SoundMixer._soundTransform.volume, SoundMixer._soundTransform.pan);
                            },
                            set: function (sndTransform) {
                                somewhatImplemented("public flash.media.SoundMixer::set soundTransform");
                                SoundMixer._soundTransform = Shumway.isNullOrUndefined(sndTransform) ? new flash.media.SoundTransform() : sndTransform;
                                SoundMixer._updateAllSoundSources();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SoundMixer, "audioPlaybackMode", {
                            get: function () {
                                notImplemented("public flash.media.SoundMixer::get audioPlaybackMode");
                                return;
                            },
                            set: function (value) {
                                value = asCoerceString(value);
                                notImplemented("public flash.media.SoundMixer::set audioPlaybackMode");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SoundMixer, "useSpeakerphoneForVoice", {
                            get: function () {
                                notImplemented("public flash.media.SoundMixer::get useSpeakerphoneForVoice");
                                return;
                            },
                            set: function (value) {
                                value = !!value;
                                notImplemented("public flash.media.SoundMixer::set useSpeakerphoneForVoice");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        SoundMixer.stopAll = function () {
                            SoundMixer._registeredSoundSources.forEach(function (channel) {
                                channel.stopSound();
                            });
                            SoundMixer._registeredSoundSources = [];
                        };
                        SoundMixer.computeSpectrum = function (outputArray, FFTMode, stretchFactor) {
                            if (FFTMode === void 0) { FFTMode = false; }
                            if (stretchFactor === void 0) { stretchFactor = 0; }
                            FFTMode = !!FFTMode;
                            stretchFactor = stretchFactor | 0;
                            somewhatImplemented("public flash.media.SoundMixer::static computeSpectrum");
                            var data = new Float32Array(1024);
                            for (var i = 0; i < 1024; i++) {
                                data[i] = Math.random();
                            }
                            outputArray.writeRawBytes(data);
                            outputArray.position = 0;
                        };
                        SoundMixer.areSoundsInaccessible = function () {
                            notImplemented("public flash.media.SoundMixer::static areSoundsInaccessible");
                            return;
                        };
                        SoundMixer._getMasterVolume = function () {
                            return SoundMixer._masterVolume;
                        };
                        SoundMixer._setMasterVolume = function (volume) {
                            volume = +volume;
                            SoundMixer._masterVolume = volume;
                            SoundMixer._updateAllSoundSources();
                        };
                        SoundMixer._registerSoundSource = function (source) {
                            SoundMixer._registeredSoundSources.push(source);
                        };
                        SoundMixer._unregisterSoundSource = function (source) {
                            var index = SoundMixer._registeredSoundSources.indexOf(source);
                            if (index >= 0) {
                                SoundMixer._registeredSoundSources.splice(index, 1);
                            }
                        };
                        SoundMixer._updateSoundSource = function (source) {
                            var volume = source.soundTransform.volume;
                            if (SoundMixer._soundTransform) {
                                volume *= SoundMixer._soundTransform.volume;
                            }
                            volume *= SoundMixer._getMasterVolume();
                            source.updateSoundLevels(volume);
                        };
                        SoundMixer._updateAllSoundSources = function () {
                            SoundMixer._registeredSoundSources.forEach(SoundMixer._updateSoundSource);
                        };
                        SoundMixer.classInitializer = null;
                        SoundMixer.initializer = null;
                        SoundMixer.classSymbols = null;
                        SoundMixer.instanceSymbols = null;
                        SoundMixer._masterVolume = 1;
                        SoundMixer._registeredSoundSources = [];
                        SoundMixer._bufferTime = 0;
                        return SoundMixer;
                    })(AS.ASNative);
                    media.SoundMixer = SoundMixer;
                })(media = flash.media || (flash.media = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var media;
                (function (media) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var SoundTransform = (function (_super) {
                        __extends(SoundTransform, _super);
                        function SoundTransform(vol, panning) {
                            if (vol === void 0) { vol = 1; }
                            if (panning === void 0) { panning = 0; }
                            vol = +vol;
                            panning = +panning;
                            false && _super.call(this);
                            dummyConstructor("public flash.media.SoundTransform");
                        }
                        Object.defineProperty(SoundTransform.prototype, "volume", {
                            get: function () {
                                return this._volume;
                            },
                            set: function (volume) {
                                volume = +volume;
                                this._volume = volume;
                                this._updateTransform();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SoundTransform.prototype, "leftToLeft", {
                            get: function () {
                                return this._leftToLeft;
                            },
                            set: function (leftToLeft) {
                                leftToLeft = +leftToLeft;
                                this._leftToLeft = leftToLeft;
                                this._updateTransform();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SoundTransform.prototype, "leftToRight", {
                            get: function () {
                                return this._leftToRight;
                            },
                            set: function (leftToRight) {
                                leftToRight = +leftToRight;
                                this._leftToRight = leftToRight;
                                this._updateTransform();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SoundTransform.prototype, "rightToRight", {
                            get: function () {
                                return this._rightToRight;
                            },
                            set: function (rightToRight) {
                                rightToRight = +rightToRight;
                                this._rightToRight = rightToRight;
                                this._updateTransform();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SoundTransform.prototype, "rightToLeft", {
                            get: function () {
                                return this._rightToLeft;
                            },
                            set: function (rightToLeft) {
                                rightToLeft = +rightToLeft;
                                this._rightToLeft = rightToLeft;
                                this._updateTransform();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SoundTransform.prototype, "pan", {
                            get: function () {
                                if (this._leftToRight === 0 && this._rightToLeft === 0) {
                                    return 1 - this._leftToLeft * this._leftToLeft;
                                }
                                return 0;
                            },
                            set: function (panning) {
                                this.leftToLeft = Math.sqrt(1 - panning);
                                this.leftToRight = 0;
                                this.rightToRight = Math.sqrt(1 + panning);
                                this.rightToLeft = 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        SoundTransform.prototype._updateTransform = function () {
                            somewhatImplemented("public flash.media.SoundTransform::_updateTransform");
                        };
                        SoundTransform.classInitializer = null;
                        SoundTransform.initializer = null;
                        SoundTransform.classSymbols = null;
                        SoundTransform.instanceSymbols = null;
                        return SoundTransform;
                    })(AS.ASNative);
                    media.SoundTransform = SoundTransform;
                })(media = flash.media || (flash.media = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var media;
                (function (media) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var StageVideo = (function (_super) {
                        __extends(StageVideo, _super);
                        function StageVideo() {
                            false && _super.call(this, undefined);
                            dummyConstructor("public flash.media.StageVideo");
                        }
                        Object.defineProperty(StageVideo.prototype, "viewPort", {
                            get: function () {
                                notImplemented("public flash.media.StageVideo::get viewPort");
                                return;
                            },
                            set: function (rect) {
                                rect = rect;
                                notImplemented("public flash.media.StageVideo::set viewPort");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(StageVideo.prototype, "pan", {
                            get: function () {
                                notImplemented("public flash.media.StageVideo::get pan");
                                return;
                            },
                            set: function (point) {
                                point = point;
                                notImplemented("public flash.media.StageVideo::set pan");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(StageVideo.prototype, "zoom", {
                            get: function () {
                                notImplemented("public flash.media.StageVideo::get zoom");
                                return;
                            },
                            set: function (point) {
                                point = point;
                                notImplemented("public flash.media.StageVideo::set zoom");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(StageVideo.prototype, "depth", {
                            get: function () {
                                notImplemented("public flash.media.StageVideo::get depth");
                                return;
                            },
                            set: function (depth) {
                                depth = depth | 0;
                                notImplemented("public flash.media.StageVideo::set depth");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(StageVideo.prototype, "videoWidth", {
                            get: function () {
                                notImplemented("public flash.media.StageVideo::get videoWidth");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(StageVideo.prototype, "videoHeight", {
                            get: function () {
                                notImplemented("public flash.media.StageVideo::get videoHeight");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(StageVideo.prototype, "colorSpaces", {
                            get: function () {
                                notImplemented("public flash.media.StageVideo::get colorSpaces");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        StageVideo.prototype.attachNetStream = function (netStream) {
                            netStream = netStream;
                            notImplemented("public flash.media.StageVideo::attachNetStream");
                            return;
                        };
                        StageVideo.prototype.attachCamera = function (theCamera) {
                            theCamera = theCamera;
                            notImplemented("public flash.media.StageVideo::attachCamera");
                            return;
                        };
                        StageVideo.classInitializer = null;
                        StageVideo.initializer = null;
                        StageVideo.classSymbols = null;
                        StageVideo.instanceSymbols = null;
                        return StageVideo;
                    })(flash.events.EventDispatcher);
                    media.StageVideo = StageVideo;
                })(media = flash.media || (flash.media = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var media;
                (function (media) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var StageVideoAvailability = (function (_super) {
                        __extends(StageVideoAvailability, _super);
                        function StageVideoAvailability() {
                            false && _super.call(this);
                            dummyConstructor("public flash.media.StageVideoAvailability");
                        }
                        StageVideoAvailability.classInitializer = null;
                        StageVideoAvailability.initializer = null;
                        StageVideoAvailability.classSymbols = null;
                        StageVideoAvailability.instanceSymbols = null;
                        StageVideoAvailability.AVAILABLE = "available";
                        StageVideoAvailability.UNAVAILABLE = "unavailable";
                        return StageVideoAvailability;
                    })(AS.ASNative);
                    media.StageVideoAvailability = StageVideoAvailability;
                })(media = flash.media || (flash.media = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var media;
                (function (media) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var assert = Shumway.Debug.assert;
                    var Video = (function (_super) {
                        __extends(Video, _super);
                        function Video(width, height) {
                            if (width === void 0) { width = 320; }
                            if (height === void 0) { height = 240; }
                            false && _super.call(this);
                            flash.display.DisplayObject.instanceConstructorNoInitialize.call(this);
                            width |= 0;
                            height |= 0;
                            width = width || 320;
                            height = height || 240;
                            this._setFillAndLineBoundsFromWidthAndHeight(width * 20, height * 20);
                        }
                        Object.defineProperty(Video.prototype, "deblocking", {
                            get: function () {
                                return this._deblocking;
                            },
                            set: function (value) {
                                this._deblocking = value | 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Video.prototype, "smoothing", {
                            get: function () {
                                return this._smoothing;
                            },
                            set: function (value) {
                                this._smoothing = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Video.prototype, "videoWidth", {
                            get: function () {
                                return this._videoWidth;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Video.prototype, "videoHeight", {
                            get: function () {
                                return this._videoHeight;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Video.prototype._containsPointDirectly = function (localX, localY, globalX, globalY) {
                            release || assert(this._getContentBounds().contains(localX, localY));
                            return true;
                        };
                        Video.prototype.clear = function () {
                            somewhatImplemented("public flash.media.Video::clear");
                            return;
                        };
                        Video.prototype.attachNetStream = function (netStream) {
                            if (this._netStream === netStream) {
                                return;
                            }
                            if (this._netStream) {
                                this._netStream._videoReferrer = null;
                            }
                            this._netStream = netStream;
                            if (this._netStream) {
                                netStream._videoReferrer = this;
                            }
                            this._setDirtyFlags(33554432 /* DirtyNetStream */);
                        };
                        Video.prototype.attachCamera = function (camera) {
                            notImplemented("public flash.media.Video::attachCamera");
                            return;
                        };
                        Video.classInitializer = null;
                        Video.initializer = null;
                        Video.classSymbols = null;
                        Video.instanceSymbols = null;
                        return Video;
                    })(flash.display.DisplayObject);
                    media.Video = Video;
                })(media = flash.media || (flash.media = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var media;
                (function (media) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var VideoStreamSettings = (function (_super) {
                        __extends(VideoStreamSettings, _super);
                        function VideoStreamSettings() {
                            false && _super.call(this);
                            dummyConstructor("public flash.media.VideoStreamSettings");
                        }
                        VideoStreamSettings.classInitializer = null;
                        VideoStreamSettings.initializer = null;
                        VideoStreamSettings.classSymbols = null;
                        VideoStreamSettings.instanceSymbols = null;
                        return VideoStreamSettings;
                    })(AS.ASNative);
                    media.VideoStreamSettings = VideoStreamSettings;
                })(media = flash.media || (flash.media = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var net;
                (function (net) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var FileFilter = (function (_super) {
                        __extends(FileFilter, _super);
                        function FileFilter(description, extension, macType) {
                            if (macType === void 0) { macType = null; }
                            false && _super.call(this);
                            dummyConstructor("public flash.net.FileFilter");
                        }
                        Object.defineProperty(FileFilter.prototype, "description", {
                            get: function () {
                                return this._description;
                            },
                            set: function (value) {
                                this._description = asCoerceString(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(FileFilter.prototype, "extension", {
                            get: function () {
                                return this._extension;
                            },
                            set: function (value) {
                                this._extension = asCoerceString(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(FileFilter.prototype, "macType", {
                            get: function () {
                                return this._macType;
                            },
                            set: function (value) {
                                this._macType = asCoerceString(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        FileFilter.classInitializer = null;
                        FileFilter.initializer = null;
                        FileFilter.classSymbols = null;
                        FileFilter.instanceSymbols = null;
                        return FileFilter;
                    })(AS.ASNative);
                    net.FileFilter = FileFilter;
                })(net = flash.net || (flash.net = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var net;
                (function (net) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var FileLoadingService = Shumway.FileLoadingService;
                    var LocalConnection = (function (_super) {
                        __extends(LocalConnection, _super);
                        function LocalConnection() {
                            false && _super.call(this, undefined);
                            dummyConstructor("public flash.net.LocalConnection");
                        }
                        LocalConnection.prototype.close = function () {
                            notImplemented("public flash.net.LocalConnection::close");
                            return;
                        };
                        LocalConnection.prototype.connect = function (connectionName) {
                            connectionName = asCoerceString(connectionName);
                            notImplemented("public flash.net.LocalConnection::connect");
                            return;
                        };
                        Object.defineProperty(LocalConnection.prototype, "domain", {
                            get: function () {
                                somewhatImplemented("public flash.net.LocalConnection::get domain");
                                var url = FileLoadingService.instance.resolveUrl('/');
                                var m = /:\/\/(.+?)[:?#\/]/.exec(url);
                                return m && m[1];
                            },
                            enumerable: true,
                            configurable: true
                        });
                        LocalConnection.prototype.send = function (connectionName, methodName) {
                            connectionName = asCoerceString(connectionName);
                            methodName = asCoerceString(methodName);
                            notImplemented("public flash.net.LocalConnection::send");
                            return;
                        };
                        Object.defineProperty(LocalConnection.prototype, "client", {
                            get: function () {
                                notImplemented("public flash.net.LocalConnection::get client");
                                return;
                            },
                            set: function (client) {
                                client = client;
                                notImplemented("public flash.net.LocalConnection::set client");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(LocalConnection.prototype, "isPerUser", {
                            get: function () {
                                notImplemented("public flash.net.LocalConnection::get isPerUser");
                                return;
                            },
                            set: function (newValue) {
                                newValue = !!newValue;
                                notImplemented("public flash.net.LocalConnection::set isPerUser");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        LocalConnection.prototype.allowDomain = function () {
                            notImplemented("public flash.net.LocalConnection::allowDomain");
                            return;
                        };
                        LocalConnection.prototype.allowInsecureDomain = function () {
                            notImplemented("public flash.net.LocalConnection::allowInsecureDomain");
                            return;
                        };
                        LocalConnection.classInitializer = null;
                        LocalConnection.initializer = null;
                        LocalConnection.classSymbols = null;
                        LocalConnection.instanceSymbols = null;
                        return LocalConnection;
                    })(flash.events.EventDispatcher);
                    net.LocalConnection = LocalConnection;
                })(net = flash.net || (flash.net = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var net;
                (function (net) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var wrapJSObject = Shumway.AVM2.Runtime.wrapJSObject;
                    var Telemetry = Shumway.Telemetry;
                    var events = Shumway.AVM2.AS.flash.events;
                    var NetConnection = (function (_super) {
                        __extends(NetConnection, _super);
                        function NetConnection() {
                            false && _super.call(this, undefined);
                            dummyConstructor("public flash.net.NetConnection");
                        }
                        Object.defineProperty(NetConnection, "defaultObjectEncoding", {
                            get: function () {
                                return NetConnection._defaultObjectEncoding;
                            },
                            set: function (version) {
                                version = version >>> 0;
                                NetConnection._defaultObjectEncoding = version;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetConnection.prototype, "connected", {
                            get: function () {
                                return this._connected;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetConnection.prototype, "uri", {
                            get: function () {
                                return this._uri;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        NetConnection.prototype.connect = function (command) {
                            command = asCoerceString(command);
                            somewhatImplemented("public flash.net.NetConnection::connect");
                            this._uri = command;
                            if (!command) {
                                this._connected = true;
                                this.dispatchEvent(new events.NetStatusEvent(events.NetStatusEvent.NET_STATUS, false, false, wrapJSObject({ level: 'status', code: 'NetConnection.Connect.Success' })));
                            }
                            else {
                                this.dispatchEvent(new events.NetStatusEvent(events.NetStatusEvent.NET_STATUS, false, false, wrapJSObject({ level: 'status', code: 'NetConnection.Connect.Failed' })));
                            }
                        };
                        Object.defineProperty(NetConnection.prototype, "client", {
                            get: function () {
                                return this._client;
                            },
                            set: function (object) {
                                this._client = object;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetConnection.prototype, "objectEncoding", {
                            get: function () {
                                return this._objectEncoding;
                            },
                            set: function (version) {
                                version = version >>> 0;
                                somewhatImplemented("public flash.net.NetConnection::set objectEncoding");
                                this._objectEncoding = version;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetConnection.prototype, "proxyType", {
                            get: function () {
                                return this._proxyType;
                            },
                            set: function (ptype) {
                                ptype = asCoerceString(ptype);
                                somewhatImplemented("public flash.net.NetConnection::set proxyType");
                                this._proxyType = ptype;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetConnection.prototype, "connectedProxyType", {
                            get: function () {
                                notImplemented("public flash.net.NetConnection::get connectedProxyType");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetConnection.prototype, "usingTLS", {
                            get: function () {
                                somewhatImplemented("public flash.net.NetConnection::get usingTLS");
                                return this._usingTLS;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetConnection.prototype, "protocol", {
                            get: function () {
                                notImplemented("public flash.net.NetConnection::get protocol");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetConnection.prototype, "maxPeerConnections", {
                            get: function () {
                                notImplemented("public flash.net.NetConnection::get maxPeerConnections");
                                return;
                            },
                            set: function (maxPeers) {
                                maxPeers = maxPeers >>> 0;
                                notImplemented("public flash.net.NetConnection::set maxPeerConnections");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetConnection.prototype, "nearID", {
                            get: function () {
                                notImplemented("public flash.net.NetConnection::get nearID");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetConnection.prototype, "farID", {
                            get: function () {
                                notImplemented("public flash.net.NetConnection::get farID");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetConnection.prototype, "nearNonce", {
                            get: function () {
                                notImplemented("public flash.net.NetConnection::get nearNonce");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetConnection.prototype, "farNonce", {
                            get: function () {
                                notImplemented("public flash.net.NetConnection::get farNonce");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetConnection.prototype, "unconnectedPeerStreams", {
                            get: function () {
                                notImplemented("public flash.net.NetConnection::get unconnectedPeerStreams");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        NetConnection.prototype.ctor = function () {
                            this._uri = null;
                            this._connected = false;
                            this._client = null;
                            this._proxyType = 'none';
                            this._objectEncoding = NetConnection.defaultObjectEncoding;
                            this._usingTLS = false;
                            Telemetry.instance.reportTelemetry({ topic: 'feature', feature: 6 /* NETCONNECTION_FEATURE */ });
                        };
                        NetConnection.prototype.invoke = function (index) {
                            index = index >>> 0;
                            return this._invoke(index, Array.prototype.slice.call(arguments, 1));
                        };
                        NetConnection.prototype.invokeWithArgsArray = function (index, p_arguments) {
                            index = index >>> 0;
                            p_arguments = p_arguments;
                            return this._invoke.call(this, index, p_arguments);
                        };
                        NetConnection.prototype._invoke = function (index, args) {
                            var simulated = false;
                            var result;
                            switch (index) {
                                case 2:
                                    simulated = true;
                                    break;
                            }
                            (simulated ? somewhatImplemented : notImplemented)("private flash.net.NetConnection::_invoke (" + index + ")");
                            return result;
                        };
                        NetConnection.classInitializer = null;
                        NetConnection.initializer = null;
                        NetConnection.classSymbols = null;
                        NetConnection.instanceSymbols = ["close", "addHeader", "call"];
                        NetConnection._defaultObjectEncoding = 3;
                        return NetConnection;
                    })(flash.events.EventDispatcher);
                    net.NetConnection = NetConnection;
                })(net = flash.net || (flash.net = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var net;
                (function (net) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var assert = Shumway.Debug.assert;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var wrapJSObject = Shumway.AVM2.Runtime.wrapJSObject;
                    var events = Shumway.AVM2.AS.flash.events;
                    var net = Shumway.AVM2.AS.flash.net;
                    var utils = Shumway.AVM2.AS.flash.utils;
                    var FileLoadingService = Shumway.FileLoadingService;
                    var AVM2 = Shumway.AVM2.Runtime.AVM2;
                    var VideoPlaybackEvent = Shumway.Remoting.VideoPlaybackEvent;
                    var VideoControlEvent = Shumway.Remoting.VideoControlEvent;
                    var NetStream = (function (_super) {
                        __extends(NetStream, _super);
                        function NetStream(connection, peerID) {
                            if (peerID === void 0) { peerID = "connectToFMS"; }
                            false && _super.call(this, undefined);
                            events.EventDispatcher.instanceConstructorNoInitialize.call(this);
                            this._connection = connection;
                            this._peerID = asCoerceString(peerID);
                            this._id = flash.display.DisplayObject.getNextSyncID();
                            this._isDirty = true;
                            this._soundTransform = new flash.media.SoundTransform();
                            this._contentTypeHint = null;
                            this._checkPolicyFile = true;
                            this._videoStream = new VideoStream();
                        }
                        NetStream.prototype.dispose = function () {
                            notImplemented("public flash.net.NetStream::dispose");
                            return;
                        };
                        NetStream.prototype._getVideoStreamURL = function () {
                            return this._videoStream.url;
                        };
                        NetStream.prototype.play = function (url) {
                            flash.media.SoundMixer._registerSoundSource(this);
                            url = asCoerceString(url);
                            var service = AVM2.instance.globals['Shumway.Player.Utils'];
                            service.registerEventListener(this._id, this.processVideoEvent.bind(this));
                            if (url === null && !this._connection) {
                                this._videoStream.openInDataGenerationMode();
                            }
                            else {
                                this._videoStream.play(url, this.checkPolicyFile);
                            }
                            this._notifyVideoControl(1 /* Init */, {
                                url: this._videoStream.url
                            });
                        };
                        NetStream.prototype.play2 = function (param) {
                            param = param;
                            notImplemented("public flash.net.NetStream::play2");
                            return;
                        };
                        Object.defineProperty(NetStream.prototype, "info", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get info");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "multicastInfo", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get multicastInfo");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "soundTransform", {
                            get: function () {
                                return this._soundTransform;
                            },
                            set: function (sndTransform) {
                                this._soundTransform = sndTransform;
                                flash.media.SoundMixer._updateSoundSource(this);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "checkPolicyFile", {
                            get: function () {
                                return this._checkPolicyFile;
                            },
                            set: function (state) {
                                state = !!state;
                                this._checkPolicyFile = state;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "client", {
                            get: function () {
                                return this._client;
                            },
                            set: function (object) {
                                somewhatImplemented("public flash.net.NetStream::set client");
                                this._client = object;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "objectEncoding", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get objectEncoding");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "multicastPushNeighborLimit", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get multicastPushNeighborLimit");
                                return;
                            },
                            set: function (neighbors) {
                                neighbors = +neighbors;
                                notImplemented("public flash.net.NetStream::set multicastPushNeighborLimit");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "multicastWindowDuration", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get multicastWindowDuration");
                                return;
                            },
                            set: function (seconds) {
                                seconds = +seconds;
                                notImplemented("public flash.net.NetStream::set multicastWindowDuration");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "multicastRelayMarginDuration", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get multicastRelayMarginDuration");
                                return;
                            },
                            set: function (seconds) {
                                seconds = +seconds;
                                notImplemented("public flash.net.NetStream::set multicastRelayMarginDuration");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "multicastAvailabilityUpdatePeriod", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get multicastAvailabilityUpdatePeriod");
                                return;
                            },
                            set: function (seconds) {
                                seconds = +seconds;
                                notImplemented("public flash.net.NetStream::set multicastAvailabilityUpdatePeriod");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "multicastFetchPeriod", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get multicastFetchPeriod");
                                return;
                            },
                            set: function (seconds) {
                                seconds = +seconds;
                                notImplemented("public flash.net.NetStream::set multicastFetchPeriod");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "multicastAvailabilitySendToAll", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get multicastAvailabilitySendToAll");
                                return;
                            },
                            set: function (value) {
                                value = !!value;
                                notImplemented("public flash.net.NetStream::set multicastAvailabilitySendToAll");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "farID", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get farID");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "nearNonce", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get nearNonce");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "farNonce", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get farNonce");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "peerStreams", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get peerStreams");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "audioReliable", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get audioReliable");
                                return;
                            },
                            set: function (reliable) {
                                reliable = !!reliable;
                                notImplemented("public flash.net.NetStream::set audioReliable");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "videoReliable", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get videoReliable");
                                return;
                            },
                            set: function (reliable) {
                                reliable = !!reliable;
                                notImplemented("public flash.net.NetStream::set videoReliable");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "dataReliable", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get dataReliable");
                                return;
                            },
                            set: function (reliable) {
                                reliable = !!reliable;
                                notImplemented("public flash.net.NetStream::set dataReliable");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "audioSampleAccess", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get audioSampleAccess");
                                return;
                            },
                            set: function (reliable) {
                                reliable = !!reliable;
                                notImplemented("public flash.net.NetStream::set audioSampleAccess");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "videoSampleAccess", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get videoSampleAccess");
                                return;
                            },
                            set: function (reliable) {
                                reliable = !!reliable;
                                notImplemented("public flash.net.NetStream::set videoSampleAccess");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        NetStream.prototype.appendBytes = function (bytes) {
                            var chunk = new Uint8Array(bytes._buffer, 0, bytes.length);
                            this._videoStream.appendBytes(chunk);
                        };
                        NetStream.prototype.appendBytesAction = function (netStreamAppendBytesAction) {
                            this._videoStream.appendBytesAction(netStreamAppendBytesAction);
                        };
                        Object.defineProperty(NetStream.prototype, "useHardwareDecoder", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get useHardwareDecoder");
                                return;
                            },
                            set: function (v) {
                                v = !!v;
                                notImplemented("public flash.net.NetStream::set useHardwareDecoder");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "useJitterBuffer", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get useJitterBuffer");
                                return;
                            },
                            set: function (value) {
                                value = !!value;
                                notImplemented("public flash.net.NetStream::set useJitterBuffer");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(NetStream.prototype, "videoStreamSettings", {
                            get: function () {
                                notImplemented("public flash.net.NetStream::get videoStreamSettings");
                                return;
                            },
                            set: function (settings) {
                                settings = settings;
                                notImplemented("public flash.net.NetStream::set videoStreamSettings");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        NetStream.prototype.invoke = function (index) {
                            index = index >>> 0;
                            return this._invoke(index, Array.prototype.slice.call(arguments, 1));
                        };
                        NetStream.prototype.invokeWithArgsArray = function (index, p_arguments) {
                            index = index >>> 0;
                            p_arguments = p_arguments;
                            return this._invoke.call(this, index, p_arguments);
                        };
                        Object.defineProperty(NetStream.prototype, "inBufferSeek", {
                            get: function () {
                                return this._inBufferSeek;
                            },
                            set: function (value) {
                                this._inBufferSeek = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        NetStream.prototype._invoke = function (index, args) {
                            var simulated = false, result;
                            switch (index) {
                                case 4:
                                    this._videoStream.bufferTime = args[0];
                                    simulated = true;
                                    break;
                                case 202:
                                    switch (args[1]) {
                                        case 'pause':
                                            simulated = true;
                                            this._notifyVideoControl(2 /* Pause */, {
                                                paused: !!args[3],
                                                time: args[4] / 1000
                                            });
                                            break;
                                        case 'seek':
                                            simulated = true;
                                            this._notifyVideoControl(3 /* Seek */, {
                                                time: args[3] / 1000
                                            });
                                            break;
                                    }
                                    break;
                                case 300:
                                    result = this._notifyVideoControl(4 /* GetTime */, null);
                                    simulated = true;
                                    break;
                                case 302:
                                    result = this._videoStream.bufferTime;
                                    simulated = true;
                                    break;
                                case 303:
                                    result = this._notifyVideoControl(5 /* GetBufferLength */, null);
                                    simulated = true;
                                    break;
                                case 305:
                                    result = this._notifyVideoControl(7 /* GetBytesLoaded */, null);
                                    simulated = true;
                                    break;
                                case 306:
                                    result = this._notifyVideoControl(8 /* GetBytesTotal */, null);
                                    simulated = true;
                                    break;
                            }
                            (simulated ? somewhatImplemented : notImplemented)("NetStream._invoke (" + index + ")");
                            return result;
                        };
                        NetStream.prototype._notifyVideoControl = function (eventType, data) {
                            var service = AVM2.instance.globals['Shumway.Player.Utils'];
                            return service.notifyVideoControl(this._id, eventType, data);
                        };
                        NetStream.prototype.processVideoEvent = function (eventType, data) {
                            this._videoStream.processVideoPlaybackEvent(eventType, data);
                            switch (eventType) {
                                case 0 /* Initialized */:
                                    flash.media.SoundMixer._updateSoundSource(this);
                                    break;
                                case 1 /* PlayStart */:
                                    this.dispatchEvent(new events.NetStatusEvent(events.NetStatusEvent.NET_STATUS, false, false, wrapJSObject({ code: "NetStream.Play.Start", level: "status" })));
                                    break;
                                case 2 /* PlayStop */:
                                    this.dispatchEvent(new events.NetStatusEvent(events.NetStatusEvent.NET_STATUS, false, false, wrapJSObject({ code: "NetStream.Play.Stop", level: "status" })));
                                    flash.media.SoundMixer._unregisterSoundSource(this);
                                    break;
                                case 3 /* BufferFull */:
                                    this.dispatchEvent(new events.NetStatusEvent(events.NetStatusEvent.NET_STATUS, false, false, wrapJSObject({ code: "NetStream.Buffer.Full", level: "status" })));
                                    break;
                                case 5 /* BufferEmpty */:
                                    this.dispatchEvent(new events.NetStatusEvent(events.NetStatusEvent.NET_STATUS, false, false, wrapJSObject({ code: "NetStream.Buffer.Empty", level: "status" })));
                                    break;
                                case 6 /* Error */:
                                    var code = data.code === 4 ? "NetStream.Play.NoSupportedTrackFound" : data.code === 3 ? "NetStream.Play.FileStructureInvalid" : "NetStream.Play.StreamNotFound";
                                    this.dispatchEvent(new events.NetStatusEvent(events.NetStatusEvent.NET_STATUS, false, false, wrapJSObject({ code: code, level: "error" })));
                                    break;
                                case 8 /* Seeking */:
                                    this.dispatchEvent(new events.NetStatusEvent(events.NetStatusEvent.NET_STATUS, false, false, wrapJSObject({ code: "NetStream.Seek.Notify", level: "status" })));
                                    break;
                                case 7 /* Metadata */:
                                    if (this._client) {
                                        var metadata = {};
                                        metadata.asSetPublicProperty('width', data.videoWidth);
                                        metadata.asSetPublicProperty('height', data.videoHeight);
                                        metadata.asSetPublicProperty('duration', data.duration);
                                        this._client.asCallPublicProperty('onMetaData', [metadata]);
                                    }
                                    break;
                            }
                        };
                        NetStream.prototype.stopSound = function () {
                            this.pause();
                        };
                        NetStream.prototype.updateSoundLevels = function (volume) {
                            this._notifyVideoControl(6 /* SetSoundLevels */, {
                                volume: volume
                            });
                        };
                        NetStream.classInitializer = null;
                        NetStream.initializer = null;
                        NetStream.classSymbols = null;
                        NetStream.instanceSymbols = null;
                        NetStream.DIRECT_CONNECTIONS = "directConnections";
                        NetStream.CONNECT_TO_FMS = "connectToFMS";
                        return NetStream;
                    })(flash.events.EventDispatcher);
                    net.NetStream = NetStream;
                    var VideoStreamState;
                    (function (VideoStreamState) {
                        VideoStreamState[VideoStreamState["CLOSED"] = 0] = "CLOSED";
                        VideoStreamState[VideoStreamState["OPENED"] = 1] = "OPENED";
                        VideoStreamState[VideoStreamState["ENDED"] = 2] = "ENDED";
                        VideoStreamState[VideoStreamState["OPENED_DATA_GENERATION"] = 3] = "OPENED_DATA_GENERATION";
                        VideoStreamState[VideoStreamState["ERROR"] = 4] = "ERROR";
                    })(VideoStreamState || (VideoStreamState = {}));
                    var VideoStream = (function () {
                        function VideoStream() {
                            this._domReady = new Shumway.PromiseWrapper();
                            this._metadataReady = new Shumway.PromiseWrapper();
                            this._started = false;
                            this._buffer = 'empty';
                            this._bufferTime = 0.1;
                            this._url = null;
                            this._mediaSource = null;
                            this._mediaSourceBuffer = null;
                            this._contentTypeHint = null;
                            this._state = 0 /* CLOSED */;
                        }
                        Object.defineProperty(VideoStream.prototype, "state", {
                            get: function () {
                                return this._state;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(VideoStream.prototype, "bufferTime", {
                            get: function () {
                                return this._bufferTime;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(VideoStream.prototype, "url", {
                            get: function () {
                                return this._url;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        VideoStream.prototype.play = function (url, checkPolicyFile) {
                            release || assert(this._state === 0 /* CLOSED */);
                            this._state = 1 /* OPENED */;
                            var isMediaSourceEnabled = AS.mediaSourceOption.value;
                            if (isMediaSourceEnabled && typeof MediaSource === 'undefined') {
                                console.warn('MediaSource API is not enabled, falling back to regular playback');
                                isMediaSourceEnabled = false;
                            }
                            if (!isMediaSourceEnabled) {
                                somewhatImplemented("public flash.net.NetStream::play");
                                this._url = FileLoadingService.instance.resolveUrl(url);
                                return;
                            }
                            var mediaSource = new MediaSource();
                            mediaSource.addEventListener('sourceopen', function (e) {
                                this._mediaSource = mediaSource;
                            }.bind(this));
                            mediaSource.addEventListener('sourceend', function (e) {
                                this._mediaSource = null;
                            }.bind(this));
                            if (!url) {
                                this._url = null;
                                return;
                            }
                            this._url = URL.createObjectURL(mediaSource);
                            var request = new net.URLRequest(url);
                            request._checkPolicyFile = checkPolicyFile;
                            var stream = new net.URLStream();
                            stream.addEventListener('httpStatus', function (e) {
                                var responseHeaders = e.asGetPublicProperty('responseHeaders');
                                var contentTypeHeader = responseHeaders.filter(function (h) {
                                    return h.asGetPublicProperty('name') === 'Content-Type';
                                })[0];
                                if (contentTypeHeader) {
                                    var hint = contentTypeHeader.asGetPublicProperty('value');
                                    if (hint !== 'application/octet-stream') {
                                        this._contentTypeHint = hint;
                                    }
                                }
                            }.bind(this));
                            stream.addEventListener('progress', function (e) {
                                var available = stream.bytesAvailable;
                                var bytes = new utils.ByteArray();
                                stream.readBytes(bytes, 0, available);
                                var chunk = new Uint8Array(bytes._buffer, 0, bytes.length);
                                this.appendBytes(chunk);
                            }.bind(this));
                            stream.addEventListener('complete', function (e) {
                                this.appendBytesAction('endSequence');
                            }.bind(this));
                            stream.load(request);
                        };
                        VideoStream.prototype.openInDataGenerationMode = function () {
                            release || assert(this._state === 0 /* CLOSED */);
                            this._state = 3 /* OPENED_DATA_GENERATION */;
                        };
                        VideoStream.prototype.appendBytes = function (bytes) {
                            release || assert(this._state === 3 /* OPENED_DATA_GENERATION */ || this._state === 1 /* OPENED */);
                            if (this._mediaSource) {
                                if (!this._mediaSourceBuffer) {
                                    var contentType = this._contentTypeHint || this._detectContentType(bytes);
                                    this._mediaSourceBufferLock = Promise.resolve(undefined);
                                    this._mediaSourceBuffer = this._mediaSource.addSourceBuffer(contentType);
                                }
                                var buffer = this._mediaSourceBuffer;
                                this._mediaSourceBufferLock = this._mediaSourceBufferLock.then(function () {
                                    buffer.appendBuffer(bytes);
                                    return new Promise(function (resolve) {
                                        buffer.addEventListener('update', function updateHandler() {
                                            buffer.removeEventListener('update', updateHandler);
                                            resolve();
                                        });
                                    });
                                });
                            }
                            somewhatImplemented("public flash.net.NetStream::appendBytes");
                        };
                        VideoStream.prototype.appendBytesAction = function (netStreamAppendBytesAction) {
                            release || assert(this._state === 3 /* OPENED_DATA_GENERATION */ || this._state === 1 /* OPENED */);
                            netStreamAppendBytesAction = asCoerceString(netStreamAppendBytesAction);
                            if (netStreamAppendBytesAction === 'endSequence') {
                                this._mediaSourceBufferLock.then(function () {
                                    if (this._mediaSource) {
                                        this._mediaSource.endOfStream();
                                    }
                                    this.close();
                                }.bind(this));
                            }
                            somewhatImplemented("public flash.net.NetStream::appendBytesAction");
                        };
                        VideoStream.prototype.close = function () {
                            this._state = 0 /* CLOSED */;
                        };
                        VideoStream.prototype._detectContentType = function (bytes) {
                            return 'video/mp4; codecs="avc1.42E01E, mp4a.40.2"';
                        };
                        VideoStream.prototype.processVideoPlaybackEvent = function (eventType, data) {
                            switch (eventType) {
                                case 0 /* Initialized */:
                                    this._domReady.resolve(undefined);
                                    break;
                                case 1 /* PlayStart */:
                                    if (this._started) {
                                        break;
                                    }
                                    this._started = true;
                                    break;
                                case 2 /* PlayStop */:
                                    this._started = false;
                                    break;
                                case 3 /* BufferFull */:
                                    this._buffer = 'full';
                                    break;
                                case 4 /* Progress */:
                                    this._buffer = 'progress';
                                    break;
                                case 5 /* BufferEmpty */:
                                    this._buffer = 'empty';
                                    break;
                                case 7 /* Metadata */:
                                    this._metadataReady.resolve({
                                        videoWidth: data.videoWidth,
                                        videoHeight: data.videoHeight
                                    });
                                    break;
                            }
                        };
                        return VideoStream;
                    })();
                })(net = flash.net || (flash.net = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var net;
                (function (net) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var NetStreamInfo = (function (_super) {
                        __extends(NetStreamInfo, _super);
                        function NetStreamInfo(curBPS, byteCount, maxBPS, audioBPS, audioByteCount, videoBPS, videoByteCount, dataBPS, dataByteCount, playbackBPS, droppedFrames, audioBufferByteLength, videoBufferByteLength, dataBufferByteLength, audioBufferLength, videoBufferLength, dataBufferLength, srtt, audioLossRate, videoLossRate, metaData, xmpData, uri, resourceName, isLive) {
                            if (metaData === void 0) { metaData = null; }
                            if (xmpData === void 0) { xmpData = null; }
                            if (uri === void 0) { uri = null; }
                            if (resourceName === void 0) { resourceName = null; }
                            if (isLive === void 0) { isLive = true; }
                            curBPS = +curBPS;
                            byteCount = +byteCount;
                            maxBPS = +maxBPS;
                            audioBPS = +audioBPS;
                            audioByteCount = +audioByteCount;
                            videoBPS = +videoBPS;
                            videoByteCount = +videoByteCount;
                            dataBPS = +dataBPS;
                            dataByteCount = +dataByteCount;
                            playbackBPS = +playbackBPS;
                            droppedFrames = +droppedFrames;
                            audioBufferByteLength = +audioBufferByteLength;
                            videoBufferByteLength = +videoBufferByteLength;
                            dataBufferByteLength = +dataBufferByteLength;
                            audioBufferLength = +audioBufferLength;
                            videoBufferLength = +videoBufferLength;
                            dataBufferLength = +dataBufferLength;
                            srtt = +srtt;
                            audioLossRate = +audioLossRate;
                            videoLossRate = +videoLossRate;
                            metaData = metaData;
                            xmpData = xmpData;
                            uri = asCoerceString(uri);
                            resourceName = asCoerceString(resourceName);
                            isLive = !!isLive;
                            false && _super.call(this);
                            dummyConstructor("public flash.net.NetStreamInfo");
                        }
                        NetStreamInfo.classInitializer = null;
                        NetStreamInfo.initializer = null;
                        NetStreamInfo.classSymbols = null;
                        NetStreamInfo.instanceSymbols = null;
                        return NetStreamInfo;
                    })(AS.ASNative);
                    net.NetStreamInfo = NetStreamInfo;
                })(net = flash.net || (flash.net = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var net;
                (function (net) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var NetStreamMulticastInfo = (function (_super) {
                        __extends(NetStreamMulticastInfo, _super);
                        function NetStreamMulticastInfo(sendDataBytesPerSecond, sendControlBytesPerSecond, receiveDataBytesPerSecond, receiveControlBytesPerSecond, bytesPushedToPeers, fragmentsPushedToPeers, bytesRequestedByPeers, fragmentsRequestedByPeers, bytesPushedFromPeers, fragmentsPushedFromPeers, bytesRequestedFromPeers, fragmentsRequestedFromPeers, sendControlBytesPerSecondToServer, receiveDataBytesPerSecondFromServer, bytesReceivedFromServer, fragmentsReceivedFromServer, receiveDataBytesPerSecondFromIPMulticast, bytesReceivedFromIPMulticast, fragmentsReceivedFromIPMulticast) {
                            sendDataBytesPerSecond = +sendDataBytesPerSecond;
                            sendControlBytesPerSecond = +sendControlBytesPerSecond;
                            receiveDataBytesPerSecond = +receiveDataBytesPerSecond;
                            receiveControlBytesPerSecond = +receiveControlBytesPerSecond;
                            bytesPushedToPeers = +bytesPushedToPeers;
                            fragmentsPushedToPeers = +fragmentsPushedToPeers;
                            bytesRequestedByPeers = +bytesRequestedByPeers;
                            fragmentsRequestedByPeers = +fragmentsRequestedByPeers;
                            bytesPushedFromPeers = +bytesPushedFromPeers;
                            fragmentsPushedFromPeers = +fragmentsPushedFromPeers;
                            bytesRequestedFromPeers = +bytesRequestedFromPeers;
                            fragmentsRequestedFromPeers = +fragmentsRequestedFromPeers;
                            sendControlBytesPerSecondToServer = +sendControlBytesPerSecondToServer;
                            receiveDataBytesPerSecondFromServer = +receiveDataBytesPerSecondFromServer;
                            bytesReceivedFromServer = +bytesReceivedFromServer;
                            fragmentsReceivedFromServer = +fragmentsReceivedFromServer;
                            receiveDataBytesPerSecondFromIPMulticast = +receiveDataBytesPerSecondFromIPMulticast;
                            bytesReceivedFromIPMulticast = +bytesReceivedFromIPMulticast;
                            fragmentsReceivedFromIPMulticast = +fragmentsReceivedFromIPMulticast;
                            false && _super.call(this);
                            dummyConstructor("public flash.net.NetStreamMulticastInfo");
                        }
                        NetStreamMulticastInfo.classInitializer = null;
                        NetStreamMulticastInfo.initializer = null;
                        NetStreamMulticastInfo.classSymbols = null;
                        NetStreamMulticastInfo.instanceSymbols = null;
                        return NetStreamMulticastInfo;
                    })(AS.ASNative);
                    net.NetStreamMulticastInfo = NetStreamMulticastInfo;
                })(net = flash.net || (flash.net = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var net;
                (function (net) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var NetStreamPlayOptions = (function (_super) {
                        __extends(NetStreamPlayOptions, _super);
                        function NetStreamPlayOptions() {
                            false && _super.call(this, undefined);
                            dummyConstructor("public flash.net.NetStreamPlayOptions");
                        }
                        NetStreamPlayOptions.classInitializer = null;
                        NetStreamPlayOptions.initializer = null;
                        NetStreamPlayOptions.classSymbols = null;
                        NetStreamPlayOptions.instanceSymbols = null;
                        return NetStreamPlayOptions;
                    })(flash.events.EventDispatcher);
                    net.NetStreamPlayOptions = NetStreamPlayOptions;
                })(net = flash.net || (flash.net = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var net;
                (function (net) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var Responder = (function (_super) {
                        __extends(Responder, _super);
                        function Responder(result, status) {
                            if (status === void 0) { status = null; }
                            false && _super.call(this);
                            dummyConstructor("public flash.net.Responder");
                        }
                        Responder.prototype.ctor = function (result, status) {
                            this._result = result;
                            this._status = status;
                        };
                        Responder.classInitializer = null;
                        Responder.initializer = null;
                        Responder.classSymbols = null;
                        Responder.instanceSymbols = null;
                        return Responder;
                    })(AS.ASNative);
                    net.Responder = Responder;
                })(net = flash.net || (flash.net = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var net;
                (function (net) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var SharedObject = (function (_super) {
                        __extends(SharedObject, _super);
                        function SharedObject() {
                            false && _super.call(this, undefined);
                            flash.events.EventDispatcher.instanceConstructorNoInitialize.call(this);
                            this._data = Object.create(null);
                        }
                        SharedObject.deleteAll = function (url) {
                            url = asCoerceString(url);
                            notImplemented("public flash.net.SharedObject::static deleteAll");
                            return;
                        };
                        SharedObject.getDiskUsage = function (url) {
                            url = asCoerceString(url);
                            notImplemented("public flash.net.SharedObject::static getDiskUsage");
                            return;
                        };
                        SharedObject._create = function (path, data) {
                            var obj = new SharedObject();
                            obj._path = path;
                            obj._data = data;
                            obj._objectEncoding = SharedObject._defaultObjectEncoding;
                            Shumway.Telemetry.instance.reportTelemetry({ topic: 'feature', feature: 3 /* SHAREDOBJECT_FEATURE */ });
                            return obj;
                        };
                        SharedObject.getLocal = function (name, localPath, secure) {
                            if (localPath === void 0) { localPath = null; }
                            if (secure === void 0) { secure = false; }
                            name = asCoerceString(name);
                            localPath = asCoerceString(localPath);
                            secure = !!secure;
                            var path = (localPath || '') + '/' + name;
                            if (SharedObject._sharedObjects[path]) {
                                return SharedObject._sharedObjects[path];
                            }
                            var data = sessionStorage.getItem(path);
                            var so = SharedObject._create(path, data ? JSON.parse(data) : {});
                            SharedObject._sharedObjects[path] = so;
                            return so;
                        };
                        SharedObject.getRemote = function (name, remotePath, persistence, secure) {
                            if (remotePath === void 0) { remotePath = null; }
                            if (persistence === void 0) { persistence = false; }
                            if (secure === void 0) { secure = false; }
                            name = asCoerceString(name);
                            remotePath = asCoerceString(remotePath);
                            secure = !!secure;
                            notImplemented("public flash.net.SharedObject::static getRemote");
                            return;
                        };
                        Object.defineProperty(SharedObject, "defaultObjectEncoding", {
                            get: function () {
                                return SharedObject._defaultObjectEncoding;
                            },
                            set: function (version) {
                                version = version >>> 0;
                                SharedObject._defaultObjectEncoding = version;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SharedObject.prototype, "data", {
                            get: function () {
                                return this._data;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SharedObject.prototype, "objectEncoding", {
                            get: function () {
                                return this._objectEncoding;
                            },
                            set: function (version) {
                                version = version >>> 0;
                                this._objectEncoding = version;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(SharedObject.prototype, "client", {
                            get: function () {
                                notImplemented("public flash.net.SharedObject::get client");
                                return;
                            },
                            set: function (object) {
                                object = object;
                                notImplemented("public flash.net.SharedObject::set client");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        SharedObject.prototype.setDirty = function (propertyName) {
                            propertyName = asCoerceString(propertyName);
                            somewhatImplemented("public flash.net.SharedObject::setDirty");
                        };
                        SharedObject.prototype.invoke = function (index) {
                            index = index >>> 0;
                            return this._invoke(index, Array.prototype.slice.call(arguments, 1));
                        };
                        SharedObject.prototype.invokeWithArgsArray = function (index, args) {
                            index = index >>> 0;
                            return this._invoke(index, args);
                        };
                        SharedObject.prototype._invoke = function (index, args) {
                            var simulated = false, result;
                            switch (index) {
                                case 4:
                                    result = JSON.stringify(this._data).length - 2;
                                    simulated = true;
                                    break;
                                case 6:
                                    this._data = {};
                                    sessionStorage.removeItem(this._path);
                                    simulated = true;
                                    break;
                                case 2:
                                    sessionStorage.setItem(this._path, JSON.stringify(this._data));
                                    simulated = true;
                                    result = true;
                                    break;
                                case 3:
                                    simulated = true;
                                    break;
                            }
                            (simulated ? somewhatImplemented : notImplemented)("private flash.net.SharedObject::_invoke (" + index + ")");
                            return result;
                        };
                        SharedObject.classInitializer = null;
                        SharedObject.initializer = null;
                        SharedObject.classSymbols = null;
                        SharedObject.instanceSymbols = null;
                        SharedObject._sharedObjects = Object.create(null);
                        SharedObject._defaultObjectEncoding = 3;
                        return SharedObject;
                    })(flash.events.EventDispatcher);
                    net.SharedObject = SharedObject;
                })(net = flash.net || (flash.net = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var net;
                (function (net) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var Errors = Shumway.AVM2.Errors;
                    var throwError = Shumway.AVM2.Runtime.throwError;
                    var Socket = (function (_super) {
                        __extends(Socket, _super);
                        function Socket(host, port) {
                            if (host === void 0) { host = null; }
                            if (port === void 0) { port = 0; }
                            host = asCoerceString(host);
                            port = port | 0;
                            false && _super.call(this, undefined);
                            dummyConstructor("public flash.net.Socket");
                        }
                        Object.defineProperty(Socket.prototype, "bytesAvailable", {
                            get: function () {
                                notImplemented("public flash.net.Socket::get bytesAvailable");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Socket.prototype, "connected", {
                            get: function () {
                                notImplemented("public flash.net.Socket::get connected");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Socket.prototype, "objectEncoding", {
                            get: function () {
                                notImplemented("public flash.net.Socket::get objectEncoding");
                                return;
                            },
                            set: function (version) {
                                version = version >>> 0;
                                notImplemented("public flash.net.Socket::set objectEncoding");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Socket.prototype, "endian", {
                            get: function () {
                                notImplemented("public flash.net.Socket::get endian");
                                return;
                            },
                            set: function (type) {
                                type = asCoerceString(type);
                                notImplemented("public flash.net.Socket::set endian");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Socket.prototype, "bytesPending", {
                            get: function () {
                                notImplemented("public flash.net.Socket::get bytesPending");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Socket.prototype.readBytes = function (bytes, offset, length) {
                            if (offset === void 0) { offset = 0; }
                            if (length === void 0) { length = 0; }
                            bytes = bytes;
                            offset = offset >>> 0;
                            length = length >>> 0;
                            notImplemented("public flash.net.Socket::readBytes");
                            return;
                        };
                        Socket.prototype.writeBytes = function (bytes, offset, length) {
                            if (offset === void 0) { offset = 0; }
                            if (length === void 0) { length = 0; }
                            bytes = bytes;
                            offset = offset >>> 0;
                            length = length >>> 0;
                            notImplemented("public flash.net.Socket::writeBytes");
                            return;
                        };
                        Socket.prototype.writeBoolean = function (value) {
                            value = !!value;
                            notImplemented("public flash.net.Socket::writeBoolean");
                            return;
                        };
                        Socket.prototype.writeByte = function (value) {
                            value = value | 0;
                            notImplemented("public flash.net.Socket::writeByte");
                            return;
                        };
                        Socket.prototype.writeShort = function (value) {
                            value = value | 0;
                            notImplemented("public flash.net.Socket::writeShort");
                            return;
                        };
                        Socket.prototype.writeInt = function (value) {
                            value = value | 0;
                            notImplemented("public flash.net.Socket::writeInt");
                            return;
                        };
                        Socket.prototype.writeUnsignedInt = function (value) {
                            value = value >>> 0;
                            notImplemented("public flash.net.Socket::writeUnsignedInt");
                            return;
                        };
                        Socket.prototype.writeFloat = function (value) {
                            value = +value;
                            notImplemented("public flash.net.Socket::writeFloat");
                            return;
                        };
                        Socket.prototype.writeDouble = function (value) {
                            value = +value;
                            notImplemented("public flash.net.Socket::writeDouble");
                            return;
                        };
                        Socket.prototype.writeMultiByte = function (value, charSet) {
                            value = asCoerceString(value);
                            charSet = asCoerceString(charSet);
                            notImplemented("public flash.net.Socket::writeMultiByte");
                            return;
                        };
                        Socket.prototype.writeUTF = function (value) {
                            value = asCoerceString(value);
                            notImplemented("public flash.net.Socket::writeUTF");
                            return;
                        };
                        Socket.prototype.writeUTFBytes = function (value) {
                            value = asCoerceString(value);
                            notImplemented("public flash.net.Socket::writeUTFBytes");
                            return;
                        };
                        Socket.prototype.readBoolean = function () {
                            notImplemented("public flash.net.Socket::readBoolean");
                            return;
                        };
                        Socket.prototype.readByte = function () {
                            notImplemented("public flash.net.Socket::readByte");
                            return;
                        };
                        Socket.prototype.readUnsignedByte = function () {
                            notImplemented("public flash.net.Socket::readUnsignedByte");
                            return;
                        };
                        Socket.prototype.readShort = function () {
                            notImplemented("public flash.net.Socket::readShort");
                            return;
                        };
                        Socket.prototype.readUnsignedShort = function () {
                            notImplemented("public flash.net.Socket::readUnsignedShort");
                            return;
                        };
                        Socket.prototype.readInt = function () {
                            notImplemented("public flash.net.Socket::readInt");
                            return;
                        };
                        Socket.prototype.readUnsignedInt = function () {
                            notImplemented("public flash.net.Socket::readUnsignedInt");
                            return;
                        };
                        Socket.prototype.readFloat = function () {
                            notImplemented("public flash.net.Socket::readFloat");
                            return;
                        };
                        Socket.prototype.readDouble = function () {
                            notImplemented("public flash.net.Socket::readDouble");
                            return;
                        };
                        Socket.prototype.readMultiByte = function (length, charSet) {
                            length = length >>> 0;
                            charSet = asCoerceString(charSet);
                            notImplemented("public flash.net.Socket::readMultiByte");
                            return;
                        };
                        Socket.prototype.readUTF = function () {
                            notImplemented("public flash.net.Socket::readUTF");
                            return;
                        };
                        Socket.prototype.readUTFBytes = function (length) {
                            length = length >>> 0;
                            notImplemented("public flash.net.Socket::readUTFBytes");
                            return;
                        };
                        Socket.prototype.flush = function () {
                            notImplemented("public flash.net.Socket::flush");
                            return;
                        };
                        Socket.prototype.writeObject = function (object) {
                            notImplemented("public flash.net.Socket::writeObject");
                            return;
                        };
                        Socket.prototype.readObject = function () {
                            notImplemented("public flash.net.Socket::readObject");
                            return;
                        };
                        Socket.prototype.internalGetSecurityErrorMessage = function (host, port) {
                            host = asCoerceString(host);
                            port |= 0;
                            somewhatImplemented("flash.net.Socket::internalGetSecurityErrorMessage");
                            return 'SecurityErrorEvent';
                        };
                        Socket.prototype.internalConnect = function (host, port) {
                            host = asCoerceString(host);
                            port |= 0;
                            somewhatImplemented("flash.net.Socket::internalConnect");
                            throwError('SecurityError', Errors.SocketConnectError, host, port);
                        };
                        Socket.prototype.didFailureOccur = function () {
                            somewhatImplemented("flash.net.Socket::didFailureOccur");
                            return true;
                        };
                        Socket.classInitializer = null;
                        Socket.initializer = null;
                        Socket.classSymbols = null;
                        Socket.instanceSymbols = null;
                        return Socket;
                    })(flash.events.EventDispatcher);
                    net.Socket = Socket;
                })(net = flash.net || (flash.net = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var net;
                (function (net) {
                    var Event = flash.events.Event;
                    var IOErrorEvent = flash.events.IOErrorEvent;
                    var ProgressEvent = flash.events.ProgressEvent;
                    var HTTPStatusEvent = flash.events.HTTPStatusEvent;
                    var SecurityErrorEvent = flash.events.SecurityErrorEvent;
                    var URLLoader = (function (_super) {
                        __extends(URLLoader, _super);
                        function URLLoader(request) {
                            false && _super.call(this, undefined);
                            flash.events.EventDispatcher.instanceConstructorNoInitialize.call(this);
                            var stream = this._stream = new net.URLStream();
                            stream.addEventListener(Event.OPEN, this.onStreamOpen.bind(this));
                            stream.addEventListener(Event.COMPLETE, this.onStreamComplete.bind(this));
                            stream.addEventListener(ProgressEvent.PROGRESS, this.onStreamProgress.bind(this));
                            stream.addEventListener(IOErrorEvent.IO_ERROR, this.onStreamIOError.bind(this));
                            stream.addEventListener(HTTPStatusEvent.HTTP_STATUS, this.onStreamHTTPStatus.bind(this));
                            stream.addEventListener(HTTPStatusEvent.HTTP_RESPONSE_STATUS, this.onStreamHTTPResponseStatus.bind(this));
                            stream.addEventListener(SecurityErrorEvent.SECURITY_ERROR, this.onStreamSecurityError.bind(this));
                            this.$BgdataFormat = 'text';
                            if (request) {
                                this.load(request);
                            }
                        }
                        Object.defineProperty(URLLoader.prototype, "data", {
                            get: function () {
                                return this.$Bgdata;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(URLLoader.prototype, "dataFormat", {
                            get: function () {
                                return this.$BgdataFormat;
                            },
                            set: function (format) {
                                release || Shumway.Debug.assert(typeof format === 'string');
                                this.$BgdataFormat = format;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(URLLoader.prototype, "bytesLoaded", {
                            get: function () {
                                return this.$BgbytesLoaded;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(URLLoader.prototype, "bytesTotal", {
                            get: function () {
                                return this.$BgbytesTotal;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        URLLoader.prototype.load = function (request) {
                            this._stream.load(request);
                        };
                        URLLoader.prototype.close = function () {
                            this._stream.close();
                        };
                        URLLoader.prototype.complete = function () {
                            var response = new flash.utils.ByteArray();
                            this._stream.readBytes(response);
                            if (this.$BgdataFormat === 'binary') {
                                this.$Bgdata = response;
                                return;
                            }
                            var data = response.toString();
                            if (response.length > 0 && this.$BgdataFormat === 'variables') {
                                var variable = new net.URLVariables();
                                if (this._ignoreDecodeErrors) {
                                    variable._ignoreDecodingErrors = true;
                                }
                                variable.decode(String(data));
                                this.$Bgdata = variable;
                            }
                            else {
                                this.$Bgdata = data;
                            }
                        };
                        URLLoader.prototype.addEventListener = function (type, listener, useCapture, priority, useWeakReference) {
                            _super.prototype.addEventListener.call(this, type, listener, useCapture, priority, useWeakReference);
                            if (type === HTTPStatusEvent.HTTP_RESPONSE_STATUS) {
                                this._httpResponseEventBound = true;
                            }
                        };
                        URLLoader.prototype.onStreamOpen = function (e) {
                            this.dispatchEvent(e);
                        };
                        URLLoader.prototype.onStreamComplete = function (e) {
                            this.complete();
                            this.dispatchEvent(e);
                        };
                        URLLoader.prototype.onStreamProgress = function (e) {
                            this.$BgbytesLoaded = e.bytesLoaded;
                            this.$BgbytesTotal = e.bytesTotal;
                            this.dispatchEvent(e);
                        };
                        URLLoader.prototype.onStreamIOError = function (e) {
                            this.complete();
                            this.dispatchEvent(e);
                        };
                        URLLoader.prototype.onStreamHTTPStatus = function (e) {
                            this.dispatchEvent(e);
                        };
                        URLLoader.prototype.onStreamHTTPResponseStatus = function (e) {
                            if (!this._httpResponseEventBound) {
                                return;
                            }
                            this.dispatchEvent(e);
                        };
                        URLLoader.prototype.onStreamSecurityError = function (e) {
                            this.dispatchEvent(e);
                        };
                        URLLoader.classInitializer = null;
                        URLLoader.initializer = null;
                        URLLoader.classSymbols = null;
                        URLLoader.instanceSymbols = null;
                        return URLLoader;
                    })(flash.events.EventDispatcher);
                    net.URLLoader = URLLoader;
                })(net = flash.net || (flash.net = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var net;
                (function (net) {
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var throwError = Shumway.AVM2.Runtime.throwError;
                    var URLRequest = (function (_super) {
                        __extends(URLRequest, _super);
                        function URLRequest(url) {
                            if (url === void 0) { url = null; }
                            false && _super.call(this);
                            this._url = asCoerceString(url);
                        }
                        Object.defineProperty(URLRequest.prototype, "url", {
                            get: function () {
                                return this._url;
                            },
                            set: function (value) {
                                value = asCoerceString(value);
                                this._url = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(URLRequest.prototype, "data", {
                            get: function () {
                                return this._data;
                            },
                            set: function (value) {
                                this._data = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(URLRequest.prototype, "method", {
                            get: function () {
                                return this._method;
                            },
                            set: function (value) {
                                value = asCoerceString(value);
                                if (value !== 'get' && value !== 'GET' && value !== 'post' && value !== 'POST') {
                                    throwError('ArgumentError', AVM2.Errors.InvalidArgumentError);
                                }
                                this._method = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(URLRequest.prototype, "contentType", {
                            get: function () {
                                return this._contentType;
                            },
                            set: function (value) {
                                value = asCoerceString(value);
                                this._contentType = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(URLRequest.prototype, "requestHeaders", {
                            get: function () {
                                return this._requestHeaders;
                            },
                            set: function (value) {
                                if (!Array.isArray(value)) {
                                    throwError('ArgumentError', AVM2.Errors.InvalidArgumentError, "value");
                                }
                                this._requestHeaders = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(URLRequest.prototype, "digest", {
                            get: function () {
                                return this._digest;
                            },
                            set: function (value) {
                                value = asCoerceString(value);
                                this._digest = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        URLRequest.prototype._toFileRequest = function () {
                            var obj = {};
                            obj.url = this._url;
                            obj.method = this._method;
                            obj.checkPolicyFile = this._checkPolicyFile;
                            if (this._data) {
                                obj.mimeType = this._contentType;
                                if (flash.utils.ByteArray.isType(this._data)) {
                                    obj.data = new Uint8Array(this._data._buffer, 0, this._data.length);
                                }
                                else {
                                    var data = this._data.asGetPublicProperty("toString").call(this._data);
                                    if (this._method === 'GET') {
                                        var i = obj.url.lastIndexOf('?');
                                        obj.url = (i < 0 ? obj.url : obj.url.substring(0, i)) + '?' + data;
                                    }
                                    else {
                                        obj.data = data;
                                    }
                                }
                            }
                            return obj;
                        };
                        URLRequest.classInitializer = null;
                        URLRequest.initializer = function () {
                            this._url = null;
                            this._method = 'GET';
                            this._data = null;
                            this._digest = null;
                            this._contentType = 'application/x-www-form-urlencoded';
                            this._requestHeaders = [];
                            this._checkPolicyFile = true;
                        };
                        URLRequest.classSymbols = null;
                        URLRequest.bindings = null;
                        return URLRequest;
                    })(AS.ASNative);
                    net.URLRequest = URLRequest;
                })(net = flash.net || (flash.net = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var net;
                (function (net) {
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var URLRequestHeader = (function (_super) {
                        __extends(URLRequestHeader, _super);
                        function URLRequestHeader(name, value) {
                            if (name === void 0) { name = ""; }
                            if (value === void 0) { value = ""; }
                            name = asCoerceString(name);
                            value = asCoerceString(value);
                            false && _super.call(this);
                        }
                        URLRequestHeader.classInitializer = null;
                        URLRequestHeader.initializer = null;
                        URLRequestHeader.classSymbols = null;
                        URLRequestHeader.instanceSymbols = ["name!", "value!"];
                        return URLRequestHeader;
                    })(AS.ASNative);
                    net.URLRequestHeader = URLRequestHeader;
                })(net = flash.net || (flash.net = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var net;
                (function (net) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var FileLoadingService = Shumway.FileLoadingService;
                    var throwError = Shumway.AVM2.Runtime.throwError;
                    var utils = Shumway.AVM2.AS.flash.utils;
                    var URLStream = (function (_super) {
                        __extends(URLStream, _super);
                        function URLStream() {
                            false && _super.call(this, undefined);
                            dummyConstructor("public flash.net.URLStream");
                        }
                        Object.defineProperty(URLStream.prototype, "connected", {
                            get: function () {
                                return this._connected;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(URLStream.prototype, "bytesAvailable", {
                            get: function () {
                                return this._buffer.length - this._buffer.position;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(URLStream.prototype, "objectEncoding", {
                            get: function () {
                                return this._buffer.objectEncoding;
                            },
                            set: function (version) {
                                version = version >>> 0;
                                this._buffer.objectEncoding = version;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(URLStream.prototype, "endian", {
                            get: function () {
                                return this._buffer.endian;
                            },
                            set: function (type) {
                                type = asCoerceString(type);
                                this._buffer.endian = type;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(URLStream.prototype, "diskCacheEnabled", {
                            get: function () {
                                notImplemented("public flash.net.URLStream::get diskCacheEnabled");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(URLStream.prototype, "position", {
                            get: function () {
                                return this._buffer.position;
                            },
                            set: function (offset) {
                                offset = +offset;
                                this._buffer.position = offset;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(URLStream.prototype, "length", {
                            get: function () {
                                return this._buffer.length;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        URLStream.prototype.load = function (request) {
                            var Event = flash.events.Event;
                            var IOErrorEvent = flash.events.IOErrorEvent;
                            var ProgressEvent = flash.events.ProgressEvent;
                            var HTTPStatusEvent = flash.events.HTTPStatusEvent;
                            var session = FileLoadingService.instance.createSession();
                            var self = this;
                            var initStream = true;
                            session.onprogress = function (data, progressState) {
                                var readPosition = self._buffer.position;
                                self._buffer.position = self._writePosition;
                                self._buffer.writeRawBytes(data);
                                self._writePosition = self._buffer.position;
                                self._buffer.position = readPosition;
                                self.dispatchEvent(new ProgressEvent(ProgressEvent.PROGRESS, false, false, progressState.bytesLoaded, progressState.bytesTotal));
                            };
                            session.onerror = function (error) {
                                self._connected = false;
                                self.dispatchEvent(new IOErrorEvent(IOErrorEvent.IO_ERROR, false, false, error));
                            };
                            session.onopen = function () {
                                self._connected = true;
                                self.dispatchEvent(new Event(Event.OPEN, false, false));
                            };
                            session.onhttpstatus = function (location, httpStatus, httpHeaders) {
                                var httpStatusEvent = new HTTPStatusEvent(HTTPStatusEvent.HTTP_STATUS, false, false, httpStatus);
                                var headers = [];
                                httpHeaders.split(/(?:\n|\r?\n)/g).forEach(function (h) {
                                    var m = /^([^:]+): (.*)$/.exec(h);
                                    if (m) {
                                        headers.push(new flash.net.URLRequestHeader(m[1], m[2]));
                                        if (m[1] === 'Location') {
                                            location = m[2];
                                        }
                                    }
                                });
                                httpStatusEvent.asSetPublicProperty('responseHeaders', headers);
                                httpStatusEvent.asSetPublicProperty('responseURL', location);
                                self.dispatchEvent(httpStatusEvent);
                            };
                            session.onclose = function () {
                                self._connected = false;
                                self.dispatchEvent(new Event(Event.COMPLETE, false, false));
                            };
                            session.open(request._toFileRequest());
                            this._session = session;
                        };
                        URLStream.prototype.readBytes = function (bytes, offset, length) {
                            if (offset === void 0) { offset = 0; }
                            if (length === void 0) { length = 0; }
                            offset = offset >>> 0;
                            length = length >>> 0;
                            if (length < 0) {
                                throwError('ArgumentError', AVM2.Errors.InvalidArgumentError, "length");
                            }
                            this._buffer.readBytes(bytes, offset, length);
                        };
                        URLStream.prototype.readBoolean = function () {
                            notImplemented("public flash.net.URLStream::readBoolean");
                            return;
                        };
                        URLStream.prototype.readByte = function () {
                            return this._buffer.readByte();
                        };
                        URLStream.prototype.readUnsignedByte = function () {
                            notImplemented("public flash.net.URLStream::readUnsignedByte");
                            return;
                        };
                        URLStream.prototype.readShort = function () {
                            notImplemented("public flash.net.URLStream::readShort");
                            return;
                        };
                        URLStream.prototype.readUnsignedShort = function () {
                            return this._buffer.readUnsignedShort();
                        };
                        URLStream.prototype.readUnsignedInt = function () {
                            notImplemented("public flash.net.URLStream::readUnsignedInt");
                            return;
                        };
                        URLStream.prototype.readInt = function () {
                            notImplemented("public flash.net.URLStream::readInt");
                            return;
                        };
                        URLStream.prototype.readFloat = function () {
                            notImplemented("public flash.net.URLStream::readFloat");
                            return;
                        };
                        URLStream.prototype.readDouble = function () {
                            notImplemented("public flash.net.URLStream::readDouble");
                            return;
                        };
                        URLStream.prototype.readMultiByte = function (length, charSet) {
                            length = length >>> 0;
                            charSet = asCoerceString(charSet);
                            notImplemented("public flash.net.URLStream::readMultiByte");
                            return;
                        };
                        URLStream.prototype.readUTF = function () {
                            return this._buffer.readUTF();
                        };
                        URLStream.prototype.readUTFBytes = function (length) {
                            return this._buffer.readUTFBytes(length);
                        };
                        URLStream.prototype.close = function () {
                            this._session.close();
                        };
                        URLStream.prototype.readObject = function () {
                            notImplemented("public flash.net.URLStream::readObject");
                            return;
                        };
                        URLStream.prototype.stop = function () {
                            notImplemented("public flash.net.URLStream::stop");
                            return;
                        };
                        URLStream.classInitializer = null;
                        URLStream.initializer = function () {
                            this._buffer = new utils.ByteArray();
                            this._writePosition = 0;
                            this._connected = false;
                        };
                        URLStream.classSymbols = null;
                        URLStream.instanceSymbols = null;
                        return URLStream;
                    })(flash.events.EventDispatcher);
                    net.URLStream = URLStream;
                })(net = flash.net || (flash.net = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var net;
                (function (net) {
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var URLVariables = (function (_super) {
                        __extends(URLVariables, _super);
                        function URLVariables(source) {
                            if (source === void 0) { source = null; }
                            false && _super.call(this);
                            this._ignoreDecodingErrors = false;
                            source && this.decode(source);
                        }
                        URLVariables.prototype.decode = function (source) {
                            source = asCoerceString(source);
                            var variables = source.split('&');
                            for (var i = 0; i < variables.length; i++) {
                                var p = variables[i];
                                var j = p.indexOf('=');
                                if (j < 0) {
                                    if (this._ignoreDecodingErrors) {
                                        j = p.length;
                                    }
                                    else {
                                        throwError('Error', AVM2.Errors.DecodeParamError);
                                    }
                                }
                                var name = unescape(p.substring(0, j).split('+').join(' '));
                                var value = unescape(p.substring(j + 1).split('+').join(' '));
                                var currentValue = this.asGetPublicProperty(name);
                                if (typeof currentValue === 'undefined') {
                                    this.asSetPublicProperty(name, value);
                                }
                                else if (Array.isArray(currentValue)) {
                                    currentValue.push(value);
                                }
                                else {
                                    this.asSetPublicProperty(name, [currentValue, value]);
                                }
                            }
                        };
                        URLVariables.prototype.toString = function () {
                            var pairs = [];
                            var keys = this.asGetEnumerableKeys();
                            for (var i = 0; i < keys.length; i++) {
                                var name = keys[i].split(' ').join('+');
                                var value = this.asGetPublicProperty(name);
                                name = escape(name).split(' ').join('+');
                                if (Array.isArray(value)) {
                                    for (var j = 0; j < value.length; j++) {
                                        pairs.push(name + '=' + escape(value[j]));
                                    }
                                }
                                else {
                                    pairs.push(name + '=' + escape(value));
                                }
                            }
                            return pairs.join('&');
                        };
                        URLVariables.classInitializer = null;
                        URLVariables.initializer = null;
                        URLVariables.classSymbols = null;
                        URLVariables.instanceSymbols = null;
                        return URLVariables;
                    })(AS.ASNative);
                    net.URLVariables = URLVariables;
                })(net = flash.net || (flash.net = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var sensors;
                (function (sensors) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var Accelerometer = (function (_super) {
                        __extends(Accelerometer, _super);
                        function Accelerometer() {
                            false && _super.call(this, undefined);
                            dummyConstructor("public flash.sensors.Accelerometer");
                        }
                        Object.defineProperty(Accelerometer.prototype, "isSupported", {
                            get: function () {
                                notImplemented("public flash.sensors.Accelerometer::get isSupported");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Accelerometer.prototype, "muted", {
                            get: function () {
                                notImplemented("public flash.sensors.Accelerometer::get muted");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Accelerometer.prototype.setRequestedUpdateInterval = function (interval) {
                            interval = +interval;
                            notImplemented("public flash.sensors.Accelerometer::setRequestedUpdateInterval");
                            return;
                        };
                        Accelerometer.classInitializer = null;
                        Accelerometer.initializer = null;
                        Accelerometer.classSymbols = null;
                        Accelerometer.instanceSymbols = null;
                        return Accelerometer;
                    })(flash.events.EventDispatcher);
                    sensors.Accelerometer = Accelerometer;
                })(sensors = flash.sensors || (flash.sensors = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var sensors;
                (function (sensors) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var Geolocation = (function (_super) {
                        __extends(Geolocation, _super);
                        function Geolocation() {
                            false && _super.call(this, undefined);
                            dummyConstructor("public flash.sensors.Geolocation");
                        }
                        Object.defineProperty(Geolocation.prototype, "isSupported", {
                            get: function () {
                                notImplemented("public flash.sensors.Geolocation::get isSupported");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Geolocation.prototype, "muted", {
                            get: function () {
                                notImplemented("public flash.sensors.Geolocation::get muted");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Geolocation.prototype.setRequestedUpdateInterval = function (interval) {
                            interval = +interval;
                            notImplemented("public flash.sensors.Geolocation::setRequestedUpdateInterval");
                            return;
                        };
                        Geolocation.classInitializer = null;
                        Geolocation.initializer = null;
                        Geolocation.classSymbols = null;
                        Geolocation.instanceSymbols = null;
                        return Geolocation;
                    })(flash.events.EventDispatcher);
                    sensors.Geolocation = Geolocation;
                })(sensors = flash.sensors || (flash.sensors = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var system;
                (function (system) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var AVM2 = Shumway.AVM2.Runtime.AVM2;
                    var ExecutionMode = Shumway.AVM2.Runtime.ExecutionMode;
                    var RuntimeApplicationDomain = Shumway.AVM2.Runtime.ApplicationDomain;
                    var Multiname = Shumway.AVM2.ABC.Multiname;
                    var ApplicationDomain = (function (_super) {
                        __extends(ApplicationDomain, _super);
                        function ApplicationDomain(parentDomainOrRuntimeDomain) {
                            if (parentDomainOrRuntimeDomain === void 0) { parentDomainOrRuntimeDomain = null; }
                            false && _super.call(this);
                            if (parentDomainOrRuntimeDomain instanceof RuntimeApplicationDomain) {
                                this._runtimeDomain = parentDomainOrRuntimeDomain;
                                return;
                            }
                            var parentRuntimeDomain;
                            if (parentDomainOrRuntimeDomain) {
                                parentRuntimeDomain = parentDomainOrRuntimeDomain._runtimeDomain;
                            }
                            else {
                                parentRuntimeDomain = AVM2.currentDomain().system;
                            }
                            this._runtimeDomain = new RuntimeApplicationDomain(parentRuntimeDomain.vm, parentRuntimeDomain, 2 /* COMPILE */, false);
                        }
                        Object.defineProperty(ApplicationDomain, "currentDomain", {
                            get: function () {
                                return new ApplicationDomain(AVM2.currentDomain());
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ApplicationDomain, "MIN_DOMAIN_MEMORY_LENGTH", {
                            get: function () {
                                notImplemented("public flash.system.ApplicationDomain::get MIN_DOMAIN_MEMORY_LENGTH");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ApplicationDomain.prototype, "parentDomain", {
                            get: function () {
                                if (this._runtimeDomain.base) {
                                    return new ApplicationDomain(this._runtimeDomain.base);
                                }
                                return null;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ApplicationDomain.prototype, "domainMemory", {
                            get: function () {
                                notImplemented("public flash.system.ApplicationDomain::get domainMemory");
                                return;
                            },
                            set: function (mem) {
                                mem = mem;
                                notImplemented("public flash.system.ApplicationDomain::set domainMemory");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        ApplicationDomain.prototype.getDefinition = function (name) {
                            name = asCoerceString(name);
                            if (name) {
                                var simpleName = name.replace("::", ".");
                                return this._runtimeDomain.getProperty(Multiname.fromSimpleName(simpleName), true, true);
                            }
                            return null;
                        };
                        ApplicationDomain.prototype.hasDefinition = function (name) {
                            name = asCoerceString(name);
                            if (name) {
                                var simpleName = name.replace("::", ".");
                                return !!this._runtimeDomain.findDomainProperty(Multiname.fromSimpleName(simpleName), false, false);
                            }
                            return false;
                        };
                        ApplicationDomain.prototype.getQualifiedDefinitionNames = function () {
                            notImplemented("public flash.system.ApplicationDomain::getQualifiedDefinitionNames");
                            return;
                        };
                        ApplicationDomain.classInitializer = null;
                        ApplicationDomain.initializer = null;
                        ApplicationDomain.classSymbols = null;
                        ApplicationDomain.instanceSymbols = null;
                        return ApplicationDomain;
                    })(AS.ASNative);
                    system.ApplicationDomain = ApplicationDomain;
                })(system = flash.system || (flash.system = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var system;
                (function (system) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var toKeyValueArray = Shumway.ObjectUtilities.toKeyValueArray;
                    var Capabilities = (function (_super) {
                        __extends(Capabilities, _super);
                        function Capabilities() {
                            false && _super.call(this);
                            dummyConstructor("public flash.system.Capabilities");
                        }
                        Object.defineProperty(Capabilities, "isEmbeddedInAcrobat", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get isEmbeddedInAcrobat");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "hasEmbeddedVideo", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get hasEmbeddedVideo");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "hasAudio", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get hasAudio");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "avHardwareDisable", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get avHardwareDisable");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "hasAccessibility", {
                            get: function () {
                                somewhatImplemented("public flash.system.Capabilities::get hasAccessibility");
                                return Capabilities._hasAccessibility;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "hasAudioEncoder", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get hasAudioEncoder");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "hasMP3", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get hasMP3");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "hasPrinting", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get hasPrinting");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "hasScreenBroadcast", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get hasScreenBroadcast");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "hasScreenPlayback", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get hasScreenPlayback");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "hasStreamingAudio", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get hasStreamingAudio");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "hasStreamingVideo", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get hasStreamingVideo");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "hasVideoEncoder", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get hasVideoEncoder");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "isDebugger", {
                            get: function () {
                                somewhatImplemented("public flash.system.Capabilities::get isDebugger");
                                return Capabilities._isDebugger;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "localFileReadDisable", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get localFileReadDisable");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "language", {
                            get: function () {
                                somewhatImplemented("public flash.system.Capabilities::get language");
                                return Capabilities._language;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "manufacturer", {
                            get: function () {
                                somewhatImplemented("public flash.system.Capabilities::get manufacturer");
                                return Capabilities._manufacturer;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "os", {
                            get: function () {
                                if (Capabilities._os === null) {
                                    var os;
                                    var userAgent = window.navigator.userAgent;
                                    if (userAgent.indexOf("Macintosh") > 0) {
                                        os = "Mac OS 10.5.2";
                                    }
                                    else if (userAgent.indexOf("Windows") > 0) {
                                        os = "Windows XP";
                                    }
                                    else if (userAgent.indexOf("Linux") > 0) {
                                        os = "Linux";
                                    }
                                    else if (/(iPad|iPhone|iPod|Android)/.test(userAgent)) {
                                        os = "iPhone3,1";
                                    }
                                    else {
                                        notImplemented("public flash.system.Capabilities::get os");
                                    }
                                    Capabilities._os = os;
                                }
                                return Capabilities._os;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "cpuArchitecture", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get cpuArchitecture");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "playerType", {
                            get: function () {
                                somewhatImplemented("public flash.system.Capabilities::get playerType");
                                return Capabilities._playerType;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "serverString", {
                            get: function () {
                                var str = toKeyValueArray({ OS: Capabilities.os }).map(function (pair) {
                                    return pair[0] + "=" + encodeURIComponent(pair[1]);
                                }).join("&");
                                somewhatImplemented("Capabilities.serverString: " + str);
                                return str;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "version", {
                            get: function () {
                                return Capabilities._version;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "screenColor", {
                            get: function () {
                                return "color";
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "pixelAspectRatio", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get pixelAspectRatio");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "screenDPI", {
                            get: function () {
                                somewhatImplemented("public flash.system.Capabilities::get screenDPI");
                                return Capabilities._screenDPI;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "screenResolutionX", {
                            get: function () {
                                somewhatImplemented("public flash.system.Capabilities::get screenResolutionX");
                                return window.screen.width;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "screenResolutionY", {
                            get: function () {
                                somewhatImplemented("public flash.system.Capabilities::get screenResolutionY");
                                return window.screen.height;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "touchscreenType", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get touchscreenType");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "hasIME", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get hasIME");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "hasTLS", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get hasTLS");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "maxLevelIDC", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get maxLevelIDC");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "supports32BitProcesses", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get supports32BitProcesses");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "supports64BitProcesses", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get supports64BitProcesses");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Capabilities, "_internal", {
                            get: function () {
                                notImplemented("public flash.system.Capabilities::get _internal");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Capabilities.hasMultiChannelAudio = function (type) {
                            type = asCoerceString(type);
                            notImplemented("public flash.system.Capabilities::static hasMultiChannelAudio");
                            return;
                        };
                        Capabilities.classInitializer = null;
                        Capabilities.initializer = null;
                        Capabilities.classSymbols = null;
                        Capabilities.instanceSymbols = null;
                        Capabilities._hasAccessibility = false;
                        Capabilities._isDebugger = false;
                        Capabilities._language = 'en';
                        Capabilities._manufacturer = 'Mozilla Research';
                        Capabilities._os = null;
                        Capabilities._playerType = 'PlugIn';
                        Capabilities._version = 'SHUMWAY 10,0,0,0';
                        Capabilities._screenDPI = 96;
                        return Capabilities;
                    })(AS.ASNative);
                    system.Capabilities = Capabilities;
                })(system = flash.system || (flash.system = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var system;
                (function (system) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var FSCommand = (function (_super) {
                        __extends(FSCommand, _super);
                        function FSCommand() {
                            false && _super.call(this);
                            dummyConstructor("packageInternal flash.system.FSCommand");
                        }
                        FSCommand._fscommand = function (command, args) {
                            command = asCoerceString(command);
                            args = asCoerceString(args);
                            console.log('FSCommand: ' + command + '; ' + args);
                            command = command.toLowerCase();
                            if (command === 'debugger') {
                                debugger;
                                return;
                            }
                            var listener = Shumway.AVM2.Runtime.AVM2.instance.globals['Shumway.Player.Utils'];
                            listener.executeFSCommand(command, args);
                        };
                        FSCommand.classInitializer = null;
                        FSCommand.initializer = null;
                        FSCommand.classSymbols = null;
                        FSCommand.instanceSymbols = null;
                        return FSCommand;
                    })(AS.ASNative);
                    system.FSCommand = FSCommand;
                })(system = flash.system || (flash.system = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var system;
                (function (system) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var ImageDecodingPolicy = (function (_super) {
                        __extends(ImageDecodingPolicy, _super);
                        function ImageDecodingPolicy() {
                            false && _super.call(this);
                            dummyConstructor("public flash.system.ImageDecodingPolicy");
                        }
                        ImageDecodingPolicy.classInitializer = null;
                        ImageDecodingPolicy.initializer = null;
                        ImageDecodingPolicy.classSymbols = null;
                        ImageDecodingPolicy.instanceSymbols = null;
                        ImageDecodingPolicy.ON_DEMAND = "onDemand";
                        ImageDecodingPolicy.ON_LOAD = "onLoad";
                        return ImageDecodingPolicy;
                    })(AS.ASNative);
                    system.ImageDecodingPolicy = ImageDecodingPolicy;
                })(system = flash.system || (flash.system = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var system;
                (function (system) {
                    var LoaderContext = (function (_super) {
                        __extends(LoaderContext, _super);
                        function LoaderContext(checkPolicyFile, applicationDomain, securityDomain) {
                            if (checkPolicyFile === void 0) { checkPolicyFile = false; }
                            if (applicationDomain === void 0) { applicationDomain = null; }
                            if (securityDomain === void 0) { securityDomain = null; }
                            false && _super.call(this);
                            this.checkPolicyFile = checkPolicyFile;
                            this.applicationDomain = applicationDomain;
                            this.securityDomain = securityDomain;
                            this.imageDecodingPolicy = flash.system.ImageDecodingPolicy.ON_DEMAND;
                        }
                        LoaderContext.classInitializer = null;
                        LoaderContext.initializer = null;
                        LoaderContext.classSymbols = null;
                        LoaderContext.instanceSymbols = ["checkPolicyFile!", "applicationDomain!", "securityDomain!", "allowCodeImport!", "requestedContentParent!", "parameters!", "imageDecodingPolicy!"];
                        return LoaderContext;
                    })(AS.ASNative);
                    system.LoaderContext = LoaderContext;
                })(system = flash.system || (flash.system = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var system;
                (function (system) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var JPEGLoaderContext = (function (_super) {
                        __extends(JPEGLoaderContext, _super);
                        function JPEGLoaderContext(deblockingFilter, checkPolicyFile, applicationDomain, securityDomain) {
                            if (deblockingFilter === void 0) { deblockingFilter = 0; }
                            if (checkPolicyFile === void 0) { checkPolicyFile = false; }
                            if (applicationDomain === void 0) { applicationDomain = null; }
                            if (securityDomain === void 0) { securityDomain = null; }
                            deblockingFilter = +deblockingFilter;
                            checkPolicyFile = !!checkPolicyFile;
                            applicationDomain = applicationDomain;
                            securityDomain = securityDomain;
                            false && _super.call(this, undefined, undefined, undefined);
                            dummyConstructor("public flash.system.JPEGLoaderContext");
                        }
                        JPEGLoaderContext.classInitializer = null;
                        JPEGLoaderContext.initializer = null;
                        JPEGLoaderContext.classSymbols = null;
                        JPEGLoaderContext.instanceSymbols = null;
                        return JPEGLoaderContext;
                    })(flash.system.LoaderContext);
                    system.JPEGLoaderContext = JPEGLoaderContext;
                })(system = flash.system || (flash.system = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var system;
                (function (system) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var MessageChannel = (function (_super) {
                        __extends(MessageChannel, _super);
                        function MessageChannel() {
                            false && _super.call(this, undefined);
                            dummyConstructor("public flash.system.MessageChannel");
                        }
                        Object.defineProperty(MessageChannel.prototype, "messageAvailable", {
                            get: function () {
                                notImplemented("public flash.system.MessageChannel::get messageAvailable");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MessageChannel.prototype, "state", {
                            get: function () {
                                notImplemented("public flash.system.MessageChannel::get state");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        MessageChannel.prototype.send = function (arg, queueLimit) {
                            if (queueLimit === void 0) { queueLimit = -1; }
                            queueLimit = queueLimit | 0;
                            notImplemented("public flash.system.MessageChannel::send");
                            return;
                        };
                        MessageChannel.prototype.receive = function (blockUntilReceived) {
                            if (blockUntilReceived === void 0) { blockUntilReceived = false; }
                            blockUntilReceived = !!blockUntilReceived;
                            notImplemented("public flash.system.MessageChannel::receive");
                            return;
                        };
                        MessageChannel.prototype.close = function () {
                            notImplemented("public flash.system.MessageChannel::close");
                            return;
                        };
                        MessageChannel.classInitializer = null;
                        MessageChannel.initializer = null;
                        MessageChannel.classSymbols = null;
                        MessageChannel.instanceSymbols = null;
                        return MessageChannel;
                    })(flash.events.EventDispatcher);
                    system.MessageChannel = MessageChannel;
                })(system = flash.system || (flash.system = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var system;
                (function (system) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var MessageChannelState = (function (_super) {
                        __extends(MessageChannelState, _super);
                        function MessageChannelState() {
                            false && _super.call(this);
                            dummyConstructor("public flash.system.MessageChannelState");
                        }
                        MessageChannelState.classInitializer = null;
                        MessageChannelState.initializer = null;
                        MessageChannelState.classSymbols = null;
                        MessageChannelState.instanceSymbols = null;
                        MessageChannelState.OPEN = "open";
                        MessageChannelState.CLOSING = "closing";
                        MessageChannelState.CLOSED = "closed";
                        return MessageChannelState;
                    })(AS.ASNative);
                    system.MessageChannelState = MessageChannelState;
                })(system = flash.system || (flash.system = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var system;
                (function (system) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var Security = (function (_super) {
                        __extends(Security, _super);
                        function Security() {
                            false && _super.call(this);
                            dummyConstructor("public flash.system.Security");
                        }
                        Object.defineProperty(Security, "exactSettings", {
                            get: function () {
                                return Security._exactSettings;
                            },
                            set: function (value) {
                                value = !!value;
                                Security._exactSettings = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Security, "disableAVM1Loading", {
                            get: function () {
                                notImplemented("public flash.system.Security::get disableAVM1Loading");
                                return;
                            },
                            set: function (value) {
                                value = !!value;
                                notImplemented("public flash.system.Security::set disableAVM1Loading");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Security, "sandboxType", {
                            get: function () {
                                somewhatImplemented("public flash.system.Security::get sandboxType");
                                return Security._sandboxType;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Security, "pageDomain", {
                            get: function () {
                                somewhatImplemented("public flash.system.Security::get pageDomain");
                                var pageHost = Shumway.FileLoadingService.instance.resolveUrl('/');
                                var parts = pageHost.split('/');
                                parts.pop();
                                return parts.pop();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Security.allowDomain = function () {
                            somewhatImplemented("public flash.system.Security::static allowDomain [\"" + Array.prototype.join.call(arguments, "\", \"") + "\"]");
                        };
                        Security.allowInsecureDomain = function () {
                            somewhatImplemented("public flash.system.Security::static allowInsecureDomain");
                        };
                        Security.loadPolicyFile = function (url) {
                            url = asCoerceString(url);
                            somewhatImplemented("public flash.system.Security::static loadPolicyFile");
                        };
                        Security.showSettings = function (panel) {
                            if (panel === void 0) { panel = "default"; }
                            panel = asCoerceString(panel);
                            notImplemented("public flash.system.Security::static showSettings");
                            return;
                        };
                        Security.duplicateSandboxBridgeInputArguments = function (toplevel, args) {
                            toplevel = toplevel;
                            args = args;
                            notImplemented("public flash.system.Security::static duplicateSandboxBridgeInputArguments");
                            return;
                        };
                        Security.duplicateSandboxBridgeOutputArgument = function (toplevel, arg) {
                            toplevel = toplevel;
                            notImplemented("public flash.system.Security::static duplicateSandboxBridgeOutputArgument");
                            return;
                        };
                        Security.classInitializer = null;
                        Security.initializer = null;
                        Security.classSymbols = null;
                        Security.instanceSymbols = null;
                        Security.REMOTE = "remote";
                        Security.LOCAL_WITH_FILE = "localWithFile";
                        Security.LOCAL_WITH_NETWORK = "localWithNetwork";
                        Security.LOCAL_TRUSTED = "localTrusted";
                        Security.APPLICATION = "application";
                        Security._exactSettings = false;
                        Security._sandboxType = 'remote';
                        return Security;
                    })(AS.ASNative);
                    system.Security = Security;
                })(system = flash.system || (flash.system = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var system;
                (function (system) {
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var SecurityDomain = (function (_super) {
                        __extends(SecurityDomain, _super);
                        function SecurityDomain() {
                            false && _super.call(this);
                        }
                        Object.defineProperty(SecurityDomain, "currentDomain", {
                            get: function () {
                                if (!this._currentDomain) {
                                    this._currentDomain = new system.SecurityDomain();
                                }
                                somewhatImplemented("public flash.system.SecurityDomain::get currentDomain");
                                return this._currentDomain;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        SecurityDomain.classInitializer = null;
                        SecurityDomain.initializer = null;
                        SecurityDomain.classSymbols = null;
                        SecurityDomain.instanceSymbols = null;
                        return SecurityDomain;
                    })(AS.ASNative);
                    system.SecurityDomain = SecurityDomain;
                })(system = flash.system || (flash.system = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var system;
                (function (system) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var SecurityPanel = (function (_super) {
                        __extends(SecurityPanel, _super);
                        function SecurityPanel() {
                            false && _super.call(this);
                            dummyConstructor("public flash.system.SecurityPanel");
                        }
                        SecurityPanel.classInitializer = null;
                        SecurityPanel.initializer = null;
                        SecurityPanel.classSymbols = null;
                        SecurityPanel.instanceSymbols = null;
                        SecurityPanel.DEFAULT = "default";
                        SecurityPanel.PRIVACY = "privacy";
                        SecurityPanel.LOCAL_STORAGE = "localStorage";
                        SecurityPanel.MICROPHONE = "microphone";
                        SecurityPanel.CAMERA = "camera";
                        SecurityPanel.DISPLAY = "display";
                        SecurityPanel.SETTINGS_MANAGER = "settingsManager";
                        return SecurityPanel;
                    })(AS.ASNative);
                    system.SecurityPanel = SecurityPanel;
                })(system = flash.system || (flash.system = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var system;
                (function (system) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var TouchscreenType = (function (_super) {
                        __extends(TouchscreenType, _super);
                        function TouchscreenType() {
                            false && _super.call(this);
                            dummyConstructor("public flash.system.TouchscreenType");
                        }
                        TouchscreenType.classInitializer = null;
                        TouchscreenType.initializer = null;
                        TouchscreenType.classSymbols = null;
                        TouchscreenType.instanceSymbols = null;
                        TouchscreenType.FINGER = "finger";
                        TouchscreenType.STYLUS = "stylus";
                        TouchscreenType.NONE = "none";
                        return TouchscreenType;
                    })(AS.ASNative);
                    system.TouchscreenType = TouchscreenType;
                })(system = flash.system || (flash.system = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var text;
                (function (text) {
                    var AntiAliasType = (function (_super) {
                        __extends(AntiAliasType, _super);
                        function AntiAliasType() {
                            _super.call(this);
                        }
                        AntiAliasType.fromNumber = function (n) {
                            switch (n) {
                                case 1:
                                    return AntiAliasType.NORMAL;
                                case 2:
                                    return AntiAliasType.ADVANCED;
                                default:
                                    return null;
                            }
                        };
                        AntiAliasType.toNumber = function (value) {
                            switch (value) {
                                case AntiAliasType.NORMAL:
                                    return 1;
                                case AntiAliasType.ADVANCED:
                                    return 2;
                                default:
                                    return -1;
                            }
                        };
                        AntiAliasType.classInitializer = null;
                        AntiAliasType.initializer = null;
                        AntiAliasType.classSymbols = null;
                        AntiAliasType.instanceSymbols = null;
                        AntiAliasType.NORMAL = "normal";
                        AntiAliasType.ADVANCED = "advanced";
                        return AntiAliasType;
                    })(AS.ASNative);
                    text.AntiAliasType = AntiAliasType;
                })(text = flash.text || (flash.text = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var text;
                (function (text) {
                    var FontStyle = (function (_super) {
                        __extends(FontStyle, _super);
                        function FontStyle() {
                            _super.call(this);
                        }
                        FontStyle.classInitializer = null;
                        FontStyle.initializer = null;
                        FontStyle.classSymbols = null;
                        FontStyle.instanceSymbols = null;
                        FontStyle.REGULAR = "regular";
                        FontStyle.BOLD = "bold";
                        FontStyle.ITALIC = "italic";
                        FontStyle.BOLD_ITALIC = "boldItalic";
                        return FontStyle;
                    })(AS.ASNative);
                    text.FontStyle = FontStyle;
                })(text = flash.text || (flash.text = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var text;
                (function (text) {
                    var FontType = (function (_super) {
                        __extends(FontType, _super);
                        function FontType() {
                            _super.call(this);
                        }
                        FontType.classInitializer = null;
                        FontType.initializer = null;
                        FontType.classSymbols = null;
                        FontType.instanceSymbols = null;
                        FontType.EMBEDDED = "embedded";
                        FontType.EMBEDDED_CFF = "embeddedCFF";
                        FontType.DEVICE = "device";
                        return FontType;
                    })(AS.ASNative);
                    text.FontType = FontType;
                })(text = flash.text || (flash.text = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var text;
                (function (text) {
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var FontStyle = flash.text.FontStyle;
                    var FontType = flash.text.FontType;
                    var Font = (function (_super) {
                        __extends(Font, _super);
                        function Font() {
                            false && _super.call(this);
                        }
                        Font._getFontMetrics = function (name, style) {
                            return this._deviceFontMetrics[name + style] || this._deviceFontMetrics[name];
                        };
                        Font.resolveFontName = function (name) {
                            if (name === '_sans') {
                                return Font.DEFAULT_FONT_SANS;
                            }
                            else if (name === '_serif') {
                                return Font.DEFAULT_FONT_SERIF;
                            }
                            else if (name === '_typewriter') {
                                return Font.DEFAULT_FONT_TYPEWRITER;
                            }
                            return name;
                        };
                        Font.getBySymbolId = function (id) {
                            return this._fontsBySymbolId[id];
                        };
                        Font.getByNameAndStyle = function (name, style) {
                            var key;
                            var font;
                            var names = name.split(',');
                            for (var i = 0; i < names.length && !font; i++) {
                                key = names[i].toLowerCase() + style;
                                font = this._fontsByName[key];
                            }
                            if (!font) {
                                var font = new Font();
                                font._fontName = names[0];
                                font._fontFamily = Font.resolveFontName(names[0].toLowerCase());
                                font._fontStyle = style;
                                font._fontType = FontType.DEVICE;
                                this._fontsByName[key] = font;
                            }
                            if (font._fontType === FontType.DEVICE) {
                                var metrics = Font._getFontMetrics(font._fontName, font._fontStyle);
                                if (!metrics) {
                                    Shumway.Debug.warning('Font metrics for "' + font._fontName + '" unknown. Fallback to default.');
                                    metrics = Font._getFontMetrics(Font.DEFAULT_FONT_SANS, font._fontStyle);
                                    font._fontFamily = Font.DEFAULT_FONT_SANS;
                                }
                                font.ascent = metrics[0];
                                font.descent = metrics[1];
                                font.leading = metrics[2];
                            }
                            return font;
                        };
                        Font.getDefaultFont = function () {
                            return Font.getByNameAndStyle(Font.DEFAULT_FONT_SANS, FontStyle.REGULAR);
                        };
                        Font.enumerateFonts = function (enumerateDeviceFonts) {
                            if (enumerateDeviceFonts === void 0) { enumerateDeviceFonts = false; }
                            somewhatImplemented("public flash.text.Font::static enumerateFonts");
                            return Font._fonts.slice();
                        };
                        Font.registerFont = function (font) {
                            somewhatImplemented('Font.registerFont');
                        };
                        Font.registerEmbeddedFont = function (fontMapping, loaderInfo) {
                            var syncId = flash.display.DisplayObject.getNextSyncID();
                            var resolverProp = {
                                get: Font.resolveEmbeddedFont.bind(Font, loaderInfo, fontMapping.id, syncId),
                                configurable: true
                            };
                            Object.defineProperty(Font._fontsByName, fontMapping.name.toLowerCase() + fontMapping.style, resolverProp);
                            Object.defineProperty(Font._fontsByName, 'swffont' + syncId + fontMapping.style, resolverProp);
                            Object.defineProperty(Font._fontsBySymbolId, syncId + '', resolverProp);
                        };
                        Font.resolveEmbeddedFont = function (loaderInfo, id, syncId) {
                            var symbol = loaderInfo.getSymbolById(id);
                            symbol.syncId = syncId;
                            return Font._fontsBySymbolId[id];
                        };
                        Object.defineProperty(Font.prototype, "fontName", {
                            get: function () {
                                return this._fontName;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Font.prototype, "fontStyle", {
                            get: function () {
                                return this._fontStyle;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Font.prototype, "fontType", {
                            get: function () {
                                return this._fontType;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Font.prototype.hasGlyphs = function (str) {
                            str = asCoerceString(str);
                            somewhatImplemented('Font#hasGlyphs');
                            return true;
                        };
                        Font.DEFAULT_FONT_SANS = 'Arial';
                        Font.DEFAULT_FONT_SERIF = 'Times New Roman';
                        Font.DEFAULT_FONT_TYPEWRITER = 'Courier New';
                        Font.classInitializer = function () {
                            Font._fonts = [];
                            Font._fontsBySymbolId = Shumway.ObjectUtilities.createMap();
                            Font._fontsByName = Shumway.ObjectUtilities.createMap();
                            Font.DEVICE_FONT_METRICS_WIN = {
                                "Arial": [1, 0.25, 0],
                                "Arial Baltic": [1, 0.25, 0],
                                "Arial Black": [1.0833, 0.3333, 0],
                                "Arial CE": [1, 0.25, 0],
                                "Arial CYR": [1, 0.25, 0],
                                "Arial Greek": [1, 0.25, 0],
                                "Arial TUR": [1, 0.25, 0],
                                "Comic Sans MS": [1.0833, 0.3333, 0],
                                "Courier New": [1, 0.25, 0],
                                "Courier New Baltic": [1, 0.25, 0],
                                "Courier New CE": [1, 0.25, 0],
                                "Courier New CYR": [1, 0.25, 0],
                                "Courier New Greek": [1, 0.25, 0],
                                "Courier New TUR": [1, 0.25, 0],
                                "Estrangelo Edessa": [0.75, 0.3333, 0],
                                "Franklin Gothic Medium": [1, 0.3333, 0],
                                "Gautami": [0.9167, 0.8333, 0],
                                "Georgia": [1, 0.25, 0],
                                "Impact": [1.0833, 0.25, 0],
                                "Latha": [1.0833, 0.25, 0],
                                "Lucida Console": [0.75, 0.25, 0],
                                "Lucida Sans Unicode": [1.0833, 0.25, 0],
                                "Mangal": [1.0833, 0.25, 0],
                                "Marlett": [1, 0, 0],
                                "Microsoft Sans Serif": [1.0833, 0.1667, 0],
                                "MV Boli": [0.9167, 0.25, 0],
                                "Palatino Linotype": [1.0833, 0.3333, 0],
                                "Raavi": [1.0833, 0.6667, 0],
                                "Shruti": [1, 0.5, 0],
                                "Sylfaen": [1, 0.3333, 0],
                                "Symbol": [1, 0.25, 0],
                                "Tahoma": [1, 0.1667, 0],
                                "Times New Roman": [1, 0.25, 0],
                                "Times New Roman Baltic": [1, 0.25, 0],
                                "Times New Roman CE": [1, 0.25, 0],
                                "Times New Roman CYR": [1, 0.25, 0],
                                "Times New Roman Greek": [1, 0.25, 0],
                                "Times New Roman TUR": [1, 0.25, 0],
                                "Trebuchet MS": [1.0833, 0.4167, 0],
                                "Tunga": [1, 0.75, 0],
                                "Verdana": [1, 0.1667, 0],
                                "Webdings": [1.0833, 0.5, 0],
                                "Wingdings": [0.9167, 0.25, 0]
                            };
                            Font.DEVICE_FONT_METRICS_MAC = {
                                "Al Bayan Bold": [1, 0.5833, 0],
                                "Al Bayan Plain": [1, 0.5, 0],
                                "Al Nile": [0.8333, 0.5, 0],
                                "Al Nile Bold": [0.8333, 0.5, 0],
                                "Al Tarikh Regular": [0.5833, 0.4167, 0],
                                "American Typewriter": [0.9167, 0.25, 0],
                                "American Typewriter Bold": [0.9167, 0.25, 0],
                                "American Typewriter Condensed": [0.9167, 0.25, 0],
                                "American Typewriter Condensed Bold": [0.9167, 0.25, 0],
                                "American Typewriter Condensed Light": [0.8333, 0.25, 0],
                                "American Typewriter Light": [0.9167, 0.25, 0],
                                "Andale Mono": [0.9167, 0.25, 0],
                                "Apple Braille": [0.75, 0.25, 0],
                                "Apple Braille Outline 6 Dot": [0.75, 0.25, 0],
                                "Apple Braille Outline 8 Dot": [0.75, 0.25, 0],
                                "Apple Braille Pinpoint 6 Dot": [0.75, 0.25, 0],
                                "Apple Braille Pinpoint 8 Dot": [0.75, 0.25, 0],
                                "Apple Chancery": [1.0833, 0.5, 0],
                                "Apple Color Emoji": [1.25, 0.4167, 0],
                                "Apple SD Gothic Neo Bold": [0.9167, 0.3333, 0],
                                "Apple SD Gothic Neo Heavy": [0.9167, 0.3333, 0],
                                "Apple SD Gothic Neo Light": [0.9167, 0.3333, 0],
                                "Apple SD Gothic Neo Medium": [0.9167, 0.3333, 0],
                                "Apple SD Gothic Neo Regular": [0.9167, 0.3333, 0],
                                "Apple SD Gothic Neo SemiBold": [0.9167, 0.3333, 0],
                                "Apple SD Gothic Neo Thin": [0.9167, 0.3333, 0],
                                "Apple SD Gothic Neo UltraLight": [0.9167, 0.3333, 0],
                                "Apple SD GothicNeo ExtraBold": [0.9167, 0.3333, 0],
                                "Apple Symbols": [0.6667, 0.25, 0],
                                "AppleGothic Regular": [0.9167, 0.3333, 0],
                                "AppleMyungjo Regular": [0.8333, 0.3333, 0],
                                "Arial": [0.9167, 0.25, 0],
                                "Arial Black": [1.0833, 0.3333, 0],
                                "Arial Bold": [0.9167, 0.25, 0],
                                "Arial Bold Italic": [0.9167, 0.25, 0],
                                "Arial Hebrew": [0.75, 0.3333, 0],
                                "Arial Hebrew Bold": [0.75, 0.3333, 0],
                                "Arial Hebrew Light": [0.75, 0.3333, 0],
                                "Arial Hebrew Scholar": [0.75, 0.3333, 0],
                                "Arial Hebrew Scholar Bold": [0.75, 0.3333, 0],
                                "Arial Hebrew Scholar Light": [0.75, 0.3333, 0],
                                "Arial Italic": [0.9167, 0.25, 0],
                                "Arial Narrow": [0.9167, 0.25, 0],
                                "Arial Narrow Bold": [0.9167, 0.25, 0],
                                "Arial Narrow Bold Italic": [0.9167, 0.25, 0],
                                "Arial Narrow Italic": [0.9167, 0.25, 0],
                                "Arial Rounded MT Bold": [0.9167, 0.25, 0],
                                "Arial Unicode MS": [1.0833, 0.25, 0],
                                "Athelas Bold": [0.9167, 0.25, 0],
                                "Athelas Bold Italic": [0.9167, 0.25, 0],
                                "Athelas Italic": [0.9167, 0.25, 0],
                                "Athelas Regular": [0.9167, 0.25, 0],
                                "Avenir Black": [1, 0.3333, 0],
                                "Avenir Black Oblique": [1, 0.3333, 0],
                                "Avenir Book": [1, 0.3333, 0],
                                "Avenir Book Oblique": [1, 0.3333, 0],
                                "Avenir Heavy": [1, 0.3333, 0],
                                "Avenir Heavy Oblique": [1, 0.3333, 0],
                                "Avenir Light": [1, 0.3333, 0],
                                "Avenir Light Oblique": [1, 0.3333, 0],
                                "Avenir Medium": [1, 0.3333, 0],
                                "Avenir Medium Oblique": [1, 0.3333, 0],
                                "Avenir Next Bold": [1, 0.3333, 0],
                                "Avenir Next Bold Italic": [1, 0.3333, 0],
                                "Avenir Next Condensed Bold": [1, 0.3333, 0],
                                "Avenir Next Condensed Bold Italic": [1, 0.3333, 0],
                                "Avenir Next Condensed Demi Bold": [1, 0.3333, 0],
                                "Avenir Next Condensed Demi Bold Italic": [1, 0.3333, 0],
                                "Avenir Next Condensed Heavy": [1, 0.3333, 0],
                                "Avenir Next Condensed Heavy Italic": [1, 0.3333, 0],
                                "Avenir Next Condensed Italic": [1, 0.3333, 0],
                                "Avenir Next Condensed Medium": [1, 0.3333, 0],
                                "Avenir Next Condensed Medium Italic": [1, 0.3333, 0],
                                "Avenir Next Condensed Regular": [1, 0.3333, 0],
                                "Avenir Next Condensed Ultra Light": [1, 0.3333, 0],
                                "Avenir Next Condensed Ultra Light Italic": [1, 0.3333, 0],
                                "Avenir Next Demi Bold": [1, 0.3333, 0],
                                "Avenir Next Demi Bold Italic": [1, 0.3333, 0],
                                "Avenir Next Heavy": [1, 0.3333, 0],
                                "Avenir Next Heavy Italic": [1, 0.3333, 0],
                                "Avenir Next Italic": [1, 0.3333, 0],
                                "Avenir Next Medium": [1, 0.3333, 0],
                                "Avenir Next Medium Italic": [1, 0.3333, 0],
                                "Avenir Next Regular": [1, 0.3333, 0],
                                "Avenir Next Ultra Light": [1, 0.3333, 0],
                                "Avenir Next Ultra Light Italic": [1, 0.3333, 0],
                                "Avenir Oblique": [1, 0.3333, 0],
                                "Avenir Roman": [1, 0.3333, 0],
                                "Ayuthaya": [1.0833, 0.3333, 0],
                                "Baghdad Regular": [0.9167, 0.4167, 0],
                                "Bangla MN": [1.0833, 0.75, 0],
                                "Bangla MN Bold": [1.0833, 0.75, 0],
                                "Bangla Sangam MN": [0.9167, 0.4167, 0],
                                "Bangla Sangam MN Bold": [0.9167, 0.4167, 0],
                                "Baoli SC Regular": [1.0833, 0.3333, 0],
                                "Baskerville": [0.9167, 0.25, 0],
                                "Baskerville Bold": [0.9167, 0.25, 0],
                                "Baskerville Bold Italic": [0.9167, 0.25, 0],
                                "Baskerville Italic": [0.9167, 0.25, 0],
                                "Baskerville SemiBold": [0.9167, 0.25, 0],
                                "Baskerville SemiBold Italic": [0.9167, 0.25, 0],
                                "Beirut Regular": [0.75, 0.25, 0],
                                "Big Caslon Medium": [0.9167, 0.25, 0],
                                "Bodoni 72 Bold": [0.9167, 0.25, 0],
                                "Bodoni 72 Book": [0.9167, 0.25, 0],
                                "Bodoni 72 Book Italic": [0.9167, 0.3333, 0],
                                "Bodoni 72 Oldstyle Bold": [0.9167, 0.25, 0],
                                "Bodoni 72 Oldstyle Book": [0.9167, 0.25, 0],
                                "Bodoni 72 Oldstyle Book Italic": [0.9167, 0.3333, 0],
                                "Bodoni 72 Smallcaps Book": [0.9167, 0.25, 0],
                                "Bodoni Ornaments": [0.8333, 0.1667, 0],
                                "Bradley Hand Bold": [0.8333, 0.4167, 0],
                                "Brush Script MT Italic": [0.9167, 0.3333, 0],
                                "Chalkboard": [1, 0.25, 0],
                                "Chalkboard Bold": [1, 0.25, 0],
                                "Chalkboard SE Bold": [1.1667, 0.25, 0],
                                "Chalkboard SE Light": [1.1667, 0.25, 0],
                                "Chalkboard SE Regular": [1.1667, 0.25, 0],
                                "Chalkduster": [1, 0.25, 0],
                                "Charter Black": [1, 0.25, 0],
                                "Charter Black Italic": [1, 0.25, 0],
                                "Charter Bold": [1, 0.25, 0],
                                "Charter Bold Italic": [1, 0.25, 0],
                                "Charter Italic": [1, 0.25, 0],
                                "Charter Roman": [1, 0.25, 0],
                                "Cochin": [0.9167, 0.25, 0],
                                "Cochin Bold": [0.9167, 0.25, 0],
                                "Cochin Bold Italic": [0.9167, 0.25, 0],
                                "Cochin Italic": [0.9167, 0.25, 0],
                                "Comic Sans MS": [1.0833, 0.25, 0],
                                "Comic Sans MS Bold": [1.0833, 0.25, 0],
                                "Copperplate": [0.75, 0.25, 0],
                                "Copperplate Bold": [0.75, 0.25, 0],
                                "Copperplate Light": [0.75, 0.25, 0],
                                "Corsiva Hebrew": [0.6667, 0.3333, 0],
                                "Corsiva Hebrew Bold": [0.6667, 0.3333, 0],
                                "Courier": [0.75, 0.25, 0],
                                "Courier Bold": [0.75, 0.25, 0],
                                "Courier Bold Oblique": [0.75, 0.25, 0],
                                "Courier New": [0.8333, 0.3333, 0],
                                "Courier New Bold": [0.8333, 0.3333, 0],
                                "Courier New Bold Italic": [0.8333, 0.3333, 0],
                                "Courier New Italic": [0.8333, 0.3333, 0],
                                "Courier Oblique": [0.75, 0.25, 0],
                                "Damascus Bold": [0.5833, 0.4167, 0],
                                "Damascus Light": [0.5833, 0.4167, 0],
                                "Damascus Medium": [0.5833, 0.4167, 0],
                                "Damascus Regular": [0.5833, 0.4167, 0],
                                "Damascus Semi Bold": [0.5833, 0.4167, 0],
                                "DecoType Naskh Regular": [1.1667, 0.6667, 0],
                                "Devanagari MT": [0.9167, 0.6667, 0],
                                "Devanagari MT Bold": [0.9167, 0.6667, 0],
                                "Devanagari Sangam MN": [0.9167, 0.4167, 0],
                                "Devanagari Sangam MN Bold": [0.9167, 0.4167, 0],
                                "Didot": [0.9167, 0.3333, 0],
                                "Didot Bold": [1, 0.3333, 0],
                                "Didot Italic": [0.9167, 0.25, 0],
                                "DIN Alternate Bold": [0.9167, 0.25, 0],
                                "DIN Condensed Bold": [0.75, 0.25, 0],
                                "Diwan Kufi Regular": [1.4167, 0.5, 0],
                                "Diwan Thuluth Regular": [1, 0.6667, 0],
                                "Euphemia UCAS": [1.0833, 0.25, 0],
                                "Euphemia UCAS Bold": [1.0833, 0.25, 0],
                                "Euphemia UCAS Italic": [1.0833, 0.25, 0],
                                "Farah Regular": [0.75, 0.25, 0],
                                "Farisi Regular": [1.0833, 1, 0],
                                "Futura Condensed ExtraBold": [1, 0.25, 0],
                                "Futura Condensed Medium": [1, 0.25, 0],
                                "Futura Medium": [1, 0.25, 0],
                                "Futura Medium Italic": [1, 0.25, 0],
                                "GB18030 Bitmap": [1.1667, 0.1667, 0],
                                "Geeza Pro Bold": [0.9167, 0.3333, 0],
                                "Geeza Pro Regular": [0.9167, 0.3333, 0],
                                "Geneva": [1, 0.25, 0],
                                "Georgia": [0.9167, 0.25, 0],
                                "Georgia Bold": [0.9167, 0.25, 0],
                                "Georgia Bold Italic": [0.9167, 0.25, 0],
                                "Georgia Italic": [0.9167, 0.25, 0],
                                "Gill Sans": [0.9167, 0.25, 0],
                                "Gill Sans Bold": [0.9167, 0.25, 0],
                                "Gill Sans Bold Italic": [0.9167, 0.25, 0],
                                "Gill Sans Italic": [0.9167, 0.25, 0],
                                "Gill Sans Light": [0.9167, 0.25, 0],
                                "Gill Sans Light Italic": [0.9167, 0.25, 0],
                                "Gill Sans SemiBold": [0.9167, 0.25, 0],
                                "Gill Sans SemiBold Italic": [0.9167, 0.25, 0],
                                "Gill Sans UltraBold": [1, 0.25, 0],
                                "Gujarati MT": [0.9167, 0.6667, 0],
                                "Gujarati MT Bold": [0.9167, 0.6667, 0],
                                "Gujarati Sangam MN": [0.8333, 0.4167, 0],
                                "Gujarati Sangam MN Bold": [0.8333, 0.4167, 0],
                                "GungSeo Regular": [0.8333, 0.25, 0],
                                "Gurmukhi MN": [0.9167, 0.25, 0],
                                "Gurmukhi MN Bold": [0.9167, 0.25, 0],
                                "Gurmukhi MT": [0.8333, 0.4167, 0],
                                "Gurmukhi Sangam MN": [0.9167, 0.3333, 0],
                                "Gurmukhi Sangam MN Bold": [0.9167, 0.3333, 0],
                                "Hannotate SC Bold": [1.0833, 0.3333, 0],
                                "Hannotate SC Regular": [1.0833, 0.3333, 0],
                                "Hannotate TC Bold": [1.0833, 0.3333, 0],
                                "Hannotate TC Regular": [1.0833, 0.3333, 0],
                                "HanziPen SC Bold": [1.0833, 0.3333, 0],
                                "HanziPen SC Regular": [1.0833, 0.3333, 0],
                                "HanziPen TC Bold": [1.0833, 0.3333, 0],
                                "HanziPen TC Regular": [1.0833, 0.3333, 0],
                                "HeadLineA Regular": [0.8333, 0.1667, 0],
                                "Heiti SC Light": [0.8333, 0.1667, 0],
                                "Heiti SC Medium": [0.8333, 0.1667, 0],
                                "Heiti TC Light": [0.8333, 0.1667, 0],
                                "Heiti TC Medium": [0.8333, 0.1667, 0],
                                "Helvetica": [0.75, 0.25, 0],
                                "Helvetica Bold": [0.75, 0.25, 0],
                                "Helvetica Bold Oblique": [0.75, 0.25, 0],
                                "Helvetica Light": [0.75, 0.25, 0],
                                "Helvetica Light Oblique": [0.75, 0.25, 0],
                                "Helvetica Neue": [0.9167, 0.25, 0],
                                "Helvetica Neue Bold": [1, 0.25, 0],
                                "Helvetica Neue Bold Italic": [1, 0.25, 0],
                                "Helvetica Neue Condensed Black": [1, 0.25, 0],
                                "Helvetica Neue Condensed Bold": [1, 0.25, 0],
                                "Helvetica Neue Italic": [0.9167, 0.25, 0],
                                "Helvetica Neue Light": [1, 0.25, 0],
                                "Helvetica Neue Light Italic": [0.9167, 0.25, 0],
                                "Helvetica Neue Medium": [1, 0.25, 0],
                                "Helvetica Neue Medium Italic": [1, 0.25, 0],
                                "Helvetica Neue Thin": [1, 0.25, 0],
                                "Helvetica Neue Thin Italic": [1, 0.25, 0],
                                "Helvetica Neue UltraLight": [0.9167, 0.25, 0],
                                "Helvetica Neue UltraLight Italic": [0.9167, 0.25, 0],
                                "Helvetica Oblique": [0.75, 0.25, 0],
                                "Herculanum": [0.8333, 0.1667, 0],
                                "Hiragino Kaku Gothic Pro W3": [0.9167, 0.0833, 0],
                                "Hiragino Kaku Gothic Pro W6": [0.9167, 0.0833, 0],
                                "Hiragino Kaku Gothic ProN W3": [0.9167, 0.0833, 0],
                                "Hiragino Kaku Gothic ProN W6": [0.9167, 0.0833, 0],
                                "Hiragino Kaku Gothic Std W8": [0.9167, 0.0833, 0],
                                "Hiragino Kaku Gothic StdN W8": [0.9167, 0.0833, 0],
                                "Hiragino Maru Gothic Pro W4": [0.9167, 0.0833, 0],
                                "Hiragino Maru Gothic ProN W4": [0.9167, 0.0833, 0],
                                "Hiragino Mincho Pro W3": [0.9167, 0.0833, 0],
                                "Hiragino Mincho Pro W6": [0.9167, 0.0833, 0],
                                "Hiragino Mincho ProN W3": [0.9167, 0.0833, 0],
                                "Hiragino Mincho ProN W6": [0.9167, 0.0833, 0],
                                "Hiragino Sans GB W3": [0.9167, 0.0833, 0],
                                "Hiragino Sans GB W6": [0.9167, 0.0833, 0],
                                "Hoefler Text": [0.75, 0.25, 0],
                                "Hoefler Text Black": [0.75, 0.25, 0],
                                "Hoefler Text Black Italic": [0.75, 0.25, 0],
                                "Hoefler Text Italic": [0.75, 0.25, 0],
                                "Hoefler Text Ornaments": [0.8333, 0.1667, 0],
                                "Impact": [1, 0.25, 0],
                                "InaiMathi": [0.8333, 0.4167, 0],
                                "Iowan Old Style Black": [1, 0.3333, 0],
                                "Iowan Old Style Black Italic": [1, 0.3333, 0],
                                "Iowan Old Style Bold": [1, 0.3333, 0],
                                "Iowan Old Style Bold Italic": [1, 0.3333, 0],
                                "Iowan Old Style Italic": [1, 0.3333, 0],
                                "Iowan Old Style Roman": [1, 0.3333, 0],
                                "Iowan Old Style Titling": [1, 0.3333, 0],
                                "ITF Devanagari Bold": [1.0833, 0.3333, 0],
                                "ITF Devanagari Book": [1.0833, 0.3333, 0],
                                "ITF Devanagari Demi": [1.0833, 0.3333, 0],
                                "ITF Devanagari Light": [1.0833, 0.3333, 0],
                                "ITF Devanagari Medium": [1.0833, 0.3333, 0],
                                "Kailasa Regular": [1.0833, 0.5833, 0],
                                "Kaiti SC Black": [1.0833, 0.3333, 0],
                                "Kaiti SC Bold": [1.0833, 0.3333, 0],
                                "Kaiti SC Regular": [1.0833, 0.3333, 0],
                                "Kaiti TC Bold": [1.0833, 0.3333, 0],
                                "Kaiti TC Regular": [1.0833, 0.3333, 0],
                                "Kannada MN": [0.9167, 0.25, 0],
                                "Kannada MN Bold": [0.9167, 0.25, 0],
                                "Kannada Sangam MN": [1, 0.5833, 0],
                                "Kannada Sangam MN Bold": [1, 0.5833, 0],
                                "Kefa Bold": [0.9167, 0.25, 0],
                                "Kefa Regular": [0.9167, 0.25, 0],
                                "Khmer MN": [1, 0.8333, 0],
                                "Khmer MN Bold": [1, 0.8333, 0],
                                "Khmer Sangam MN": [1.0833, 0.8333, 0],
                                "Kohinoor Devanagari Bold": [1.0833, 0.3333, 0],
                                "Kohinoor Devanagari Book": [1.0833, 0.3333, 0],
                                "Kohinoor Devanagari Demi": [1.0833, 0.3333, 0],
                                "Kohinoor Devanagari Light": [1.0833, 0.3333, 0],
                                "Kohinoor Devanagari Medium": [1.0833, 0.3333, 0],
                                "Kokonor Regular": [1.0833, 0.5833, 0],
                                "Krungthep": [1, 0.25, 0],
                                "KufiStandardGK Regular": [0.9167, 0.5, 0],
                                "Lantinghei SC Demibold": [1, 0.3333, 0],
                                "Lantinghei SC Extralight": [1, 0.3333, 0],
                                "Lantinghei SC Heavy": [1, 0.3333, 0],
                                "Lantinghei TC Demibold": [1, 0.3333, 0],
                                "Lantinghei TC Extralight": [1, 0.3333, 0],
                                "Lantinghei TC Heavy": [1, 0.3333, 0],
                                "Lao MN": [0.9167, 0.4167, 0],
                                "Lao MN Bold": [0.9167, 0.4167, 0],
                                "Lao Sangam MN": [1, 0.3333, 0],
                                "Libian SC Regular": [1.0833, 0.3333, 0],
                                "LiHei Pro": [0.8333, 0.1667, 0],
                                "LiSong Pro": [0.8333, 0.1667, 0],
                                "Lucida Grande": [1, 0.25, 0],
                                "Lucida Grande Bold": [1, 0.25, 0],
                                "Luminari": [1, 0.3333, 0],
                                "Malayalam MN": [1, 0.4167, 0],
                                "Malayalam MN Bold": [1, 0.4167, 0],
                                "Malayalam Sangam MN": [0.8333, 0.4167, 0],
                                "Malayalam Sangam MN Bold": [0.8333, 0.4167, 0],
                                "Marion Bold": [0.6667, 0.3333, 0],
                                "Marion Italic": [0.6667, 0.3333, 0],
                                "Marion Regular": [0.6667, 0.3333, 0],
                                "Marker Felt Thin": [0.8333, 0.25, 0],
                                "Marker Felt Wide": [0.9167, 0.25, 0],
                                "Menlo Bold": [0.9167, 0.25, 0],
                                "Menlo Bold Italic": [0.9167, 0.25, 0],
                                "Menlo Italic": [0.9167, 0.25, 0],
                                "Menlo Regular": [0.9167, 0.25, 0],
                                "Microsoft Sans Serif": [0.9167, 0.25, 0],
                                "Mishafi Gold Regular": [0.75, 0.6667, 0],
                                "Mishafi Regular": [0.75, 0.6667, 0],
                                "Monaco": [1, 0.25, 0],
                                "Mshtakan": [0.9167, 0.25, 0],
                                "Mshtakan Bold": [0.9167, 0.25, 0],
                                "Mshtakan BoldOblique": [0.9167, 0.25, 0],
                                "Mshtakan Oblique": [0.9167, 0.25, 0],
                                "Muna Black": [0.75, 0.3333, 0],
                                "Muna Bold": [0.75, 0.3333, 0],
                                "Muna Regular": [0.75, 0.3333, 0],
                                "Myanmar MN": [1, 0.4167, 0],
                                "Myanmar MN Bold": [1, 0.4167, 0],
                                "Myanmar Sangam MN": [0.9167, 0.4167, 0],
                                "Nadeem Regular": [0.9167, 0.4167, 0],
                                "Nanum Brush Script": [0.9167, 0.25, 0],
                                "Nanum Pen Script": [0.9167, 0.25, 0],
                                "NanumGothic": [0.9167, 0.25, 0],
                                "NanumGothic Bold": [0.9167, 0.25, 0],
                                "NanumGothic ExtraBold": [0.9167, 0.25, 0],
                                "NanumMyeongjo": [0.9167, 0.25, 0],
                                "NanumMyeongjo Bold": [0.9167, 0.25, 0],
                                "NanumMyeongjo ExtraBold": [0.9167, 0.25, 0],
                                "New Peninim MT": [0.75, 0.3333, 0],
                                "New Peninim MT Bold": [0.75, 0.3333, 0],
                                "New Peninim MT Bold Inclined": [0.75, 0.3333, 0],
                                "New Peninim MT Inclined": [0.75, 0.3333, 0],
                                "Noteworthy Bold": [1.25, 0.3333, 0],
                                "Noteworthy Light": [1.25, 0.3333, 0],
                                "Optima Bold": [0.9167, 0.25, 0],
                                "Optima Bold Italic": [0.9167, 0.25, 0],
                                "Optima ExtraBlack": [1, 0.25, 0],
                                "Optima Italic": [0.9167, 0.25, 0],
                                "Optima Regular": [0.9167, 0.25, 0],
                                "Oriya MN": [0.9167, 0.25, 0],
                                "Oriya MN Bold": [0.9167, 0.25, 0],
                                "Oriya Sangam MN": [0.8333, 0.4167, 0],
                                "Oriya Sangam MN Bold": [0.8333, 0.4167, 0],
                                "Osaka": [1, 0.25, 0],
                                "Osaka-Mono": [0.8333, 0.1667, 0],
                                "Palatino": [0.8333, 0.25, 0],
                                "Palatino Bold": [0.8333, 0.25, 0],
                                "Palatino Bold Italic": [0.8333, 0.25, 0],
                                "Palatino Italic": [0.8333, 0.25, 0],
                                "Papyrus": [0.9167, 0.5833, 0],
                                "Papyrus Condensed": [0.9167, 0.5833, 0],
                                "PCMyungjo Regular": [0.8333, 0.25, 0],
                                "Phosphate Inline": [0.9167, 0.25, 0],
                                "Phosphate Solid": [0.9167, 0.25, 0],
                                "PilGi Regular": [0.8333, 0.25, 0],
                                "Plantagenet Cherokee": [0.6667, 0.25, 0],
                                "PT Mono": [0.9167, 0.25, 0],
                                "PT Mono Bold": [0.9167, 0.25, 0],
                                "PT Sans": [0.9167, 0.25, 0],
                                "PT Sans Bold": [0.9167, 0.25, 0],
                                "PT Sans Bold Italic": [0.9167, 0.25, 0],
                                "PT Sans Caption": [0.9167, 0.25, 0],
                                "PT Sans Caption Bold": [0.9167, 0.25, 0],
                                "PT Sans Italic": [0.9167, 0.25, 0],
                                "PT Sans Narrow": [0.9167, 0.25, 0],
                                "PT Sans Narrow Bold": [0.9167, 0.25, 0],
                                "PT Serif": [1, 0.25, 0],
                                "PT Serif Bold": [1, 0.25, 0],
                                "PT Serif Bold Italic": [1, 0.25, 0],
                                "PT Serif Caption": [1, 0.25, 0],
                                "PT Serif Caption Italic": [1, 0.25, 0],
                                "PT Serif Italic": [1, 0.25, 0],
                                "Raanana": [0.75, 0.25, 0],
                                "Raanana Bold": [0.75, 0.25, 0],
                                "Sana Regular": [0.75, 0.25, 0],
                                "Sathu": [0.9167, 0.3333, 0],
                                "Savoye LET Plain CC.:1.0": [1.0833, 0.75, 0],
                                "Savoye LET Plain:1.0": [0.6667, 0.5, 0],
                                "Seravek": [0.9167, 0.3333, 0],
                                "Seravek Bold": [0.9167, 0.3333, 0],
                                "Seravek Bold Italic": [0.9167, 0.3333, 0],
                                "Seravek ExtraLight": [0.9167, 0.3333, 0],
                                "Seravek ExtraLight Italic": [0.9167, 0.3333, 0],
                                "Seravek Italic": [0.9167, 0.3333, 0],
                                "Seravek Light": [0.9167, 0.3333, 0],
                                "Seravek Light Italic": [0.9167, 0.3333, 0],
                                "Seravek Medium": [0.9167, 0.3333, 0],
                                "Seravek Medium Italic": [0.9167, 0.3333, 0],
                                "Shree Devanagari 714": [0.9167, 0.4167, 0],
                                "Shree Devanagari 714 Bold": [0.9167, 0.4167, 0],
                                "Shree Devanagari 714 Bold Italic": [0.9167, 0.4167, 0],
                                "Shree Devanagari 714 Italic": [0.9167, 0.4167, 0],
                                "SignPainter-HouseScript": [0.6667, 0.1667, 0],
                                "Silom": [1, 0.3333, 0],
                                "Sinhala MN": [0.9167, 0.25, 0],
                                "Sinhala MN Bold": [0.9167, 0.25, 0],
                                "Sinhala Sangam MN": [1.1667, 0.3333, 0],
                                "Sinhala Sangam MN Bold": [1.1667, 0.3333, 0],
                                "Skia Black": [0.75, 0.25, 0],
                                "Skia Black Condensed": [0.75, 0.25, 0],
                                "Skia Black Extended": [0.75, 0.25, 0],
                                "Skia Bold": [0.75, 0.25, 0],
                                "Skia Condensed": [0.75, 0.25, 0],
                                "Skia Extended": [0.75, 0.25, 0],
                                "Skia Light": [0.75, 0.25, 0],
                                "Skia Light Condensed": [0.75, 0.25, 0],
                                "Skia Light Extended": [0.75, 0.25, 0],
                                "Skia Regular": [0.75, 0.25, 0],
                                "Snell Roundhand": [0.9167, 0.3333, 0],
                                "Snell Roundhand Black": [0.9167, 0.3333, 0],
                                "Snell Roundhand Bold": [0.9167, 0.3333, 0],
                                "Songti SC Black": [1.0833, 0.3333, 0],
                                "Songti SC Bold": [1.0833, 0.3333, 0],
                                "Songti SC Light": [1.0833, 0.3333, 0],
                                "Songti SC Regular": [1.0833, 0.3333, 0],
                                "Songti TC Bold": [1.0833, 0.3333, 0],
                                "Songti TC Light": [1.0833, 0.3333, 0],
                                "Songti TC Regular": [1.0833, 0.3333, 0],
                                "STFangsong": [0.8333, 0.1667, 0],
                                "STHeiti": [0.8333, 0.1667, 0],
                                "STIXGeneral-Bold": [1.0833, 0.4167, 0],
                                "STIXGeneral-BoldItalic": [1.0833, 0.4167, 0],
                                "STIXGeneral-Italic": [1.0833, 0.4167, 0],
                                "STIXGeneral-Regular": [1.0833, 0.4167, 0],
                                "STIXIntegralsD-Bold": [2.1667, 0.4167, 0],
                                "STIXIntegralsD-Regular": [2.1667, 0.4167, 0],
                                "STIXIntegralsSm-Bold": [1.0833, 0.4167, 0],
                                "STIXIntegralsSm-Regular": [1.0833, 0.4167, 0],
                                "STIXIntegralsUp-Bold": [1.0833, 0.4167, 0],
                                "STIXIntegralsUp-Regular": [1.0833, 0.4167, 0],
                                "STIXIntegralsUpD-Bold": [2.1667, 0.4167, 0],
                                "STIXIntegralsUpD-Regular": [2.1667, 0.4167, 0],
                                "STIXIntegralsUpSm-Bold": [1.0833, 0.4167, 0],
                                "STIXIntegralsUpSm-Regular": [1.0833, 0.4167, 0],
                                "STIXNonUnicode-Bold": [1.4167, 0.5833, 0],
                                "STIXNonUnicode-BoldItalic": [1.4167, 0.5833, 0],
                                "STIXNonUnicode-Italic": [1.4167, 0.5833, 0],
                                "STIXNonUnicode-Regular": [1.4167, 0.5833, 0],
                                "STIXSizeFiveSym-Regular": [1, 0.4167, 0],
                                "STIXSizeFourSym-Bold": [2.5833, 0.5, 0],
                                "STIXSizeFourSym-Regular": [2.5833, 0.5, 0],
                                "STIXSizeOneSym-Bold": [1.5833, 0.3333, 0],
                                "STIXSizeOneSym-Regular": [1.5833, 0.3333, 0],
                                "STIXSizeThreeSym-Bold": [2.5833, 0.5, 0],
                                "STIXSizeThreeSym-Regular": [2.5833, 0.5, 0],
                                "STIXSizeTwoSym-Bold": [2.0833, 0.4167, 0],
                                "STIXSizeTwoSym-Regular": [2.0833, 0.4167, 0],
                                "STIXVariants-Bold": [1.0833, 0.4167, 0],
                                "STIXVariants-Regular": [1.0833, 0.4167, 0],
                                "STKaiti": [0.8333, 0.1667, 0],
                                "STSong": [0.8333, 0.1667, 0],
                                "STXihei": [0.8333, 0.1667, 0],
                                "Sukhumvit Set Bold": [1.0833, 0.5, 0],
                                "Sukhumvit Set Light": [1.0833, 0.5, 0],
                                "Sukhumvit Set Medium": [1.0833, 0.5, 0],
                                "Sukhumvit Set Semi Bold": [1.0833, 0.5, 0],
                                "Sukhumvit Set Text": [1.0833, 0.5, 0],
                                "Sukhumvit Set Thin": [1.0833, 0.5, 0],
                                "Superclarendon Black": [1, 0.25, 0],
                                "Superclarendon Black Italic": [1, 0.25, 0],
                                "Superclarendon Bold": [1, 0.25, 0],
                                "Superclarendon Bold Italic": [1, 0.25, 0],
                                "Superclarendon Italic": [1, 0.25, 0],
                                "Superclarendon Light": [1, 0.25, 0],
                                "Superclarendon Light Italic": [1, 0.25, 0],
                                "Superclarendon Regular": [1, 0.25, 0],
                                "Symbol": [0.6667, 0.3333, 0],
                                "System Font Bold": [1, 0.25, 0],
                                "System Font Bold Italic": [1, 0.25, 0],
                                "System Font Heavy": [1, 0.25, 0],
                                "System Font Italic": [1, 0.25, 0],
                                "System Font Light": [1, 0.25, 0],
                                "System Font Medium Italic P4": [1, 0.25, 0],
                                "System Font Medium P4": [1, 0.25, 0],
                                "System Font Regular": [1, 0.25, 0],
                                "System Font Thin": [1, 0.25, 0],
                                "System Font UltraLight": [1, 0.25, 0],
                                "Tahoma": [1, 0.1667, 0],
                                "Tahoma Negreta": [1, 0.1667, 0],
                                "Tamil MN": [0.9167, 0.25, 0],
                                "Tamil MN Bold": [0.9167, 0.25, 0],
                                "Tamil Sangam MN": [0.75, 0.25, 0],
                                "Tamil Sangam MN Bold": [0.75, 0.25, 0],
                                "Telugu MN": [0.9167, 0.25, 0],
                                "Telugu MN Bold": [0.9167, 0.25, 0],
                                "Telugu Sangam MN": [1, 0.5833, 0],
                                "Telugu Sangam MN Bold": [1, 0.5833, 0],
                                "Thonburi": [1.0833, 0.25, 0],
                                "Thonburi Bold": [1.0833, 0.25, 0],
                                "Thonburi Light": [1.0833, 0.25, 0],
                                "Times Bold": [0.75, 0.25, 0],
                                "Times Bold Italic": [0.75, 0.25, 0],
                                "Times Italic": [0.75, 0.25, 0],
                                "Times New Roman": [0.9167, 0.25, 0],
                                "Times New Roman Bold": [0.9167, 0.25, 0],
                                "Times New Roman Bold Italic": [0.9167, 0.25, 0],
                                "Times New Roman Italic": [0.9167, 0.25, 0],
                                "Times Roman": [0.75, 0.25, 0],
                                "Trattatello": [1.1667, 0.6667, 0],
                                "Trebuchet MS": [0.9167, 0.25, 0],
                                "Trebuchet MS Bold": [0.9167, 0.25, 0],
                                "Trebuchet MS Bold Italic": [0.9167, 0.25, 0],
                                "Trebuchet MS Italic": [0.9167, 0.25, 0],
                                "Verdana": [1, 0.25, 0],
                                "Verdana Bold": [1, 0.25, 0],
                                "Verdana Bold Italic": [1, 0.25, 0],
                                "Verdana Italic": [1, 0.25, 0],
                                "Waseem Light": [0.9167, 0.5833, 0],
                                "Waseem Regular": [0.9167, 0.5833, 0],
                                "Wawati SC Regular": [1.0833, 0.3333, 0],
                                "Wawati TC Regular": [1.0833, 0.3333, 0],
                                "Webdings": [0.8333, 0.1667, 0],
                                "Weibei SC Bold": [1.0833, 0.3333, 0],
                                "Weibei TC Bold": [1.0833, 0.3333, 0],
                                "Wingdings": [0.9167, 0.25, 0],
                                "Wingdings 2": [0.8333, 0.25, 0],
                                "Wingdings 3": [0.9167, 0.25, 0],
                                "Xingkai SC Bold": [1.0833, 0.3333, 0],
                                "Xingkai SC Light": [1.0833, 0.3333, 0],
                                "Yuanti SC Bold": [1.0833, 0.3333, 0],
                                "Yuanti SC Light": [1.0833, 0.3333, 0],
                                "Yuanti SC Regular": [1.0833, 0.3333, 0],
                                "YuGothic Bold": [0.9167, 0.0833, 0],
                                "YuGothic Medium": [0.9167, 0.0833, 0],
                                "YuMincho Demibold": [0.9167, 0.0833, 0],
                                "YuMincho Medium": [0.9167, 0.0833, 0],
                                "Yuppy SC Regular": [1.0833, 0.3333, 0],
                                "Yuppy TC Regular": [1.0833, 0.3333, 0],
                                "Zapf Dingbats": [0.8333, 0.1667, 0],
                                "Zapfino": [1.9167, 1.5, 0]
                            };
                            Font.DEVICE_FONT_METRICS_LINUX = {
                                "KacstFarsi": [1.0417, 0.5208, 0],
                                "Meera": [0.651, 0.4557, 0],
                                "FreeMono": [0.7812, 0.1953, 0],
                                "Loma": [1.1719, 0.4557, 0],
                                "Century Schoolbook L": [0.9766, 0.3255, 0],
                                "KacstTitleL": [1.0417, 0.5208, 0],
                                "Garuda": [1.3021, 0.5859, 0],
                                "Rekha": [1.1068, 0.2604, 0],
                                "Purisa": [1.1068, 0.5208, 0],
                                "DejaVu Sans Mono": [0.9115, 0.2604, 0],
                                "Vemana2000": [0.9115, 0.8464, 0],
                                "KacstOffice": [1.0417, 0.5208, 0],
                                "Umpush": [1.237, 0.651, 0],
                                "OpenSymbol": [0.7812, 0.1953, 0],
                                "Sawasdee": [1.1068, 0.4557, 0],
                                "URW Palladio L": [0.9766, 0.3255, 0],
                                "FreeSerif": [0.9115, 0.3255, 0],
                                "KacstDigital": [1.0417, 0.5208, 0],
                                "Ubuntu Condensed": [0.9115, 0.1953, 0],
                                "mry_KacstQurn": [1.4323, 0.7161, 0],
                                "URW Gothic L": [0.9766, 0.2604, 0],
                                "Dingbats": [0.8464, 0.1953, 0],
                                "URW Chancery L": [0.9766, 0.3255, 0],
                                "Phetsarath OT": [1.1068, 0.5208, 0],
                                "Tlwg Typist": [0.9115, 0.3906, 0],
                                "KacstLetter": [1.0417, 0.5208, 0],
                                "utkal": [1.1719, 0.651, 0],
                                "Norasi": [1.237, 0.5208, 0],
                                "KacstOne": [1.237, 0.651, 0],
                                "Liberation Sans Narrow": [0.9115, 0.2604, 0],
                                "Symbol": [1.0417, 0.3255, 0],
                                "NanumMyeongjo": [0.9115, 0.2604, 0],
                                "Untitled1": [0.651, 0.5859, 0],
                                "Lohit Gujarati": [0.9115, 0.3906, 0],
                                "Liberation Mono": [0.8464, 0.3255, 0],
                                "KacstArt": [1.0417, 0.5208, 0],
                                "Mallige": [0.9766, 0.651, 0],
                                "Bitstream Charter": [0.9766, 0.2604, 0],
                                "NanumGothic": [0.9115, 0.2604, 0],
                                "Liberation Serif": [0.9115, 0.2604, 0],
                                "Ubuntu": [0.9115, 0.1953, 0],
                                "Courier 10 Pitch": [0.8464, 0.3255, 0],
                                "Nimbus Sans L": [0.9766, 0.3255, 0],
                                "TakaoPGothic": [0.9115, 0.1953, 0],
                                "WenQuanYi Micro Hei Mono": [0.9766, 0.2604, 0],
                                "DejaVu Sans": [0.9115, 0.2604, 0],
                                "Kedage": [0.9766, 0.651, 0],
                                "Kinnari": [1.3021, 0.5208, 0],
                                "TlwgMono": [0.8464, 0.3906, 0],
                                "Standard Symbols L": [1.0417, 0.3255, 0],
                                "Lohit Punjabi": [1.1719, 0.651, 0],
                                "Nimbus Mono L": [0.8464, 0.3255, 0],
                                "Rachana": [0.651, 0.5859, 0],
                                "Waree": [1.237, 0.4557, 0],
                                "KacstPoster": [1.0417, 0.5208, 0],
                                "Khmer OS": [1.3021, 0.7161, 0],
                                "FreeSans": [0.9766, 0.3255, 0],
                                "gargi": [0.9115, 0.3255, 0],
                                "Nimbus Roman No9 L": [0.9115, 0.3255, 0],
                                "DejaVu Serif": [0.9115, 0.2604, 0],
                                "WenQuanYi Micro Hei": [0.9766, 0.2604, 0],
                                "Ubuntu Light": [0.9115, 0.1953, 0],
                                "TlwgTypewriter": [0.9115, 0.3906, 0],
                                "KacstPen": [1.0417, 0.5208, 0],
                                "Tlwg Typo": [0.9115, 0.3906, 0],
                                "Mukti Narrow": [1.237, 0.4557, 0],
                                "Ubuntu Mono": [0.8464, 0.1953, 0],
                                "Lohit Bengali": [0.9766, 0.4557, 0],
                                "Liberation Sans": [0.9115, 0.2604, 0],
                                "KacstDecorative": [1.1068, 0.5208, 0],
                                "Khmer OS System": [1.237, 0.5859, 0],
                                "Saab": [0.9766, 0.651, 0],
                                "KacstTitle": [1.0417, 0.5208, 0],
                                "Mukti Narrow Bold": [1.237, 0.4557, 0],
                                "Lohit Hindi": [0.9766, 0.5208, 0],
                                "KacstQurn": [1.0417, 0.5208, 0],
                                "URW Bookman L": [0.9766, 0.3255, 0],
                                "KacstNaskh": [1.0417, 0.5208, 0],
                                "KacstScreen": [1.0417, 0.5208, 0],
                                "Pothana2000": [0.9115, 0.8464, 0],
                                "Lohit Tamil": [0.8464, 0.3906, 0],
                                "KacstBook": [1.0417, 0.5208, 0],
                                "Sans": [0.9115, 0.2604, 0],
                                "Times": [0.9115, 0.3255, 0],
                                "Monospace": [0.9115, 0.2604, 0]
                            };
                            Font.DEVICE_FONT_METRICS_BUILTIN = {
                                "_sans": [0.9, 0.22, 0.08],
                                "_serif": [0.88, 0.26, 0.08],
                                "_typewriter": [0.86, 0.24, 0.08]
                            };
                            Font.DEVICE_FONT_METRICS_WIN.__proto__ = Font.DEVICE_FONT_METRICS_BUILTIN;
                            Font.DEVICE_FONT_METRICS_MAC.__proto__ = Font.DEVICE_FONT_METRICS_BUILTIN;
                            Font.DEVICE_FONT_METRICS_LINUX.__proto__ = Font.DEVICE_FONT_METRICS_BUILTIN;
                            var userAgent = self.navigator.userAgent;
                            if (userAgent.indexOf("Windows") > -1) {
                                Font._deviceFontMetrics = Font.DEVICE_FONT_METRICS_WIN;
                            }
                            else if (/(Macintosh|iPad|iPhone|iPod|Android)/.test(userAgent)) {
                                Font._deviceFontMetrics = this.DEVICE_FONT_METRICS_MAC;
                                Font.DEFAULT_FONT_SANS = 'Helvetica';
                                Font.DEFAULT_FONT_SERIF = 'Times Roman';
                                Font.DEFAULT_FONT_TYPEWRITER = 'Courier';
                            }
                            else {
                                Font._deviceFontMetrics = this.DEVICE_FONT_METRICS_LINUX;
                                Font.DEFAULT_FONT_SANS = 'Sans';
                                Font.DEFAULT_FONT_SERIF = 'Times';
                                Font.DEFAULT_FONT_TYPEWRITER = 'Monospace';
                            }
                            var metrics = Font._deviceFontMetrics;
                            for (var fontName in metrics) {
                                metrics[fontName.toLowerCase()] = metrics[fontName];
                            }
                        };
                        Font.classSymbols = null;
                        Font.instanceSymbols = null;
                        Font.initializer = function (symbol) {
                            var self = this;
                            self._fontName = null;
                            self._fontFamily = null;
                            self._fontStyle = null;
                            self._fontType = null;
                            self.ascent = 0;
                            self.descent = 0;
                            self.leading = 0;
                            self.advances = null;
                            if (!symbol) {
                                self._id = flash.display.DisplayObject.getNextSyncID();
                                return;
                            }
                            self._symbol = symbol;
                            release || Shumway.Debug.assert(symbol.syncId);
                            self._id = symbol.syncId;
                            self._fontName = symbol.name;
                            self._fontFamily = Font.resolveFontName(symbol.name);
                            if (symbol.bold) {
                                if (symbol.italic) {
                                    self._fontStyle = FontStyle.BOLD_ITALIC;
                                }
                                else {
                                    self._fontStyle = FontStyle.BOLD;
                                }
                            }
                            else if (symbol.italic) {
                                self._fontStyle = FontStyle.ITALIC;
                            }
                            else {
                                self._fontStyle = FontStyle.REGULAR;
                            }
                            var metrics = symbol.metrics;
                            if (metrics) {
                                self.ascent = metrics.ascent;
                                self.descent = metrics.descent;
                                self.leading = metrics.leading;
                                self.advances = metrics.advances;
                            }
                            self._fontType = metrics ? FontType.EMBEDDED : FontType.DEVICE;
                            var fontProp = Object.getOwnPropertyDescriptor(Font._fontsBySymbolId, symbol.syncId + '');
                            if (!fontProp || !fontProp.value) {
                                var resolverProp = {
                                    value: self,
                                    configurable: true
                                };
                                Object.defineProperty(Font._fontsBySymbolId, symbol.syncId + '', resolverProp);
                                Object.defineProperty(Font._fontsByName, symbol.name.toLowerCase() + self._fontStyle, resolverProp);
                                if (self._fontType === FontType.EMBEDDED) {
                                    Object.defineProperty(Font._fontsByName, 'swffont' + symbol.syncId + self._fontStyle, resolverProp);
                                }
                            }
                        };
                        return Font;
                    })(AS.ASNative);
                    text.Font = Font;
                    var FontSymbol = (function (_super) {
                        __extends(FontSymbol, _super);
                        function FontSymbol(data) {
                            _super.call(this, data, Font);
                        }
                        FontSymbol.FromData = function (data) {
                            var symbol = new FontSymbol(data);
                            symbol.ready = !data.metrics;
                            symbol.name = data.name;
                            symbol.data = { id: data.id };
                            symbol.bold = data.bold;
                            symbol.italic = data.italic;
                            symbol.originalSize = data.originalSize;
                            symbol.codes = data.codes;
                            symbol.metrics = data.metrics;
                            symbol.syncId = flash.display.DisplayObject.getNextSyncID();
                            return symbol;
                        };
                        Object.defineProperty(FontSymbol.prototype, "resolveAssetCallback", {
                            get: function () {
                                return this._unboundResolveAssetCallback.bind(this);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        FontSymbol.prototype._unboundResolveAssetCallback = function (data) {
                            release || Shumway.Debug.assert(!this.ready);
                            this.ready = true;
                        };
                        return FontSymbol;
                    })(Shumway.Timeline.Symbol);
                    text.FontSymbol = FontSymbol;
                })(text = flash.text || (flash.text = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var text;
                (function (text) {
                    var GridFitType = (function (_super) {
                        __extends(GridFitType, _super);
                        function GridFitType() {
                            _super.call(this);
                        }
                        GridFitType.fromNumber = function (n) {
                            switch (n) {
                                case 0:
                                    return GridFitType.NONE;
                                case 1:
                                    return GridFitType.PIXEL;
                                case 2:
                                    return GridFitType.SUBPIXEL;
                                default:
                                    return null;
                            }
                        };
                        GridFitType.toNumber = function (value) {
                            switch (value) {
                                case GridFitType.NONE:
                                    return 0;
                                case GridFitType.PIXEL:
                                    return 1;
                                case GridFitType.SUBPIXEL:
                                    return 2;
                                default:
                                    return -1;
                            }
                        };
                        GridFitType.classInitializer = null;
                        GridFitType.initializer = null;
                        GridFitType.classSymbols = null;
                        GridFitType.instanceSymbols = null;
                        GridFitType.NONE = "none";
                        GridFitType.PIXEL = "pixel";
                        GridFitType.SUBPIXEL = "subpixel";
                        return GridFitType;
                    })(AS.ASNative);
                    text.GridFitType = GridFitType;
                })(text = flash.text || (flash.text = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var text;
                (function (text) {
                    var StaticText = (function (_super) {
                        __extends(StaticText, _super);
                        function StaticText() {
                            false && _super.call(this);
                            flash.display.DisplayObject.instanceConstructorNoInitialize.call(this);
                        }
                        StaticText.prototype._canHaveTextContent = function () {
                            return true;
                        };
                        StaticText.prototype._getTextContent = function () {
                            return this._textContent;
                        };
                        Object.defineProperty(StaticText.prototype, "text", {
                            get: function () {
                                return this._textContent.plainText;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        StaticText.classInitializer = null;
                        StaticText.classSymbols = null;
                        StaticText.instanceSymbols = null;
                        StaticText.initializer = function (symbol) {
                            var self = this;
                            self._textContent = null;
                            if (symbol) {
                                this._setStaticContentFromSymbol(symbol);
                            }
                        };
                        return StaticText;
                    })(flash.display.DisplayObject);
                    text.StaticText = StaticText;
                })(text = flash.text || (flash.text = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var text;
                (function (text) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var StyleSheet = (function (_super) {
                        __extends(StyleSheet, _super);
                        function StyleSheet() {
                            false && _super.call(this);
                            flash.events.EventDispatcher.instanceConstructorNoInitialize.call(this);
                            this.clear();
                        }
                        Object.defineProperty(StyleSheet.prototype, "styleNames", {
                            get: function () {
                                var styles = this._rules;
                                var names = [];
                                for (var name in styles) {
                                    if (styles[name]) {
                                        names.push(name);
                                    }
                                }
                                return names;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        StyleSheet.prototype.getStyle = function (styleName) {
                            styleName = asCoerceString(styleName);
                            var style = this._rules[styleName.toLowerCase()];
                            if (!style) {
                                return null;
                            }
                            return AS.ASJSON.transformJSValueToAS(style, false);
                        };
                        StyleSheet.prototype.applyStyle = function (textFormat, styleName) {
                            styleName = asCoerceString(styleName);
                            var style = this._rules[styleName.toLowerCase()];
                            if (style) {
                                return textFormat.transform(style);
                            }
                            return textFormat;
                        };
                        StyleSheet.prototype.setStyle = function (styleName, styleObject) {
                            if (typeof styleObject !== 'object') {
                                return;
                            }
                            styleName = asCoerceString(styleName);
                            this._rules[styleName.toLowerCase()] = AS.ASJSON.transformASValueToJS(styleObject, false);
                        };
                        StyleSheet.prototype.hasStyle = function (styleName) {
                            return !!this._rules[styleName.toLowerCase()];
                        };
                        StyleSheet.prototype.clear = function () {
                            this._rules = Object.create(null);
                        };
                        StyleSheet.prototype.transform = function (formatObject) {
                            if (typeof formatObject !== 'object') {
                                return null;
                            }
                            formatObject = AS.ASJSON.transformASValueToJS(formatObject, false);
                            var textFormat = new text.TextFormat();
                            textFormat.transform(formatObject);
                            return textFormat;
                        };
                        StyleSheet.prototype.parseCSS = function (CSSText) {
                            notImplemented("public flash.text.StyleSheet::parseCSS");
                        };
                        StyleSheet.classInitializer = null;
                        StyleSheet.initializer = null;
                        StyleSheet.classSymbols = null;
                        StyleSheet.instanceSymbols = null;
                        return StyleSheet;
                    })(flash.events.EventDispatcher);
                    text.StyleSheet = StyleSheet;
                })(text = flash.text || (flash.text = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var text;
                (function (text) {
                    var TextDisplayMode = (function (_super) {
                        __extends(TextDisplayMode, _super);
                        function TextDisplayMode() {
                            _super.call(this);
                        }
                        TextDisplayMode.classInitializer = null;
                        TextDisplayMode.initializer = null;
                        TextDisplayMode.classSymbols = null;
                        TextDisplayMode.instanceSymbols = null;
                        TextDisplayMode.LCD = "lcd";
                        TextDisplayMode.CRT = "crt";
                        TextDisplayMode.DEFAULT = "default";
                        return TextDisplayMode;
                    })(AS.ASNative);
                    text.TextDisplayMode = TextDisplayMode;
                })(text = flash.text || (flash.text = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var text;
                (function (_text) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var assert = Shumway.Debug.assert;
                    var warning = Shumway.Debug.warning;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var throwError = Shumway.AVM2.Runtime.throwError;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var clamp = Shumway.NumberUtilities.clamp;
                    var DisplayObjectFlags = flash.display.DisplayObjectFlags;
                    var TextField = (function (_super) {
                        __extends(TextField, _super);
                        function TextField() {
                            false && _super.call(this);
                            flash.display.InteractiveObject.instanceConstructorNoInitialize.call(this);
                        }
                        TextField.prototype._setFillAndLineBoundsFromSymbol = function (symbol) {
                            _super.prototype._setFillAndLineBoundsFromSymbol.call(this, symbol);
                            this._textContent.bounds = this._lineBounds;
                            this._invalidateContent();
                        };
                        TextField.prototype._setFillAndLineBoundsFromWidthAndHeight = function (width, height) {
                            _super.prototype._setFillAndLineBoundsFromWidthAndHeight.call(this, width, height);
                            this._textContent.bounds = this._lineBounds;
                            this._invalidateContent();
                        };
                        TextField.prototype._canHaveTextContent = function () {
                            return true;
                        };
                        TextField.prototype._getTextContent = function () {
                            return this._textContent;
                        };
                        TextField.prototype._getContentBounds = function (includeStrokes) {
                            if (includeStrokes === void 0) { includeStrokes = true; }
                            this._ensureLineMetrics();
                            return _super.prototype._getContentBounds.call(this, includeStrokes);
                        };
                        TextField.prototype._containsPointDirectly = function (localX, localY, globalX, globalY) {
                            release || assert(this._getContentBounds().contains(localX, localY));
                            return true;
                        };
                        TextField.prototype._invalidateContent = function () {
                            if (this._textContent.flags & Shumway.TextContentFlags.Dirty) {
                                this._setFlags(8388608 /* DirtyTextContent */);
                            }
                        };
                        TextField.isFontCompatible = function (fontName, fontStyle) {
                            fontName = asCoerceString(fontName);
                            fontStyle = asCoerceString(fontStyle);
                            var font = _text.Font.getByNameAndStyle(fontName, fontStyle);
                            if (!font) {
                                return false;
                            }
                            return font.fontStyle === fontStyle;
                        };
                        Object.defineProperty(TextField.prototype, "alwaysShowSelection", {
                            get: function () {
                                return this._alwaysShowSelection;
                            },
                            set: function (value) {
                                this._alwaysShowSelection = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "antiAliasType", {
                            get: function () {
                                return this._antiAliasType;
                            },
                            set: function (antiAliasType) {
                                antiAliasType = asCoerceString(antiAliasType);
                                if (_text.AntiAliasType.toNumber(antiAliasType) < 0) {
                                    throwError("ArgumentError", AVM2.Errors.InvalidParamError, "antiAliasType");
                                }
                                this._antiAliasType = antiAliasType;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "autoSize", {
                            get: function () {
                                return this._autoSize;
                            },
                            set: function (value) {
                                value = asCoerceString(value);
                                if (value === this._autoSize) {
                                    return;
                                }
                                if (_text.TextFieldAutoSize.toNumber(value) < 0) {
                                    throwError("ArgumentError", AVM2.Errors.InvalidParamError, "autoSize");
                                }
                                this._autoSize = value;
                                this._textContent.autoSize = _text.TextFieldAutoSize.toNumber(value);
                                this._invalidateContent();
                                this._ensureLineMetrics();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "background", {
                            get: function () {
                                return this._background;
                            },
                            set: function (value) {
                                value = !!value;
                                if (value === this._background) {
                                    return;
                                }
                                this._background = value;
                                this._textContent.backgroundColor = value ? this._backgroundColor : 0;
                                this._setDirtyFlags(8388608 /* DirtyTextContent */);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "backgroundColor", {
                            get: function () {
                                return this._backgroundColor >> 8;
                            },
                            set: function (value) {
                                value = ((value << 8) | 0xff) >>> 0;
                                if (value === this._backgroundColor) {
                                    return;
                                }
                                this._backgroundColor = value;
                                if (this._background) {
                                    this._textContent.backgroundColor = value;
                                    this._setDirtyFlags(8388608 /* DirtyTextContent */);
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "border", {
                            get: function () {
                                return this._border;
                            },
                            set: function (value) {
                                value = !!value;
                                if (value === this._border) {
                                    return;
                                }
                                this._border = value;
                                this._textContent.borderColor = value ? this._borderColor : 0;
                                this._setDirtyFlags(8388608 /* DirtyTextContent */);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "borderColor", {
                            get: function () {
                                return this._borderColor >> 8;
                            },
                            set: function (value) {
                                value = ((value << 8) | 0xff) >>> 0;
                                if (value === this._borderColor) {
                                    return;
                                }
                                this._borderColor = value;
                                if (this._border) {
                                    this._textContent.borderColor = value;
                                    this._setDirtyFlags(8388608 /* DirtyTextContent */);
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "bottomScrollV", {
                            get: function () {
                                return this._bottomScrollV;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "caretIndex", {
                            get: function () {
                                notImplemented("public flash.text.TextField::get caretIndex");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "condenseWhite", {
                            get: function () {
                                return this._condenseWhite;
                            },
                            set: function (value) {
                                this._condenseWhite = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "defaultTextFormat", {
                            get: function () {
                                return this._textContent.defaultTextFormat.clone();
                            },
                            set: function (format) {
                                this._textContent.defaultTextFormat.merge(format);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "embedFonts", {
                            get: function () {
                                return this._embedFonts;
                            },
                            set: function (value) {
                                this._embedFonts = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "gridFitType", {
                            get: function () {
                                return this._gridFitType;
                            },
                            set: function (gridFitType) {
                                gridFitType = asCoerceString(gridFitType);
                                release || assert(flash.text.GridFitType.toNumber(gridFitType) >= 0);
                                this._gridFitType = gridFitType;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "htmlText", {
                            get: function () {
                                return this._htmlText;
                            },
                            set: function (value) {
                                value = asCoerceString(value);
                                if (this._symbol) {
                                    this._textContent.defaultTextFormat.bold = false;
                                    this._textContent.defaultTextFormat.italic = false;
                                }
                                this._textContent.parseHtml(value, this._styleSheet, this._multiline);
                                this._htmlText = value;
                                this._invalidateContent();
                                this._ensureLineMetrics();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "length", {
                            get: function () {
                                return this._length;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "textInteractionMode", {
                            get: function () {
                                notImplemented("public flash.text.TextField::get textInteractionMode");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "maxChars", {
                            get: function () {
                                return this._maxChars;
                            },
                            set: function (value) {
                                this._maxChars = value | 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "maxScrollH", {
                            get: function () {
                                this._ensureLineMetrics();
                                return this._maxScrollH;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "maxScrollV", {
                            get: function () {
                                this._ensureLineMetrics();
                                return this._maxScrollV;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "mouseWheelEnabled", {
                            get: function () {
                                return this._mouseWheelEnabled;
                            },
                            set: function (value) {
                                somewhatImplemented("public flash.text.TextField::set mouseWheelEnabled");
                                this._mouseWheelEnabled = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "multiline", {
                            get: function () {
                                return this._multiline;
                            },
                            set: function (value) {
                                this._multiline = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "numLines", {
                            get: function () {
                                return this._numLines;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "displayAsPassword", {
                            get: function () {
                                return this._displayAsPassword;
                            },
                            set: function (value) {
                                somewhatImplemented("public flash.text.TextField::set displayAsPassword");
                                this._displayAsPassword = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "restrict", {
                            get: function () {
                                return this._restrict;
                            },
                            set: function (value) {
                                somewhatImplemented("public flash.text.TextField::set restrict");
                                this._restrict = asCoerceString(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "scrollH", {
                            get: function () {
                                return this._textContent.scrollH;
                            },
                            set: function (value) {
                                value = value | 0;
                                this._ensureLineMetrics();
                                this._textContent.scrollH = clamp(Math.abs(value), 0, this._maxScrollH);
                                this._invalidateContent();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "scrollV", {
                            get: function () {
                                return this._textContent.scrollV;
                            },
                            set: function (value) {
                                value = value | 0;
                                this._ensureLineMetrics();
                                this._textContent.scrollV = clamp(value, 1, this._maxScrollV);
                                this._invalidateContent();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "selectable", {
                            get: function () {
                                return this._selectable;
                            },
                            set: function (value) {
                                this._selectable = !!value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "selectedText", {
                            get: function () {
                                return this._textContent.plainText.substring(this._selectionBeginIndex, this._selectionEndIndex);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "selectionBeginIndex", {
                            get: function () {
                                return this._selectionBeginIndex;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "selectionEndIndex", {
                            get: function () {
                                return this._selectionEndIndex;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "sharpness", {
                            get: function () {
                                return this._sharpness;
                            },
                            set: function (value) {
                                this._sharpness = clamp(+value, -400, 400);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "styleSheet", {
                            get: function () {
                                return this._styleSheet;
                            },
                            set: function (value) {
                                this._styleSheet = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "text", {
                            get: function () {
                                return this._textContent.plainText;
                            },
                            set: function (value) {
                                value = asCoerceString(value);
                                if (value === this._textContent.plainText) {
                                    return;
                                }
                                this._textContent.plainText = value;
                                this._invalidateContent();
                                this._ensureLineMetrics();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "textColor", {
                            get: function () {
                                return this._textColor < 0 ? +this._textContent.defaultTextFormat.color : this._textColor;
                            },
                            set: function (value) {
                                this._textColor = value >>> 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "textHeight", {
                            get: function () {
                                this._ensureLineMetrics();
                                return (this._textHeight / 20) | 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "textWidth", {
                            get: function () {
                                this._ensureLineMetrics();
                                return (this._textWidth / 20) | 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "thickness", {
                            get: function () {
                                return this._thickness;
                            },
                            set: function (value) {
                                this._thickness = clamp(+value, -200, 200);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "type", {
                            get: function () {
                                return this._type;
                            },
                            set: function (value) {
                                this._type = asCoerceString(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "wordWrap", {
                            get: function () {
                                return this._textContent.wordWrap;
                            },
                            set: function (value) {
                                value = !!value;
                                if (value === this._textContent.wordWrap) {
                                    return;
                                }
                                this._textContent.wordWrap = !!value;
                                this._invalidateContent();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextField.prototype, "useRichTextClipboard", {
                            get: function () {
                                notImplemented("public flash.text.TextField::get useRichTextClipboard");
                                return;
                            },
                            set: function (value) {
                                value = !!value;
                                notImplemented("public flash.text.TextField::set useRichTextClipboard");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        TextField.prototype.copyRichText = function () {
                            notImplemented("public flash.text.TextField::copyRichText");
                        };
                        TextField.prototype.pasteRichText = function (richText) {
                            richText = asCoerceString(richText);
                            notImplemented("public flash.text.TextField::pasteRichText");
                        };
                        TextField.prototype.getXMLText = function (beginIndex, endIndex) {
                            if (endIndex === void 0) { endIndex = 2147483647; }
                            beginIndex = +beginIndex;
                            endIndex = +endIndex;
                            notImplemented("public flash.text.TextField::getXMLText");
                            return "";
                        };
                        TextField.prototype.insertXMLText = function (beginIndex, endIndex, richText, pasting) {
                            beginIndex = +beginIndex;
                            endIndex = +endIndex;
                            richText = asCoerceString(richText);
                            pasting = !!pasting;
                            notImplemented("public flash.text.TextField::insertXMLText");
                        };
                        TextField.prototype._ensureLineMetrics = function () {
                            if (!this._hasFlags(8388608 /* DirtyTextContent */)) {
                                return;
                            }
                            var serializer = Shumway.AVM2.Runtime.AVM2.instance.globals['Shumway.Player.Utils'];
                            var lineMetricsData = serializer.syncDisplayObject(this, false);
                            var textWidth = lineMetricsData.readInt();
                            var textHeight = lineMetricsData.readInt();
                            var offsetX = lineMetricsData.readInt();
                            var bounds = this._lineBounds;
                            if (this._autoSize !== _text.TextFieldAutoSize.NONE) {
                                bounds.xMin = bounds.xMin = offsetX;
                                bounds.xMax = bounds.xMax = offsetX + textWidth + 80;
                                bounds.yMax = bounds.yMax = bounds.yMin + textHeight + 80;
                            }
                            this._textWidth = textWidth;
                            this._textHeight = textHeight;
                            this._numLines = lineMetricsData.readInt();
                            this._lineMetricsData = lineMetricsData;
                            if (this._textHeight > bounds.height) {
                                var maxScrollV = 1;
                                var bottomScrollV = 1;
                                lineMetricsData.position = 16;
                                var y = 0;
                                for (var i = 0; i < this._numLines; i++) {
                                    lineMetricsData.position += 8;
                                    var ascent = lineMetricsData.readInt();
                                    var descent = lineMetricsData.readInt();
                                    var leading = lineMetricsData.readInt();
                                    var height = ascent + descent + leading;
                                    if (y > bounds.height / 20) {
                                        maxScrollV++;
                                    }
                                    else {
                                        bottomScrollV++;
                                    }
                                    y += height;
                                }
                                this._maxScrollV = maxScrollV;
                                this._bottomScrollV = bottomScrollV;
                            }
                            if (this._textWidth > bounds.width) {
                                this._maxScrollH = (((this._textWidth + 80) - bounds.width) / 20) | 0;
                            }
                            else {
                                this._maxScrollH = 0;
                            }
                        };
                        TextField.prototype.appendText = function (newText) {
                            this._textContent.appendText(asCoerceString(newText));
                        };
                        TextField.prototype.getCharBoundaries = function (charIndex) {
                            charIndex = charIndex | 0;
                            somewhatImplemented("public flash.text.TextField::getCharBoundaries");
                            var fakeCharHeight = this.textHeight, fakeCharWidth = fakeCharHeight * 0.75;
                            return new flash.geom.Rectangle(charIndex * fakeCharWidth, 0, fakeCharWidth, fakeCharHeight);
                        };
                        TextField.prototype.getCharIndexAtPoint = function (x, y) {
                            x = +x;
                            y = +y;
                            notImplemented("public flash.text.TextField::getCharIndexAtPoint");
                            return;
                        };
                        TextField.prototype.getFirstCharInParagraph = function (charIndex) {
                            charIndex = charIndex | 0;
                            notImplemented("public flash.text.TextField::getFirstCharInParagraph");
                            return;
                        };
                        TextField.prototype.getLineIndexAtPoint = function (x, y) {
                            x = +x;
                            y = +y;
                            notImplemented("public flash.text.TextField::getLineIndexAtPoint");
                            return;
                        };
                        TextField.prototype.getLineIndexOfChar = function (charIndex) {
                            charIndex = charIndex | 0;
                            notImplemented("public flash.text.TextField::getLineIndexOfChar");
                            return;
                        };
                        TextField.prototype.getLineLength = function (lineIndex) {
                            lineIndex = lineIndex | 0;
                            notImplemented("public flash.text.TextField::getLineLength");
                            return;
                        };
                        TextField.prototype.getLineMetrics = function (lineIndex) {
                            lineIndex = lineIndex | 0;
                            if (lineIndex < 0 || lineIndex > this._numLines - 1) {
                                throwError('RangeError', AVM2.Errors.ParamRangeError);
                            }
                            this._ensureLineMetrics();
                            var lineMetricsData = this._lineMetricsData;
                            lineMetricsData.position = 16 + lineIndex * 20;
                            var x = lineMetricsData.readInt() + this._lineBounds.xMin + 2;
                            var width = lineMetricsData.readInt();
                            var ascent = lineMetricsData.readInt();
                            var descent = lineMetricsData.readInt();
                            var leading = lineMetricsData.readInt();
                            var height = ascent + descent + leading;
                            return new _text.TextLineMetrics(x, width, height, ascent, descent, leading);
                        };
                        TextField.prototype.getLineOffset = function (lineIndex) {
                            lineIndex = lineIndex | 0;
                            notImplemented("public flash.text.TextField::getLineOffset");
                            return;
                        };
                        TextField.prototype.getLineText = function (lineIndex) {
                            lineIndex = lineIndex | 0;
                            notImplemented("public flash.text.TextField::getLineText");
                            return;
                        };
                        TextField.prototype.getParagraphLength = function (charIndex) {
                            charIndex = charIndex | 0;
                            notImplemented("public flash.text.TextField::getParagraphLength");
                            return;
                        };
                        TextField.prototype.getTextFormat = function (beginIndex, endIndex) {
                            if (beginIndex === void 0) { beginIndex = -1; }
                            if (endIndex === void 0) { endIndex = -1; }
                            beginIndex = beginIndex | 0;
                            endIndex = endIndex | 0;
                            var plainText = this._textContent.plainText;
                            var maxIndex = plainText.length;
                            if (beginIndex < 0) {
                                beginIndex = 0;
                                if (endIndex < 0) {
                                    endIndex = maxIndex;
                                }
                            }
                            else {
                                if (endIndex < 0) {
                                    endIndex = beginIndex + 1;
                                }
                            }
                            if (endIndex <= beginIndex || endIndex > maxIndex) {
                                throwError('RangeError', AVM2.Errors.ParamRangeError);
                            }
                            var format;
                            var textRuns = this._textContent.textRuns;
                            for (var i = 0; i < textRuns.length; i++) {
                                var run = textRuns[i];
                                if (run.intersects(beginIndex, endIndex)) {
                                    if (format) {
                                        format.intersect(run.textFormat);
                                    }
                                    else {
                                        format = run.textFormat.clone();
                                    }
                                }
                            }
                            return format;
                        };
                        TextField.prototype.getTextRuns = function (beginIndex, endIndex) {
                            if (beginIndex === void 0) { beginIndex = 0; }
                            if (endIndex === void 0) { endIndex = 2147483647; }
                            var textRuns = this._textContent.textRuns;
                            var result = [];
                            for (var i = 0; i < textRuns.length; i++) {
                                var textRun = textRuns[i];
                                if (textRun.beginIndex >= beginIndex && textRun.endIndex <= endIndex) {
                                    result.push(textRun.clone());
                                }
                            }
                            return result;
                        };
                        TextField.prototype.getRawText = function () {
                            notImplemented("public flash.text.TextField::getRawText");
                            return;
                        };
                        TextField.prototype.replaceSelectedText = function (value) {
                            value = "" + value;
                            this.replaceText(this._selectionBeginIndex, this._selectionEndIndex, value);
                        };
                        TextField.prototype.replaceText = function (beginIndex, endIndex, newText) {
                            beginIndex = beginIndex | 0;
                            endIndex = endIndex | 0;
                            newText = "" + newText;
                            if (beginIndex < 0 || endIndex < 0) {
                                return;
                            }
                            this._textContent.replaceText(beginIndex, endIndex, newText);
                            this._invalidateContent();
                            this._ensureLineMetrics();
                        };
                        TextField.prototype.setSelection = function (beginIndex, endIndex) {
                            this._selectionBeginIndex = beginIndex | 0;
                            this._selectionEndIndex = endIndex | 0;
                        };
                        TextField.prototype.setTextFormat = function (format, beginIndex, endIndex) {
                            if (beginIndex === void 0) { beginIndex = -1; }
                            if (endIndex === void 0) { endIndex = -1; }
                            format = format;
                            beginIndex = beginIndex | 0;
                            endIndex = endIndex | 0;
                            var plainText = this._textContent.plainText;
                            var maxIndex = plainText.length;
                            if (beginIndex < 0) {
                                beginIndex = 0;
                                if (endIndex < 0) {
                                    endIndex = maxIndex;
                                }
                            }
                            else {
                                if (endIndex < 0) {
                                    endIndex = beginIndex + 1;
                                }
                            }
                            if (beginIndex > maxIndex || endIndex > maxIndex) {
                                throwError('RangeError', AVM2.Errors.ParamRangeError);
                            }
                            if (endIndex <= beginIndex) {
                                return;
                            }
                            var subText = plainText.substring(beginIndex, endIndex);
                            this._textContent.replaceText(beginIndex, endIndex, subText, format);
                            this._invalidateContent();
                            this._ensureLineMetrics();
                        };
                        TextField.prototype.getImageReference = function (id) {
                            notImplemented("public flash.text.TextField::getImageReference");
                            return;
                        };
                        TextField.classSymbols = null;
                        TextField.instanceSymbols = null;
                        TextField.classInitializer = null;
                        TextField.initializer = function (symbol) {
                            var self = this;
                            self._alwaysShowSelection = false;
                            self._antiAliasType = _text.AntiAliasType.NORMAL;
                            self._autoSize = _text.TextFieldAutoSize.NONE;
                            self._background = false;
                            self._backgroundColor = 0xffffffff;
                            self._border = false;
                            self._borderColor = 0x000000ff;
                            self._bottomScrollV = 1;
                            self._caretIndex = 0;
                            self._condenseWhite = false;
                            self._embedFonts = false;
                            self._gridFitType = _text.GridFitType.PIXEL;
                            self._htmlText = '';
                            self._length = 0;
                            self._textInteractionMode = _text.TextInteractionMode.NORMAL;
                            self._maxChars = 0;
                            self._maxScrollH = 0;
                            self._maxScrollV = 1;
                            self._mouseWheelEnabled = false;
                            self._multiline = false;
                            self._numLines = 1;
                            self._displayAsPassword = false;
                            self._restrict = null;
                            self._selectable = true;
                            self._selectedText = '';
                            self._selectionBeginIndex = 0;
                            self._selectionEndIndex = 0;
                            self._sharpness = 0;
                            self._styleSheet = null;
                            self._textColor = -1;
                            self._textHeight = 0;
                            self._textWidth = 0;
                            self._thickness = 0;
                            self._type = _text.TextFieldType.DYNAMIC;
                            self._useRichTextClipboard = false;
                            var defaultTextFormat = new flash.text.TextFormat(_text.Font.DEFAULT_FONT_SERIF, 12, 0, false, false, false, '', '', _text.TextFormatAlign.LEFT);
                            self._textContent = new Shumway.TextContent(defaultTextFormat);
                            self._lineMetricsData = null;
                            if (symbol) {
                                self._setFillAndLineBoundsFromSymbol(symbol);
                                defaultTextFormat.color = symbol.color;
                                defaultTextFormat.size = (symbol.size / 20) | 0;
                                defaultTextFormat.font = symbol.face;
                                defaultTextFormat.bold = symbol.bold;
                                defaultTextFormat.italic = symbol.italic;
                                defaultTextFormat.align = symbol.align;
                                defaultTextFormat.leftMargin = (symbol.leftMargin / 20) | 0;
                                defaultTextFormat.rightMargin = (symbol.rightMargin / 20) | 0;
                                defaultTextFormat.indent = (symbol.indent / 20) | 0;
                                defaultTextFormat.leading = (symbol.leading / 20) | 0;
                                self._multiline = symbol.multiline;
                                self._embedFonts = symbol.embedFonts;
                                self._selectable = symbol.selectable;
                                self._displayAsPassword = symbol.displayAsPassword;
                                self._type = symbol.type;
                                self._maxChars = symbol.maxChars;
                                if (symbol.border) {
                                    self.background = true;
                                    self.border = true;
                                }
                                if (symbol.html) {
                                    self.htmlText = symbol.initialText;
                                }
                                else {
                                    self.text = symbol.initialText;
                                }
                                self.wordWrap = symbol.wordWrap;
                                self.autoSize = symbol.autoSize;
                            }
                            else {
                                self._setFillAndLineBoundsFromWidthAndHeight(100 * 20, 100 * 20);
                            }
                        };
                        return TextField;
                    })(flash.display.InteractiveObject);
                    _text.TextField = TextField;
                    var TextSymbol = (function (_super) {
                        __extends(TextSymbol, _super);
                        function TextSymbol(data) {
                            _super.call(this, data, flash.text.TextField, true);
                            this.color = 0;
                            this.size = 0;
                            this.face = "";
                            this.bold = false;
                            this.italic = false;
                            this.align = flash.text.TextFormatAlign.LEFT;
                            this.leftMargin = 0;
                            this.rightMargin = 0;
                            this.indent = 0;
                            this.leading = 0;
                            this.multiline = false;
                            this.wordWrap = false;
                            this.embedFonts = false;
                            this.selectable = true;
                            this.border = false;
                            this.initialText = "";
                            this.html = false;
                            this.displayAsPassword = false;
                            this.type = flash.text.TextFieldType.DYNAMIC;
                            this.maxChars = 0;
                            this.autoSize = flash.text.TextFieldAutoSize.NONE;
                            this.variableName = null;
                            this.textContent = null;
                        }
                        TextSymbol.FromTextData = function (data, loaderInfo) {
                            var symbol = new TextSymbol(data);
                            symbol._setBoundsFromData(data);
                            var tag = data.tag;
                            if (data.static) {
                                symbol.dynamic = false;
                                symbol.symbolClass = flash.text.StaticText;
                                if (tag.initialText) {
                                    var textContent = new Shumway.TextContent();
                                    textContent.bounds = symbol.lineBounds;
                                    textContent.parseHtml(tag.initialText, null, false);
                                    var matrix = new flash.geom.Matrix();
                                    textContent.matrix = new flash.geom.Matrix();
                                    textContent.matrix.copyFromUntyped(data.matrix);
                                    textContent.coords = data.coords;
                                    symbol.textContent = textContent;
                                }
                            }
                            if (tag.hasColor) {
                                symbol.color = tag.color >>> 8;
                            }
                            if (tag.hasFont) {
                                symbol.size = tag.fontHeight;
                                var fontSymbol = loaderInfo.getSymbolById(tag.fontId);
                                if (fontSymbol) {
                                    symbol.face = tag.useOutlines ? fontSymbol.name : 'swffont' + fontSymbol.syncId;
                                    symbol.bold = fontSymbol.bold;
                                    symbol.italic = fontSymbol.italic;
                                }
                                else {
                                    warning("Font " + tag.fontId + " is not defined.");
                                }
                            }
                            if (tag.hasLayout) {
                                symbol.align = flash.text.TextFormatAlign.fromNumber(tag.align);
                                symbol.leftMargin = tag.leftMargin;
                                symbol.rightMargin = tag.rightMargin;
                                symbol.indent = tag.indent;
                                symbol.leading = tag.leading;
                            }
                            symbol.multiline = !!tag.multiline;
                            symbol.wordWrap = !!tag.wordWrap;
                            symbol.embedFonts = !!tag.useOutlines;
                            symbol.selectable = !tag.noSelect;
                            symbol.border = !!tag.border;
                            if (tag.hasText) {
                                symbol.initialText = tag.initialText;
                            }
                            symbol.html = !!tag.html;
                            symbol.displayAsPassword = !!tag.password;
                            symbol.type = tag.readonly ? flash.text.TextFieldType.DYNAMIC : flash.text.TextFieldType.INPUT;
                            if (tag.hasMaxLength) {
                                symbol.maxChars = tag.maxLength;
                            }
                            symbol.autoSize = tag.autoSize ? flash.text.TextFieldAutoSize.LEFT : flash.text.TextFieldAutoSize.NONE;
                            symbol.variableName = tag.variableName;
                            return symbol;
                        };
                        TextSymbol.FromLabelData = function (data, loaderInfo) {
                            var bounds = data.fillBounds;
                            var records = data.records;
                            var coords = data.coords = [];
                            var htmlText = '';
                            var size = 12;
                            var face = 'Times Roman';
                            var bold = false;
                            var italic = false;
                            var color = 0;
                            var x = 0;
                            var y = 0;
                            var codes;
                            for (var i = 0; i < records.length; i++) {
                                var record = records[i];
                                if (record.eot) {
                                    break;
                                }
                                if (record.hasFont) {
                                    var fontSymbol = loaderInfo.getSymbolById(record.fontId);
                                    if (fontSymbol) {
                                        codes = fontSymbol.codes;
                                        size = record.fontHeight;
                                        if (!fontSymbol.originalSize) {
                                            size /= 20;
                                        }
                                        face = fontSymbol.metrics ? 'swffont' + fontSymbol.syncId : fontSymbol.name;
                                        bold = fontSymbol.bold;
                                        italic = fontSymbol.italic;
                                    }
                                    else {
                                        Shumway.Debug.warning('Label ' + data.id + 'refers to undefined font symbol ' + record.fontId);
                                    }
                                }
                                if (record.hasColor) {
                                    color = record.color >>> 8;
                                }
                                if (record.hasMoveX) {
                                    x = record.moveX;
                                    if (x < bounds.xMin) {
                                        bounds.xMin = x;
                                    }
                                }
                                if (record.hasMoveY) {
                                    y = record.moveY;
                                    if (y < bounds.yMin) {
                                        bounds.yMin = y;
                                    }
                                }
                                var text = '';
                                var entries = record.entries;
                                var j = 0;
                                var entry;
                                while ((entry = entries[j++])) {
                                    var code = codes[entry.glyphIndex];
                                    release || assert(code, 'undefined label glyph');
                                    var char = String.fromCharCode(code);
                                    text += charEscapeMap[char] || char;
                                    coords.push(x, y);
                                    x += entry.advance;
                                }
                                if (italic) {
                                    text = '<i>' + text + '</i>';
                                }
                                if (bold) {
                                    text = '<b>' + text + '</b>';
                                }
                                htmlText += '<font size="' + size + '" face="' + face + '"' + ' color="#' + ('000000' + color.toString(16)).slice(-6) + '">' + text + '</font>';
                            }
                            data.tag.initialText = htmlText;
                            return TextSymbol.FromTextData(data, loaderInfo);
                        };
                        return TextSymbol;
                    })(Shumway.Timeline.DisplaySymbol);
                    _text.TextSymbol = TextSymbol;
                    var charEscapeMap = { '<': '&lt;', '>': '&gt;', '&': '&amp;' };
                })(text = flash.text || (flash.text = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var text;
                (function (text) {
                    var TextFieldAutoSize = (function (_super) {
                        __extends(TextFieldAutoSize, _super);
                        function TextFieldAutoSize() {
                            _super.call(this);
                        }
                        TextFieldAutoSize.fromNumber = function (n) {
                            switch (n) {
                                case 0:
                                    return TextFieldAutoSize.NONE;
                                case 1:
                                    return TextFieldAutoSize.CENTER;
                                case 2:
                                    return TextFieldAutoSize.LEFT;
                                case 3:
                                    return TextFieldAutoSize.RIGHT;
                                default:
                                    return null;
                            }
                        };
                        TextFieldAutoSize.toNumber = function (value) {
                            switch (value) {
                                case TextFieldAutoSize.NONE:
                                    return 0;
                                case TextFieldAutoSize.CENTER:
                                    return 1;
                                case TextFieldAutoSize.LEFT:
                                    return 2;
                                case TextFieldAutoSize.RIGHT:
                                    return 3;
                                default:
                                    return -1;
                            }
                        };
                        TextFieldAutoSize.classInitializer = null;
                        TextFieldAutoSize.initializer = null;
                        TextFieldAutoSize.classSymbols = null;
                        TextFieldAutoSize.instanceSymbols = null;
                        TextFieldAutoSize.NONE = "none";
                        TextFieldAutoSize.LEFT = "left";
                        TextFieldAutoSize.CENTER = "center";
                        TextFieldAutoSize.RIGHT = "right";
                        return TextFieldAutoSize;
                    })(AS.ASNative);
                    text.TextFieldAutoSize = TextFieldAutoSize;
                })(text = flash.text || (flash.text = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var text;
                (function (text) {
                    var TextFieldType = (function (_super) {
                        __extends(TextFieldType, _super);
                        function TextFieldType() {
                            _super.call(this);
                        }
                        TextFieldType.classInitializer = null;
                        TextFieldType.initializer = null;
                        TextFieldType.classSymbols = null;
                        TextFieldType.instanceSymbols = null;
                        TextFieldType.INPUT = "input";
                        TextFieldType.DYNAMIC = "dynamic";
                        return TextFieldType;
                    })(AS.ASNative);
                    text.TextFieldType = TextFieldType;
                })(text = flash.text || (flash.text = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var text;
                (function (text) {
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var roundHalfEven = Shumway.NumberUtilities.roundHalfEven;
                    var throwError = Shumway.AVM2.Runtime.throwError;
                    var TextFormat = (function (_super) {
                        __extends(TextFormat, _super);
                        function TextFormat(font, size, color, bold, italic, underline, url, target, align, leftMargin, rightMargin, indent, leading) {
                            if (font === void 0) { font = null; }
                            if (size === void 0) { size = null; }
                            if (color === void 0) { color = null; }
                            if (bold === void 0) { bold = null; }
                            if (italic === void 0) { italic = null; }
                            if (underline === void 0) { underline = null; }
                            if (url === void 0) { url = null; }
                            if (target === void 0) { target = null; }
                            if (align === void 0) { align = null; }
                            if (leftMargin === void 0) { leftMargin = null; }
                            if (rightMargin === void 0) { rightMargin = null; }
                            if (indent === void 0) { indent = null; }
                            if (leading === void 0) { leading = null; }
                            false && _super.call(this);
                            this.font = font;
                            this.size = size;
                            this.color = color;
                            this.bold = bold;
                            this.italic = italic;
                            this.underline = underline;
                            this.url = url;
                            this.target = target;
                            this.align = align;
                            this.leftMargin = leftMargin;
                            this.rightMargin = rightMargin;
                            this.indent = indent;
                            this.leading = leading;
                        }
                        Object.defineProperty(TextFormat.prototype, "align", {
                            get: function () {
                                return this._align;
                            },
                            set: function (value) {
                                value = asCoerceString(value);
                                this._align = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextFormat.prototype, "blockIndent", {
                            get: function () {
                                return this._blockIndent;
                            },
                            set: function (value) {
                                this._blockIndent = TextFormat.coerceNumber(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextFormat.prototype, "bold", {
                            get: function () {
                                return this._bold;
                            },
                            set: function (value) {
                                this._bold = TextFormat.coerceBoolean(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextFormat.prototype, "bullet", {
                            get: function () {
                                return this._bullet;
                            },
                            set: function (value) {
                                this._bullet = TextFormat.coerceBoolean(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextFormat.prototype, "color", {
                            get: function () {
                                return this._color;
                            },
                            set: function (value) {
                                this._color = +value | 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextFormat.prototype, "display", {
                            get: function () {
                                return this._display;
                            },
                            set: function (value) {
                                this._display = asCoerceString(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextFormat.prototype, "font", {
                            get: function () {
                                return this._font;
                            },
                            set: function (value) {
                                this._font = asCoerceString(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextFormat.prototype, "style", {
                            get: function () {
                                if (this._bold && this._italic) {
                                    return text.FontStyle.BOLD_ITALIC;
                                }
                                else if (this._bold) {
                                    return text.FontStyle.BOLD;
                                }
                                else if (this._italic) {
                                    return text.FontStyle.ITALIC;
                                }
                                else {
                                    return text.FontStyle.REGULAR;
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextFormat.prototype, "indent", {
                            get: function () {
                                return this._indent;
                            },
                            set: function (value) {
                                this._indent = TextFormat.coerceNumber(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextFormat.prototype, "italic", {
                            get: function () {
                                return this._italic;
                            },
                            set: function (value) {
                                this._italic = TextFormat.coerceBoolean(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextFormat.prototype, "kerning", {
                            get: function () {
                                return this._kerning;
                            },
                            set: function (value) {
                                this._kerning = TextFormat.coerceBoolean(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextFormat.prototype, "leading", {
                            get: function () {
                                return this._leading;
                            },
                            set: function (value) {
                                this._leading = TextFormat.coerceNumber(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextFormat.prototype, "leftMargin", {
                            get: function () {
                                return this._leftMargin;
                            },
                            set: function (value) {
                                this._leftMargin = TextFormat.coerceNumber(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextFormat.prototype, "letterSpacing", {
                            get: function () {
                                return this._letterSpacing;
                            },
                            set: function (value) {
                                this._letterSpacing = TextFormat.coerceBoolean(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextFormat.prototype, "rightMargin", {
                            get: function () {
                                return this._rightMargin;
                            },
                            set: function (value) {
                                this._rightMargin = TextFormat.coerceNumber(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextFormat.prototype, "size", {
                            get: function () {
                                return this._size;
                            },
                            set: function (value) {
                                this._size = TextFormat.coerceNumber(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextFormat.prototype, "tabStops", {
                            get: function () {
                                return this._tabStops;
                            },
                            set: function (value) {
                                if (!(value instanceof Array)) {
                                    throwError("ArgumentError", AVM2.Errors.CheckTypeFailedError, value, 'Array');
                                }
                                this._tabStops = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextFormat.prototype, "target", {
                            get: function () {
                                return this._target;
                            },
                            set: function (value) {
                                this._target = asCoerceString(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextFormat.prototype, "underline", {
                            get: function () {
                                return this._underline;
                            },
                            set: function (value) {
                                this._underline = TextFormat.coerceBoolean(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextFormat.prototype, "url", {
                            get: function () {
                                return this._url;
                            },
                            set: function (value) {
                                this._url = asCoerceString(value);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        TextFormat.coerceNumber = function (value) {
                            if (value == undefined) {
                                return null;
                            }
                            if (isNaN(value) || value > 0xfffffff) {
                                return -0x80000000;
                            }
                            return roundHalfEven(value);
                        };
                        TextFormat.coerceBoolean = function (value) {
                            return value == undefined ? null : !!value;
                        };
                        TextFormat.prototype.clone = function () {
                            return new flash.text.TextFormat(this.font, this.size, this.color, this.bold, this.italic, this.underline, this.url, this.target, this.align, this.leftMargin, this.rightMargin, this.indent, this.leading);
                        };
                        TextFormat.prototype.equals = function (other) {
                            return this._align === other._align && this._blockIndent === other._blockIndent && this._bold === other._bold && this._bullet === other._bullet && this._color === other._color && this._display === other._display && this._font === other._font && this._indent === other._indent && this._italic === other._italic && this._kerning === other._kerning && this._leading === other._leading && this._leftMargin === other._leftMargin && this._letterSpacing === other._letterSpacing && this._rightMargin === other._rightMargin && this._size === other._size && this._tabStops === other._tabStops && this._target === other._target && this._underline === other._underline && this._url === other._url;
                        };
                        TextFormat.prototype.merge = function (other) {
                            if (other._align !== null) {
                                this._align = other._align;
                            }
                            if (other._blockIndent !== null) {
                                this._blockIndent = other._blockIndent;
                            }
                            if (other._bold !== null) {
                                this._bold = other._bold;
                            }
                            if (other._bullet !== null) {
                                this._bullet = other._bullet;
                            }
                            if (other._color !== null) {
                                this._color = other._color;
                            }
                            if (other._display !== null) {
                                this._display = other._display;
                            }
                            if (other._font) {
                                this._font = other._font;
                            }
                            if (other._indent !== null) {
                                this._indent = other._indent;
                            }
                            if (other._italic !== null) {
                                this._italic = other._italic;
                            }
                            if (other._kerning !== null) {
                                this._kerning = other._kerning;
                            }
                            if (other._leading !== null) {
                                this._leading = other._leading;
                            }
                            if (other._leftMargin !== null) {
                                this._leftMargin = other._leftMargin;
                            }
                            if (other._letterSpacing !== null) {
                                this._letterSpacing = other._letterSpacing;
                            }
                            if (other._rightMargin !== null) {
                                this._rightMargin = other._rightMargin;
                            }
                            if (other._size !== null) {
                                this._size = other._size;
                            }
                            if (other._tabStops !== null) {
                                this._tabStops = other._tabStops;
                            }
                            if (other._target) {
                                this._target = other._target;
                            }
                            if (other._underline !== null) {
                                this._underline = other._underline;
                            }
                            if (other._url) {
                                this._url = other._url;
                            }
                        };
                        TextFormat.prototype.intersect = function (other) {
                            if (other._align !== this._align) {
                                this._align = null;
                            }
                            if (other._blockIndent !== this._blockIndent) {
                                this._blockIndent = null;
                            }
                            if (other._bold !== this._bold) {
                                this._bold = null;
                            }
                            if (other._bullet !== this._bullet) {
                                this._bullet = null;
                            }
                            if (other._color !== this._color) {
                                this._color = null;
                            }
                            if (other._display !== this._display) {
                                this._display = null;
                            }
                            if (other._font !== this._font) {
                                this._font = null;
                            }
                            if (other._indent !== this._indent) {
                                this._indent = null;
                            }
                            if (other._italic !== this._italic) {
                                this._italic = null;
                            }
                            if (other._kerning !== this._kerning) {
                                this._kerning = null;
                            }
                            if (other._leading !== this._leading) {
                                this._leading = null;
                            }
                            if (other._leftMargin !== this._leftMargin) {
                                this._leftMargin = null;
                            }
                            if (other._letterSpacing !== this._letterSpacing) {
                                this._letterSpacing = null;
                            }
                            if (other._rightMargin !== this._rightMargin) {
                                this._rightMargin = null;
                            }
                            if (other._size !== this._size) {
                                this._size = null;
                            }
                            if (other._tabStops !== this._tabStops) {
                                this._tabStops = null;
                            }
                            if (other._target !== this._target) {
                                this._target = null;
                            }
                            if (other._underline !== this._underline) {
                                this._underline = null;
                            }
                            if (other._url !== this._url) {
                                this._url = null;
                            }
                        };
                        TextFormat.prototype.transform = function (formatObject) {
                            var v = formatObject.textAlign;
                            if (v) {
                                this.align = v;
                            }
                            v = formatObject.fontWeight;
                            if (v === "bold") {
                                this.bold = true;
                            }
                            else if (v === "normal") {
                                this.bold = false;
                            }
                            v = formatObject.color;
                            if (v) {
                                if (Shumway.ColorUtilities.isValidHexColor(v)) {
                                    this.color = Shumway.ColorUtilities.hexToRGB(v);
                                }
                            }
                            v = formatObject.display;
                            if (v) {
                                this.display = v;
                            }
                            v = formatObject.fontFamily;
                            if (v) {
                                this.font = v.replace('sans-serif', '_sans').replace('serif', '_serif');
                            }
                            v = formatObject.textIndent;
                            if (v) {
                                this.indent = parseInt(v);
                            }
                            v = formatObject.fontStyle;
                            if (v === "italic") {
                                this.italic = true;
                            }
                            else if (v === "normal") {
                                this.italic = false;
                            }
                            v = formatObject.kerning;
                            if (v === "true") {
                                this.kerning = 1;
                            }
                            else if (v === "false") {
                                this.kerning = 0;
                            }
                            else {
                                this.kerning = parseInt(v);
                            }
                            v = formatObject.leading;
                            if (v) {
                                this.leading = parseInt(v);
                            }
                            v = formatObject.marginLeft;
                            if (v) {
                                this.leftMargin = parseInt(v);
                            }
                            v = formatObject.letterSpacing;
                            if (v) {
                                this.letterSpacing = parseFloat(v);
                            }
                            v = formatObject.marginRight;
                            if (v) {
                                this.rightMargin = parseInt(v);
                            }
                            v = formatObject.fontSize;
                            if (v) {
                                var size = parseInt(v);
                                if (size > 0) {
                                    this.size = size;
                                }
                            }
                            v = formatObject.textDecoration;
                            if (v === "none") {
                                this.underline = false;
                            }
                            else if (v === "underline") {
                                this.underline = true;
                            }
                            return this;
                        };
                        TextFormat.classInitializer = null;
                        TextFormat.initializer = null;
                        TextFormat.classSymbols = null;
                        TextFormat.instanceSymbols = null;
                        return TextFormat;
                    })(AS.ASNative);
                    text.TextFormat = TextFormat;
                })(text = flash.text || (flash.text = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var text;
                (function (text) {
                    var TextFormatAlign = (function (_super) {
                        __extends(TextFormatAlign, _super);
                        function TextFormatAlign() {
                            _super.call(this);
                        }
                        TextFormatAlign.fromNumber = function (n) {
                            switch (n) {
                                case 0:
                                    return TextFormatAlign.LEFT;
                                case 1:
                                    return TextFormatAlign.RIGHT;
                                case 2:
                                    return TextFormatAlign.CENTER;
                                case 3:
                                    return TextFormatAlign.JUSTIFY;
                                case 4:
                                    return TextFormatAlign.START;
                                case 5:
                                    return TextFormatAlign.END;
                                default:
                                    return null;
                            }
                        };
                        TextFormatAlign.toNumber = function (value) {
                            switch (value) {
                                case TextFormatAlign.LEFT:
                                    return 0;
                                case TextFormatAlign.RIGHT:
                                    return 1;
                                case TextFormatAlign.CENTER:
                                    return 2;
                                case TextFormatAlign.JUSTIFY:
                                    return 3;
                                case TextFormatAlign.START:
                                    return 4;
                                case TextFormatAlign.END:
                                    return 5;
                                default:
                                    return -1;
                            }
                        };
                        TextFormatAlign.classInitializer = null;
                        TextFormatAlign.initializer = null;
                        TextFormatAlign.classSymbols = null;
                        TextFormatAlign.instanceSymbols = null;
                        TextFormatAlign.LEFT = "left";
                        TextFormatAlign.CENTER = "center";
                        TextFormatAlign.RIGHT = "right";
                        TextFormatAlign.JUSTIFY = "justify";
                        TextFormatAlign.START = "start";
                        TextFormatAlign.END = "end";
                        return TextFormatAlign;
                    })(AS.ASNative);
                    text.TextFormatAlign = TextFormatAlign;
                })(text = flash.text || (flash.text = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var text;
                (function (text) {
                    var TextFormatDisplay = (function (_super) {
                        __extends(TextFormatDisplay, _super);
                        function TextFormatDisplay() {
                            _super.call(this);
                        }
                        TextFormatDisplay.classInitializer = null;
                        TextFormatDisplay.initializer = null;
                        TextFormatDisplay.classSymbols = null;
                        TextFormatDisplay.instanceSymbols = null;
                        TextFormatDisplay.INLINE = "inline";
                        TextFormatDisplay.BLOCK = "block";
                        return TextFormatDisplay;
                    })(AS.ASNative);
                    text.TextFormatDisplay = TextFormatDisplay;
                })(text = flash.text || (flash.text = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var text;
                (function (text) {
                    var TextInteractionMode = (function (_super) {
                        __extends(TextInteractionMode, _super);
                        function TextInteractionMode() {
                            _super.call(this);
                        }
                        TextInteractionMode.classInitializer = null;
                        TextInteractionMode.initializer = null;
                        TextInteractionMode.classSymbols = null;
                        TextInteractionMode.instanceSymbols = null;
                        TextInteractionMode.NORMAL = "normal";
                        TextInteractionMode.SELECTION = "selection";
                        return TextInteractionMode;
                    })(AS.ASNative);
                    text.TextInteractionMode = TextInteractionMode;
                })(text = flash.text || (flash.text = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var text;
                (function (text) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var TextLineMetrics = (function (_super) {
                        __extends(TextLineMetrics, _super);
                        function TextLineMetrics(x, width, height, ascent, descent, leading) {
                            false && _super.call(this);
                            dummyConstructor("public flash.text.TextLineMetrics");
                            x = +x;
                            width = +width;
                            height = +height;
                            ascent = +ascent;
                            descent = +descent;
                            leading = +leading;
                        }
                        TextLineMetrics.classInitializer = null;
                        TextLineMetrics.initializer = null;
                        TextLineMetrics.classSymbols = null;
                        TextLineMetrics.instanceSymbols = null;
                        return TextLineMetrics;
                    })(AS.ASNative);
                    text.TextLineMetrics = TextLineMetrics;
                })(text = flash.text || (flash.text = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var text;
                (function (text) {
                    var TextRun = (function (_super) {
                        __extends(TextRun, _super);
                        function TextRun(beginIndex, endIndex, textFormat) {
                            false && _super.call(this);
                            this._beginIndex = beginIndex | 0;
                            this._endIndex = endIndex | 0;
                            this._textFormat = textFormat;
                        }
                        Object.defineProperty(TextRun.prototype, "beginIndex", {
                            get: function () {
                                return this._beginIndex;
                            },
                            set: function (value) {
                                this._beginIndex = value | 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextRun.prototype, "endIndex", {
                            get: function () {
                                return this._endIndex;
                            },
                            set: function (value) {
                                this._endIndex = value | 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(TextRun.prototype, "textFormat", {
                            get: function () {
                                return this._textFormat;
                            },
                            set: function (value) {
                                this._textFormat = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        TextRun.prototype.clone = function () {
                            return new flash.text.TextRun(this.beginIndex, this.endIndex, this.textFormat.clone());
                        };
                        TextRun.prototype.containsIndex = function (index) {
                            return index >= this._beginIndex && index < this._endIndex;
                        };
                        TextRun.prototype.intersects = function (beginIndex, endIndex) {
                            return Math.max(this._beginIndex, beginIndex) < Math.min(this._endIndex, endIndex);
                        };
                        TextRun.classInitializer = null;
                        TextRun.initializer = null;
                        TextRun.classSymbols = null;
                        TextRun.instanceSymbols = null;
                        return TextRun;
                    })(AS.ASNative);
                    text.TextRun = TextRun;
                })(text = flash.text || (flash.text = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var text;
                (function (text) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var TextSnapshot = (function (_super) {
                        __extends(TextSnapshot, _super);
                        function TextSnapshot() {
                            false && _super.call(this);
                            dummyConstructor("public flash.text.TextSnapshot");
                        }
                        Object.defineProperty(TextSnapshot.prototype, "charCount", {
                            get: function () {
                                notImplemented("public flash.text.TextSnapshot::get charCount");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        TextSnapshot.prototype.findText = function (beginIndex, textToFind, caseSensitive) {
                            beginIndex = beginIndex | 0;
                            textToFind = asCoerceString(textToFind);
                            caseSensitive = !!caseSensitive;
                            notImplemented("public flash.text.TextSnapshot::findText");
                            return;
                        };
                        TextSnapshot.prototype.getSelected = function (beginIndex, endIndex) {
                            beginIndex = beginIndex | 0;
                            endIndex = endIndex | 0;
                            notImplemented("public flash.text.TextSnapshot::getSelected");
                            return;
                        };
                        TextSnapshot.prototype.getSelectedText = function (includeLineEndings) {
                            if (includeLineEndings === void 0) { includeLineEndings = false; }
                            includeLineEndings = !!includeLineEndings;
                            notImplemented("public flash.text.TextSnapshot::getSelectedText");
                            return;
                        };
                        TextSnapshot.prototype.getText = function (beginIndex, endIndex, includeLineEndings) {
                            if (includeLineEndings === void 0) { includeLineEndings = false; }
                            beginIndex = beginIndex | 0;
                            endIndex = endIndex | 0;
                            includeLineEndings = !!includeLineEndings;
                            notImplemented("public flash.text.TextSnapshot::getText");
                            return;
                        };
                        TextSnapshot.prototype.getTextRunInfo = function (beginIndex, endIndex) {
                            beginIndex = beginIndex | 0;
                            endIndex = endIndex | 0;
                            notImplemented("public flash.text.TextSnapshot::getTextRunInfo");
                            return;
                        };
                        TextSnapshot.prototype.hitTestTextNearPos = function (x, y, maxDistance) {
                            if (maxDistance === void 0) { maxDistance = 0; }
                            x = +x;
                            y = +y;
                            maxDistance = +maxDistance;
                            notImplemented("public flash.text.TextSnapshot::hitTestTextNearPos");
                            return;
                        };
                        TextSnapshot.prototype.setSelectColor = function (hexColor) {
                            if (hexColor === void 0) { hexColor = 16776960; }
                            hexColor = hexColor >>> 0;
                            notImplemented("public flash.text.TextSnapshot::setSelectColor");
                            return;
                        };
                        TextSnapshot.prototype.setSelected = function (beginIndex, endIndex, select) {
                            beginIndex = beginIndex | 0;
                            endIndex = endIndex | 0;
                            select = !!select;
                            notImplemented("public flash.text.TextSnapshot::setSelected");
                            return;
                        };
                        TextSnapshot.classInitializer = null;
                        TextSnapshot.initializer = null;
                        TextSnapshot.classSymbols = null;
                        TextSnapshot.instanceSymbols = null;
                        return TextSnapshot;
                    })(AS.ASNative);
                    text.TextSnapshot = TextSnapshot;
                })(text = flash.text || (flash.text = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var trace;
                (function (trace) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var Trace = (function (_super) {
                        __extends(Trace, _super);
                        function Trace() {
                            false && _super.call(this);
                            dummyConstructor("public flash.trace.Trace");
                        }
                        Trace.setLevel = function (l, target) {
                            if (target === void 0) { target = 2; }
                            l = l | 0;
                            target = target | 0;
                            notImplemented("public flash.trace.Trace::static setLevel");
                            return;
                        };
                        Trace.getLevel = function (target) {
                            if (target === void 0) { target = 2; }
                            target = target | 0;
                            notImplemented("public flash.trace.Trace::static getLevel");
                            return;
                        };
                        Trace.setListener = function (f) {
                            f = f;
                            notImplemented("public flash.trace.Trace::static setListener");
                            return;
                        };
                        Trace.getListener = function () {
                            notImplemented("public flash.trace.Trace::static getListener");
                            return;
                        };
                        Trace.classInitializer = null;
                        Trace.initializer = null;
                        Trace.classSymbols = null;
                        Trace.instanceSymbols = null;
                        Trace.OFF = undefined;
                        Trace.METHODS = 1;
                        Trace.METHODS_WITH_ARGS = 2;
                        Trace.METHODS_AND_LINES = 3;
                        Trace.METHODS_AND_LINES_WITH_ARGS = 4;
                        Trace.FILE = 1;
                        Trace.LISTENER = 2;
                        return Trace;
                    })(AS.ASNative);
                    trace.Trace = Trace;
                })(trace = flash.trace || (flash.trace = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var ui;
                (function (ui) {
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var ContextMenu = (function (_super) {
                        __extends(ContextMenu, _super);
                        function ContextMenu() {
                            false && _super.call(this);
                            flash.display.NativeMenu.instanceConstructorNoInitialize.call(this);
                            this.builtInItems = new ui.ContextMenuBuiltInItems();
                            this.customItems = [];
                        }
                        Object.defineProperty(ContextMenu, "isSupported", {
                            get: function () {
                                somewhatImplemented('ContextMenu::isSupported');
                                return false;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ContextMenu.prototype, "builtInItems", {
                            get: function () {
                                somewhatImplemented("public flash.ui.ContextMenu::get builtInItems");
                                return this._builtInItems;
                            },
                            set: function (value) {
                                value = value;
                                somewhatImplemented("public flash.ui.ContextMenu::set builtInItems");
                                this._builtInItems = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ContextMenu.prototype, "customItems", {
                            get: function () {
                                somewhatImplemented("public flash.ui.ContextMenu::get customItems");
                                return this._customItems;
                            },
                            set: function (value) {
                                value = value;
                                somewhatImplemented("public flash.ui.ContextMenu::set customItems");
                                this._customItems = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ContextMenu.prototype, "link", {
                            get: function () {
                                somewhatImplemented("public flash.ui.ContextMenu::get link");
                                return this._link;
                            },
                            set: function (value) {
                                value = value;
                                somewhatImplemented("public flash.ui.ContextMenu::set link");
                                this._link = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ContextMenu.prototype, "clipboardMenu", {
                            get: function () {
                                somewhatImplemented("public flash.ui.ContextMenu::get clipboardMenu");
                                return this._clipboardMenu;
                            },
                            set: function (value) {
                                value = !!value;
                                somewhatImplemented("public flash.ui.ContextMenu::set clipboardMenu");
                                this._clipboardMenu = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ContextMenu.prototype, "clipboardItems", {
                            get: function () {
                                somewhatImplemented("public flash.ui.ContextMenu::get clipboardItems");
                                return this._clipboardItems;
                            },
                            set: function (value) {
                                value = value;
                                somewhatImplemented("public flash.ui.ContextMenu::set clipboardItems");
                                this._clipboardItems = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        ContextMenu.prototype.hideBuiltInItems = function () {
                            var items = this.builtInItems;
                            if (!items) {
                                return;
                            }
                            items.save = false;
                            items.zoom = false;
                            items.quality = false;
                            items.play = false;
                            items.loop = false;
                            items.rewind = false;
                            items.forwardAndBack = false;
                            items.print = false;
                        };
                        ContextMenu.prototype.clone = function () {
                            var result = new ui.ContextMenu();
                            result.builtInItems = this.builtInItems.clone();
                            this.cloneLinkAndClipboardProperties(result);
                            var customItems = this.customItems;
                            for (var i = 0; i < customItems.length; i++) {
                                result.customItems.push(customItems[i].clone());
                            }
                            return result;
                        };
                        ContextMenu.prototype.cloneLinkAndClipboardProperties = function (c) {
                            c = c;
                            somewhatImplemented("public flash.ui.ContextMenu::cloneLinkAndClipboardProperties");
                            return;
                        };
                        ContextMenu.classInitializer = null;
                        ContextMenu.initializer = null;
                        ContextMenu.classSymbols = null;
                        ContextMenu.instanceSymbols = null;
                        return ContextMenu;
                    })(flash.display.NativeMenu);
                    ui.ContextMenu = ContextMenu;
                })(ui = flash.ui || (flash.ui = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var ui;
                (function (ui) {
                    var ContextMenuBuiltInItems = (function (_super) {
                        __extends(ContextMenuBuiltInItems, _super);
                        function ContextMenuBuiltInItems() {
                            false && _super.call(this);
                            this._save = true;
                            this._zoom = true;
                            this._quality = true;
                            this._play = true;
                            this._loop = true;
                            this._rewind = true;
                            this._forwardAndBack = true;
                            this._print = true;
                        }
                        Object.defineProperty(ContextMenuBuiltInItems.prototype, "save", {
                            get: function () {
                                return this._save;
                            },
                            set: function (val) {
                                this._save = !!val;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ContextMenuBuiltInItems.prototype, "zoom", {
                            get: function () {
                                return this._zoom;
                            },
                            set: function (val) {
                                this._zoom = !!val;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ContextMenuBuiltInItems.prototype, "quality", {
                            get: function () {
                                return this._quality;
                            },
                            set: function (val) {
                                this._quality = !!val;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ContextMenuBuiltInItems.prototype, "play", {
                            get: function () {
                                return this._play;
                            },
                            set: function (val) {
                                this._play = !!val;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ContextMenuBuiltInItems.prototype, "loop", {
                            get: function () {
                                return this._loop;
                            },
                            set: function (val) {
                                this._loop = !!val;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ContextMenuBuiltInItems.prototype, "rewind", {
                            get: function () {
                                return this._rewind;
                            },
                            set: function (val) {
                                this._rewind = !!val;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ContextMenuBuiltInItems.prototype, "forwardAndBack", {
                            get: function () {
                                return this._forwardAndBack;
                            },
                            set: function (val) {
                                this._forwardAndBack = !!val;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ContextMenuBuiltInItems.prototype, "print", {
                            get: function () {
                                return this._print;
                            },
                            set: function (val) {
                                this._print = !!val;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        ContextMenuBuiltInItems.prototype.clone = function () {
                            var items = new ui.ContextMenuBuiltInItems();
                            items._save = this._save;
                            items._zoom = this._zoom;
                            items._quality = this._quality;
                            items._play = this._play;
                            items._loop = this._loop;
                            items._rewind = this._rewind;
                            items._forwardAndBack = this._forwardAndBack;
                            items._print = this._print;
                            return items;
                        };
                        ContextMenuBuiltInItems.classInitializer = null;
                        ContextMenuBuiltInItems.initializer = null;
                        ContextMenuBuiltInItems.classSymbols = null;
                        ContextMenuBuiltInItems.instanceSymbols = null;
                        return ContextMenuBuiltInItems;
                    })(AS.ASNative);
                    ui.ContextMenuBuiltInItems = ContextMenuBuiltInItems;
                })(ui = flash.ui || (flash.ui = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var ui;
                (function (ui) {
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var ContextMenuClipboardItems = (function (_super) {
                        __extends(ContextMenuClipboardItems, _super);
                        function ContextMenuClipboardItems() {
                            false && _super.call(this);
                            this._cut = true;
                            this._copy = true;
                            this._paste = true;
                            this._clear = true;
                            this._selectAll = true;
                        }
                        Object.defineProperty(ContextMenuClipboardItems.prototype, "cut", {
                            get: function () {
                                somewhatImplemented("cut");
                                return this._cut;
                            },
                            set: function (val) {
                                somewhatImplemented("cut");
                                this._cut = !!val;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ContextMenuClipboardItems.prototype, "copy", {
                            get: function () {
                                somewhatImplemented("copy");
                                return this._copy;
                            },
                            set: function (val) {
                                somewhatImplemented("copy");
                                this._copy = !!val;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ContextMenuClipboardItems.prototype, "paste", {
                            get: function () {
                                somewhatImplemented("paste");
                                return this._paste;
                            },
                            set: function (val) {
                                somewhatImplemented("paste");
                                this._paste = !!val;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ContextMenuClipboardItems.prototype, "clear", {
                            get: function () {
                                somewhatImplemented("clear");
                                return this._clear;
                            },
                            set: function (val) {
                                somewhatImplemented("clear");
                                this._clear = !!val;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ContextMenuClipboardItems.prototype, "selectAll", {
                            get: function () {
                                somewhatImplemented("selectAll");
                                return this._selectAll;
                            },
                            set: function (val) {
                                somewhatImplemented("selectAll");
                                this._selectAll = !!val;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        ContextMenuClipboardItems.prototype.clone = function () {
                            var items = new ui.ContextMenuClipboardItems();
                            items._cut = this._cut;
                            items._copy = this._copy;
                            items._paste = this._paste;
                            items._clear = this._clear;
                            items._selectAll = this._selectAll;
                            return items;
                        };
                        ContextMenuClipboardItems.classInitializer = null;
                        ContextMenuClipboardItems.initializer = null;
                        ContextMenuClipboardItems.classSymbols = null;
                        ContextMenuClipboardItems.instanceSymbols = null;
                        return ContextMenuClipboardItems;
                    })(AS.ASNative);
                    ui.ContextMenuClipboardItems = ContextMenuClipboardItems;
                })(ui = flash.ui || (flash.ui = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var ui;
                (function (ui) {
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var ContextMenuItem = (function (_super) {
                        __extends(ContextMenuItem, _super);
                        function ContextMenuItem(caption, separatorBefore, enabled, visible) {
                            if (separatorBefore === void 0) { separatorBefore = false; }
                            if (enabled === void 0) { enabled = true; }
                            if (visible === void 0) { visible = true; }
                            false && _super.call(this);
                            caption = asCoerceString(caption);
                            separatorBefore = !!separatorBefore;
                            enabled = !!enabled;
                            visible = !!visible;
                            this._caption = caption ? caption : "";
                            this._separatorBefore = separatorBefore;
                            this._enabled = enabled;
                            this._visible = visible;
                        }
                        Object.defineProperty(ContextMenuItem.prototype, "caption", {
                            get: function () {
                                return this._caption;
                            },
                            set: function (value) {
                                value = asCoerceString(value);
                                this._caption = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ContextMenuItem.prototype, "separatorBefore", {
                            get: function () {
                                return this._separatorBefore;
                            },
                            set: function (value) {
                                value = !!value;
                                this._separatorBefore = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(ContextMenuItem.prototype, "visible", {
                            get: function () {
                                return this._visible;
                            },
                            set: function (value) {
                                value = !!value;
                                this._visible = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        ContextMenuItem.classInitializer = null;
                        ContextMenuItem.initializer = null;
                        ContextMenuItem.classSymbols = null;
                        ContextMenuItem.instanceSymbols = null;
                        return ContextMenuItem;
                    })(flash.display.NativeMenuItem);
                    ui.ContextMenuItem = ContextMenuItem;
                })(ui = flash.ui || (flash.ui = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var ui;
                (function (ui) {
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var throwError = Shumway.AVM2.Runtime.throwError;
                    var GameInput = (function (_super) {
                        __extends(GameInput, _super);
                        function GameInput() {
                            false && _super.call(this, undefined);
                            dummyConstructor("public flash.ui.GameInput");
                        }
                        Object.defineProperty(GameInput.prototype, "numDevices", {
                            get: function () {
                                somewhatImplemented("public flash.ui.GameInput::get numDevices");
                                return 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GameInput.prototype, "isSupported", {
                            get: function () {
                                somewhatImplemented("public flash.ui.GameInput::get isSupported");
                                return false;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        GameInput.getDeviceAt = function (index) {
                            index = index | 0;
                            somewhatImplemented("public flash.ui.GameInput::static getDeviceAt");
                            throwError("RangeError", AVM2.Errors.ParamRangeError, "index");
                            return null;
                        };
                        GameInput.classInitializer = null;
                        GameInput.initializer = null;
                        GameInput.classSymbols = null;
                        GameInput.instanceSymbols = null;
                        return GameInput;
                    })(flash.events.EventDispatcher);
                    ui.GameInput = GameInput;
                })(ui = flash.ui || (flash.ui = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var ui;
                (function (ui) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var GameInputControl = (function (_super) {
                        __extends(GameInputControl, _super);
                        function GameInputControl() {
                            false && _super.call(this, undefined);
                            dummyConstructor("public flash.ui.GameInputControl");
                        }
                        Object.defineProperty(GameInputControl.prototype, "numValues", {
                            get: function () {
                                notImplemented("public flash.ui.GameInputControl::get numValues");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GameInputControl.prototype, "index", {
                            get: function () {
                                notImplemented("public flash.ui.GameInputControl::get index");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GameInputControl.prototype, "relative", {
                            get: function () {
                                notImplemented("public flash.ui.GameInputControl::get relative");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GameInputControl.prototype, "type", {
                            get: function () {
                                notImplemented("public flash.ui.GameInputControl::get type");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GameInputControl.prototype, "hand", {
                            get: function () {
                                notImplemented("public flash.ui.GameInputControl::get hand");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GameInputControl.prototype, "finger", {
                            get: function () {
                                notImplemented("public flash.ui.GameInputControl::get finger");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GameInputControl.prototype, "device", {
                            get: function () {
                                notImplemented("public flash.ui.GameInputControl::get device");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        GameInputControl.prototype.getValueAt = function (index) {
                            if (index === void 0) { index = 0; }
                            index = index | 0;
                            notImplemented("public flash.ui.GameInputControl::getValueAt");
                            return;
                        };
                        GameInputControl.classInitializer = null;
                        GameInputControl.initializer = null;
                        GameInputControl.classSymbols = null;
                        GameInputControl.instanceSymbols = null;
                        return GameInputControl;
                    })(flash.events.EventDispatcher);
                    ui.GameInputControl = GameInputControl;
                })(ui = flash.ui || (flash.ui = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var ui;
                (function (ui) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var GameInputControlType = (function (_super) {
                        __extends(GameInputControlType, _super);
                        function GameInputControlType() {
                            false && _super.call(this);
                            dummyConstructor("public flash.ui.GameInputControlType");
                        }
                        GameInputControlType.classInitializer = null;
                        GameInputControlType.initializer = null;
                        GameInputControlType.classSymbols = null;
                        GameInputControlType.instanceSymbols = null;
                        GameInputControlType.MOVEMENT = "movement";
                        GameInputControlType.ROTATION = "rotation";
                        GameInputControlType.DIRECTION = "direction";
                        GameInputControlType.ACCELERATION = "acceleration";
                        GameInputControlType.BUTTON = "button";
                        GameInputControlType.TRIGGER = "trigger";
                        return GameInputControlType;
                    })(AS.ASNative);
                    ui.GameInputControlType = GameInputControlType;
                })(ui = flash.ui || (flash.ui = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var ui;
                (function (ui) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var GameInputDevice = (function (_super) {
                        __extends(GameInputDevice, _super);
                        function GameInputDevice() {
                            false && _super.call(this, undefined);
                            dummyConstructor("public flash.ui.GameInputDevice");
                        }
                        Object.defineProperty(GameInputDevice.prototype, "numControls", {
                            get: function () {
                                notImplemented("public flash.ui.GameInputDevice::get numControls");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GameInputDevice.prototype, "sampleInterval", {
                            get: function () {
                                notImplemented("public flash.ui.GameInputDevice::get sampleInterval");
                                return;
                            },
                            set: function (val) {
                                val = val | 0;
                                notImplemented("public flash.ui.GameInputDevice::set sampleInterval");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GameInputDevice.prototype, "enabled", {
                            get: function () {
                                notImplemented("public flash.ui.GameInputDevice::get enabled");
                                return;
                            },
                            set: function (val) {
                                val = !!val;
                                notImplemented("public flash.ui.GameInputDevice::set enabled");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GameInputDevice.prototype, "id", {
                            get: function () {
                                notImplemented("public flash.ui.GameInputDevice::get id");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(GameInputDevice.prototype, "name", {
                            get: function () {
                                notImplemented("public flash.ui.GameInputDevice::get name");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        GameInputDevice.prototype.getControlAt = function (i) {
                            i = i | 0;
                            notImplemented("public flash.ui.GameInputDevice::getControlAt");
                            return;
                        };
                        GameInputDevice.prototype.startCachingSamples = function (numSamples, controls) {
                            numSamples = numSamples | 0;
                            controls = controls;
                            notImplemented("public flash.ui.GameInputDevice::startCachingSamples");
                            return;
                        };
                        GameInputDevice.prototype.stopCachingSamples = function () {
                            notImplemented("public flash.ui.GameInputDevice::stopCachingSamples");
                            return;
                        };
                        GameInputDevice.prototype.getCachedSamples = function (data, append) {
                            if (append === void 0) { append = false; }
                            data = data;
                            append = !!append;
                            notImplemented("public flash.ui.GameInputDevice::getCachedSamples");
                            return;
                        };
                        GameInputDevice.classInitializer = null;
                        GameInputDevice.initializer = null;
                        GameInputDevice.classSymbols = null;
                        GameInputDevice.instanceSymbols = null;
                        GameInputDevice.MAX_BUFFER_SIZE = 4800;
                        return GameInputDevice;
                    })(flash.events.EventDispatcher);
                    ui.GameInputDevice = GameInputDevice;
                })(ui = flash.ui || (flash.ui = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var ui;
                (function (ui) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var GameInputFinger = (function (_super) {
                        __extends(GameInputFinger, _super);
                        function GameInputFinger() {
                            false && _super.call(this);
                            dummyConstructor("public flash.ui.GameInputFinger");
                        }
                        GameInputFinger.classInitializer = null;
                        GameInputFinger.initializer = null;
                        GameInputFinger.classSymbols = null;
                        GameInputFinger.instanceSymbols = null;
                        GameInputFinger.THUMB = "thumb";
                        GameInputFinger.INDEX = "index";
                        GameInputFinger.MIDDLE = "middle";
                        GameInputFinger.UNKNOWN = "unknown";
                        return GameInputFinger;
                    })(AS.ASNative);
                    ui.GameInputFinger = GameInputFinger;
                })(ui = flash.ui || (flash.ui = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var ui;
                (function (ui) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var GameInputHand = (function (_super) {
                        __extends(GameInputHand, _super);
                        function GameInputHand() {
                            false && _super.call(this);
                            dummyConstructor("public flash.ui.GameInputHand");
                        }
                        GameInputHand.classInitializer = null;
                        GameInputHand.initializer = null;
                        GameInputHand.classSymbols = null;
                        GameInputHand.instanceSymbols = null;
                        GameInputHand.RIGHT = "right";
                        GameInputHand.LEFT = "left";
                        GameInputHand.UNKNOWN = "unknown";
                        return GameInputHand;
                    })(AS.ASNative);
                    ui.GameInputHand = GameInputHand;
                })(ui = flash.ui || (flash.ui = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var ui;
                (function (ui) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var KeyboardEventDispatcher = (function () {
                        function KeyboardEventDispatcher() {
                            this._lastKeyCode = 0;
                            this._captureKeyPress = false;
                            this._charCodeMap = [];
                        }
                        KeyboardEventDispatcher.prototype.dispatchKeyboardEvent = function (event) {
                            var keyCode = event.keyCode;
                            if (event.type === 'keydown') {
                                this._lastKeyCode = keyCode;
                                this._captureKeyPress = keyCode === 8 || keyCode === 9 || keyCode === 13 || keyCode === 32 || (keyCode >= 48 && keyCode <= 90) || keyCode > 145;
                                if (this._captureKeyPress) {
                                    return;
                                }
                                this._charCodeMap[keyCode] = 0;
                            }
                            else if (event.type === 'keypress') {
                                if (this._captureKeyPress) {
                                    keyCode = this._lastKeyCode;
                                    this._charCodeMap[keyCode] = event.charCode;
                                }
                                else {
                                    return;
                                }
                            }
                            if (this.target) {
                                var isKeyUp = event.type === 'keyup';
                                this.target.dispatchEvent(new flash.events.KeyboardEvent(isKeyUp ? 'keyUp' : 'keyDown', true, false, isKeyUp ? this._charCodeMap[keyCode] : event.charCode, isKeyUp ? event.keyCode : this._lastKeyCode, event.location, event.ctrlKey, event.altKey, event.shiftKey));
                            }
                        };
                        return KeyboardEventDispatcher;
                    })();
                    ui.KeyboardEventDispatcher = KeyboardEventDispatcher;
                    var Keyboard = (function (_super) {
                        __extends(Keyboard, _super);
                        function Keyboard() {
                            false && _super.call(this);
                            dummyConstructor("public flash.ui.Keyboard");
                        }
                        Object.defineProperty(Keyboard, "capsLock", {
                            get: function () {
                                notImplemented("public flash.ui.Keyboard::get capsLock");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Keyboard, "numLock", {
                            get: function () {
                                notImplemented("public flash.ui.Keyboard::get numLock");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Keyboard, "hasVirtualKeyboard", {
                            get: function () {
                                notImplemented("public flash.ui.Keyboard::get hasVirtualKeyboard");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Keyboard, "physicalKeyboardType", {
                            get: function () {
                                notImplemented("public flash.ui.Keyboard::get physicalKeyboardType");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Keyboard.isAccessible = function () {
                            notImplemented("public flash.ui.Keyboard::static isAccessible");
                            return;
                        };
                        Keyboard.classInitializer = null;
                        Keyboard.initializer = null;
                        Keyboard.classSymbols = null;
                        Keyboard.instanceSymbols = null;
                        Keyboard.KEYNAME_UPARROW = "Up";
                        Keyboard.KEYNAME_DOWNARROW = "Down";
                        Keyboard.KEYNAME_LEFTARROW = "Left";
                        Keyboard.KEYNAME_RIGHTARROW = "Right";
                        Keyboard.KEYNAME_F1 = "F1";
                        Keyboard.KEYNAME_F2 = "F2";
                        Keyboard.KEYNAME_F3 = "F3";
                        Keyboard.KEYNAME_F4 = "F4";
                        Keyboard.KEYNAME_F5 = "F5";
                        Keyboard.KEYNAME_F6 = "F6";
                        Keyboard.KEYNAME_F7 = "F7";
                        Keyboard.KEYNAME_F8 = "F8";
                        Keyboard.KEYNAME_F9 = "F9";
                        Keyboard.KEYNAME_F10 = "F10";
                        Keyboard.KEYNAME_F11 = "F11";
                        Keyboard.KEYNAME_F12 = "F12";
                        Keyboard.KEYNAME_F13 = "F13";
                        Keyboard.KEYNAME_F14 = "F14";
                        Keyboard.KEYNAME_F15 = "F15";
                        Keyboard.KEYNAME_F16 = "F16";
                        Keyboard.KEYNAME_F17 = "F17";
                        Keyboard.KEYNAME_F18 = "F18";
                        Keyboard.KEYNAME_F19 = "F19";
                        Keyboard.KEYNAME_F20 = "F20";
                        Keyboard.KEYNAME_F21 = "F21";
                        Keyboard.KEYNAME_F22 = "F22";
                        Keyboard.KEYNAME_F23 = "F23";
                        Keyboard.KEYNAME_F24 = "F24";
                        Keyboard.KEYNAME_F25 = "F25";
                        Keyboard.KEYNAME_F26 = "F26";
                        Keyboard.KEYNAME_F27 = "F27";
                        Keyboard.KEYNAME_F28 = "F28";
                        Keyboard.KEYNAME_F29 = "F29";
                        Keyboard.KEYNAME_F30 = "F30";
                        Keyboard.KEYNAME_F31 = "F31";
                        Keyboard.KEYNAME_F32 = "F32";
                        Keyboard.KEYNAME_F33 = "F33";
                        Keyboard.KEYNAME_F34 = "F34";
                        Keyboard.KEYNAME_F35 = "F35";
                        Keyboard.KEYNAME_INSERT = "Insert";
                        Keyboard.KEYNAME_DELETE = "Delete";
                        Keyboard.KEYNAME_HOME = "Home";
                        Keyboard.KEYNAME_BEGIN = "Begin";
                        Keyboard.KEYNAME_END = "End";
                        Keyboard.KEYNAME_PAGEUP = "PgUp";
                        Keyboard.KEYNAME_PAGEDOWN = "PgDn";
                        Keyboard.KEYNAME_PRINTSCREEN = "PrntScrn";
                        Keyboard.KEYNAME_SCROLLLOCK = "ScrlLck";
                        Keyboard.KEYNAME_PAUSE = "Pause";
                        Keyboard.KEYNAME_SYSREQ = "SysReq";
                        Keyboard.KEYNAME_BREAK = "Break";
                        Keyboard.KEYNAME_RESET = "Reset";
                        Keyboard.KEYNAME_STOP = "Stop";
                        Keyboard.KEYNAME_MENU = "Menu";
                        Keyboard.KEYNAME_USER = "User";
                        Keyboard.KEYNAME_SYSTEM = "Sys";
                        Keyboard.KEYNAME_PRINT = "Print";
                        Keyboard.KEYNAME_CLEARLINE = "ClrLn";
                        Keyboard.KEYNAME_CLEARDISPLAY = "ClrDsp";
                        Keyboard.KEYNAME_INSERTLINE = "InsLn";
                        Keyboard.KEYNAME_DELETELINE = "DelLn";
                        Keyboard.KEYNAME_INSERTCHAR = "InsChr";
                        Keyboard.KEYNAME_DELETECHAR = "DelChr";
                        Keyboard.KEYNAME_PREV = "Prev";
                        Keyboard.KEYNAME_NEXT = "Next";
                        Keyboard.KEYNAME_SELECT = "Select";
                        Keyboard.KEYNAME_EXECUTE = "Exec";
                        Keyboard.KEYNAME_UNDO = "Undo";
                        Keyboard.KEYNAME_REDO = "Redo";
                        Keyboard.KEYNAME_FIND = "Find";
                        Keyboard.KEYNAME_HELP = "Help";
                        Keyboard.KEYNAME_MODESWITCH = "ModeSw";
                        Keyboard.STRING_UPARROW = "";
                        Keyboard.STRING_DOWNARROW = "";
                        Keyboard.STRING_LEFTARROW = "";
                        Keyboard.STRING_RIGHTARROW = "";
                        Keyboard.STRING_F1 = "";
                        Keyboard.STRING_F2 = "";
                        Keyboard.STRING_F3 = "";
                        Keyboard.STRING_F4 = "";
                        Keyboard.STRING_F5 = "";
                        Keyboard.STRING_F6 = "";
                        Keyboard.STRING_F7 = "";
                        Keyboard.STRING_F8 = "";
                        Keyboard.STRING_F9 = "";
                        Keyboard.STRING_F10 = "";
                        Keyboard.STRING_F11 = "";
                        Keyboard.STRING_F12 = "";
                        Keyboard.STRING_F13 = "";
                        Keyboard.STRING_F14 = "";
                        Keyboard.STRING_F15 = "";
                        Keyboard.STRING_F16 = "";
                        Keyboard.STRING_F17 = "";
                        Keyboard.STRING_F18 = "";
                        Keyboard.STRING_F19 = "";
                        Keyboard.STRING_F20 = "";
                        Keyboard.STRING_F21 = "";
                        Keyboard.STRING_F22 = "";
                        Keyboard.STRING_F23 = "";
                        Keyboard.STRING_F24 = "";
                        Keyboard.STRING_F25 = "";
                        Keyboard.STRING_F26 = "";
                        Keyboard.STRING_F27 = "";
                        Keyboard.STRING_F28 = "";
                        Keyboard.STRING_F29 = "";
                        Keyboard.STRING_F30 = "";
                        Keyboard.STRING_F31 = "";
                        Keyboard.STRING_F32 = "";
                        Keyboard.STRING_F33 = "";
                        Keyboard.STRING_F34 = "";
                        Keyboard.STRING_F35 = "";
                        Keyboard.STRING_INSERT = "";
                        Keyboard.STRING_DELETE = "";
                        Keyboard.STRING_HOME = "";
                        Keyboard.STRING_BEGIN = "";
                        Keyboard.STRING_END = "";
                        Keyboard.STRING_PAGEUP = "";
                        Keyboard.STRING_PAGEDOWN = "";
                        Keyboard.STRING_PRINTSCREEN = "";
                        Keyboard.STRING_SCROLLLOCK = "";
                        Keyboard.STRING_PAUSE = "";
                        Keyboard.STRING_SYSREQ = "";
                        Keyboard.STRING_BREAK = "";
                        Keyboard.STRING_RESET = "";
                        Keyboard.STRING_STOP = "";
                        Keyboard.STRING_MENU = "";
                        Keyboard.STRING_USER = "";
                        Keyboard.STRING_SYSTEM = "";
                        Keyboard.STRING_PRINT = "";
                        Keyboard.STRING_CLEARLINE = "";
                        Keyboard.STRING_CLEARDISPLAY = "";
                        Keyboard.STRING_INSERTLINE = "";
                        Keyboard.STRING_DELETELINE = "";
                        Keyboard.STRING_INSERTCHAR = "";
                        Keyboard.STRING_DELETECHAR = "";
                        Keyboard.STRING_PREV = "";
                        Keyboard.STRING_NEXT = "";
                        Keyboard.STRING_SELECT = "";
                        Keyboard.STRING_EXECUTE = "";
                        Keyboard.STRING_UNDO = "";
                        Keyboard.STRING_REDO = "";
                        Keyboard.STRING_FIND = "";
                        Keyboard.STRING_HELP = "";
                        Keyboard.STRING_MODESWITCH = "";
                        Keyboard.CharCodeStrings = undefined;
                        Keyboard.NUMBER_0 = 48;
                        Keyboard.NUMBER_1 = 49;
                        Keyboard.NUMBER_2 = 50;
                        Keyboard.NUMBER_3 = 51;
                        Keyboard.NUMBER_4 = 52;
                        Keyboard.NUMBER_5 = 53;
                        Keyboard.NUMBER_6 = 54;
                        Keyboard.NUMBER_7 = 55;
                        Keyboard.NUMBER_8 = 56;
                        Keyboard.NUMBER_9 = 57;
                        Keyboard.A = 65;
                        Keyboard.B = 66;
                        Keyboard.C = 67;
                        Keyboard.D = 68;
                        Keyboard.E = 69;
                        Keyboard.F = 70;
                        Keyboard.G = 71;
                        Keyboard.H = 72;
                        Keyboard.I = 73;
                        Keyboard.J = 74;
                        Keyboard.K = 75;
                        Keyboard.L = 76;
                        Keyboard.M = 77;
                        Keyboard.N = 78;
                        Keyboard.O = 79;
                        Keyboard.P = 80;
                        Keyboard.Q = 81;
                        Keyboard.R = 82;
                        Keyboard.S = 83;
                        Keyboard.T = 84;
                        Keyboard.U = 85;
                        Keyboard.V = 86;
                        Keyboard.W = 87;
                        Keyboard.X = 88;
                        Keyboard.Y = 89;
                        Keyboard.Z = 90;
                        Keyboard.SEMICOLON = 186;
                        Keyboard.EQUAL = 187;
                        Keyboard.COMMA = 188;
                        Keyboard.MINUS = 189;
                        Keyboard.PERIOD = 190;
                        Keyboard.SLASH = 191;
                        Keyboard.BACKQUOTE = 192;
                        Keyboard.LEFTBRACKET = 219;
                        Keyboard.BACKSLASH = 220;
                        Keyboard.RIGHTBRACKET = 221;
                        Keyboard.QUOTE = 222;
                        Keyboard.ALTERNATE = 18;
                        Keyboard.BACKSPACE = 8;
                        Keyboard.CAPS_LOCK = 20;
                        Keyboard.COMMAND = 15;
                        Keyboard.CONTROL = 17;
                        Keyboard.DELETE = 46;
                        Keyboard.DOWN = 40;
                        Keyboard.END = 35;
                        Keyboard.ENTER = 13;
                        Keyboard.ESCAPE = 27;
                        Keyboard.F1 = 112;
                        Keyboard.F2 = 113;
                        Keyboard.F3 = 114;
                        Keyboard.F4 = 115;
                        Keyboard.F5 = 116;
                        Keyboard.F6 = 117;
                        Keyboard.F7 = 118;
                        Keyboard.F8 = 119;
                        Keyboard.F9 = 120;
                        Keyboard.F10 = 121;
                        Keyboard.F11 = 122;
                        Keyboard.F12 = 123;
                        Keyboard.F13 = 124;
                        Keyboard.F14 = 125;
                        Keyboard.F15 = 126;
                        Keyboard.HOME = 36;
                        Keyboard.INSERT = 45;
                        Keyboard.LEFT = 37;
                        Keyboard.NUMPAD = 21;
                        Keyboard.NUMPAD_0 = 96;
                        Keyboard.NUMPAD_1 = 97;
                        Keyboard.NUMPAD_2 = 98;
                        Keyboard.NUMPAD_3 = 99;
                        Keyboard.NUMPAD_4 = 100;
                        Keyboard.NUMPAD_5 = 101;
                        Keyboard.NUMPAD_6 = 102;
                        Keyboard.NUMPAD_7 = 103;
                        Keyboard.NUMPAD_8 = 104;
                        Keyboard.NUMPAD_9 = 105;
                        Keyboard.NUMPAD_ADD = 107;
                        Keyboard.NUMPAD_DECIMAL = 110;
                        Keyboard.NUMPAD_DIVIDE = 111;
                        Keyboard.NUMPAD_ENTER = 108;
                        Keyboard.NUMPAD_MULTIPLY = 106;
                        Keyboard.NUMPAD_SUBTRACT = 109;
                        Keyboard.PAGE_DOWN = 34;
                        Keyboard.PAGE_UP = 33;
                        Keyboard.RIGHT = 39;
                        Keyboard.SHIFT = 16;
                        Keyboard.SPACE = 32;
                        Keyboard.TAB = 9;
                        Keyboard.UP = 38;
                        Keyboard.RED = 16777216;
                        Keyboard.GREEN = 16777217;
                        Keyboard.YELLOW = 16777218;
                        Keyboard.BLUE = 16777219;
                        Keyboard.CHANNEL_UP = 16777220;
                        Keyboard.CHANNEL_DOWN = 16777221;
                        Keyboard.RECORD = 16777222;
                        Keyboard.PLAY = 16777223;
                        Keyboard.PAUSE = 16777224;
                        Keyboard.STOP = 16777225;
                        Keyboard.FAST_FORWARD = 16777226;
                        Keyboard.REWIND = 16777227;
                        Keyboard.SKIP_FORWARD = 16777228;
                        Keyboard.SKIP_BACKWARD = 16777229;
                        Keyboard.NEXT = 16777230;
                        Keyboard.PREVIOUS = 16777231;
                        Keyboard.LIVE = 16777232;
                        Keyboard.LAST = 16777233;
                        Keyboard.MENU = 16777234;
                        Keyboard.INFO = 16777235;
                        Keyboard.GUIDE = 16777236;
                        Keyboard.EXIT = 16777237;
                        Keyboard.BACK = 16777238;
                        Keyboard.AUDIO = 16777239;
                        Keyboard.SUBTITLE = 16777240;
                        Keyboard.DVR = 16777241;
                        Keyboard.VOD = 16777242;
                        Keyboard.INPUT = 16777243;
                        Keyboard.SETUP = 16777244;
                        Keyboard.HELP = 16777245;
                        Keyboard.MASTER_SHELL = 16777246;
                        Keyboard.SEARCH = 16777247;
                        return Keyboard;
                    })(AS.ASNative);
                    ui.Keyboard = Keyboard;
                })(ui = flash.ui || (flash.ui = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var ui;
                (function (ui) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var assert = Shumway.Debug.assert;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var events = flash.events;
                    var MouseEventDispatcher = (function () {
                        function MouseEventDispatcher() {
                            this.stage = null;
                            this.currentTarget = null;
                        }
                        MouseEventDispatcher.prototype._findTarget = function (point, testingType) {
                            var globalX = point.x * 20 | 0;
                            var globalY = point.y * 20 | 0;
                            var objects = [];
                            this.stage._containsGlobalPoint(globalX, globalY, testingType, objects);
                            release || assert(objects.length < 2);
                            if (objects.length) {
                                return objects[0];
                            }
                            return objects.length ? objects[0] : null;
                        };
                        MouseEventDispatcher.prototype._dispatchMouseEvent = function (target, type, data, relatedObject) {
                            if (relatedObject === void 0) { relatedObject = null; }
                            var localPoint = target.globalToLocal(data.point);
                            var event = new events.MouseEvent(type, type !== events.MouseEvent.ROLL_OVER && type !== events.MouseEvent.ROLL_OUT && type !== events.MouseEvent.MOUSE_LEAVE, false, localPoint.x, localPoint.y, relatedObject, data.ctrlKey, data.altKey, data.shiftKey, !!data.buttons);
                            target.dispatchEvent(event);
                        };
                        MouseEventDispatcher.prototype.handleMouseEvent = function (data) {
                            var stage = this.stage;
                            if (!stage) {
                                return stage;
                            }
                            var globalPoint = data.point;
                            flash.ui.Mouse.updateCurrentPosition(globalPoint);
                            var currentTarget = this.currentTarget;
                            var target = null;
                            var type = flash.events.MouseEvent.typeFromDOMType(data.type);
                            if (globalPoint.x >= 0 && globalPoint.x < stage.stageWidth && globalPoint.y >= 0 && globalPoint.y < stage.stageHeight) {
                                target = this._findTarget(globalPoint, 3 /* Mouse */) || this.stage;
                            }
                            else {
                                if (!currentTarget) {
                                    return stage;
                                }
                                this._dispatchMouseEvent(stage, events.MouseEvent.MOUSE_LEAVE, data);
                                if (type !== events.MouseEvent.MOUSE_MOVE) {
                                    return stage;
                                }
                            }
                            if (flash.ui.Mouse.draggableObject) {
                                var dropTarget = this._findTarget(globalPoint, 5 /* Drop */);
                                flash.ui.Mouse.draggableObject._updateDragState(dropTarget);
                            }
                            switch (type) {
                                case events.MouseEvent.MOUSE_DOWN:
                                    if (data.buttons & 1 /* Left */) {
                                        data.buttons = 1 /* Left */;
                                    }
                                    else if (data.buttons & 2 /* Middle */) {
                                        type = events.MouseEvent.MIDDLE_MOUSE_DOWN;
                                        data.buttons = 2 /* Middle */;
                                    }
                                    else if (data.buttons & 4 /* Right */) {
                                        type = events.MouseEvent.RIGHT_MOUSE_DOWN;
                                        data.buttons = 4 /* Right */;
                                    }
                                    target._mouseDown = true;
                                    break;
                                case events.MouseEvent.MOUSE_UP:
                                    if (data.buttons & 1 /* Left */) {
                                        data.buttons = 1 /* Left */;
                                    }
                                    else if (data.buttons & 2 /* Middle */) {
                                        type = events.MouseEvent.MIDDLE_MOUSE_UP;
                                        data.buttons = 2 /* Middle */;
                                    }
                                    else if (data.buttons & 4 /* Right */) {
                                        type = events.MouseEvent.RIGHT_MOUSE_UP;
                                        data.buttons = 4 /* Right */;
                                    }
                                    target._mouseDown = false;
                                    break;
                                case events.MouseEvent.CLICK:
                                    if (!(data.buttons & 1 /* Left */)) {
                                        if (data.buttons & 2 /* Middle */) {
                                            type = events.MouseEvent.MIDDLE_CLICK;
                                        }
                                        else if (data.buttons & 4 /* Right */) {
                                            type = events.MouseEvent.RIGHT_CLICK;
                                        }
                                    }
                                    data.buttons = 0;
                                    break;
                                case events.MouseEvent.DOUBLE_CLICK:
                                    if (!target.doubleClickEnabled) {
                                        return;
                                    }
                                    data.buttons = 0;
                                    break;
                                case events.MouseEvent.MOUSE_MOVE:
                                    this.currentTarget = target;
                                    data.buttons &= 1 /* Left */;
                                    if (target === currentTarget) {
                                        break;
                                    }
                                    var commonAncestor = target ? target.findNearestCommonAncestor(currentTarget) : stage;
                                    if (currentTarget && currentTarget !== stage) {
                                        currentTarget._mouseOver = false;
                                        currentTarget._mouseDown = false;
                                        this._dispatchMouseEvent(currentTarget, events.MouseEvent.MOUSE_OUT, data, target);
                                        var nodeLeft = currentTarget;
                                        while (nodeLeft !== commonAncestor) {
                                            this._dispatchMouseEvent(nodeLeft, events.MouseEvent.ROLL_OUT, data, target);
                                            nodeLeft = nodeLeft.parent;
                                        }
                                    }
                                    if (!target) {
                                        return stage;
                                    }
                                    if (target === stage) {
                                        break;
                                    }
                                    var nodeEntered = target;
                                    while (nodeEntered !== commonAncestor) {
                                        this._dispatchMouseEvent(nodeEntered, events.MouseEvent.ROLL_OVER, data, currentTarget);
                                        nodeEntered = nodeEntered.parent;
                                    }
                                    target._mouseOver = true;
                                    this._dispatchMouseEvent(target, events.MouseEvent.MOUSE_OVER, data, currentTarget);
                                    return target;
                            }
                            this._dispatchMouseEvent(target, type, data);
                            return target;
                        };
                        return MouseEventDispatcher;
                    })();
                    ui.MouseEventDispatcher = MouseEventDispatcher;
                    (function (MouseButtonFlags) {
                        MouseButtonFlags[MouseButtonFlags["Left"] = 0x01] = "Left";
                        MouseButtonFlags[MouseButtonFlags["Middle"] = 0x02] = "Middle";
                        MouseButtonFlags[MouseButtonFlags["Right"] = 0x04] = "Right";
                    })(ui.MouseButtonFlags || (ui.MouseButtonFlags = {}));
                    var MouseButtonFlags = ui.MouseButtonFlags;
                    var Mouse = (function (_super) {
                        __extends(Mouse, _super);
                        function Mouse() {
                            false && _super.call(this);
                        }
                        Object.defineProperty(Mouse, "supportsCursor", {
                            get: function () {
                                return true;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Mouse, "cursor", {
                            get: function () {
                                return this._cursor;
                            },
                            set: function (value) {
                                value = asCoerceString(value);
                                if (ui.MouseCursor.toNumber(value) < 0) {
                                    throwError("ArgumentError", AVM2.Errors.InvalidParamError, "cursor");
                                }
                                this._cursor = value;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Mouse, "supportsNativeCursor", {
                            get: function () {
                                return true;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Mouse.hide = function () {
                            somewhatImplemented("public flash.ui.Mouse::static hide");
                            return;
                        };
                        Mouse.show = function () {
                            somewhatImplemented("public flash.ui.Mouse::static show");
                            return;
                        };
                        Mouse.registerCursor = function (name, cursor) {
                            name = asCoerceString(name);
                            cursor = cursor;
                            notImplemented("public flash.ui.Mouse::static registerCursor");
                            return;
                        };
                        Mouse.unregisterCursor = function (name) {
                            name = asCoerceString(name);
                            notImplemented("public flash.ui.Mouse::static unregisterCursor");
                            return;
                        };
                        Mouse.updateCurrentPosition = function (value) {
                            this._currentPosition.copyFrom(value);
                        };
                        Mouse.classInitializer = function () {
                            this._currentPosition = new flash.geom.Point();
                            this._cursor = ui.MouseCursor.AUTO;
                            this.draggableObject = null;
                        };
                        Mouse.initializer = null;
                        Mouse.classSymbols = null;
                        Mouse.instanceSymbols = null;
                        return Mouse;
                    })(AS.ASNative);
                    ui.Mouse = Mouse;
                })(ui = flash.ui || (flash.ui = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var ui;
                (function (ui) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var MouseCursor = (function (_super) {
                        __extends(MouseCursor, _super);
                        function MouseCursor() {
                            false && _super.call(this);
                            dummyConstructor("public flash.ui.MouseCursor");
                        }
                        MouseCursor.fromNumber = function (n) {
                            switch (n) {
                                case 0:
                                    return MouseCursor.AUTO;
                                case 1:
                                    return MouseCursor.ARROW;
                                case 2:
                                    return MouseCursor.BUTTON;
                                case 3:
                                    return MouseCursor.HAND;
                                case 4:
                                    return MouseCursor.IBEAM;
                                default:
                                    return null;
                            }
                        };
                        MouseCursor.toNumber = function (value) {
                            switch (value) {
                                case MouseCursor.AUTO:
                                    return 0;
                                case MouseCursor.ARROW:
                                    return 1;
                                case MouseCursor.BUTTON:
                                    return 2;
                                case MouseCursor.HAND:
                                    return 3;
                                case MouseCursor.IBEAM:
                                    return 4;
                                default:
                                    return -1;
                            }
                        };
                        MouseCursor.classInitializer = null;
                        MouseCursor.initializer = null;
                        MouseCursor.classSymbols = null;
                        MouseCursor.instanceSymbols = null;
                        MouseCursor.AUTO = "auto";
                        MouseCursor.ARROW = "arrow";
                        MouseCursor.BUTTON = "button";
                        MouseCursor.HAND = "hand";
                        MouseCursor.IBEAM = "ibeam";
                        return MouseCursor;
                    })(AS.ASNative);
                    ui.MouseCursor = MouseCursor;
                })(ui = flash.ui || (flash.ui = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var ui;
                (function (ui) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var MouseCursorData = (function (_super) {
                        __extends(MouseCursorData, _super);
                        function MouseCursorData() {
                            false && _super.call(this);
                            dummyConstructor("public flash.ui.MouseCursorData");
                        }
                        Object.defineProperty(MouseCursorData.prototype, "data", {
                            get: function () {
                                notImplemented("public flash.ui.MouseCursorData::get data");
                                return;
                            },
                            set: function (data) {
                                data = data;
                                notImplemented("public flash.ui.MouseCursorData::set data");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MouseCursorData.prototype, "hotSpot", {
                            get: function () {
                                notImplemented("public flash.ui.MouseCursorData::get hotSpot");
                                return;
                            },
                            set: function (data) {
                                data = data;
                                notImplemented("public flash.ui.MouseCursorData::set hotSpot");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(MouseCursorData.prototype, "frameRate", {
                            get: function () {
                                notImplemented("public flash.ui.MouseCursorData::get frameRate");
                                return;
                            },
                            set: function (data) {
                                data = +data;
                                notImplemented("public flash.ui.MouseCursorData::set frameRate");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        MouseCursorData.classInitializer = null;
                        MouseCursorData.initializer = null;
                        MouseCursorData.classSymbols = null;
                        MouseCursorData.instanceSymbols = null;
                        return MouseCursorData;
                    })(AS.ASNative);
                    ui.MouseCursorData = MouseCursorData;
                })(ui = flash.ui || (flash.ui = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var ui;
                (function (ui) {
                    var somewhatImplemented = Shumway.Debug.somewhatImplemented;
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var Multitouch = (function (_super) {
                        __extends(Multitouch, _super);
                        function Multitouch() {
                            false && _super.call(this);
                            dummyConstructor("public flash.ui.Multitouch");
                        }
                        Object.defineProperty(Multitouch, "inputMode", {
                            get: function () {
                                notImplemented("public flash.ui.Multitouch::get inputMode");
                                return;
                            },
                            set: function (value) {
                                value = asCoerceString(value);
                                notImplemented("public flash.ui.Multitouch::set inputMode");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Multitouch, "supportsTouchEvents", {
                            get: function () {
                                somewhatImplemented("public flash.ui.Multitouch::get supportsTouchEvents");
                                return false;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Multitouch, "supportsGestureEvents", {
                            get: function () {
                                somewhatImplemented("public flash.ui.Multitouch::get supportsGestureEvents");
                                return false;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Multitouch, "supportedGestures", {
                            get: function () {
                                somewhatImplemented("public flash.ui.Multitouch::get supportedGestures");
                                return null;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Multitouch, "maxTouchPoints", {
                            get: function () {
                                somewhatImplemented("public flash.ui.Multitouch::get maxTouchPoints");
                                return 0;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Multitouch, "mapTouchToMouse", {
                            get: function () {
                                somewhatImplemented("public flash.ui.Multitouch::get mapTouchToMouse");
                                return true;
                            },
                            set: function (value) {
                                value = !!value;
                                notImplemented("public flash.ui.Multitouch::set mapTouchToMouse");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Multitouch.classInitializer = null;
                        Multitouch.initializer = null;
                        Multitouch.classSymbols = null;
                        Multitouch.instanceSymbols = null;
                        return Multitouch;
                    })(AS.ASNative);
                    ui.Multitouch = Multitouch;
                })(ui = flash.ui || (flash.ui = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var ui;
                (function (ui) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var MultitouchInputMode = (function (_super) {
                        __extends(MultitouchInputMode, _super);
                        function MultitouchInputMode() {
                            false && _super.call(this);
                            dummyConstructor("public flash.ui.MultitouchInputMode");
                        }
                        MultitouchInputMode.classInitializer = null;
                        MultitouchInputMode.initializer = null;
                        MultitouchInputMode.classSymbols = null;
                        MultitouchInputMode.instanceSymbols = null;
                        MultitouchInputMode.NONE = "none";
                        MultitouchInputMode.GESTURE = "gesture";
                        MultitouchInputMode.TOUCH_POINT = "touchPoint";
                        return MultitouchInputMode;
                    })(AS.ASNative);
                    ui.MultitouchInputMode = MultitouchInputMode;
                })(ui = flash.ui || (flash.ui = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var utils;
                (function (utils) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var Endian = (function (_super) {
                        __extends(Endian, _super);
                        function Endian() {
                            false && _super.call(this);
                            dummyConstructor("public flash.utils.Endian");
                        }
                        Endian.classInitializer = null;
                        Endian.initializer = null;
                        Endian.classSymbols = null;
                        Endian.instanceSymbols = null;
                        Endian.BIG_ENDIAN = "bigEndian";
                        Endian.LITTLE_ENDIAN = "littleEndian";
                        return Endian;
                    })(AS.ASNative);
                    utils.Endian = Endian;
                })(utils = flash.utils || (flash.utils = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var utils;
                (function (utils) {
                    var Timer = (function (_super) {
                        __extends(Timer, _super);
                        function Timer(delay, repeatCount) {
                            false && _super.call(this, undefined);
                            flash.events.EventDispatcher.instanceConstructorNoInitialize.call(this);
                            this._delay = +delay;
                            this._repeatCount = repeatCount | 0;
                            this._iteration = 0;
                        }
                        Object.defineProperty(Timer.prototype, "running", {
                            get: function () {
                                return this._running;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Timer.prototype, "delay", {
                            get: function () {
                                return this._delay;
                            },
                            set: function (value) {
                                value = +value;
                                if (value < 0 || !isFinite(value)) {
                                    throwError('RangeError', AVM2.Errors.DelayRangeError);
                                }
                                this._delay = value;
                                if (this._running) {
                                    this.stop();
                                    this.start();
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Timer.prototype, "repeatCount", {
                            get: function () {
                                return this._repeatCount;
                            },
                            set: function (value) {
                                this._repeatCount = value | 0;
                                if (this._repeatCount && this._running && this._iteration >= this._repeatCount) {
                                    this.stop();
                                }
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(Timer.prototype, "currentCount", {
                            get: function () {
                                return this._iteration;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Timer.prototype.reset = function () {
                            if (this._running) {
                                this.stop();
                            }
                            this._iteration = 0;
                        };
                        Timer.prototype.stop = function () {
                            this._running = false;
                            clearInterval(this._interval);
                        };
                        Timer.prototype.start = function () {
                            if (this._running) {
                                return;
                            }
                            this._running = true;
                            this._interval = setInterval(this._tick.bind(this), this._delay);
                        };
                        Timer.prototype._tick = function () {
                            this._iteration++;
                            if (!this._running) {
                                return;
                            }
                            if (flash.utils.Timer.dispatchingEnabled) {
                                this.dispatchEvent(new flash.events.TimerEvent("timer", true, false));
                            }
                            if (this._repeatCount !== 0) {
                                if (this._iteration >= this._repeatCount) {
                                    this.stop();
                                    this.dispatchEvent(new flash.events.TimerEvent(flash.events.TimerEvent.TIMER_COMPLETE, false, false));
                                }
                            }
                        };
                        Timer.classInitializer = null;
                        Timer.initializer = null;
                        Timer.classSymbols = null;
                        Timer.instanceSymbols = null;
                        Timer.dispatchingEnabled = true;
                        return Timer;
                    })(flash.events.EventDispatcher);
                    utils.Timer = Timer;
                })(utils = flash.utils || (flash.utils = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var utils;
                (function (utils) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var SetIntervalTimer = (function (_super) {
                        __extends(SetIntervalTimer, _super);
                        function SetIntervalTimer(closure, delay, repeats, rest) {
                            closure = closure;
                            delay = +delay;
                            repeats = !!repeats;
                            rest = rest;
                            false && _super.call(this, undefined, undefined);
                            dummyConstructor("packageInternal flash.utils.SetIntervalTimer");
                        }
                        SetIntervalTimer.classInitializer = null;
                        SetIntervalTimer.initializer = null;
                        SetIntervalTimer.classSymbols = null;
                        SetIntervalTimer.instanceSymbols = null;
                        return SetIntervalTimer;
                    })(flash.utils.Timer);
                    utils.SetIntervalTimer = SetIntervalTimer;
                })(utils = flash.utils || (flash.utils = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var xml;
                (function (xml) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var XMLNode = (function (_super) {
                        __extends(XMLNode, _super);
                        function XMLNode(type, value) {
                            type = type >>> 0;
                            value = asCoerceString(value);
                            false && _super.call(this);
                            dummyConstructor("public flash.xml.XMLNode");
                        }
                        XMLNode.escapeXML = function (value) {
                            value = asCoerceString(value);
                            notImplemented("public flash.xml.XMLNode::static escapeXML");
                            return;
                        };
                        XMLNode.initializer = null;
                        return XMLNode;
                    })(AS.ASNative);
                    xml.XMLNode = XMLNode;
                })(xml = flash.xml || (flash.xml = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var xml;
                (function (xml) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var XMLDocument = (function (_super) {
                        __extends(XMLDocument, _super);
                        function XMLDocument(source) {
                            if (source === void 0) { source = null; }
                            source = asCoerceString(source);
                            false && _super.call(this, undefined, undefined);
                            dummyConstructor("public flash.xml.XMLDocument");
                        }
                        XMLDocument.initializer = null;
                        return XMLDocument;
                    })(flash.xml.XMLNode);
                    xml.XMLDocument = XMLDocument;
                })(xml = flash.xml || (flash.xml = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var xml;
                (function (xml) {
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var XMLNodeType = (function (_super) {
                        __extends(XMLNodeType, _super);
                        function XMLNodeType() {
                            false && _super.call(this);
                            dummyConstructor("public flash.xml.XMLNodeType");
                        }
                        XMLNodeType.initializer = null;
                        return XMLNodeType;
                    })(AS.ASNative);
                    xml.XMLNodeType = XMLNodeType;
                })(xml = flash.xml || (flash.xml = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var xml;
                (function (xml) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var XMLParser = (function (_super) {
                        __extends(XMLParser, _super);
                        function XMLParser() {
                            false && _super.call(this);
                            dummyConstructor("packageInternal flash.xml.XMLParser");
                        }
                        XMLParser.prototype.startParse = function (source, ignoreWhite) {
                            source = asCoerceString(source);
                            ignoreWhite = !!ignoreWhite;
                            notImplemented("packageInternal flash.xml.XMLParser::startParse");
                            return;
                        };
                        XMLParser.prototype.getNext = function (tag) {
                            tag = tag;
                            notImplemented("packageInternal flash.xml.XMLParser::getNext");
                            return;
                        };
                        XMLParser.initializer = null;
                        return XMLParser;
                    })(AS.ASNative);
                    xml.XMLParser = XMLParser;
                })(xml = flash.xml || (flash.xml = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var flash;
            (function (flash) {
                var xml;
                (function (xml) {
                    var notImplemented = Shumway.Debug.notImplemented;
                    var dummyConstructor = Shumway.Debug.dummyConstructor;
                    var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
                    var XMLTag = (function (_super) {
                        __extends(XMLTag, _super);
                        function XMLTag() {
                            false && _super.call(this);
                            dummyConstructor("packageInternal flash.xml.XMLTag");
                        }
                        Object.defineProperty(XMLTag.prototype, "type", {
                            get: function () {
                                notImplemented("packageInternal flash.xml.XMLTag::get type");
                                return;
                            },
                            set: function (value) {
                                value = value >>> 0;
                                notImplemented("packageInternal flash.xml.XMLTag::set type");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(XMLTag.prototype, "empty", {
                            get: function () {
                                notImplemented("packageInternal flash.xml.XMLTag::get empty");
                                return;
                            },
                            set: function (value) {
                                value = !!value;
                                notImplemented("packageInternal flash.xml.XMLTag::set empty");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(XMLTag.prototype, "value", {
                            get: function () {
                                notImplemented("packageInternal flash.xml.XMLTag::get value");
                                return;
                            },
                            set: function (v) {
                                v = asCoerceString(v);
                                notImplemented("packageInternal flash.xml.XMLTag::set value");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Object.defineProperty(XMLTag.prototype, "attrs", {
                            get: function () {
                                notImplemented("packageInternal flash.xml.XMLTag::get attrs");
                                return;
                            },
                            set: function (value) {
                                value = value;
                                notImplemented("packageInternal flash.xml.XMLTag::set attrs");
                                return;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        XMLTag.initializer = null;
                        return XMLTag;
                    })(AS.ASNative);
                    xml.XMLTag = XMLTag;
                })(xml = flash.xml || (flash.xml = {}));
            })(flash = AS.flash || (AS.flash = {}));
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM2;
    (function (AVM2) {
        var AS;
        (function (AS) {
            var throwError = Shumway.AVM2.Runtime.throwError;
            var flash = Shumway.AVM2.AS.flash;
            var Multiname = Shumway.AVM2.ABC.Multiname;
            var assert = Shumway.Debug.assert;
            function M(classSimpleName, nativeName, cls) {
                return {
                    classSimpleName: classSimpleName,
                    nativeName: nativeName,
                    cls: cls
                };
            }
            function makeStub(container, classSimpleName, shortName) {
                Object.defineProperty(container, shortName, {
                    get: function () {
                        release || assert(Shumway.AVM2.Runtime.AVM2.instance, "AVM2 needs to be initialized.");
                        var cls = Shumway.AVM2.Runtime.AVM2.instance.systemDomain.getClass(classSimpleName);
                        release || assert(cls.instanceConstructor);
                        Object.defineProperty(container, shortName, {
                            value: cls.instanceConstructor,
                            writable: false
                        });
                        return container[shortName];
                    },
                    configurable: true
                });
            }
            jsGlobal["flash"] = Shumway.AVM2.AS.flash;
            function linkNatives(runtime) {
                var symbols = [
                    M("flash.display.DisplayObject", "DisplayObjectClass", flash.display.DisplayObject),
                    M("flash.display.InteractiveObject", "InteractiveObjectClass", flash.display.InteractiveObject),
                    M("flash.display.DisplayObjectContainer", "ContainerClass", flash.display.DisplayObjectContainer),
                    M("flash.display.Sprite", "SpriteClass", flash.display.Sprite),
                    M("flash.display.MovieClip", "MovieClipClass", flash.display.MovieClip),
                    M("flash.display.Shape", "ShapeClass", flash.display.Shape),
                    M("flash.display.Bitmap", "BitmapClass", flash.display.Bitmap),
                    M("flash.display.BitmapData", "BitmapDataClass", flash.display.BitmapData),
                    M("flash.display.Stage", "StageClass", flash.display.Stage),
                    M("flash.display.Loader", "LoaderClass", flash.display.Loader),
                    M("flash.display.LoaderInfo", "LoaderInfoClass", flash.display.LoaderInfo),
                    M("flash.display.Graphics", "GraphicsClass", flash.display.Graphics),
                    M("flash.display.SimpleButton", "SimpleButtonClass", flash.display.SimpleButton),
                    M("flash.display.MorphShape", "MorphShapeClass", flash.display.MorphShape),
                    M("flash.display.NativeMenu", "NativeMenuClass", flash.display.NativeMenu),
                    M("flash.display.NativeMenuItem", "NativeMenuItemClass", flash.display.NativeMenuItem),
                    M("flash.display.FrameLabel", "FrameLabelClass", flash.display.FrameLabel),
                    M("flash.display.Scene", "SceneClass", flash.display.Scene),
                    M("flash.display.AVM1Movie", "AVM1MovieClass", flash.display.AVM1Movie),
                    M("flash.filters.BevelFilter", "BevelFilterClass", flash.filters.BevelFilter),
                    M("flash.filters.BitmapFilter", "BitmapFilterClass", flash.filters.BitmapFilter),
                    M("flash.filters.BlurFilter", "BlurFilterClass", flash.filters.BlurFilter),
                    M("flash.filters.ColorMatrixFilter", "ColorMatrixFilterClass", flash.filters.ColorMatrixFilter),
                    M("flash.filters.ConvolutionFilter", "ConvolutionFilterClass", flash.filters.ConvolutionFilter),
                    M("flash.filters.DisplacementMapFilter", "DisplacementMapFilterClass", flash.filters.DisplacementMapFilter),
                    M("flash.filters.DropShadowFilter", "DropShadowFilterClass", flash.filters.DropShadowFilter),
                    M("flash.filters.GlowFilter", "GlowFilterClass", flash.filters.GlowFilter),
                    M("flash.filters.GradientBevelFilter", "GradientBevelFilterClass", flash.filters.GradientBevelFilter),
                    M("flash.filters.GradientGlowFilter", "GradientGlowFilterClass", flash.filters.GradientGlowFilter),
                    M("flash.geom.Point", "PointClass", flash.geom.Point),
                    M("flash.geom.Rectangle", "RectangleClass", flash.geom.Rectangle),
                    M("flash.geom.Matrix", "MatrixClass", flash.geom.Matrix),
                    M("flash.geom.Matrix3D", "Matrix3DClass", flash.geom.Matrix3D),
                    M("flash.geom.Vector3D", "Vector3DClass", flash.geom.Vector3D),
                    M("flash.geom.Transform", "TransformClass", flash.geom.Transform),
                    M("flash.geom.ColorTransform", "ColorTransformClass", flash.geom.ColorTransform),
                    M("flash.events.EventDispatcher", "EventDispatcherClass", flash.events.EventDispatcher),
                    M("flash.events.Event", "EventClass", flash.events.Event),
                    M("flash.events.ErrorEvent", "ErrorEventClass", flash.events.ErrorEvent),
                    M("flash.events.IOErrorEvent", "IOErrorEventClass", flash.events.IOErrorEvent),
                    M("flash.events.KeyboardEvent", "KeyboardEventClass", flash.events.KeyboardEvent),
                    M("flash.events.MouseEvent", "MouseEventClass", flash.events.MouseEvent),
                    M("flash.events.GestureEvent", "GestureEventClass", flash.events.GestureEvent),
                    M("flash.events.TextEvent", "TextEventClass", flash.events.TextEvent),
                    M("flash.events.TimerEvent", "TimerEventClass", flash.events.TimerEvent),
                    M("flash.events.ProgressEvent", "ProgressEventClass", flash.events.ProgressEvent),
                    M("flash.events.NetStatusEvent", "NetStatusEventClass", flash.events.NetStatusEvent),
                    M("flash.events.HTTPStatusEvent", "HTTPStatusEventClass", flash.events.HTTPStatusEvent),
                    M("flash.external.ExternalInterface", "ExternalInterfaceClass", flash.external.ExternalInterface),
                    M("flash.ui.ContextMenu", "ContextMenuClass", flash.ui.ContextMenu),
                    M("flash.ui.ContextMenuItem", "ContextMenuItemClass", flash.ui.ContextMenuItem),
                    M("flash.ui.ContextMenuBuiltInItems", "ContextMenuBuiltInItemsClass", flash.ui.ContextMenuBuiltInItems),
                    M("flash.ui.ContextMenuClipboardItems", "ContextMenuClipboardItemsClass", flash.ui.ContextMenuClipboardItems),
                    M("flash.ui.Keyboard", "KeyboardClass", flash.ui.Keyboard),
                    M("flash.ui.Mouse", "MouseClass", flash.ui.Mouse),
                    M("flash.ui.MouseCursorData", "MouseCursorDataClass", flash.ui.MouseCursorData),
                    M("flash.ui.GameInput", "GameInputClass", flash.ui.GameInput),
                    M("flash.events.GameInputEvent", "GameInputEventClass", flash.events.GameInputEvent),
                    M("flash.ui.GameInputControl", "GameInputControlClass", flash.ui.GameInputControl),
                    M("flash.ui.GameInputControlType", "GameInputControlTypeClass", flash.ui.GameInputControlType),
                    M("flash.ui.GameInputDevice", "GameInputDeviceClass", flash.ui.GameInputDevice),
                    M("flash.ui.GameInputFinger", "GameInputFingerClass", flash.ui.GameInputFinger),
                    M("flash.ui.GameInputHand", "GameInputHandClass", flash.ui.GameInputHand),
                    M("flash.ui.Multitouch", "MultitouchClass", flash.ui.Multitouch),
                    M("flash.ui.MultitouchInputMode", "MultitouchInputModeClass", flash.ui.MultitouchInputMode),
                    M("flash.events.TouchEvent", "TouchEventClass", flash.events.TouchEvent),
                    M("flash.text.Font", "FontClass", flash.text.Font),
                    M("flash.text.TextField", "TextFieldClass", flash.text.TextField),
                    M("flash.text.StaticText", "StaticTextClass", flash.text.StaticText),
                    M("flash.text.StyleSheet", "StyleSheetClass", flash.text.StyleSheet),
                    M("flash.text.TextFormat", "TextFormatClass", flash.text.TextFormat),
                    M("flash.text.TextRun", "TextRunClass", flash.text.TextRun),
                    M("flash.text.TextLineMetrics"),
                    M("flash.media.Sound", "SoundClass", flash.media.Sound),
                    M("flash.media.SoundChannel", "SoundChannelClass", flash.media.SoundChannel),
                    M("flash.media.SoundMixer", "SoundMixerClass", flash.media.SoundMixer),
                    M("flash.media.SoundTransform", "SoundTransformClass", flash.media.SoundTransform),
                    M("flash.media.Video", "VideoClass", flash.media.Video),
                    M("flash.media.StageVideo", "StageVideoClass", flash.media.StageVideo),
                    M("flash.media.ID3Info", "ID3InfoClass", flash.media.ID3Info),
                    M("flash.media.Microphone", "MicrophoneClass", flash.media.Microphone),
                    M("flash.net.FileFilter", "FileFilterClass", flash.net.FileFilter),
                    M("flash.net.NetConnection", "NetConnectionClass", flash.net.NetConnection),
                    M("flash.net.NetStream", "NetStreamClass", flash.net.NetStream),
                    M("flash.net.Responder", "ResponderClass", flash.net.Responder),
                    M("flash.net.URLRequest", "URLRequestClass", flash.net.URLRequest),
                    M("flash.net.URLRequestHeader"),
                    M("flash.net.URLStream", "URLStreamClass", flash.net.URLStream),
                    M("flash.net.URLLoader", "URLLoaderClass", flash.net.URLLoader),
                    M("flash.net.SharedObject", "SharedObjectClass", flash.net.SharedObject),
                    M("flash.net.ObjectEncoding", "ObjectEncodingClass", flash.net.ObjectEncoding),
                    M("flash.net.LocalConnection", "LocalConnectionClass", flash.net.LocalConnection),
                    M("flash.net.Socket", "SocketClass", flash.net.Socket),
                    M("flash.net.URLVariables", "URLVariablesClass", flash.net.URLVariables),
                    M("packageInternal flash.system.FSCommand", "FSCommandClass", flash.system.FSCommand),
                    M("flash.system.Capabilities", "CapabilitiesClass", flash.system.Capabilities),
                    M("flash.system.Security", "SecurityClass", flash.system.Security),
                    M("flash.system.SecurityDomain", "SecurityDomainClass", flash.system.SecurityDomain),
                    M("flash.system.ApplicationDomain", "ApplicationDomainClass", flash.system.ApplicationDomain),
                    M("flash.system.JPEGLoaderContext", "JPEGLoaderContextClass", flash.system.JPEGLoaderContext),
                    M("flash.system.LoaderContext", "LoaderContextClass", flash.system.LoaderContext),
                    M("flash.accessibility.Accessibility", "AccessibilityClass", flash.accessibility.Accessibility),
                    M("flash.utils.Timer", "TimerClass", flash.utils.Timer),
                    M("flash.utils.ByteArray", "ByteArrayClass", flash.utils.ByteArray),
                ];
                symbols.forEach(function (s) {
                    var className = Multiname.fromSimpleName(s.classSimpleName);
                    var path = className.getOriginalName().split(".");
                    var container = Shumway.AVM2.AS;
                    for (var i = 0, j = path.length - 1; i < j; i++) {
                        if (!container[path[i]]) {
                            container[path[i]] = {};
                        }
                        container = container[path[i]];
                    }
                    makeStub(container, s.classSimpleName, path[path.length - 1]);
                    AS.registerNativeClass(s.nativeName, s.cls);
                });
                AS.registerNativeFunction('FlashUtilScript::getDefinitionByName', Shumway.AVM2.AS.Natives.getDefinitionByName);
                AS.registerNativeFunction('FlashUtilScript::getTimer', FlashUtilScript_getTimer);
                AS.registerNativeFunction('FlashUtilScript::escapeMultiByte', escape);
                AS.registerNativeFunction('FlashUtilScript::unescapeMultiByte', unescape);
                AS.registerNativeFunction('FlashNetScript::navigateToURL', FlashNetScript_navigateToURL);
                AS.registerNativeFunction('FlashNetScript::sendToURL', FlashNetScript_sendToURL);
                AS.registerNativeFunction('Toplevel::registerClassAlias', Toplevel_registerClassAlias);
                AS.registerNativeFunction('Toplevel::getClassByAlias', Toplevel_getClassByAlias);
            }
            AS.linkNatives = linkNatives;
            function FlashUtilScript_getTimer() {
                return Date.now() - flash.display.Loader.runtimeStartTime;
            }
            AS.FlashUtilScript_getTimer = FlashUtilScript_getTimer;
            function FlashNetScript_navigateToURL(request, window_) {
                if (request === null || request === undefined) {
                    throwError('TypeError', AVM2.Errors.NullPointerError, 'request');
                }
                var RequestClass = Shumway.AVM2.Runtime.AVM2.instance.systemDomain.getClass("flash.net.URLRequest");
                if (!RequestClass.isInstanceOf(request)) {
                    throwError('TypeError', AVM2.Errors.CheckTypeFailedError, request, 'flash.net.URLRequest');
                }
                var url = request.url;
                if (Shumway.isNullOrUndefined(url)) {
                    throwError('TypeError', AVM2.Errors.NullPointerError, 'url');
                }
                if (/^fscommand:/i.test(url)) {
                    var fscommand = Shumway.AVM2.Runtime.AVM2.instance.applicationDomain.getProperty(Multiname.fromSimpleName('flash.system.fscommand'), true, true);
                    fscommand.call(null, url.substring('fscommand:'.length), window_);
                    return;
                }
                Shumway.FileLoadingService.instance.navigateTo(url, window_);
            }
            AS.FlashNetScript_navigateToURL = FlashNetScript_navigateToURL;
            function FlashNetScript_sendToURL(request) {
                if (request === null || request === undefined) {
                    throwError('TypeError', AVM2.Errors.NullPointerError, 'request');
                }
                var RequestClass = Shumway.AVM2.Runtime.AVM2.instance.systemDomain.getClass("flash.net.URLRequest");
                if (!RequestClass.isInstanceOf(request)) {
                    throwError('TypeError', AVM2.Errors.CheckTypeFailedError, request, 'flash.net.URLRequest');
                }
                var session = Shumway.FileLoadingService.instance.createSession();
                session.onprogress = function () {
                };
                session.open(request);
            }
            function Toplevel_registerClassAlias(aliasName, classObject) {
                if (!aliasName) {
                    throwError('TypeError', AVM2.Errors.NullPointerError, 'aliasName');
                }
                if (!classObject) {
                    throwError('TypeError', AVM2.Errors.NullPointerError, 'classObject');
                }
                AVM2.aliasesCache.classes.set(classObject, aliasName);
                AVM2.aliasesCache.names[aliasName] = classObject;
            }
            function Toplevel_getClassByAlias(aliasName) {
                if (!aliasName) {
                    throwError('TypeError', AVM2.Errors.NullPointerError, 'aliasName');
                }
                var classObject = AVM2.aliasesCache.names[aliasName];
                if (!classObject) {
                    throwError('ReferenceError', AVM2.Errors.ClassNotFoundError, aliasName);
                }
                return classObject;
            }
        })(AS = AVM2.AS || (AVM2.AS = {}));
    })(AVM2 = Shumway.AVM2 || (Shumway.AVM2 = {}));
})(Shumway || (Shumway = {}));
//# sourceMappingURL=flash.js.map
console.timeEnd("Load Flash TS Dependencies");
// Load AVM1 Dependencies
console.time("Load AVM1 Dependencies");
var Shumway;
(function (Shumway) {
    var AVM1;
    (function (AVM1) {
        var ActionsDataStream = (function () {
            function ActionsDataStream(array, swfVersion) {
                this.array = array;
                this.position = 0;
                this.end = array.length;
                this.readANSI = swfVersion < 6;
                var buffer = new ArrayBuffer(4);
                (new Int32Array(buffer))[0] = 1;
                if (!(new Uint8Array(buffer))[0]) {
                    throw new Error("big-endian platform");
                }
            }
            ActionsDataStream.prototype.readUI8 = function () {
                return this.array[this.position++];
            };
            ActionsDataStream.prototype.readUI16 = function () {
                var position = this.position, array = this.array;
                var value = (array[position + 1] << 8) | array[position];
                this.position = position + 2;
                return value;
            };
            ActionsDataStream.prototype.readSI16 = function () {
                var position = this.position, array = this.array;
                var value = (array[position + 1] << 8) | array[position];
                this.position = position + 2;
                return value < 0x8000 ? value : (value - 0x10000);
            };
            ActionsDataStream.prototype.readInteger = function () {
                var position = this.position, array = this.array;
                var value = array[position] | (array[position + 1] << 8) | (array[position + 2] << 16) | (array[position + 3] << 24);
                this.position = position + 4;
                return value;
            };
            ActionsDataStream.prototype.readFloat = function () {
                var position = this.position;
                var array = this.array;
                var buffer = new ArrayBuffer(4);
                var bytes = new Uint8Array(buffer);
                bytes[0] = array[position];
                bytes[1] = array[position + 1];
                bytes[2] = array[position + 2];
                bytes[3] = array[position + 3];
                this.position = position + 4;
                return (new Float32Array(buffer))[0];
            };
            ActionsDataStream.prototype.readDouble = function () {
                var position = this.position;
                var array = this.array;
                var buffer = new ArrayBuffer(8);
                var bytes = new Uint8Array(buffer);
                bytes[4] = array[position];
                bytes[5] = array[position + 1];
                bytes[6] = array[position + 2];
                bytes[7] = array[position + 3];
                bytes[0] = array[position + 4];
                bytes[1] = array[position + 5];
                bytes[2] = array[position + 6];
                bytes[3] = array[position + 7];
                this.position = position + 8;
                return (new Float64Array(buffer))[0];
            };
            ActionsDataStream.prototype.readBoolean = function () {
                return !!this.readUI8();
            };
            ActionsDataStream.prototype.readANSIString = function () {
                var value = '';
                var ch;
                while ((ch = this.readUI8())) {
                    value += String.fromCharCode(ch);
                }
                return value;
            };
            ActionsDataStream.prototype.readUTF8String = function () {
                var value = '';
                var ch;
                while ((ch = this.readUI8())) {
                    if (ch < 0x80) {
                        value += String.fromCharCode(ch);
                        continue;
                    }
                    if ((ch & 0xC0) === 0x80) {
                        value += String.fromCharCode(ch);
                        continue;
                    }
                    var lastPosition = this.position - 1;
                    var currentPrefix = 0xC0;
                    var validBits = 5;
                    do {
                        var mask = (currentPrefix >> 1) | 0x80;
                        if ((ch & mask) === currentPrefix) {
                            break;
                        }
                        currentPrefix = mask;
                        --validBits;
                    } while (validBits >= 0);
                    var code = (ch & ((1 << validBits) - 1));
                    for (var i = 5; i >= validBits; --i) {
                        ch = this.readUI8();
                        if ((ch & 0xC0) !== 0x80) {
                            var skipToPosition = this.position - 1;
                            this.position = lastPosition;
                            while (this.position < skipToPosition) {
                                value += String.fromCharCode(this.readUI8());
                            }
                            continue;
                        }
                        code = (code << 6) | (ch & 0x3F);
                    }
                    if (code >= 0x10000) {
                        value += String.fromCharCode((((code - 0x10000) >> 10) & 0x3FF) | 0xD800, (code & 0x3FF) | 0xDC00);
                    }
                    else {
                        value += String.fromCharCode(code);
                    }
                }
                return value;
            };
            ActionsDataStream.prototype.readString = function () {
                return this.readANSI ? this.readANSIString() : this.readUTF8String();
            };
            ActionsDataStream.prototype.readBytes = function (length) {
                var position = this.position;
                var remaining = Math.max(this.end - position, 0);
                if (remaining < length) {
                    length = remaining;
                }
                var subarray = this.array.subarray(position, position + length);
                this.position = position + length;
                return subarray;
            };
            return ActionsDataStream;
        })();
        AVM1.ActionsDataStream = ActionsDataStream;
    })(AVM1 = Shumway.AVM1 || (Shumway.AVM1 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM1;
    (function (AVM1) {
        var ActionsDataStream = Shumway.AVM1.ActionsDataStream;
        (function (ActionCode) {
            ActionCode[ActionCode["None"] = 0x00] = "None";
            ActionCode[ActionCode["ActionGotoFrame"] = 0x81] = "ActionGotoFrame";
            ActionCode[ActionCode["ActionGetURL"] = 0x83] = "ActionGetURL";
            ActionCode[ActionCode["ActionNextFrame"] = 0x04] = "ActionNextFrame";
            ActionCode[ActionCode["ActionPreviousFrame"] = 0x05] = "ActionPreviousFrame";
            ActionCode[ActionCode["ActionPlay"] = 0x06] = "ActionPlay";
            ActionCode[ActionCode["ActionStop"] = 0x07] = "ActionStop";
            ActionCode[ActionCode["ActionToggleQuality"] = 0x08] = "ActionToggleQuality";
            ActionCode[ActionCode["ActionStopSounds"] = 0x09] = "ActionStopSounds";
            ActionCode[ActionCode["ActionWaitForFrame"] = 0x8A] = "ActionWaitForFrame";
            ActionCode[ActionCode["ActionSetTarget"] = 0x8B] = "ActionSetTarget";
            ActionCode[ActionCode["ActionGoToLabel"] = 0x8C] = "ActionGoToLabel";
            ActionCode[ActionCode["ActionPush"] = 0x96] = "ActionPush";
            ActionCode[ActionCode["ActionPop"] = 0x17] = "ActionPop";
            ActionCode[ActionCode["ActionAdd"] = 0x0A] = "ActionAdd";
            ActionCode[ActionCode["ActionSubtract"] = 0x0B] = "ActionSubtract";
            ActionCode[ActionCode["ActionMultiply"] = 0x0C] = "ActionMultiply";
            ActionCode[ActionCode["ActionDivide"] = 0x0D] = "ActionDivide";
            ActionCode[ActionCode["ActionEquals"] = 0x0E] = "ActionEquals";
            ActionCode[ActionCode["ActionLess"] = 0x0F] = "ActionLess";
            ActionCode[ActionCode["ActionAnd"] = 0x10] = "ActionAnd";
            ActionCode[ActionCode["ActionOr"] = 0x11] = "ActionOr";
            ActionCode[ActionCode["ActionNot"] = 0x12] = "ActionNot";
            ActionCode[ActionCode["ActionStringEquals"] = 0x13] = "ActionStringEquals";
            ActionCode[ActionCode["ActionStringLength"] = 0x14] = "ActionStringLength";
            ActionCode[ActionCode["ActionMBStringLength"] = 0x31] = "ActionMBStringLength";
            ActionCode[ActionCode["ActionStringAdd"] = 0x21] = "ActionStringAdd";
            ActionCode[ActionCode["ActionStringExtract"] = 0x15] = "ActionStringExtract";
            ActionCode[ActionCode["ActionMBStringExtract"] = 0x35] = "ActionMBStringExtract";
            ActionCode[ActionCode["ActionStringLess"] = 0x29] = "ActionStringLess";
            ActionCode[ActionCode["ActionToInteger"] = 0x18] = "ActionToInteger";
            ActionCode[ActionCode["ActionCharToAscii"] = 0x32] = "ActionCharToAscii";
            ActionCode[ActionCode["ActionMBCharToAscii"] = 0x36] = "ActionMBCharToAscii";
            ActionCode[ActionCode["ActionAsciiToChar"] = 0x33] = "ActionAsciiToChar";
            ActionCode[ActionCode["ActionMBAsciiToChar"] = 0x37] = "ActionMBAsciiToChar";
            ActionCode[ActionCode["ActionJump"] = 0x99] = "ActionJump";
            ActionCode[ActionCode["ActionIf"] = 0x9D] = "ActionIf";
            ActionCode[ActionCode["ActionCall"] = 0x9E] = "ActionCall";
            ActionCode[ActionCode["ActionGetVariable"] = 0x1C] = "ActionGetVariable";
            ActionCode[ActionCode["ActionSetVariable"] = 0x1D] = "ActionSetVariable";
            ActionCode[ActionCode["ActionGetURL2"] = 0x9A] = "ActionGetURL2";
            ActionCode[ActionCode["ActionGotoFrame2"] = 0x9F] = "ActionGotoFrame2";
            ActionCode[ActionCode["ActionSetTarget2"] = 0x20] = "ActionSetTarget2";
            ActionCode[ActionCode["ActionGetProperty"] = 0x22] = "ActionGetProperty";
            ActionCode[ActionCode["ActionSetProperty"] = 0x23] = "ActionSetProperty";
            ActionCode[ActionCode["ActionCloneSprite"] = 0x24] = "ActionCloneSprite";
            ActionCode[ActionCode["ActionRemoveSprite"] = 0x25] = "ActionRemoveSprite";
            ActionCode[ActionCode["ActionStartDrag"] = 0x27] = "ActionStartDrag";
            ActionCode[ActionCode["ActionEndDrag"] = 0x28] = "ActionEndDrag";
            ActionCode[ActionCode["ActionWaitForFrame2"] = 0x8D] = "ActionWaitForFrame2";
            ActionCode[ActionCode["ActionTrace"] = 0x26] = "ActionTrace";
            ActionCode[ActionCode["ActionGetTime"] = 0x34] = "ActionGetTime";
            ActionCode[ActionCode["ActionRandomNumber"] = 0x30] = "ActionRandomNumber";
            ActionCode[ActionCode["ActionCallFunction"] = 0x3D] = "ActionCallFunction";
            ActionCode[ActionCode["ActionCallMethod"] = 0x52] = "ActionCallMethod";
            ActionCode[ActionCode["ActionConstantPool"] = 0x88] = "ActionConstantPool";
            ActionCode[ActionCode["ActionDefineFunction"] = 0x9B] = "ActionDefineFunction";
            ActionCode[ActionCode["ActionDefineLocal"] = 0x3C] = "ActionDefineLocal";
            ActionCode[ActionCode["ActionDefineLocal2"] = 0x41] = "ActionDefineLocal2";
            ActionCode[ActionCode["ActionDelete"] = 0x3A] = "ActionDelete";
            ActionCode[ActionCode["ActionDelete2"] = 0x3B] = "ActionDelete2";
            ActionCode[ActionCode["ActionEnumerate"] = 0x46] = "ActionEnumerate";
            ActionCode[ActionCode["ActionEquals2"] = 0x49] = "ActionEquals2";
            ActionCode[ActionCode["ActionGetMember"] = 0x4E] = "ActionGetMember";
            ActionCode[ActionCode["ActionInitArray"] = 0x42] = "ActionInitArray";
            ActionCode[ActionCode["ActionInitObject"] = 0x43] = "ActionInitObject";
            ActionCode[ActionCode["ActionNewMethod"] = 0x53] = "ActionNewMethod";
            ActionCode[ActionCode["ActionNewObject"] = 0x40] = "ActionNewObject";
            ActionCode[ActionCode["ActionSetMember"] = 0x4F] = "ActionSetMember";
            ActionCode[ActionCode["ActionTargetPath"] = 0x45] = "ActionTargetPath";
            ActionCode[ActionCode["ActionWith"] = 0x94] = "ActionWith";
            ActionCode[ActionCode["ActionToNumber"] = 0x4A] = "ActionToNumber";
            ActionCode[ActionCode["ActionToString"] = 0x4B] = "ActionToString";
            ActionCode[ActionCode["ActionTypeOf"] = 0x44] = "ActionTypeOf";
            ActionCode[ActionCode["ActionAdd2"] = 0x47] = "ActionAdd2";
            ActionCode[ActionCode["ActionLess2"] = 0x48] = "ActionLess2";
            ActionCode[ActionCode["ActionModulo"] = 0x3F] = "ActionModulo";
            ActionCode[ActionCode["ActionBitAnd"] = 0x60] = "ActionBitAnd";
            ActionCode[ActionCode["ActionBitLShift"] = 0x63] = "ActionBitLShift";
            ActionCode[ActionCode["ActionBitOr"] = 0x61] = "ActionBitOr";
            ActionCode[ActionCode["ActionBitRShift"] = 0x64] = "ActionBitRShift";
            ActionCode[ActionCode["ActionBitURShift"] = 0x65] = "ActionBitURShift";
            ActionCode[ActionCode["ActionBitXor"] = 0x62] = "ActionBitXor";
            ActionCode[ActionCode["ActionDecrement"] = 0x51] = "ActionDecrement";
            ActionCode[ActionCode["ActionIncrement"] = 0x50] = "ActionIncrement";
            ActionCode[ActionCode["ActionPushDuplicate"] = 0x4C] = "ActionPushDuplicate";
            ActionCode[ActionCode["ActionReturn"] = 0x3E] = "ActionReturn";
            ActionCode[ActionCode["ActionStackSwap"] = 0x4D] = "ActionStackSwap";
            ActionCode[ActionCode["ActionStoreRegister"] = 0x87] = "ActionStoreRegister";
            ActionCode[ActionCode["ActionInstanceOf"] = 0x54] = "ActionInstanceOf";
            ActionCode[ActionCode["ActionEnumerate2"] = 0x55] = "ActionEnumerate2";
            ActionCode[ActionCode["ActionStrictEquals"] = 0x66] = "ActionStrictEquals";
            ActionCode[ActionCode["ActionGreater"] = 0x67] = "ActionGreater";
            ActionCode[ActionCode["ActionStringGreater"] = 0x68] = "ActionStringGreater";
            ActionCode[ActionCode["ActionDefineFunction2"] = 0x8E] = "ActionDefineFunction2";
            ActionCode[ActionCode["ActionExtends"] = 0x69] = "ActionExtends";
            ActionCode[ActionCode["ActionCastOp"] = 0x2B] = "ActionCastOp";
            ActionCode[ActionCode["ActionImplementsOp"] = 0x2C] = "ActionImplementsOp";
            ActionCode[ActionCode["ActionTry"] = 0x8F] = "ActionTry";
            ActionCode[ActionCode["ActionThrow"] = 0x2A] = "ActionThrow";
            ActionCode[ActionCode["ActionFSCommand2"] = 0x2D] = "ActionFSCommand2";
            ActionCode[ActionCode["ActionStrictMode"] = 0x89] = "ActionStrictMode";
        })(AVM1.ActionCode || (AVM1.ActionCode = {}));
        var ActionCode = AVM1.ActionCode;
        var ParsedPushRegisterAction = (function () {
            function ParsedPushRegisterAction(registerNumber) {
                this.registerNumber = registerNumber;
            }
            return ParsedPushRegisterAction;
        })();
        AVM1.ParsedPushRegisterAction = ParsedPushRegisterAction;
        var ParsedPushConstantAction = (function () {
            function ParsedPushConstantAction(constantIndex) {
                this.constantIndex = constantIndex;
            }
            return ParsedPushConstantAction;
        })();
        AVM1.ParsedPushConstantAction = ParsedPushConstantAction;
        (function (ArgumentAssignmentType) {
            ArgumentAssignmentType[ArgumentAssignmentType["None"] = 0] = "None";
            ArgumentAssignmentType[ArgumentAssignmentType["Argument"] = 1] = "Argument";
            ArgumentAssignmentType[ArgumentAssignmentType["This"] = 2] = "This";
            ArgumentAssignmentType[ArgumentAssignmentType["Arguments"] = 4] = "Arguments";
            ArgumentAssignmentType[ArgumentAssignmentType["Super"] = 8] = "Super";
            ArgumentAssignmentType[ArgumentAssignmentType["Global"] = 16] = "Global";
            ArgumentAssignmentType[ArgumentAssignmentType["Parent"] = 32] = "Parent";
            ArgumentAssignmentType[ArgumentAssignmentType["Root"] = 64] = "Root";
        })(AVM1.ArgumentAssignmentType || (AVM1.ArgumentAssignmentType = {}));
        var ArgumentAssignmentType = AVM1.ArgumentAssignmentType;
        var ActionsDataParser = (function () {
            function ActionsDataParser(actionsData, swfVersion) {
                this._actionsData = actionsData;
                this.dataId = actionsData.id;
                this._stream = new ActionsDataStream(actionsData.bytes, swfVersion);
            }
            Object.defineProperty(ActionsDataParser.prototype, "position", {
                get: function () {
                    return this._stream.position;
                },
                set: function (value) {
                    this._stream.position = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ActionsDataParser.prototype, "eof", {
                get: function () {
                    return this._stream.position >= this._stream.end;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ActionsDataParser.prototype, "length", {
                get: function () {
                    return this._stream.end;
                },
                enumerable: true,
                configurable: true
            });
            ActionsDataParser.prototype.readNext = function () {
                var stream = this._stream;
                var currentPosition = stream.position;
                var actionCode = stream.readUI8();
                var length = actionCode >= 0x80 ? stream.readUI16() : 0;
                var nextPosition = stream.position + length;
                var args = null;
                switch (actionCode | 0) {
                    case 129 /* ActionGotoFrame */:
                        var frame = stream.readUI16();
                        var nextActionCode = stream.readUI8();
                        var play = false;
                        if (nextActionCode !== 0x06 && nextActionCode !== 0x07) {
                            stream.position--;
                        }
                        else {
                            nextPosition++;
                            play = nextActionCode === 0x06;
                        }
                        args = [frame, play];
                        break;
                    case 131 /* ActionGetURL */:
                        var urlString = stream.readString();
                        var targetString = stream.readString();
                        args = [urlString, targetString];
                        break;
                    case 138 /* ActionWaitForFrame */:
                        var frame = stream.readUI16();
                        var count = stream.readUI8();
                        args = [frame, count];
                        break;
                    case 139 /* ActionSetTarget */:
                        var targetName = stream.readString();
                        args = [targetName];
                        break;
                    case 140 /* ActionGoToLabel */:
                        var label = stream.readString();
                        var nextActionCode = stream.readUI8();
                        var play = false;
                        if (nextActionCode !== 0x06 && nextActionCode !== 0x07) {
                            stream.position--;
                        }
                        else {
                            nextPosition++;
                            play = nextActionCode === 0x06;
                        }
                        args = [label, play];
                        break;
                    case 150 /* ActionPush */:
                        var type, value;
                        args = [];
                        while (stream.position < nextPosition) {
                            type = stream.readUI8();
                            switch (type | 0) {
                                case 0:
                                    value = stream.readString();
                                    break;
                                case 1:
                                    value = stream.readFloat();
                                    break;
                                case 2:
                                    value = null;
                                    break;
                                case 3:
                                    value = void (0);
                                    break;
                                case 4:
                                    value = new ParsedPushRegisterAction(stream.readUI8());
                                    break;
                                case 5:
                                    value = stream.readBoolean();
                                    break;
                                case 6:
                                    value = stream.readDouble();
                                    break;
                                case 7:
                                    value = stream.readInteger();
                                    break;
                                case 8:
                                    value = new ParsedPushConstantAction(stream.readUI8());
                                    break;
                                case 9:
                                    value = new ParsedPushConstantAction(stream.readUI16());
                                    break;
                                default:
                                    console.error('Unknown value type: ' + type);
                                    stream.position = nextPosition;
                                    continue;
                            }
                            args.push(value);
                        }
                        break;
                    case 153 /* ActionJump */:
                        var offset = stream.readSI16();
                        args = [offset];
                        break;
                    case 157 /* ActionIf */:
                        var offset = stream.readSI16();
                        args = [offset];
                        break;
                    case 154 /* ActionGetURL2 */:
                        var flags = stream.readUI8();
                        args = [flags];
                        break;
                    case 159 /* ActionGotoFrame2 */:
                        var flags = stream.readUI8();
                        args = [flags];
                        if (!!(flags & 2)) {
                            args.push(stream.readUI16());
                        }
                        break;
                    case 141 /* ActionWaitForFrame2 */:
                        var count = stream.readUI8();
                        args = [count];
                        break;
                    case 136 /* ActionConstantPool */:
                        var count = stream.readUI16();
                        var constantPool = [];
                        for (var i = 0; i < count; i++) {
                            constantPool.push(stream.readString());
                        }
                        args = [constantPool];
                        break;
                    case 155 /* ActionDefineFunction */:
                        var functionName = stream.readString();
                        var count = stream.readUI16();
                        var functionParams = [];
                        for (var i = 0; i < count; i++) {
                            functionParams.push(stream.readString());
                        }
                        var codeSize = stream.readUI16();
                        nextPosition += codeSize;
                        var functionBody = new AVM1.AVM1ActionsData(stream.readBytes(codeSize), this.dataId + '_f' + stream.position, this._actionsData);
                        args = [functionBody, functionName, functionParams];
                        break;
                    case 148 /* ActionWith */:
                        var codeSize = stream.readUI16();
                        nextPosition += codeSize;
                        var withBody = new AVM1.AVM1ActionsData(stream.readBytes(codeSize), this.dataId + '_w' + stream.position, this._actionsData);
                        args = [withBody];
                        break;
                    case 135 /* ActionStoreRegister */:
                        var register = stream.readUI8();
                        args = [register];
                        break;
                    case 142 /* ActionDefineFunction2 */:
                        var functionName = stream.readString();
                        var count = stream.readUI16();
                        var registerCount = stream.readUI8();
                        var flags = stream.readUI16();
                        var registerAllocation = [];
                        var functionParams = [];
                        for (var i = 0; i < count; i++) {
                            var register = stream.readUI8();
                            var paramName = stream.readString();
                            functionParams.push(paramName);
                            if (register) {
                                registerAllocation[register] = {
                                    type: 1 /* Argument */,
                                    name: paramName,
                                    index: i
                                };
                            }
                        }
                        var j = 1;
                        if (flags & 0x0001) {
                            registerAllocation[j++] = { type: 2 /* This */ };
                        }
                        if (flags & 0x0004) {
                            registerAllocation[j++] = { type: 4 /* Arguments */ };
                        }
                        if (flags & 0x0010) {
                            registerAllocation[j++] = { type: 8 /* Super */ };
                        }
                        if (flags & 0x0040) {
                            registerAllocation[j++] = { type: 64 /* Root */ };
                        }
                        if (flags & 0x0080) {
                            registerAllocation[j++] = { type: 32 /* Parent */ };
                        }
                        if (flags & 0x0100) {
                            registerAllocation[j++] = { type: 16 /* Global */ };
                        }
                        var suppressArguments = 0;
                        if (flags & 0x0002) {
                            suppressArguments |= 2 /* This */;
                        }
                        if (flags & 0x0008) {
                            suppressArguments |= 4 /* Arguments */;
                        }
                        if (flags & 0x0020) {
                            suppressArguments |= 8 /* Super */;
                        }
                        var codeSize = stream.readUI16();
                        nextPosition += codeSize;
                        var functionBody = new AVM1.AVM1ActionsData(stream.readBytes(codeSize), this.dataId + '_f' + stream.position, this._actionsData);
                        args = [functionBody, functionName, functionParams, registerCount, registerAllocation, suppressArguments];
                        break;
                    case 143 /* ActionTry */:
                        var flags = stream.readUI8();
                        var catchIsRegisterFlag = !!(flags & 4);
                        var finallyBlockFlag = !!(flags & 2);
                        var catchBlockFlag = !!(flags & 1);
                        var trySize = stream.readUI16();
                        var catchSize = stream.readUI16();
                        var finallySize = stream.readUI16();
                        var catchTarget = catchIsRegisterFlag ? stream.readUI8() : stream.readString();
                        nextPosition += trySize + catchSize + finallySize;
                        var tryBody = new AVM1.AVM1ActionsData(stream.readBytes(trySize), this.dataId + '_t' + stream.position, this._actionsData);
                        var catchBody = new AVM1.AVM1ActionsData(stream.readBytes(catchSize), this.dataId + '_c' + stream.position, this._actionsData);
                        var finallyBody = new AVM1.AVM1ActionsData(stream.readBytes(finallySize), this.dataId + '_z' + stream.position, this._actionsData);
                        args = [catchIsRegisterFlag, catchTarget, tryBody, catchBlockFlag, catchBody, finallyBlockFlag, finallyBody];
                        break;
                    case 137 /* ActionStrictMode */:
                        var mode = stream.readUI8();
                        args = [mode];
                        break;
                }
                stream.position = nextPosition;
                return {
                    position: currentPosition,
                    actionCode: actionCode,
                    actionName: ActionNamesMap[actionCode],
                    args: args
                };
            };
            ActionsDataParser.prototype.skip = function (count) {
                var stream = this._stream;
                while (count > 0 && stream.position < stream.end) {
                    var actionCode = stream.readUI8();
                    var length = actionCode >= 0x80 ? stream.readUI16() : 0;
                    stream.position += length;
                    count--;
                }
            };
            return ActionsDataParser;
        })();
        AVM1.ActionsDataParser = ActionsDataParser;
        var ActionNamesMap = {
            0x00: 'EOA',
            0x04: 'ActionNextFrame',
            0x05: 'ActionPreviousFrame',
            0x06: 'ActionPlay',
            0x07: 'ActionStop',
            0x08: 'ActionToggleQuality',
            0x09: 'ActionStopSounds',
            0x0A: 'ActionAdd',
            0x0B: 'ActionSubtract',
            0x0C: 'ActionMultiply',
            0x0D: 'ActionDivide',
            0x0E: 'ActionEquals',
            0x0F: 'ActionLess',
            0x10: 'ActionAnd',
            0x11: 'ActionOr',
            0x12: 'ActionNot',
            0x13: 'ActionStringEquals',
            0x14: 'ActionStringLength',
            0x15: 'ActionStringExtract',
            0x17: 'ActionPop',
            0x18: 'ActionToInteger',
            0x1C: 'ActionGetVariable',
            0x1D: 'ActionSetVariable',
            0x20: 'ActionSetTarget2',
            0x21: 'ActionStringAdd',
            0x22: 'ActionGetProperty',
            0x23: 'ActionSetProperty',
            0x24: 'ActionCloneSprite',
            0x25: 'ActionRemoveSprite',
            0x26: 'ActionTrace',
            0x27: 'ActionStartDrag',
            0x28: 'ActionEndDrag',
            0x29: 'ActionStringLess',
            0x2A: 'ActionThrow',
            0x2B: 'ActionCastOp',
            0x2C: 'ActionImplementsOp',
            0x2D: 'ActionFSCommand2',
            0x30: 'ActionRandomNumber',
            0x31: 'ActionMBStringLength',
            0x32: 'ActionCharToAscii',
            0x33: 'ActionAsciiToChar',
            0x34: 'ActionGetTime',
            0x35: 'ActionMBStringExtract',
            0x36: 'ActionMBCharToAscii',
            0x37: 'ActionMBAsciiToChar',
            0x3A: 'ActionDelete',
            0x3B: 'ActionDelete2',
            0x3C: 'ActionDefineLocal',
            0x3D: 'ActionCallFunction',
            0x3E: 'ActionReturn',
            0x3F: 'ActionModulo',
            0x40: 'ActionNewObject',
            0x41: 'ActionDefineLocal2',
            0x42: 'ActionInitArray',
            0x43: 'ActionInitObject',
            0x44: 'ActionTypeOf',
            0x45: 'ActionTargetPath',
            0x46: 'ActionEnumerate',
            0x47: 'ActionAdd2',
            0x48: 'ActionLess2',
            0x49: 'ActionEquals2',
            0x4A: 'ActionToNumber',
            0x4B: 'ActionToString',
            0x4C: 'ActionPushDuplicate',
            0x4D: 'ActionStackSwap',
            0x4E: 'ActionGetMember',
            0x4F: 'ActionSetMember',
            0x50: 'ActionIncrement',
            0x51: 'ActionDecrement',
            0x52: 'ActionCallMethod',
            0x53: 'ActionNewMethod',
            0x54: 'ActionInstanceOf',
            0x55: 'ActionEnumerate2',
            0x60: 'ActionBitAnd',
            0x61: 'ActionBitOr',
            0x62: 'ActionBitXor',
            0x63: 'ActionBitLShift',
            0x64: 'ActionBitRShift',
            0x65: 'ActionBitURShift',
            0x66: 'ActionStrictEquals',
            0x67: 'ActionGreater',
            0x68: 'ActionStringGreater',
            0x69: 'ActionExtends',
            0x81: 'ActionGotoFrame',
            0x83: 'ActionGetURL',
            0x87: 'ActionStoreRegister',
            0x88: 'ActionConstantPool',
            0x89: 'ActionStrictMode',
            0x8A: 'ActionWaitForFrame',
            0x8B: 'ActionSetTarget',
            0x8C: 'ActionGoToLabel',
            0x8D: 'ActionWaitForFrame2',
            0x8E: 'ActionDefineFunction2',
            0x8F: 'ActionTry',
            0x94: 'ActionWith',
            0x96: 'ActionPush',
            0x99: 'ActionJump',
            0x9A: 'ActionGetURL2',
            0x9B: 'ActionDefineFunction',
            0x9D: 'ActionIf',
            0x9E: 'ActionCall',
            0x9F: 'ActionGotoFrame2'
        };
    })(AVM1 = Shumway.AVM1 || (Shumway.AVM1 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM1;
    (function (AVM1) {
        var ActionsDataAnalyzer = (function () {
            function ActionsDataAnalyzer() {
                this.parentResults = null;
                this.registersLimit = 0;
            }
            ActionsDataAnalyzer.prototype.analyze = function (parser) {
                var actions = [];
                var labels = [0];
                var processedLabels = [true];
                var constantPoolFound = false;
                var singleConstantPoolAt0 = null;
                var queue = [0];
                while (queue.length > 0) {
                    var position = queue.shift();
                    if (actions[position]) {
                        continue;
                    }
                    parser.position = position;
                    while (!parser.eof && !actions[position]) {
                        var action = parser.readNext();
                        if (action.actionCode === 0) {
                            break;
                        }
                        var nextPosition = parser.position;
                        var item = {
                            action: action,
                            next: nextPosition,
                            conditionalJumpTo: -1
                        };
                        var jumpPosition = 0;
                        var branching = false;
                        var nonConditionalBranching = false;
                        switch (action.actionCode) {
                            case 138 /* ActionWaitForFrame */:
                            case 141 /* ActionWaitForFrame2 */:
                                branching = true;
                                var skipCount = action.actionCode === 138 /* ActionWaitForFrame */ ? action.args[1] : action.args[0];
                                parser.skip(skipCount);
                                jumpPosition = parser.position;
                                parser.position = nextPosition;
                                break;
                            case 153 /* ActionJump */:
                                nonConditionalBranching = true;
                                branching = true;
                                jumpPosition = nextPosition + action.args[0];
                                break;
                            case 157 /* ActionIf */:
                                branching = true;
                                jumpPosition = nextPosition + action.args[0];
                                break;
                            case 42 /* ActionThrow */:
                            case 62 /* ActionReturn */:
                            case 0 /* None */:
                                nonConditionalBranching = true;
                                branching = true;
                                jumpPosition = parser.length;
                                break;
                            case 136 /* ActionConstantPool */:
                                if (constantPoolFound) {
                                    singleConstantPoolAt0 = null;
                                    break;
                                }
                                constantPoolFound = true;
                                if (position === 0) {
                                    singleConstantPoolAt0 = action.args[0];
                                }
                                break;
                        }
                        if (branching) {
                            if (jumpPosition < 0 || jumpPosition > parser.length) {
                                console.error('jump outside the action block;');
                                jumpPosition = parser.length;
                            }
                            if (nonConditionalBranching) {
                                item.next = jumpPosition;
                            }
                            else {
                                item.conditionalJumpTo = jumpPosition;
                            }
                            if (!processedLabels[jumpPosition]) {
                                labels.push(jumpPosition);
                                queue.push(jumpPosition);
                                processedLabels[jumpPosition] = true;
                            }
                        }
                        actions[position] = item;
                        if (nonConditionalBranching) {
                            break;
                        }
                        position = nextPosition;
                    }
                }
                var blocks = [];
                labels.forEach(function (position) {
                    if (!actions[position]) {
                        return;
                    }
                    var items = [];
                    var lastPosition = position;
                    do {
                        var item = actions[lastPosition];
                        items.push(item);
                        lastPosition = item.next;
                    } while (!processedLabels[lastPosition] && actions[lastPosition]);
                    blocks.push({
                        label: position,
                        items: items,
                        jump: lastPosition
                    });
                });
                var singleConstantPool = null;
                if (constantPoolFound) {
                    singleConstantPool = singleConstantPoolAt0;
                }
                else if (this.parentResults) {
                    singleConstantPool = this.parentResults.singleConstantPool;
                }
                return {
                    actions: actions,
                    blocks: blocks,
                    dataId: parser.dataId,
                    singleConstantPool: singleConstantPool,
                    registersLimit: this.registersLimit
                };
            };
            return ActionsDataAnalyzer;
        })();
        AVM1.ActionsDataAnalyzer = ActionsDataAnalyzer;
    })(AVM1 = Shumway.AVM1 || (Shumway.AVM1 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM1;
    (function (AVM1) {
        var assert = Shumway.Debug.assert;
        var AVM1ActionsData = (function () {
            function AVM1ActionsData(bytes, id, parent) {
                if (parent === void 0) { parent = null; }
                this.bytes = bytes;
                this.id = id;
                this.parent = parent;
                release || assert(bytes instanceof Uint8Array);
            }
            return AVM1ActionsData;
        })();
        AVM1.AVM1ActionsData = AVM1ActionsData;
        var AVM1Context = (function () {
            function AVM1Context() {
                this.root = null;
                this.globals = null;
            }
            AVM1Context.prototype.flushPendingScripts = function () {
            };
            AVM1Context.prototype.addAsset = function (className, symbolId, symbolProps) {
            };
            AVM1Context.prototype.registerClass = function (className, theClass) {
            };
            AVM1Context.prototype.getAsset = function (className) {
                return undefined;
            };
            AVM1Context.prototype.resolveTarget = function (target) {
            };
            AVM1Context.prototype.resolveLevel = function (level) {
            };
            AVM1Context.prototype.addToPendingScripts = function (fn) {
            };
            AVM1Context.prototype.registerEventPropertyObserver = function (propertyName, observer) {
            };
            AVM1Context.prototype.unregisterEventPropertyObserver = function (propertyName, observer) {
            };
            AVM1Context.prototype.enterContext = function (fn, defaultTarget) {
            };
            AVM1Context.prototype.executeActions = function (actionsData, scopeObj) {
            };
            AVM1Context.instance = null;
            return AVM1Context;
        })();
        AVM1.AVM1Context = AVM1Context;
    })(AVM1 = Shumway.AVM1 || (Shumway.AVM1 = {}));
})(Shumway || (Shumway = {}));
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Shumway;
(function (Shumway) {
    var AVM1;
    (function (AVM1) {
        var forEachPublicProperty = Shumway.AVM2.Runtime.forEachPublicProperty;
        var construct = Shumway.AVM2.Runtime.construct;
        var isNumeric = Shumway.isNumeric;
        var isFunction = Shumway.isFunction;
        var notImplemented = Shumway.Debug.notImplemented;
        var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
        var sliceArguments = Shumway.AVM2.Runtime.sliceArguments;
        var Option = Shumway.Options.Option;
        var OptionSet = Shumway.Options.OptionSet;
        var Telemetry = Shumway.Telemetry;
        var assert = Shumway.Debug.assert;
        var shumwayOptions = Shumway.Settings.shumwayOptions;
        var avm1Options = shumwayOptions.register(new OptionSet("AVM1"));
        AVM1.avm1TraceEnabled = avm1Options.register(new Option("t1", "traceAvm1", "boolean", false, "trace AVM1 execution"));
        AVM1.avm1ErrorsEnabled = avm1Options.register(new Option("e1", "errorsAvm1", "boolean", false, "fail on AVM1 warnings and errors"));
        AVM1.avm1TimeoutDisabled = avm1Options.register(new Option("ha1", "nohangAvm1", "boolean", false, "disable fail on AVM1 hang"));
        AVM1.avm1CompilerEnabled = avm1Options.register(new Option("ca1", "compileAvm1", "boolean", true, "compiles AVM1 code"));
        AVM1.avm1DebuggerEnabled = avm1Options.register(new Option("da1", "debugAvm1", "boolean", false, "allows AVM1 code debugging"));
        AVM1.Debugger = {
            pause: false,
            breakpoints: {}
        };
        function avm1Warn(message, arg1, arg2, arg3, arg4) {
            if (AVM1.avm1ErrorsEnabled.value) {
                try {
                    throw new Error(message);
                }
                catch (e) {
                }
            }
            console.warn.apply(console, arguments);
        }
        var MAX_AVM1_HANG_TIMEOUT = 1000;
        var CHECK_AVM1_HANG_EVERY = 1000;
        var MAX_AVM1_ERRORS_LIMIT = 1000;
        var MAX_AVM1_STACK_LIMIT = 256;
        var as2IdentifiersDictionary = [
            "addCallback",
            "addListener",
            "addProperty",
            "addRequestHeader",
            "AsBroadcaster",
            "attachAudio",
            "attachMovie",
            "attachSound",
            "attachVideo",
            "beginFill",
            "beginGradientFill",
            "blendMode",
            "blockIndent",
            "broadcastMessage",
            "cacheAsBitmap",
            "CASEINSENSITIVE",
            "charAt",
            "charCodeAt",
            "checkPolicyFile",
            "clearInterval",
            "clearRequestHeaders",
            "concat",
            "createEmptyMovieClip",
            "curveTo",
            "DESCENDING",
            "displayState",
            "duplicateMovieClip",
            "E",
            "endFill",
            "exactSettings",
            "fromCharCode",
            "fullScreenSourceRect",
            "getBounds",
            "getBytesLoaded",
            "getBytesTotal",
            "getDate",
            "getDay",
            "getDepth",
            "getDepth",
            "getDuration",
            "getFullYear",
            "getHours",
            "getLocal",
            "getMilliseconds",
            "getMinutes",
            "getMonth",
            "getNewTextFormat",
            "getPan",
            "getPosition",
            "getRGB",
            "getSeconds",
            "getSize",
            "getTextFormat",
            "getTime",
            "getTimezoneOffset",
            "getTransform",
            "getUTCDate",
            "getUTCDay",
            "getUTCFullYear",
            "getUTCHours",
            "getUTCMilliseconds",
            "getUTCMinutes",
            "getUTCMonth",
            "getUTCSeconds",
            "getUTCYear",
            "getVolume",
            "getYear",
            "globalToLocal",
            "gotoAndPlay",
            "gotoAndStop",
            "hasAccessibility",
            "hasAudio",
            "hasAudioEncoder",
            "hasEmbeddedVideo",
            "hasIME",
            "hasMP3",
            "hasOwnProperty",
            "hasPrinting",
            "hasScreenBroadcast",
            "hasScreenPlayback",
            "hasStreamingAudio",
            "hasStreamingVideo",
            "hasVideoEncoder",
            "hitTest",
            "indexOf",
            "isActive",
            "isDebugger",
            "isFinite",
            "isNaN",
            "isPropertyEnumerable",
            "isPrototypeOf",
            "lastIndexOf",
            "leftMargin",
            "letterSpacing",
            "lineStyle",
            "lineTo",
            "LN10",
            "LN10E",
            "LN2",
            "LN2E",
            "loadSound",
            "localFileReadDisable",
            "localToGlobal",
            "MAX_VALUE",
            "MIN_VALUE",
            "moveTo",
            "NaN",
            "NEGATIVE_INFINITY",
            "nextFrame",
            "NUMERIC",
            "onChanged",
            "onData",
            "onDragOut",
            "onDragOver",
            "onEnterFrame",
            "onFullScreen",
            "onKeyDown",
            "onKeyUp",
            "onKillFocus",
            "onLoad",
            "onMouseDown",
            "onMouseMove",
            "onMouseUp",
            "onPress",
            "onRelease",
            "onReleaseOutside",
            "onResize",
            "onResize",
            "onRollOut",
            "onRollOver",
            "onScroller",
            "onSetFocus",
            "onStatus",
            "onSync",
            "onUnload",
            "parseFloat",
            "parseInt",
            "PI",
            "pixelAspectRatio",
            "playerType",
            "POSITIVE_INFINITY",
            "prevFrame",
            "registerClass",
            "removeListener",
            "removeMovieClip",
            "removeTextField",
            "replaceSel",
            "RETURNINDEXEDARRAY",
            "rightMargin",
            "scale9Grid",
            "scaleMode",
            "screenColor",
            "screenDPI",
            "screenResolutionX",
            "screenResolutionY",
            "serverString",
            "setClipboard",
            "setDate",
            "setDuration",
            "setFps",
            "setFullYear",
            "setHours",
            "setInterval",
            "setMask",
            "setMilliseconds",
            "setMinutes",
            "setMonth",
            "setNewTextFormat",
            "setPan",
            "setPosition",
            "setRGB",
            "setSeconds",
            "setTextFormat",
            "setTime",
            "setTimeout",
            "setTransform",
            "setTransform",
            "setUTCDate",
            "setUTCFullYear",
            "setUTCHours",
            "setUTCMilliseconds",
            "setUTCMinutes",
            "setUTCMonth",
            "setUTCSeconds",
            "setVolume",
            "setYear",
            "showMenu",
            "showRedrawRegions",
            "sortOn",
            "SQRT1_2",
            "SQRT2",
            "startDrag",
            "stopDrag",
            "swapDepths",
            "tabEnabled",
            "tabIndex",
            "tabIndex",
            "tabStops",
            "toLowerCase",
            "toString",
            "toUpperCase",
            "trackAsMenu",
            "UNIQUESORT",
            "updateAfterEvent",
            "updateProperties",
            "useCodepage",
            "useHandCursor",
            "UTC",
            "valueOf"
        ];
        var as2IdentifiersCaseMap = null;
        var AVM1ScopeListItem = (function () {
            function AVM1ScopeListItem(scope, next) {
                this.scope = scope;
                this.next = next;
            }
            AVM1ScopeListItem.prototype.create = function (scope) {
                return new AVM1ScopeListItem(scope, this);
            };
            return AVM1ScopeListItem;
        })();
        var AVM1FunctionClosure = (function (_super) {
            __extends(AVM1FunctionClosure, _super);
            function AVM1FunctionClosure() {
                _super.call(this);
                this.asSetPublicProperty('toString', this.toString);
            }
            AVM1FunctionClosure.prototype.toString = function () {
                return this;
            };
            return AVM1FunctionClosure;
        })(Shumway.AVM2.AS.ASObject);
        var AVM1CallFrame = (function () {
            function AVM1CallFrame(previousFrame, currentThis, fn, args) {
                this.previousFrame = previousFrame;
                this.currentThis = currentThis;
                this.fn = fn;
                this.args = args;
                this.inSequence = !previousFrame ? false : (previousFrame.calleeThis === currentThis && previousFrame.calleeFn === fn);
                this.resetCallee();
            }
            AVM1CallFrame.prototype.setCallee = function (thisArg, superArg, fn, args) {
                this.calleeThis = thisArg;
                this.calleeSuper = superArg;
                this.calleeFn = fn;
                this.calleeArgs = args;
            };
            AVM1CallFrame.prototype.resetCallee = function () {
                this.calleeThis = null;
                this.calleeSuper = null;
                this.calleeFn = null;
            };
            return AVM1CallFrame;
        })();
        var AVM1ContextImpl = (function (_super) {
            __extends(AVM1ContextImpl, _super);
            function AVM1ContextImpl(loaderInfo) {
                _super.call(this);
                this.loaderInfo = loaderInfo;
                var GlobalsClass = AVM1.Lib.AVM1Globals.createAVM1Class();
                this.globals = new GlobalsClass(this);
                this.initialScope = new AVM1ScopeListItem(this.globals, null);
                this.assets = {};
                this.assetsSymbols = [];
                this.assetsClasses = [];
                this.isActive = false;
                this.executionProhibited = false;
                this.abortExecutionAt = 0;
                this.stackDepth = 0;
                this.frame = null;
                this.isTryCatchListening = false;
                this.errorsIgnored = 0;
                this.deferScriptExecution = true;
                this.pendingScripts = [];
                this.eventObservers = Object.create(null);
                var context = this;
                this.utils = {
                    hasProperty: function (obj, name) {
                        var result;
                        context.enterContext(function () {
                            result = as2HasProperty(obj, name);
                        }, obj);
                        return result;
                    },
                    getProperty: function (obj, name) {
                        var result;
                        context.enterContext(function () {
                            result = as2GetProperty(obj, name);
                        }, obj);
                        return result;
                    },
                    setProperty: function (obj, name, value) {
                        context.enterContext(function () {
                            as2SetProperty(obj, name, value);
                        }, obj);
                    }
                };
            }
            AVM1ContextImpl.prototype.addAsset = function (className, symbolId, symbolProps) {
                release || Shumway.Debug.assert(typeof className === 'string' && !isNaN(symbolId));
                this.assets[className.toLowerCase()] = symbolId;
                this.assetsSymbols[symbolId] = symbolProps;
            };
            AVM1ContextImpl.prototype.registerClass = function (className, theClass) {
                className = asCoerceString(className);
                if (className === null) {
                    avm1Warn('Cannot register class for symbol: className is missing');
                    return null;
                }
                var symbolId = this.assets[className.toLowerCase()];
                if (symbolId === undefined) {
                    avm1Warn('Cannot register ' + className + ' class for symbol');
                    return;
                }
                this.assetsClasses[symbolId] = theClass;
            };
            AVM1ContextImpl.prototype.getAsset = function (className) {
                className = asCoerceString(className);
                if (className === null) {
                    return undefined;
                }
                var symbolId = this.assets[className.toLowerCase()];
                if (symbolId === undefined) {
                    return undefined;
                }
                var symbol = this.assetsSymbols[symbolId];
                if (!symbol) {
                    symbol = this.loaderInfo.getSymbolById(symbolId);
                    if (!symbol) {
                        Shumway.Debug.warning("Symbol " + symbolId + " is not defined.");
                        return undefined;
                    }
                    this.assetsSymbols[symbolId] = symbol;
                }
                return {
                    symbolId: symbolId,
                    symbolProps: symbol,
                    theClass: this.assetsClasses[symbolId]
                };
            };
            AVM1ContextImpl.prototype.resolveTarget = function (target) {
                var currentTarget = this.currentTarget || this.defaultTarget;
                if (!target) {
                    target = currentTarget;
                }
                else if (typeof target === 'string') {
                    target = lookupAVM1Children(target, currentTarget, this.resolveLevel(0));
                }
                if (typeof target !== 'object' || target === null || !('_as3Object' in target)) {
                    throw new Error('Invalid AVM1 target object: ' + Object.prototype.toString.call(target));
                }
                return target;
            };
            AVM1ContextImpl.prototype.resolveLevel = function (level) {
                if (level === 0) {
                    return this.root;
                }
                return undefined;
            };
            AVM1ContextImpl.prototype.addToPendingScripts = function (fn) {
                if (!this.deferScriptExecution) {
                    fn();
                    return;
                }
                this.pendingScripts.push(fn);
            };
            AVM1ContextImpl.prototype.flushPendingScripts = function () {
                var scripts = this.pendingScripts;
                while (scripts.length) {
                    scripts.shift()();
                }
                this.deferScriptExecution = false;
            };
            AVM1ContextImpl.prototype.pushCallFrame = function (thisArg, fn, args) {
                var nextFrame = new AVM1CallFrame(this.frame, thisArg, fn, args);
                this.frame = nextFrame;
                return nextFrame;
            };
            AVM1ContextImpl.prototype.popCallFrame = function () {
                var previousFrame = this.frame.previousFrame;
                this.frame = previousFrame;
                return previousFrame;
            };
            AVM1ContextImpl.prototype.enterContext = function (fn, defaultTarget) {
                if (this === AVM1.AVM1Context.instance && this.isActive && this.defaultTarget === defaultTarget && this.currentTarget === null) {
                    fn();
                    this.currentTarget = null;
                    return;
                }
                var savedContext = AVM1.AVM1Context.instance;
                var savedIsActive = this.isActive;
                var savedDefaultTarget = this.defaultTarget;
                var savedCurrentTarget = this.currentTarget;
                var caughtError;
                try {
                    AVM1.AVM1Context.instance = this;
                    if (!savedIsActive) {
                        this.abortExecutionAt = AVM1.avm1TimeoutDisabled.value ? Number.MAX_VALUE : Date.now() + MAX_AVM1_HANG_TIMEOUT;
                        this.errorsIgnored = 0;
                        this.isActive = true;
                    }
                    this.defaultTarget = defaultTarget;
                    this.currentTarget = null;
                    fn();
                }
                catch (e) {
                    caughtError = e;
                }
                this.defaultTarget = savedDefaultTarget;
                this.currentTarget = savedCurrentTarget;
                this.isActive = savedIsActive;
                AVM1.AVM1Context.instance = savedContext;
                if (caughtError) {
                    throw caughtError;
                }
            };
            AVM1ContextImpl.prototype.executeActions = function (actionsData, scopeObj) {
                executeActions(actionsData, this, scopeObj);
            };
            AVM1ContextImpl.prototype.registerEventPropertyObserver = function (propertyName, observer) {
                var observers = this.eventObservers[propertyName];
                if (!observers) {
                    observers = [];
                    this.eventObservers[propertyName] = observers;
                }
                observers.push(observer);
            };
            AVM1ContextImpl.prototype.unregisterEventPropertyObserver = function (propertyName, observer) {
                var observers = this.eventObservers[propertyName];
                if (!observers) {
                    return;
                }
                var j = observers.indexOf(observer);
                if (j < 0) {
                    return;
                }
                observers.splice(j, 1);
            };
            AVM1ContextImpl.prototype.broadcastEventPropertyChange = function (propertyName) {
                var observers = this.eventObservers[propertyName];
                if (!observers) {
                    return;
                }
                observers.forEach(function (observer) { return observer.onEventPropertyModified(propertyName); });
            };
            return AVM1ContextImpl;
        })(AVM1.AVM1Context);
        AVM1.AVM1Context.create = function (loaderInfo) {
            return new AVM1ContextImpl(loaderInfo);
        };
        var AVM1Error = (function () {
            function AVM1Error(error) {
                this.error = error;
            }
            return AVM1Error;
        })();
        var AVM1CriticalError = (function (_super) {
            __extends(AVM1CriticalError, _super);
            function AVM1CriticalError(message, error) {
                _super.call(this, message);
                this.error = error;
            }
            return AVM1CriticalError;
        })(Error);
        function isAVM1MovieClip(obj) {
            return typeof obj === 'object' && obj && obj instanceof AVM1.Lib.AVM1MovieClip;
        }
        function as2GetType(v) {
            if (v === null) {
                return 'null';
            }
            var type = typeof v;
            if (type === 'function') {
                return 'object';
            }
            if (type === 'object' && isAVM1MovieClip(v)) {
                return 'movieclip';
            }
            return type;
        }
        function as2ToPrimitive(value) {
            return as2GetType(value) !== 'object' ? value : value.valueOf();
        }
        function as2GetCurrentSwfVersion() {
            return AVM1.AVM1Context.instance.loaderInfo.swfVersion;
        }
        function as2ToAddPrimitive(value) {
            if (as2GetType(value) !== 'object') {
                return value;
            }
            if (value instanceof Date && as2GetCurrentSwfVersion() >= 6) {
                return value.toString();
            }
            else {
                return value.valueOf();
            }
        }
        function as2ToBoolean(value) {
            switch (as2GetType(value)) {
                default:
                case 'undefined':
                case 'null':
                    return false;
                case 'boolean':
                    return value;
                case 'number':
                    return value !== 0 && !isNaN(value);
                case 'string':
                    return value.length !== 0;
                case 'movieclip':
                case 'object':
                    return true;
            }
        }
        function as2ToNumber(value) {
            value = as2ToPrimitive(value);
            switch (as2GetType(value)) {
                case 'undefined':
                case 'null':
                    return as2GetCurrentSwfVersion() >= 7 ? NaN : 0;
                case 'boolean':
                    return value ? 1 : +0;
                case 'number':
                    return value;
                case 'string':
                    if (value === '' && as2GetCurrentSwfVersion() < 5) {
                        return 0;
                    }
                    return +value;
                default:
                    return as2GetCurrentSwfVersion() >= 5 ? NaN : 0;
            }
        }
        function as2ToInteger(value) {
            var result = as2ToNumber(value);
            if (isNaN(result)) {
                return 0;
            }
            if (!isFinite(result) || result === 0) {
                return result;
            }
            return (result < 0 ? -1 : 1) * Math.abs(result) | 0;
        }
        function as2ToInt32(value) {
            var result = as2ToNumber(value);
            return (isNaN(result) || !isFinite(result) || result === 0) ? 0 : (result | 0);
        }
        function as2ToString(value) {
            switch (as2GetType(value)) {
                case 'undefined':
                    return as2GetCurrentSwfVersion() >= 7 ? 'undefined' : '';
                case 'null':
                    return 'null';
                case 'boolean':
                    return value ? 'true' : 'false';
                case 'number':
                    return value.toString();
                case 'string':
                    return value;
                case 'movieclip':
                    return value.__targetPath;
                case 'object':
                    if (typeof value === 'function' && value.asGetPublicProperty('toString') === Shumway.AVM2.AS.ASFunction.traitsPrototype.asGetPublicProperty('toString')) {
                        return '[type Function]';
                    }
                    var result = value.asCallPublicProperty('toString', null);
                    if (typeof result === 'string') {
                        return result;
                    }
                    return typeof value === 'function' ? '[type Function]' : '[type Object]';
            }
        }
        function as2Compare(x, y) {
            var x2 = as2ToPrimitive(x);
            var y2 = as2ToPrimitive(y);
            if (typeof x2 === 'string' && typeof y2 === 'string') {
            }
            else {
                var xn = as2ToNumber(x2), yn = as2ToNumber(y2);
                return isNaN(xn) || isNaN(yn) ? undefined : xn < yn;
            }
        }
        function as2InstanceOf(obj, constructor) {
            if (Shumway.isNullOrUndefined(obj) || Shumway.isNullOrUndefined(constructor)) {
                return false;
            }
            if (constructor === Shumway.AVM2.AS.ASString) {
                return typeof obj === 'string';
            }
            else if (constructor === Shumway.AVM2.AS.ASNumber) {
                return typeof obj === 'number';
            }
            else if (constructor === Shumway.AVM2.AS.ASBoolean) {
                return typeof obj === 'boolean';
            }
            else if (constructor === Shumway.AVM2.AS.ASArray) {
                return Array.isArray(obj);
            }
            else if (constructor === Shumway.AVM2.AS.ASFunction) {
                return typeof obj === 'function';
            }
            else if (constructor === Shumway.AVM2.AS.ASObject) {
                return typeof obj === 'object';
            }
            var baseProto = constructor.asGetPublicProperty('prototype');
            if (!baseProto) {
                return false;
            }
            var proto = obj;
            while (proto) {
                if (proto === baseProto) {
                    return true;
                }
                proto = proto.asGetPublicProperty('__proto__');
            }
            return false;
        }
        var __resolvePropertyResult = {
            link: undefined,
            name: null
        };
        function avm1EnumerateProperties(obj, fn, thisArg) {
            var processed = Object.create(null);
            do {
                forEachPublicProperty(obj, function (name) {
                    if (processed[name]) {
                        return;
                    }
                    fn.call(thisArg, obj, name);
                    processed[name] = true;
                });
                obj = obj.asGetPublicProperty('__proto__');
            } while (obj);
        }
        function avm1CheckLinkProperty(obj, name) {
            do {
                if (obj.asHasProperty(undefined, name, 0)) {
                    __resolvePropertyResult.link = obj;
                    __resolvePropertyResult.name = name;
                    return __resolvePropertyResult;
                }
                obj = obj.asGetPublicProperty('__proto__');
            } while (obj);
            return null;
        }
        function avm1ResolveProperty(obj, name, normalize) {
            if (Shumway.isNullOrUndefined(obj)) {
                avm1Warn("AVM1 warning: cannot look up member '" + name + "' on undefined object");
                return null;
            }
            var result;
            obj = Object(obj);
            if ((result = avm1CheckLinkProperty(obj, name)) !== null) {
                return result;
            }
            if (isNumeric(name) || as2GetCurrentSwfVersion() > 6) {
                if (normalize) {
                    __resolvePropertyResult.link = obj;
                    __resolvePropertyResult.name = name;
                    return __resolvePropertyResult;
                }
                return null;
            }
            var lowerCaseName = name.toLowerCase();
            if ((result = avm1CheckLinkProperty(obj, lowerCaseName)) !== null) {
                return result;
            }
            if (as2IdentifiersCaseMap === null) {
                as2IdentifiersCaseMap = Object.create(null);
                as2IdentifiersDictionary.forEach(function (key) {
                    as2IdentifiersCaseMap[key.toLowerCase()] = key;
                });
            }
            var normalizedName = as2IdentifiersCaseMap[lowerCaseName] || null;
            if (normalizedName && (result = avm1CheckLinkProperty(obj, normalizedName)) !== null) {
                return result;
            }
            var foundName = null, foundLink = null;
            avm1EnumerateProperties(obj, function (link, name) {
                if (foundName === null && name.toLowerCase() === lowerCaseName) {
                    foundLink = link;
                    foundName = name;
                }
            }, null);
            if (foundName) {
                __resolvePropertyResult.link = foundLink;
                __resolvePropertyResult.name = foundName;
                return __resolvePropertyResult;
            }
            if (normalize) {
                __resolvePropertyResult.link = obj;
                __resolvePropertyResult.name = normalizedName || name;
                return __resolvePropertyResult;
            }
            return null;
        }
        function as2ResolveProperty(obj, name, normalize) {
            var resolved = avm1ResolveProperty(obj, name, normalize);
            return resolved ? resolved.name : null;
        }
        function as2HasProperty(obj, name) {
            return !!avm1ResolveProperty(obj, name, false);
        }
        function as2GetProperty(obj, name) {
            var resolved = avm1ResolveProperty(obj, name, false);
            return resolved ? resolved.link.asGetPublicProperty(resolved.name) : undefined;
        }
        function as2SetProperty(obj, name, value) {
            var resolved = avm1ResolveProperty(obj, name, true);
            if (!resolved) {
                return;
            }
            var definition = resolved.link.asGetPropertyDescriptor(undefined, resolved.name, 0);
            if (definition && !('value' in definition)) {
                resolved.link.asSetPublicProperty(resolved.name, value);
            }
            else {
                obj.asSetPublicProperty(resolved.name, value);
            }
            as2SyncEvents(resolved.name);
        }
        function as2SyncEvents(name) {
            if (name[0] !== 'o' || name[1] !== 'n') {
                return;
            }
            AVM1.AVM1Context.instance.broadcastEventPropertyChange(name);
        }
        function as2CastError(ex) {
            if (typeof InternalError !== 'undefined' && ex instanceof InternalError && ex.message === 'too much recursion') {
                return new AVM1CriticalError('long running script -- AVM1 recursion limit is reached');
            }
            return ex;
        }
        function as2SetupInternalProperties(obj, proto, ctor) {
            obj.asSetPublicProperty('__proto__', proto);
            obj.asDefinePublicProperty('__constructor__', {
                value: ctor,
                writable: true,
                enumerable: false,
                configurable: false
            });
        }
        function as2Construct(ctor, args) {
            var result;
            if (isAvm2Class(ctor)) {
                result = construct(ctor, args);
                as2SetupInternalProperties(result, ctor.asGetPublicProperty('prototype'), ctor);
            }
            else if (isFunction(ctor)) {
                var proto = ctor.asGetPublicProperty('prototype');
                while (proto && !proto.initAVM1ObjectInstance) {
                    proto = proto.asGetPublicProperty('__proto__');
                }
                result = proto ? Object.create(proto) : {};
                as2SetupInternalProperties(result, ctor.asGetPublicProperty('prototype'), ctor);
                if (proto) {
                    proto.initAVM1ObjectInstance.call(result, AVM1.AVM1Context.instance);
                }
                ctor.apply(result, args);
            }
            else {
                return undefined;
            }
            return result;
        }
        function as2Enumerate(obj, fn, thisArg) {
            avm1EnumerateProperties(obj, function (link, name) { return fn.call(thisArg, name); });
        }
        function as2ResolveSuperProperty(frame, propertyName) {
            if (as2GetCurrentSwfVersion() < 6) {
                return null;
            }
            var resolved;
            var proto = (frame.inSequence && frame.previousFrame.calleeSuper);
            if (!proto) {
                resolved = avm1ResolveProperty(frame.currentThis, propertyName, false);
                if (!resolved) {
                    return null;
                }
                proto = resolved.link;
            }
            proto = proto.asGetPublicProperty('__proto__');
            if (!proto) {
                return null;
            }
            resolved = avm1ResolveProperty(proto, propertyName, false);
            if (!resolved) {
                return null;
            }
            return {
                target: resolved.link,
                name: resolved.name,
                obj: resolved.link.asGetPublicProperty(resolved.name)
            };
        }
        function isAvm2Class(obj) {
            return obj instanceof Shumway.AVM2.AS.ASClass;
        }
        function executeActions(actionsData, as2Context, scope) {
            var context = as2Context;
            if (context.executionProhibited) {
                return;
            }
            var actionTracer = ActionTracerFactory.get();
            var registers = [];
            registers.length = 4;
            var scopeContainer = context.initialScope.create(scope);
            var caughtError;
            context.pushCallFrame(scope, null, null);
            actionTracer.message('ActionScript Execution Starts');
            actionTracer.indent();
            context.enterContext(function () {
                try {
                    interpretActions(actionsData, scopeContainer, [], registers);
                }
                catch (e) {
                    caughtError = as2CastError(e);
                }
            }, scope);
            if (caughtError instanceof AVM1CriticalError) {
                context.executionProhibited = true;
                console.error('Disabling AVM1 execution');
            }
            context.popCallFrame();
            actionTracer.unindent();
            actionTracer.message('ActionScript Execution Stops');
            if (caughtError) {
                throw caughtError;
            }
        }
        AVM1.executeActions = executeActions;
        function lookupAVM1Children(targetPath, defaultTarget, root) {
            var path = targetPath.split(/[\/.]/g);
            if (path[path.length - 1] === '') {
                path.pop();
            }
            var obj = defaultTarget;
            if (path[0] === '' || path[0] === '_level0' || path[0] === '_root') {
                obj = root;
                path.shift();
            }
            while (path.length > 0) {
                var prevObj = obj;
                obj = obj.__lookupChild(path[0]);
                if (!obj) {
                    avm1Warn(path[0] + ' (expr ' + targetPath + ') is not found in ' + prevObj._target);
                    return {};
                }
                path.shift();
            }
            return obj;
        }
        var AVM1Object = (function (_super) {
            __extends(AVM1Object, _super);
            function AVM1Object() {
                _super.apply(this, arguments);
            }
            return AVM1Object;
        })(Shumway.AVM2.AS.ASObject);
        function createBuiltinType(obj, args) {
            if (obj === Array) {
                var result = args;
                if (args.length == 1 && typeof args[0] === 'number') {
                    result = [];
                    result.length = args[0];
                }
                return result;
            }
            if (obj === Boolean || obj === Number || obj === String || obj === Function) {
                return obj.apply(null, args);
            }
            if (obj === Date) {
                switch (args.length) {
                    case 0:
                        return new Date();
                    case 1:
                        return new Date(args[0]);
                    default:
                        return new Date(args[0], args[1], args.length > 2 ? args[2] : 1, args.length > 3 ? args[3] : 0, args.length > 4 ? args[4] : 0, args.length > 5 ? args[5] : 0, args.length > 6 ? args[6] : 0);
                }
            }
            if (obj === Object) {
                return new AVM1Object();
            }
            return undefined;
        }
        var AVM1SuperWrapper = (function () {
            function AVM1SuperWrapper(callFrame) {
                this.callFrame = callFrame;
            }
            return AVM1SuperWrapper;
        })();
        function fixArgsCount(numArgs, maxAmount) {
            if (isNaN(numArgs) || numArgs < 0) {
                avm1Warn('Invalid amount of arguments: ' + numArgs);
                return 0;
            }
            numArgs |= 0;
            if (numArgs > maxAmount) {
                avm1Warn('Truncating amount of arguments: from ' + numArgs + ' to ' + maxAmount);
                return maxAmount;
            }
            return numArgs;
        }
        function avm1ReadFunctionArgs(stack) {
            var numArgs = +stack.pop();
            numArgs = fixArgsCount(numArgs, stack.length);
            var args = [];
            for (var i = 0; i < numArgs; i++) {
                args.push(stack.pop());
            }
            return args;
        }
        function avm1SetTarget(ectx, targetPath) {
            var currentContext = ectx.context;
            var _global = ectx.global;
            if (!targetPath) {
                currentContext.currentTarget = null;
                return;
            }
            try {
                var currentTarget = lookupAVM1Children(targetPath, currentContext.currentTarget || currentContext.defaultTarget, currentContext.resolveLevel(0));
                currentContext.currentTarget = currentTarget;
            }
            catch (e) {
                currentContext.currentTarget = null;
                throw e;
            }
        }
        function isGlobalObject(obj) {
            return obj === this;
        }
        function avm1DefineFunction(ectx, actionsData, functionName, parametersNames, registersCount, registersAllocation, suppressArguments) {
            var currentContext = ectx.context;
            var _global = ectx.global;
            var scopeContainer = ectx.scopeContainer;
            var scope = ectx.scope;
            var actionTracer = ectx.actionTracer;
            var defaultTarget = currentContext.defaultTarget;
            var constantPool = ectx.constantPool;
            var skipArguments = null;
            var registersAllocationCount = !registersAllocation ? 0 : registersAllocation.length;
            for (var i = 0; i < registersAllocationCount; i++) {
                var registerAllocation = registersAllocation[i];
                if (registerAllocation && registerAllocation.type === 1 /* Argument */) {
                    if (!skipArguments) {
                        skipArguments = [];
                    }
                    skipArguments[registersAllocation[i].index] = true;
                }
            }
            var registersLength = Math.min(registersCount, 255);
            registersLength = Math.max(registersLength, registersAllocationCount + 1);
            var cachedRegisters = [];
            var MAX_CACHED_REGISTERS = 10;
            function createRegisters() {
                if (cachedRegisters.length > 0) {
                    return cachedRegisters.pop();
                }
                var registers = [];
                registers.length = registersLength;
                return registers;
            }
            function disposeRegisters(registers) {
                if (cachedRegisters.length > MAX_CACHED_REGISTERS) {
                    return;
                }
                cachedRegisters.push(registers);
            }
            var fn = (function () {
                if (currentContext.executionProhibited) {
                    return;
                }
                var newScopeContainer;
                var newScope = new AVM1FunctionClosure();
                var thisArg = isGlobalObject(this) ? scope : this;
                var argumentsClone;
                var supperWrapper;
                var frame = currentContext.pushCallFrame(thisArg, fn, arguments);
                if (!(suppressArguments & 4 /* Arguments */)) {
                    argumentsClone = sliceArguments(arguments, 0);
                    newScope.asSetPublicProperty('arguments', argumentsClone);
                }
                if (!(suppressArguments & 2 /* This */)) {
                    newScope.asSetPublicProperty('this', thisArg);
                }
                if (!(suppressArguments & 8 /* Super */)) {
                    supperWrapper = new AVM1SuperWrapper(frame);
                    newScope.asSetPublicProperty('super', supperWrapper);
                }
                newScopeContainer = scopeContainer.create(newScope);
                var i;
                var registers = createRegisters();
                for (i = 0; i < registersAllocationCount; i++) {
                    var registerAllocation = registersAllocation[i];
                    if (registerAllocation) {
                        switch (registerAllocation.type) {
                            case 1 /* Argument */:
                                registers[i] = arguments[registerAllocation.index];
                                break;
                            case 2 /* This */:
                                registers[i] = thisArg;
                                break;
                            case 4 /* Arguments */:
                                argumentsClone = argumentsClone || sliceArguments(arguments, 0);
                                registers[i] = argumentsClone;
                                break;
                            case 8 /* Super */:
                                supperWrapper = supperWrapper || new AVM1SuperWrapper(frame);
                                registers[i] = supperWrapper;
                                break;
                            case 16 /* Global */:
                                registers[i] = _global;
                                break;
                            case 32 /* Parent */:
                                registers[i] = scope.asGetPublicProperty('_parent');
                                break;
                            case 64 /* Root */:
                                registers[i] = currentContext.resolveLevel(0);
                                break;
                        }
                    }
                }
                for (i = 0; i < arguments.length || i < parametersNames.length; i++) {
                    if (skipArguments && skipArguments[i]) {
                        continue;
                    }
                    newScope.asSetPublicProperty(parametersNames[i], arguments[i]);
                }
                var result;
                var caughtError;
                actionTracer.indent();
                if (++currentContext.stackDepth >= MAX_AVM1_STACK_LIMIT) {
                    throw new AVM1CriticalError('long running script -- AVM1 recursion limit is reached');
                }
                currentContext.enterContext(function () {
                    try {
                        result = interpretActions(actionsData, newScopeContainer, constantPool, registers);
                    }
                    catch (e) {
                        caughtError = e;
                    }
                }, defaultTarget);
                currentContext.stackDepth--;
                currentContext.popCallFrame();
                actionTracer.unindent();
                disposeRegisters(registers);
                if (caughtError) {
                    throw caughtError;
                }
                return result;
            });
            var fnObj = fn;
            fnObj.instanceConstructor = fn;
            fnObj.debugName = 'avm1 ' + (functionName || '<function>');
            if (functionName) {
                fnObj.name = functionName;
            }
            return fn;
        }
        function avm1DeleteProperty(ectx, propertyName) {
            var scopeContainer = ectx.scopeContainer;
            for (var p = scopeContainer; p; p = p.next) {
                var resolved = avm1ResolveProperty(p.scope, propertyName, false);
                if (resolved) {
                    resolved.link.asSetPublicProperty(resolved.name, undefined);
                    return resolved.link.asDeleteProperty(undefined, resolved.name, 0);
                }
            }
            return false;
        }
        var __resolveVariableResult = {
            obj: null,
            link: null,
            name: null
        };
        function avm1VariableNameHasPath(variableName) {
            return variableName && (variableName.indexOf('.') >= 0 || variableName.indexOf(':') >= 0);
        }
        function avm1ResolveVariableName(ectx, variableName, normalize) {
            var _global = ectx.global;
            var currentContext = ectx.context;
            var obj, name, i, resolved;
            if (variableName.indexOf(':') >= 0) {
                var currentTarget = currentContext.currentTarget || currentContext.defaultTarget;
                var parts = variableName.split(':');
                obj = lookupAVM1Children(parts[0], currentTarget, currentContext.resolveLevel(0));
                if (!obj) {
                    avm1Warn(parts[0] + ' is undefined');
                    return null;
                }
                name = parts[1];
            }
            else if (variableName.indexOf('.') >= 0) {
                var objPath = variableName.split('.');
                name = objPath.pop();
                obj = _global;
                for (i = 0; i < objPath.length; i++) {
                    resolved = avm1ResolveProperty(obj, objPath[i], false);
                    obj = resolved && resolved.link.asGetPublicProperty(resolved.name);
                    if (!obj) {
                        avm1Warn(objPath.slice(0, i + 1) + ' is undefined');
                        return null;
                    }
                }
            }
            else {
                release || Shumway.Debug.assert(false, 'AVM1 variable has no path');
            }
            resolved = avm1ResolveProperty(obj, name, normalize);
            if (resolved) {
                __resolveVariableResult.obj = obj;
                __resolveVariableResult.link = resolved.link;
                __resolveVariableResult.name = resolved.name;
                return __resolveVariableResult;
            }
            else {
                return null;
            }
        }
        function avm1ResolveGetVariable(ectx, variableName) {
            if (avm1VariableNameHasPath(variableName)) {
                return avm1ResolveVariableName(ectx, variableName, false);
            }
            var scopeContainer = ectx.scopeContainer;
            var currentContext = ectx.context;
            var currentTarget = currentContext.currentTarget || currentContext.defaultTarget;
            var scope = ectx.scope;
            var resolved;
            resolved = avm1ResolveProperty(scope, variableName, false);
            if (resolved) {
                __resolveVariableResult.obj = scope;
                __resolveVariableResult.link = resolved.link;
                __resolveVariableResult.name = resolved.name;
                return __resolveVariableResult;
            }
            for (var p = scopeContainer; p; p = p.next) {
                resolved = avm1ResolveProperty(p.scope, variableName, false);
                if (resolved) {
                    __resolveVariableResult.obj = p.scope;
                    __resolveVariableResult.link = resolved.link;
                    __resolveVariableResult.name = resolved.name;
                    return __resolveVariableResult;
                }
            }
            resolved = avm1ResolveProperty(currentTarget, variableName, false);
            if (resolved) {
                __resolveVariableResult.obj = currentTarget;
                __resolveVariableResult.link = resolved.link;
                __resolveVariableResult.name = resolved.name;
                return __resolveVariableResult;
            }
            if (variableName === 'this') {
                scope.asDefinePublicProperty('this', {
                    value: currentTarget,
                    configurable: true
                });
                __resolveVariableResult.obj = scope;
                __resolveVariableResult.link = scope;
                __resolveVariableResult.name = 'this';
                return __resolveVariableResult;
            }
            return null;
        }
        function avm1ResolveSetVariable(ectx, variableName) {
            if (avm1VariableNameHasPath(variableName)) {
                return avm1ResolveVariableName(ectx, variableName, true);
            }
            var scopeContainer = ectx.scopeContainer;
            var currentContext = ectx.context;
            var currentTarget = currentContext.currentTarget || currentContext.defaultTarget;
            var scope = ectx.scope;
            if (currentContext.currentTarget) {
                __resolveVariableResult.obj = currentTarget;
                __resolveVariableResult.link = currentTarget;
                __resolveVariableResult.name = variableName;
                return __resolveVariableResult;
            }
            var resolved;
            resolved = avm1ResolveProperty(scope, variableName, false);
            if (resolved) {
                __resolveVariableResult.obj = scope;
                __resolveVariableResult.link = resolved.link;
                __resolveVariableResult.name = resolved.name;
                return __resolveVariableResult;
            }
            for (var p = scopeContainer; p.next; p = p.next) {
                resolved = avm1ResolveProperty(p.scope, variableName, false);
                if (resolved) {
                    __resolveVariableResult.obj = p.scope;
                    __resolveVariableResult.link = resolved.link;
                    __resolveVariableResult.name = resolved.name;
                    return __resolveVariableResult;
                }
            }
            __resolveVariableResult.obj = currentTarget;
            __resolveVariableResult.link = currentTarget;
            __resolveVariableResult.name = variableName;
            return __resolveVariableResult;
        }
        function avm1ProcessWith(ectx, obj, withBlock) {
            var scopeContainer = ectx.scopeContainer;
            var constantPool = ectx.constantPool;
            var registers = ectx.registers;
            var newScopeContainer = scopeContainer.create(Object(obj));
            interpretActions(withBlock, newScopeContainer, constantPool, registers);
        }
        function avm1ProcessTry(ectx, catchIsRegisterFlag, finallyBlockFlag, catchBlockFlag, catchTarget, tryBlock, catchBlock, finallyBlock) {
            var currentContext = ectx.context;
            var scopeContainer = ectx.scopeContainer;
            var scope = ectx.scope;
            var constantPool = ectx.constantPool;
            var registers = ectx.registers;
            var savedTryCatchState = currentContext.isTryCatchListening;
            var caughtError;
            try {
                currentContext.isTryCatchListening = true;
                interpretActions(tryBlock, scopeContainer, constantPool, registers);
            }
            catch (e) {
                currentContext.isTryCatchListening = savedTryCatchState;
                if (!catchBlockFlag || !(e instanceof AVM1Error)) {
                    caughtError = e;
                }
                else {
                    if (typeof catchTarget === 'string') {
                        scope.asSetPublicProperty(catchTarget, e.error);
                    }
                    else {
                        registers[catchTarget] = e.error;
                    }
                    interpretActions(catchBlock, scopeContainer, constantPool, registers);
                }
            }
            currentContext.isTryCatchListening = savedTryCatchState;
            if (finallyBlockFlag) {
                interpretActions(finallyBlock, scopeContainer, constantPool, registers);
            }
            if (caughtError) {
                throw caughtError;
            }
        }
        function avm1_0x81_ActionGotoFrame(ectx, args) {
            var _global = ectx.global;
            var frame = args[0];
            var play = args[1];
            if (play) {
                _global.gotoAndPlay(frame + 1);
            }
            else {
                _global.gotoAndStop(frame + 1);
            }
        }
        function avm1_0x83_ActionGetURL(ectx, args) {
            var _global = ectx.global;
            var urlString = args[0];
            var targetString = args[1];
            _global.getURL(urlString, targetString);
        }
        function avm1_0x04_ActionNextFrame(ectx) {
            var _global = ectx.global;
            _global.nextFrame();
        }
        function avm1_0x05_ActionPreviousFrame(ectx) {
            var _global = ectx.global;
            _global.prevFrame();
        }
        function avm1_0x06_ActionPlay(ectx) {
            var _global = ectx.global;
            _global.play();
        }
        function avm1_0x07_ActionStop(ectx) {
            var _global = ectx.global;
            _global.stop();
        }
        function avm1_0x08_ActionToggleQuality(ectx) {
            var _global = ectx.global;
            _global.toggleHighQuality();
        }
        function avm1_0x09_ActionStopSounds(ectx) {
            var _global = ectx.global;
            _global.stopAllSounds();
        }
        function avm1_0x8A_ActionWaitForFrame(ectx, args) {
            var _global = ectx.global;
            var frame = args[0];
            var count = args[1];
            return !_global.ifFrameLoaded(frame);
        }
        function avm1_0x8B_ActionSetTarget(ectx, args) {
            var targetName = args[0];
            avm1SetTarget(ectx, targetName);
        }
        function avm1_0x8C_ActionGoToLabel(ectx, args) {
            var _global = ectx.global;
            var label = args[0];
            var play = args[1];
            if (play) {
                _global.gotoAndPlay(label);
            }
            else {
                _global.gotoAndStop(label);
            }
        }
        function avm1_0x96_ActionPush(ectx, args) {
            var registers = ectx.registers;
            var constantPool = ectx.constantPool;
            var stack = ectx.stack;
            args.forEach(function (value) {
                if (value instanceof AVM1.ParsedPushConstantAction) {
                    stack.push(constantPool[value.constantIndex]);
                }
                else if (value instanceof AVM1.ParsedPushRegisterAction) {
                    var registerNumber = value.registerNumber;
                    if (registerNumber < 0 || registerNumber >= registers.length) {
                        stack.push(undefined);
                    }
                    else {
                        stack.push(registers[registerNumber]);
                    }
                }
                else {
                    stack.push(value);
                }
            });
        }
        function avm1_0x17_ActionPop(ectx) {
            var stack = ectx.stack;
            stack.pop();
        }
        function avm1_0x0A_ActionAdd(ectx) {
            var stack = ectx.stack;
            var a = as2ToNumber(stack.pop());
            var b = as2ToNumber(stack.pop());
            stack.push(a + b);
        }
        function avm1_0x0B_ActionSubtract(ectx) {
            var stack = ectx.stack;
            var a = as2ToNumber(stack.pop());
            var b = as2ToNumber(stack.pop());
            stack.push(b - a);
        }
        function avm1_0x0C_ActionMultiply(ectx) {
            var stack = ectx.stack;
            var a = as2ToNumber(stack.pop());
            var b = as2ToNumber(stack.pop());
            stack.push(a * b);
        }
        function avm1_0x0D_ActionDivide(ectx) {
            var stack = ectx.stack;
            var isSwfVersion5 = ectx.isSwfVersion5;
            var a = as2ToNumber(stack.pop());
            var b = as2ToNumber(stack.pop());
            var c = b / a;
            stack.push(isSwfVersion5 ? c : isFinite(c) ? c : '#ERROR#');
        }
        function avm1_0x0E_ActionEquals(ectx) {
            var stack = ectx.stack;
            var isSwfVersion5 = ectx.isSwfVersion5;
            var a = as2ToNumber(stack.pop());
            var b = as2ToNumber(stack.pop());
            var f = a == b;
            stack.push(isSwfVersion5 ? f : f ? 1 : 0);
        }
        function avm1_0x0F_ActionLess(ectx) {
            var stack = ectx.stack;
            var isSwfVersion5 = ectx.isSwfVersion5;
            var a = as2ToNumber(stack.pop());
            var b = as2ToNumber(stack.pop());
            var f = b < a;
            stack.push(isSwfVersion5 ? f : f ? 1 : 0);
        }
        function avm1_0x10_ActionAnd(ectx) {
            var stack = ectx.stack;
            var isSwfVersion5 = ectx.isSwfVersion5;
            var a = as2ToBoolean(stack.pop());
            var b = as2ToBoolean(stack.pop());
            var f = a && b;
            stack.push(isSwfVersion5 ? f : f ? 1 : 0);
        }
        function avm1_0x11_ActionOr(ectx) {
            var stack = ectx.stack;
            var isSwfVersion5 = ectx.isSwfVersion5;
            var a = as2ToBoolean(stack.pop());
            var b = as2ToBoolean(stack.pop());
            var f = a || b;
            stack.push(isSwfVersion5 ? f : f ? 1 : 0);
        }
        function avm1_0x12_ActionNot(ectx) {
            var stack = ectx.stack;
            var isSwfVersion5 = ectx.isSwfVersion5;
            var f = !as2ToBoolean(stack.pop());
            stack.push(isSwfVersion5 ? f : f ? 1 : 0);
        }
        function avm1_0x13_ActionStringEquals(ectx) {
            var stack = ectx.stack;
            var isSwfVersion5 = ectx.isSwfVersion5;
            var sa = as2ToString(stack.pop());
            var sb = as2ToString(stack.pop());
            var f = sa == sb;
            stack.push(isSwfVersion5 ? f : f ? 1 : 0);
        }
        function avm1_0x14_ActionStringLength(ectx) {
            var stack = ectx.stack;
            var _global = ectx.global;
            var sa = as2ToString(stack.pop());
            stack.push(_global.length_(sa));
        }
        function avm1_0x31_ActionMBStringLength(ectx) {
            var stack = ectx.stack;
            var _global = ectx.global;
            var sa = as2ToString(stack.pop());
            stack.push(_global.length_(sa));
        }
        function avm1_0x21_ActionStringAdd(ectx) {
            var stack = ectx.stack;
            var sa = as2ToString(stack.pop());
            var sb = as2ToString(stack.pop());
            stack.push(sb + sa);
        }
        function avm1_0x15_ActionStringExtract(ectx) {
            var stack = ectx.stack;
            var _global = ectx.global;
            var count = stack.pop();
            var index = stack.pop();
            var value = as2ToString(stack.pop());
            stack.push(_global.substring(value, index, count));
        }
        function avm1_0x35_ActionMBStringExtract(ectx) {
            var stack = ectx.stack;
            var _global = ectx.global;
            var count = stack.pop();
            var index = stack.pop();
            var value = as2ToString(stack.pop());
            stack.push(_global.mbsubstring(value, index, count));
        }
        function avm1_0x29_ActionStringLess(ectx) {
            var stack = ectx.stack;
            var isSwfVersion5 = ectx.isSwfVersion5;
            var sa = as2ToString(stack.pop());
            var sb = as2ToString(stack.pop());
            var f = sb < sa;
            stack.push(isSwfVersion5 ? f : f ? 1 : 0);
        }
        function avm1_0x18_ActionToInteger(ectx) {
            var stack = ectx.stack;
            var _global = ectx.global;
            stack.push(_global.int(stack.pop()));
        }
        function avm1_0x32_ActionCharToAscii(ectx) {
            var stack = ectx.stack;
            var _global = ectx.global;
            var ch = stack.pop();
            var charCode = _global.ord(ch);
            stack.push(charCode);
        }
        function avm1_0x36_ActionMBCharToAscii(ectx) {
            var stack = ectx.stack;
            var _global = ectx.global;
            var ch = stack.pop();
            var charCode = _global.mbord(ch);
            stack.push(charCode);
        }
        function avm1_0x33_ActionAsciiToChar(ectx) {
            var stack = ectx.stack;
            var _global = ectx.global;
            var charCode = +stack.pop();
            var ch = _global.chr(charCode);
            stack.push(ch);
        }
        function avm1_0x37_ActionMBAsciiToChar(ectx) {
            var stack = ectx.stack;
            var _global = ectx.global;
            var charCode = +stack.pop();
            var ch = _global.mbchr(charCode);
            stack.push(ch);
        }
        function avm1_0x99_ActionJump(ectx, args) {
        }
        function avm1_0x9D_ActionIf(ectx, args) {
            var stack = ectx.stack;
            var offset = args[0];
            return !!stack.pop();
        }
        function avm1_0x9E_ActionCall(ectx) {
            var stack = ectx.stack;
            var _global = ectx.global;
            var label = stack.pop();
            _global.call(label);
        }
        function avm1_0x1C_ActionGetVariable(ectx) {
            var stack = ectx.stack;
            var variableName = '' + stack.pop();
            var sp = stack.length;
            stack.push(undefined);
            var resolved = avm1ResolveGetVariable(ectx, variableName);
            stack[sp] = resolved ? resolved.link.asGetPublicProperty(resolved.name) : undefined;
        }
        function avm1_0x1D_ActionSetVariable(ectx) {
            var stack = ectx.stack;
            var value = stack.pop();
            var variableName = '' + stack.pop();
            var resolved = avm1ResolveSetVariable(ectx, variableName);
            if (resolved) {
                resolved.link.asSetPublicProperty(resolved.name, value);
                as2SyncEvents(resolved.name);
            }
        }
        function avm1_0x9A_ActionGetURL2(ectx, args) {
            var _global = ectx.global;
            var stack = ectx.stack;
            var flags = args[0];
            var target = stack.pop();
            var url = stack.pop();
            var sendVarsMethod;
            if (flags & 1) {
                sendVarsMethod = 'GET';
            }
            else if (flags & 2) {
                sendVarsMethod = 'POST';
            }
            var loadTargetFlag = flags & 1 << 6;
            var loadVariablesFlag = flags & 1 << 7;
            if (loadVariablesFlag) {
                _global.loadVariables(url, target, sendVarsMethod);
            }
            else if (!loadTargetFlag) {
                _global.getURL(url, target, sendVarsMethod);
            }
            else {
                _global.loadMovie(url, target, sendVarsMethod);
            }
        }
        function avm1_0x9F_ActionGotoFrame2(ectx, args) {
            var _global = ectx.global;
            var stack = ectx.stack;
            var flags = args[0];
            var gotoParams = [stack.pop()];
            if (!!(flags & 2)) {
                gotoParams.push(args[1]);
            }
            var gotoMethod = !!(flags & 1) ? _global.gotoAndPlay : _global.gotoAndStop;
            gotoMethod.apply(_global, gotoParams);
        }
        function avm1_0x20_ActionSetTarget2(ectx) {
            var stack = ectx.stack;
            var target = stack.pop();
            avm1SetTarget(ectx, target);
        }
        function avm1_0x22_ActionGetProperty(ectx) {
            var _global = ectx.global;
            var stack = ectx.stack;
            var index = stack.pop();
            var target = stack.pop();
            var sp = stack.length;
            stack.push(undefined);
            stack[sp] = _global.getAVM1Property(target, index);
        }
        function avm1_0x23_ActionSetProperty(ectx) {
            var _global = ectx.global;
            var stack = ectx.stack;
            var value = stack.pop();
            var index = stack.pop();
            var target = stack.pop();
            _global.setAVM1Property(target, index, value);
        }
        function avm1_0x24_ActionCloneSprite(ectx) {
            var _global = ectx.global;
            var stack = ectx.stack;
            var depth = stack.pop();
            var target = stack.pop();
            var source = stack.pop();
            _global.duplicateMovieClip(source, target, depth);
        }
        function avm1_0x25_ActionRemoveSprite(ectx) {
            var _global = ectx.global;
            var stack = ectx.stack;
            var target = stack.pop();
            _global.removeMovieClip(target);
        }
        function avm1_0x27_ActionStartDrag(ectx) {
            var _global = ectx.global;
            var stack = ectx.stack;
            var target = stack.pop();
            var lockcenter = stack.pop();
            var constrain = !stack.pop() ? null : {
                y2: stack.pop(),
                x2: stack.pop(),
                y1: stack.pop(),
                x1: stack.pop()
            };
            var dragParams = [target, lockcenter];
            if (constrain) {
                dragParams = dragParams.concat(constrain.x1, constrain.y1, constrain.x2, constrain.y2);
            }
            _global.startDrag.apply(_global, dragParams);
        }
        function avm1_0x28_ActionEndDrag(ectx) {
            var _global = ectx.global;
            _global.stopDrag();
        }
        function avm1_0x8D_ActionWaitForFrame2(ectx, args) {
            var _global = ectx.global;
            var stack = ectx.stack;
            var count = args[0];
            var frame = stack.pop();
            return !_global.ifFrameLoaded(frame);
        }
        function avm1_0x26_ActionTrace(ectx) {
            var _global = ectx.global;
            var stack = ectx.stack;
            var value = stack.pop();
            _global.trace(value === undefined ? 'undefined' : as2ToString(value));
        }
        function avm1_0x34_ActionGetTime(ectx) {
            var _global = ectx.global;
            var stack = ectx.stack;
            stack.push(_global.getTimer());
        }
        function avm1_0x30_ActionRandomNumber(ectx) {
            var _global = ectx.global;
            var stack = ectx.stack;
            stack.push(_global.random(stack.pop()));
        }
        function avm1_0x3D_ActionCallFunction(ectx) {
            var stack = ectx.stack;
            var functionName = stack.pop();
            var args = avm1ReadFunctionArgs(stack);
            var sp = stack.length;
            stack.push(undefined);
            var resolved = avm1ResolveGetVariable(ectx, functionName);
            var fn = resolved ? resolved.link.asGetPublicProperty(resolved.name) : undefined;
            if (!(fn instanceof Function)) {
                avm1Warn("AVM1 warning: function '" + functionName + (fn ? "' is not callable" : "' is undefined"));
                return;
            }
            release || assert(stack.length === sp + 1);
            stack[sp] = fn.apply(resolved.obj || null, args);
        }
        function avm1_0x52_ActionCallMethod(ectx) {
            var stack = ectx.stack;
            var methodName = stack.pop();
            var obj = stack.pop();
            var args = avm1ReadFunctionArgs(stack);
            var target;
            var sp = stack.length;
            stack.push(undefined);
            if (Shumway.isNullOrUndefined(obj)) {
                avm1Warn("AVM1 warning: method '" + methodName + "' can't be called on undefined object");
                return;
            }
            var frame = ectx.context.frame;
            var superArg, fn;
            if (Shumway.isNullOrUndefined(methodName) || methodName === '') {
                if (obj instanceof AVM1SuperWrapper) {
                    var superFrame = obj.callFrame;
                    var resolvedSuper = as2ResolveSuperProperty(superFrame, '__constructor__');
                    if (resolvedSuper) {
                        superArg = resolvedSuper.target;
                        fn = resolvedSuper.obj;
                        target = superFrame.currentThis;
                    }
                }
                else {
                    fn = obj;
                    target = obj;
                }
                if (isFunction(fn)) {
                    frame.setCallee(target, superArg, fn, args);
                    stack[sp] = fn.apply(target, args);
                    frame.resetCallee();
                }
                else {
                    avm1Warn("AVM1 warning: obj '" + obj + (obj ? "' is not callable" : "' is undefined"));
                }
                release || assert(stack.length === sp + 1);
                return;
            }
            if (obj instanceof AVM1SuperWrapper) {
                var superFrame = obj.callFrame;
                var resolvedSuper = as2ResolveSuperProperty(superFrame, methodName);
                if (resolvedSuper) {
                    superArg = resolvedSuper.target;
                    fn = resolvedSuper.obj;
                    target = superFrame.currentThis;
                }
            }
            else {
                fn = as2GetProperty(obj, methodName);
                target = obj;
            }
            if (!isFunction(fn)) {
                avm1Warn("AVM1 warning: method '" + methodName + "' on object", obj, (Shumway.isNullOrUndefined(fn) ? "is undefined" : "is not callable"));
                return;
            }
            release || assert(stack.length === sp + 1);
            frame.setCallee(target, superArg, fn, args);
            stack[sp] = fn.apply(target, args);
            frame.resetCallee();
        }
        function avm1_0x88_ActionConstantPool(ectx, args) {
            var constantPool = args[0];
            ectx.constantPool = constantPool;
        }
        function avm1_0x9B_ActionDefineFunction(ectx, args) {
            var stack = ectx.stack;
            var scope = ectx.scope;
            var functionBody = args[0];
            var functionName = args[1];
            var functionParams = args[2];
            var fn = avm1DefineFunction(ectx, functionBody, functionName, functionParams, 4, null, 0);
            if (functionName) {
                scope.asSetPublicProperty(functionName, fn);
            }
            else {
                stack.push(fn);
            }
        }
        function avm1_0x3C_ActionDefineLocal(ectx) {
            var stack = ectx.stack;
            var scope = ectx.scope;
            var value = stack.pop();
            var name = stack.pop();
            scope.asSetPublicProperty(name, value);
        }
        function avm1_0x41_ActionDefineLocal2(ectx) {
            var stack = ectx.stack;
            var scope = ectx.scope;
            var name = stack.pop();
            scope.asSetPublicProperty(name, undefined);
        }
        function avm1_0x3A_ActionDelete(ectx) {
            var stack = ectx.stack;
            var name = stack.pop();
            var obj = stack.pop();
            stack.push(obj.asDeleteProperty(undefined, name, 0));
            as2SyncEvents(name);
        }
        function avm1_0x3B_ActionDelete2(ectx) {
            var stack = ectx.stack;
            var name = stack.pop();
            var result = avm1DeleteProperty(ectx, name);
            stack.push(result);
            as2SyncEvents(name);
        }
        function avm1_0x46_ActionEnumerate(ectx) {
            var stack = ectx.stack;
            var objectName = stack.pop();
            stack.push(null);
            var resolved = avm1ResolveGetVariable(ectx, objectName);
            var obj = resolved ? resolved.link.asGetPublicProperty(resolved.name) : undefined;
            if (Shumway.isNullOrUndefined(obj)) {
                return;
            }
            as2Enumerate(obj, function (name) {
                stack.push(name);
            }, null);
        }
        function avm1_0x49_ActionEquals2(ectx) {
            var stack = ectx.stack;
            var a = stack.pop();
            var b = stack.pop();
            stack.push(a == b);
        }
        function avm1_0x4E_ActionGetMember(ectx) {
            var stack = ectx.stack;
            var name = stack.pop();
            var obj = stack.pop();
            stack.push(undefined);
            if (Shumway.isNullOrUndefined(obj)) {
                avm1Warn("AVM1 warning: cannot get member '" + name + "' on undefined object");
                return;
            }
            if (obj instanceof AVM1SuperWrapper) {
                var superFrame = obj.callFrame;
                var resolvedSuper = as2ResolveSuperProperty(superFrame, name);
                if (resolvedSuper) {
                    stack[stack.length - 1] = resolvedSuper.obj;
                }
                return;
            }
            stack[stack.length - 1] = as2GetProperty(obj, name);
        }
        function avm1_0x42_ActionInitArray(ectx) {
            var stack = ectx.stack;
            var obj = avm1ReadFunctionArgs(stack);
            stack.push(obj);
        }
        function avm1_0x43_ActionInitObject(ectx) {
            var stack = ectx.stack;
            var count = +stack.pop();
            count = fixArgsCount(count, stack.length >> 1);
            var obj = {};
            as2SetupInternalProperties(obj, null, AVM1Object);
            for (var i = 0; i < count; i++) {
                var value = stack.pop();
                var name = stack.pop();
                obj.asSetPublicProperty(name, value);
            }
            stack.push(obj);
        }
        function avm1_0x53_ActionNewMethod(ectx) {
            var stack = ectx.stack;
            var methodName = stack.pop();
            var obj = stack.pop();
            var args = avm1ReadFunctionArgs(stack);
            var sp = stack.length;
            stack.push(undefined);
            if (Shumway.isNullOrUndefined(obj)) {
                avm1Warn("AVM1 warning: method '" + methodName + "' can't be constructed on undefined object");
                return;
            }
            var ctor;
            if (Shumway.isNullOrUndefined(methodName) || methodName === '') {
                ctor = obj;
            }
            else {
                var resolvedName = as2ResolveProperty(obj, methodName, false);
                ctor = obj.asGetPublicProperty(resolvedName);
            }
            var result = as2Construct(ctor, args);
            if (result === undefined) {
                avm1Warn("AVM1 warning: method '" + methodName + "' on object", obj, "is not constructible");
            }
            stack[sp] = result;
            release || assert(stack.length === sp + 1);
        }
        function avm1_0x40_ActionNewObject(ectx) {
            var stack = ectx.stack;
            var objectName = stack.pop();
            var args = avm1ReadFunctionArgs(stack);
            var sp = stack.length;
            stack.push(undefined);
            var resolved = avm1ResolveGetVariable(ectx, objectName);
            var obj = resolved ? resolved.link.asGetPublicProperty(resolved.name) : undefined;
            var result = createBuiltinType(obj, args);
            if (result === undefined) {
                result = as2Construct(obj, args);
                if (result === undefined) {
                    avm1Warn("AVM1 warning: object '" + objectName + (obj ? "' is not constructible" : "' is undefined"));
                }
            }
            release || assert(stack.length === sp + 1);
            stack[sp] = result;
        }
        function avm1_0x4F_ActionSetMember(ectx) {
            var stack = ectx.stack;
            var value = stack.pop();
            var name = stack.pop();
            var obj = stack.pop();
            if (Shumway.isNullOrUndefined(obj)) {
                avm1Warn("AVM1 warning: cannot set member '" + name + "' on undefined object");
                return;
            }
            if (obj instanceof AVM1SuperWrapper) {
                avm1Warn("AVM1 warning: cannot set member '" + name + "' on super");
                return;
            }
            as2SetProperty(obj, name, value);
        }
        function avm1_0x45_ActionTargetPath(ectx) {
            var stack = ectx.stack;
            var obj = stack.pop();
            stack.push(as2GetType(obj) === 'movieclip' ? obj._target : void (0));
        }
        function avm1_0x94_ActionWith(ectx, args) {
            var stack = ectx.stack;
            var withBody = args[0];
            var obj = stack.pop();
            avm1ProcessWith(ectx, obj, withBody);
        }
        function avm1_0x4A_ActionToNumber(ectx) {
            var stack = ectx.stack;
            stack.push(as2ToNumber(stack.pop()));
        }
        function avm1_0x4B_ActionToString(ectx) {
            var stack = ectx.stack;
            stack.push(as2ToString(stack.pop()));
        }
        function avm1_0x44_ActionTypeOf(ectx) {
            var stack = ectx.stack;
            var obj = stack.pop();
            var result = as2GetType(obj);
            stack.push(result);
        }
        function avm1_0x47_ActionAdd2(ectx) {
            var stack = ectx.stack;
            var a = as2ToAddPrimitive(stack.pop());
            var b = as2ToAddPrimitive(stack.pop());
            if (typeof a === 'string' || typeof b === 'string') {
                stack.push(as2ToString(b) + as2ToString(a));
            }
            else {
                stack.push(as2ToNumber(b) + as2ToNumber(a));
            }
        }
        function avm1_0x48_ActionLess2(ectx) {
            var stack = ectx.stack;
            var a = stack.pop();
            var b = stack.pop();
            stack.push(as2Compare(b, a));
        }
        function avm1_0x3F_ActionModulo(ectx) {
            var stack = ectx.stack;
            var a = as2ToNumber(stack.pop());
            var b = as2ToNumber(stack.pop());
            stack.push(b % a);
        }
        function avm1_0x60_ActionBitAnd(ectx) {
            var stack = ectx.stack;
            var a = as2ToInt32(stack.pop());
            var b = as2ToInt32(stack.pop());
            stack.push(b & a);
        }
        function avm1_0x63_ActionBitLShift(ectx) {
            var stack = ectx.stack;
            var a = as2ToInt32(stack.pop());
            var b = as2ToInt32(stack.pop());
            stack.push(b << a);
        }
        function avm1_0x61_ActionBitOr(ectx) {
            var stack = ectx.stack;
            var a = as2ToInt32(stack.pop());
            var b = as2ToInt32(stack.pop());
            stack.push(b | a);
        }
        function avm1_0x64_ActionBitRShift(ectx) {
            var stack = ectx.stack;
            var a = as2ToInt32(stack.pop());
            var b = as2ToInt32(stack.pop());
            stack.push(b >> a);
        }
        function avm1_0x65_ActionBitURShift(ectx) {
            var stack = ectx.stack;
            var a = as2ToInt32(stack.pop());
            var b = as2ToInt32(stack.pop());
            stack.push(b >>> a);
        }
        function avm1_0x62_ActionBitXor(ectx) {
            var stack = ectx.stack;
            var a = as2ToInt32(stack.pop());
            var b = as2ToInt32(stack.pop());
            stack.push(b ^ a);
        }
        function avm1_0x51_ActionDecrement(ectx) {
            var stack = ectx.stack;
            var a = as2ToNumber(stack.pop());
            a--;
            stack.push(a);
        }
        function avm1_0x50_ActionIncrement(ectx) {
            var stack = ectx.stack;
            var a = as2ToNumber(stack.pop());
            a++;
            stack.push(a);
        }
        function avm1_0x4C_ActionPushDuplicate(ectx) {
            var stack = ectx.stack;
            stack.push(stack[stack.length - 1]);
        }
        function avm1_0x3E_ActionReturn(ectx) {
            ectx.isEndOfActions = true;
        }
        function avm1_0x4D_ActionStackSwap(ectx) {
            var stack = ectx.stack;
            stack.push(stack.pop(), stack.pop());
        }
        function avm1_0x87_ActionStoreRegister(ectx, args) {
            var stack = ectx.stack;
            var registers = ectx.registers;
            var register = args[0];
            if (register < 0 || register >= registers.length) {
                return;
            }
            registers[register] = stack[stack.length - 1];
        }
        function avm1_0x54_ActionInstanceOf(ectx) {
            var stack = ectx.stack;
            var constr = stack.pop();
            var obj = stack.pop();
            stack.push(as2InstanceOf(obj, constr));
        }
        function avm1_0x55_ActionEnumerate2(ectx) {
            var stack = ectx.stack;
            var obj = stack.pop();
            stack.push(null);
            if (Shumway.isNullOrUndefined(obj)) {
                avm1Warn("AVM1 warning: cannot iterate over undefined object");
                return;
            }
            as2Enumerate(obj, function (name) {
                stack.push(name);
            }, null);
        }
        function avm1_0x66_ActionStrictEquals(ectx) {
            var stack = ectx.stack;
            var a = stack.pop();
            var b = stack.pop();
            stack.push(b === a);
        }
        function avm1_0x67_ActionGreater(ectx) {
            var stack = ectx.stack;
            var a = stack.pop();
            var b = stack.pop();
            stack.push(as2Compare(a, b));
        }
        function avm1_0x68_ActionStringGreater(ectx) {
            var stack = ectx.stack;
            var isSwfVersion5 = ectx.isSwfVersion5;
            var sa = as2ToString(stack.pop());
            var sb = as2ToString(stack.pop());
            var f = sb > sa;
            stack.push(isSwfVersion5 ? f : f ? 1 : 0);
        }
        function avm1_0x8E_ActionDefineFunction2(ectx, args) {
            var stack = ectx.stack;
            var scope = ectx.scope;
            var functionBody = args[0];
            var functionName = args[1];
            var functionParams = args[2];
            var registerCount = args[3];
            var registerAllocation = args[4];
            var suppressArguments = args[5];
            var fn = avm1DefineFunction(ectx, functionBody, functionName, functionParams, registerCount, registerAllocation, suppressArguments);
            if (functionName) {
                scope.asSetPublicProperty(functionName, fn);
            }
            else {
                stack.push(fn);
            }
        }
        function avm1_0x69_ActionExtends(ectx) {
            var stack = ectx.stack;
            var constrSuper = stack.pop();
            var constr = stack.pop();
            var prototype = constr.asGetPublicProperty('prototype');
            var prototypeSuper = constrSuper.asGetPublicProperty('prototype');
            prototype.asSetPublicProperty('__proto__', prototypeSuper);
            prototype.asSetPublicProperty('__constructor__', constrSuper);
        }
        function avm1_0x2B_ActionCastOp(ectx) {
            var stack = ectx.stack;
            var obj = stack.pop();
            var constr = stack.pop();
            stack.push(as2InstanceOf(obj, constr) ? obj : null);
        }
        function avm1_0x2C_ActionImplementsOp(ectx) {
            var stack = ectx.stack;
            var constr = stack.pop();
            var count = +stack.pop();
            fixArgsCount(count, stack.length);
            var interfaces = [];
            for (var i = 0; i < count; i++) {
                interfaces.push(stack.pop());
            }
            constr._as2Interfaces = interfaces;
        }
        function avm1_0x8F_ActionTry(ectx, args) {
            var catchIsRegisterFlag = args[0];
            var catchTarget = args[1];
            var tryBody = args[2];
            var catchBlockFlag = args[3];
            var catchBody = args[4];
            var finallyBlockFlag = args[5];
            var finallyBody = args[6];
            avm1ProcessTry(ectx, catchIsRegisterFlag, finallyBlockFlag, catchBlockFlag, catchTarget, tryBody, catchBody, finallyBody);
        }
        function avm1_0x2A_ActionThrow(ectx) {
            var stack = ectx.stack;
            var obj = stack.pop();
            throw new AVM1Error(obj);
        }
        function avm1_0x2D_ActionFSCommand2(ectx) {
            var stack = ectx.stack;
            var _global = ectx.global;
            var args = avm1ReadFunctionArgs(stack);
            var sp = stack.length;
            stack.push(undefined);
            var result = _global.fscommand.apply(null, args);
            stack[sp] = result;
        }
        function avm1_0x89_ActionStrictMode(ectx, args) {
            var mode = args[0];
        }
        function wrapAvm1Error(fn) {
            return function avm1ErrorWrapper(executionContext, args) {
                var currentContext;
                try {
                    fn(executionContext, args);
                    executionContext.recoveringFromError = false;
                }
                catch (e) {
                    currentContext = executionContext.context;
                    e = as2CastError(e);
                    if (e instanceof AVM1CriticalError) {
                        throw e;
                    }
                    if (e instanceof AVM1Error) {
                        throw e;
                    }
                    Telemetry.instance.reportTelemetry({ topic: 'error', error: 1 /* AVM1_ERROR */ });
                    if (!executionContext.recoveringFromError) {
                        if (currentContext.errorsIgnored++ >= MAX_AVM1_ERRORS_LIMIT) {
                            throw new AVM1CriticalError('long running script -- AVM1 errors limit is reached');
                        }
                        console.log(typeof e);
                        console.log(Object.getPrototypeOf(e));
                        console.log(Object.getPrototypeOf(Object.getPrototypeOf(e)));
                        console.error('AVM1 error: ' + e);
                        var avm2 = Shumway.AVM2.Runtime.AVM2;
                        avm2.instance.exceptions.push({ source: 'avm1', message: e.message, stack: e.stack });
                        executionContext.recoveringFromError = true;
                    }
                }
            };
        }
        function generateActionCalls() {
            var wrap;
            if (!AVM1.avm1ErrorsEnabled.value) {
                wrap = wrapAvm1Error;
            }
            else {
                wrap = function (fn) {
                    return fn;
                };
            }
            return {
                ActionGotoFrame: wrap(avm1_0x81_ActionGotoFrame),
                ActionGetURL: wrap(avm1_0x83_ActionGetURL),
                ActionNextFrame: wrap(avm1_0x04_ActionNextFrame),
                ActionPreviousFrame: wrap(avm1_0x05_ActionPreviousFrame),
                ActionPlay: wrap(avm1_0x06_ActionPlay),
                ActionStop: wrap(avm1_0x07_ActionStop),
                ActionToggleQuality: wrap(avm1_0x08_ActionToggleQuality),
                ActionStopSounds: wrap(avm1_0x09_ActionStopSounds),
                ActionWaitForFrame: wrap(avm1_0x8A_ActionWaitForFrame),
                ActionSetTarget: wrap(avm1_0x8B_ActionSetTarget),
                ActionGoToLabel: wrap(avm1_0x8C_ActionGoToLabel),
                ActionPush: wrap(avm1_0x96_ActionPush),
                ActionPop: wrap(avm1_0x17_ActionPop),
                ActionAdd: wrap(avm1_0x0A_ActionAdd),
                ActionSubtract: wrap(avm1_0x0B_ActionSubtract),
                ActionMultiply: wrap(avm1_0x0C_ActionMultiply),
                ActionDivide: wrap(avm1_0x0D_ActionDivide),
                ActionEquals: wrap(avm1_0x0E_ActionEquals),
                ActionLess: wrap(avm1_0x0F_ActionLess),
                ActionAnd: wrap(avm1_0x10_ActionAnd),
                ActionOr: wrap(avm1_0x11_ActionOr),
                ActionNot: wrap(avm1_0x12_ActionNot),
                ActionStringEquals: wrap(avm1_0x13_ActionStringEquals),
                ActionStringLength: wrap(avm1_0x14_ActionStringLength),
                ActionMBStringLength: wrap(avm1_0x31_ActionMBStringLength),
                ActionStringAdd: wrap(avm1_0x21_ActionStringAdd),
                ActionStringExtract: wrap(avm1_0x15_ActionStringExtract),
                ActionMBStringExtract: wrap(avm1_0x35_ActionMBStringExtract),
                ActionStringLess: wrap(avm1_0x29_ActionStringLess),
                ActionToInteger: wrap(avm1_0x18_ActionToInteger),
                ActionCharToAscii: wrap(avm1_0x32_ActionCharToAscii),
                ActionMBCharToAscii: wrap(avm1_0x36_ActionMBCharToAscii),
                ActionAsciiToChar: wrap(avm1_0x33_ActionAsciiToChar),
                ActionMBAsciiToChar: wrap(avm1_0x37_ActionMBAsciiToChar),
                ActionJump: wrap(avm1_0x99_ActionJump),
                ActionIf: wrap(avm1_0x9D_ActionIf),
                ActionCall: wrap(avm1_0x9E_ActionCall),
                ActionGetVariable: wrap(avm1_0x1C_ActionGetVariable),
                ActionSetVariable: wrap(avm1_0x1D_ActionSetVariable),
                ActionGetURL2: wrap(avm1_0x9A_ActionGetURL2),
                ActionGotoFrame2: wrap(avm1_0x9F_ActionGotoFrame2),
                ActionSetTarget2: wrap(avm1_0x20_ActionSetTarget2),
                ActionGetProperty: wrap(avm1_0x22_ActionGetProperty),
                ActionSetProperty: wrap(avm1_0x23_ActionSetProperty),
                ActionCloneSprite: wrap(avm1_0x24_ActionCloneSprite),
                ActionRemoveSprite: wrap(avm1_0x25_ActionRemoveSprite),
                ActionStartDrag: wrap(avm1_0x27_ActionStartDrag),
                ActionEndDrag: wrap(avm1_0x28_ActionEndDrag),
                ActionWaitForFrame2: wrap(avm1_0x8D_ActionWaitForFrame2),
                ActionTrace: wrap(avm1_0x26_ActionTrace),
                ActionGetTime: wrap(avm1_0x34_ActionGetTime),
                ActionRandomNumber: wrap(avm1_0x30_ActionRandomNumber),
                ActionCallFunction: wrap(avm1_0x3D_ActionCallFunction),
                ActionCallMethod: wrap(avm1_0x52_ActionCallMethod),
                ActionConstantPool: wrap(avm1_0x88_ActionConstantPool),
                ActionDefineFunction: wrap(avm1_0x9B_ActionDefineFunction),
                ActionDefineLocal: wrap(avm1_0x3C_ActionDefineLocal),
                ActionDefineLocal2: wrap(avm1_0x41_ActionDefineLocal2),
                ActionDelete: wrap(avm1_0x3A_ActionDelete),
                ActionDelete2: wrap(avm1_0x3B_ActionDelete2),
                ActionEnumerate: wrap(avm1_0x46_ActionEnumerate),
                ActionEquals2: wrap(avm1_0x49_ActionEquals2),
                ActionGetMember: wrap(avm1_0x4E_ActionGetMember),
                ActionInitArray: wrap(avm1_0x42_ActionInitArray),
                ActionInitObject: wrap(avm1_0x43_ActionInitObject),
                ActionNewMethod: wrap(avm1_0x53_ActionNewMethod),
                ActionNewObject: wrap(avm1_0x40_ActionNewObject),
                ActionSetMember: wrap(avm1_0x4F_ActionSetMember),
                ActionTargetPath: wrap(avm1_0x45_ActionTargetPath),
                ActionWith: wrap(avm1_0x94_ActionWith),
                ActionToNumber: wrap(avm1_0x4A_ActionToNumber),
                ActionToString: wrap(avm1_0x4B_ActionToString),
                ActionTypeOf: wrap(avm1_0x44_ActionTypeOf),
                ActionAdd2: wrap(avm1_0x47_ActionAdd2),
                ActionLess2: wrap(avm1_0x48_ActionLess2),
                ActionModulo: wrap(avm1_0x3F_ActionModulo),
                ActionBitAnd: wrap(avm1_0x60_ActionBitAnd),
                ActionBitLShift: wrap(avm1_0x63_ActionBitLShift),
                ActionBitOr: wrap(avm1_0x61_ActionBitOr),
                ActionBitRShift: wrap(avm1_0x64_ActionBitRShift),
                ActionBitURShift: wrap(avm1_0x65_ActionBitURShift),
                ActionBitXor: wrap(avm1_0x62_ActionBitXor),
                ActionDecrement: wrap(avm1_0x51_ActionDecrement),
                ActionIncrement: wrap(avm1_0x50_ActionIncrement),
                ActionPushDuplicate: wrap(avm1_0x4C_ActionPushDuplicate),
                ActionReturn: wrap(avm1_0x3E_ActionReturn),
                ActionStackSwap: wrap(avm1_0x4D_ActionStackSwap),
                ActionStoreRegister: wrap(avm1_0x87_ActionStoreRegister),
                ActionInstanceOf: wrap(avm1_0x54_ActionInstanceOf),
                ActionEnumerate2: wrap(avm1_0x55_ActionEnumerate2),
                ActionStrictEquals: wrap(avm1_0x66_ActionStrictEquals),
                ActionGreater: wrap(avm1_0x67_ActionGreater),
                ActionStringGreater: wrap(avm1_0x68_ActionStringGreater),
                ActionDefineFunction2: wrap(avm1_0x8E_ActionDefineFunction2),
                ActionExtends: wrap(avm1_0x69_ActionExtends),
                ActionCastOp: wrap(avm1_0x2B_ActionCastOp),
                ActionImplementsOp: wrap(avm1_0x2C_ActionImplementsOp),
                ActionTry: wrap(avm1_0x8F_ActionTry),
                ActionThrow: wrap(avm1_0x2A_ActionThrow),
                ActionFSCommand2: wrap(avm1_0x2D_ActionFSCommand2),
                ActionStrictMode: wrap(avm1_0x89_ActionStrictMode)
            };
        }
        function interpretAction(executionContext, parsedAction) {
            var stack = executionContext.stack;
            var actionCode = parsedAction.actionCode;
            var args = parsedAction.args;
            var actionTracer = executionContext.actionTracer;
            actionTracer.print(parsedAction, stack);
            var shallBranch = false;
            switch (actionCode | 0) {
                case 129 /* ActionGotoFrame */:
                    avm1_0x81_ActionGotoFrame(executionContext, args);
                    break;
                case 131 /* ActionGetURL */:
                    avm1_0x83_ActionGetURL(executionContext, args);
                    break;
                case 4 /* ActionNextFrame */:
                    avm1_0x04_ActionNextFrame(executionContext);
                    break;
                case 5 /* ActionPreviousFrame */:
                    avm1_0x05_ActionPreviousFrame(executionContext);
                    break;
                case 6 /* ActionPlay */:
                    avm1_0x06_ActionPlay(executionContext);
                    break;
                case 7 /* ActionStop */:
                    avm1_0x07_ActionStop(executionContext);
                    break;
                case 8 /* ActionToggleQuality */:
                    avm1_0x08_ActionToggleQuality(executionContext);
                    break;
                case 9 /* ActionStopSounds */:
                    avm1_0x09_ActionStopSounds(executionContext);
                    break;
                case 138 /* ActionWaitForFrame */:
                    shallBranch = avm1_0x8A_ActionWaitForFrame(executionContext, args);
                    break;
                case 139 /* ActionSetTarget */:
                    avm1_0x8B_ActionSetTarget(executionContext, args);
                    break;
                case 140 /* ActionGoToLabel */:
                    avm1_0x8C_ActionGoToLabel(executionContext, args);
                    break;
                case 150 /* ActionPush */:
                    avm1_0x96_ActionPush(executionContext, args);
                    break;
                case 23 /* ActionPop */:
                    avm1_0x17_ActionPop(executionContext);
                    break;
                case 10 /* ActionAdd */:
                    avm1_0x0A_ActionAdd(executionContext);
                    break;
                case 11 /* ActionSubtract */:
                    avm1_0x0B_ActionSubtract(executionContext);
                    break;
                case 12 /* ActionMultiply */:
                    avm1_0x0C_ActionMultiply(executionContext);
                    break;
                case 13 /* ActionDivide */:
                    avm1_0x0D_ActionDivide(executionContext);
                    break;
                case 14 /* ActionEquals */:
                    avm1_0x0E_ActionEquals(executionContext);
                    break;
                case 15 /* ActionLess */:
                    avm1_0x0F_ActionLess(executionContext);
                    break;
                case 16 /* ActionAnd */:
                    avm1_0x10_ActionAnd(executionContext);
                    break;
                case 17 /* ActionOr */:
                    avm1_0x11_ActionOr(executionContext);
                    break;
                case 18 /* ActionNot */:
                    avm1_0x12_ActionNot(executionContext);
                    break;
                case 19 /* ActionStringEquals */:
                    avm1_0x13_ActionStringEquals(executionContext);
                    break;
                case 20 /* ActionStringLength */:
                    avm1_0x14_ActionStringLength(executionContext);
                    break;
                case 49 /* ActionMBStringLength */:
                    avm1_0x31_ActionMBStringLength(executionContext);
                    break;
                case 33 /* ActionStringAdd */:
                    avm1_0x21_ActionStringAdd(executionContext);
                    break;
                case 21 /* ActionStringExtract */:
                    avm1_0x15_ActionStringExtract(executionContext);
                    break;
                case 53 /* ActionMBStringExtract */:
                    avm1_0x35_ActionMBStringExtract(executionContext);
                    break;
                case 41 /* ActionStringLess */:
                    avm1_0x29_ActionStringLess(executionContext);
                    break;
                case 24 /* ActionToInteger */:
                    avm1_0x18_ActionToInteger(executionContext);
                    break;
                case 50 /* ActionCharToAscii */:
                    avm1_0x32_ActionCharToAscii(executionContext);
                    break;
                case 54 /* ActionMBCharToAscii */:
                    avm1_0x36_ActionMBCharToAscii(executionContext);
                    break;
                case 51 /* ActionAsciiToChar */:
                    avm1_0x33_ActionAsciiToChar(executionContext);
                    break;
                case 55 /* ActionMBAsciiToChar */:
                    avm1_0x37_ActionMBAsciiToChar(executionContext);
                    break;
                case 153 /* ActionJump */:
                    avm1_0x99_ActionJump(executionContext, args);
                    break;
                case 157 /* ActionIf */:
                    shallBranch = avm1_0x9D_ActionIf(executionContext, args);
                    break;
                case 158 /* ActionCall */:
                    avm1_0x9E_ActionCall(executionContext);
                    break;
                case 28 /* ActionGetVariable */:
                    avm1_0x1C_ActionGetVariable(executionContext);
                    break;
                case 29 /* ActionSetVariable */:
                    avm1_0x1D_ActionSetVariable(executionContext);
                    break;
                case 154 /* ActionGetURL2 */:
                    avm1_0x9A_ActionGetURL2(executionContext, args);
                    break;
                case 159 /* ActionGotoFrame2 */:
                    avm1_0x9F_ActionGotoFrame2(executionContext, args);
                    break;
                case 32 /* ActionSetTarget2 */:
                    avm1_0x20_ActionSetTarget2(executionContext);
                    break;
                case 34 /* ActionGetProperty */:
                    avm1_0x22_ActionGetProperty(executionContext);
                    break;
                case 35 /* ActionSetProperty */:
                    avm1_0x23_ActionSetProperty(executionContext);
                    break;
                case 36 /* ActionCloneSprite */:
                    avm1_0x24_ActionCloneSprite(executionContext);
                    break;
                case 37 /* ActionRemoveSprite */:
                    avm1_0x25_ActionRemoveSprite(executionContext);
                    break;
                case 39 /* ActionStartDrag */:
                    avm1_0x27_ActionStartDrag(executionContext);
                    break;
                case 40 /* ActionEndDrag */:
                    avm1_0x28_ActionEndDrag(executionContext);
                    break;
                case 141 /* ActionWaitForFrame2 */:
                    shallBranch = avm1_0x8D_ActionWaitForFrame2(executionContext, args);
                    break;
                case 38 /* ActionTrace */:
                    avm1_0x26_ActionTrace(executionContext);
                    break;
                case 52 /* ActionGetTime */:
                    avm1_0x34_ActionGetTime(executionContext);
                    break;
                case 48 /* ActionRandomNumber */:
                    avm1_0x30_ActionRandomNumber(executionContext);
                    break;
                case 61 /* ActionCallFunction */:
                    avm1_0x3D_ActionCallFunction(executionContext);
                    break;
                case 82 /* ActionCallMethod */:
                    avm1_0x52_ActionCallMethod(executionContext);
                    break;
                case 136 /* ActionConstantPool */:
                    avm1_0x88_ActionConstantPool(executionContext, args);
                    break;
                case 155 /* ActionDefineFunction */:
                    avm1_0x9B_ActionDefineFunction(executionContext, args);
                    break;
                case 60 /* ActionDefineLocal */:
                    avm1_0x3C_ActionDefineLocal(executionContext);
                    break;
                case 65 /* ActionDefineLocal2 */:
                    avm1_0x41_ActionDefineLocal2(executionContext);
                    break;
                case 58 /* ActionDelete */:
                    avm1_0x3A_ActionDelete(executionContext);
                    break;
                case 59 /* ActionDelete2 */:
                    avm1_0x3B_ActionDelete2(executionContext);
                    break;
                case 70 /* ActionEnumerate */:
                    avm1_0x46_ActionEnumerate(executionContext);
                    break;
                case 73 /* ActionEquals2 */:
                    avm1_0x49_ActionEquals2(executionContext);
                    break;
                case 78 /* ActionGetMember */:
                    avm1_0x4E_ActionGetMember(executionContext);
                    break;
                case 66 /* ActionInitArray */:
                    avm1_0x42_ActionInitArray(executionContext);
                    break;
                case 67 /* ActionInitObject */:
                    avm1_0x43_ActionInitObject(executionContext);
                    break;
                case 83 /* ActionNewMethod */:
                    avm1_0x53_ActionNewMethod(executionContext);
                    break;
                case 64 /* ActionNewObject */:
                    avm1_0x40_ActionNewObject(executionContext);
                    break;
                case 79 /* ActionSetMember */:
                    avm1_0x4F_ActionSetMember(executionContext);
                    break;
                case 69 /* ActionTargetPath */:
                    avm1_0x45_ActionTargetPath(executionContext);
                    break;
                case 148 /* ActionWith */:
                    avm1_0x94_ActionWith(executionContext, args);
                    break;
                case 74 /* ActionToNumber */:
                    avm1_0x4A_ActionToNumber(executionContext);
                    break;
                case 75 /* ActionToString */:
                    avm1_0x4B_ActionToString(executionContext);
                    break;
                case 68 /* ActionTypeOf */:
                    avm1_0x44_ActionTypeOf(executionContext);
                    break;
                case 71 /* ActionAdd2 */:
                    avm1_0x47_ActionAdd2(executionContext);
                    break;
                case 72 /* ActionLess2 */:
                    avm1_0x48_ActionLess2(executionContext);
                    break;
                case 63 /* ActionModulo */:
                    avm1_0x3F_ActionModulo(executionContext);
                    break;
                case 96 /* ActionBitAnd */:
                    avm1_0x60_ActionBitAnd(executionContext);
                    break;
                case 99 /* ActionBitLShift */:
                    avm1_0x63_ActionBitLShift(executionContext);
                    break;
                case 97 /* ActionBitOr */:
                    avm1_0x61_ActionBitOr(executionContext);
                    break;
                case 100 /* ActionBitRShift */:
                    avm1_0x64_ActionBitRShift(executionContext);
                    break;
                case 101 /* ActionBitURShift */:
                    avm1_0x65_ActionBitURShift(executionContext);
                    break;
                case 98 /* ActionBitXor */:
                    avm1_0x62_ActionBitXor(executionContext);
                    break;
                case 81 /* ActionDecrement */:
                    avm1_0x51_ActionDecrement(executionContext);
                    break;
                case 80 /* ActionIncrement */:
                    avm1_0x50_ActionIncrement(executionContext);
                    break;
                case 76 /* ActionPushDuplicate */:
                    avm1_0x4C_ActionPushDuplicate(executionContext);
                    break;
                case 62 /* ActionReturn */:
                    avm1_0x3E_ActionReturn(executionContext);
                    break;
                case 77 /* ActionStackSwap */:
                    avm1_0x4D_ActionStackSwap(executionContext);
                    break;
                case 135 /* ActionStoreRegister */:
                    avm1_0x87_ActionStoreRegister(executionContext, args);
                    break;
                case 84 /* ActionInstanceOf */:
                    avm1_0x54_ActionInstanceOf(executionContext);
                    break;
                case 85 /* ActionEnumerate2 */:
                    avm1_0x55_ActionEnumerate2(executionContext);
                    break;
                case 102 /* ActionStrictEquals */:
                    avm1_0x66_ActionStrictEquals(executionContext);
                    break;
                case 103 /* ActionGreater */:
                    avm1_0x67_ActionGreater(executionContext);
                    break;
                case 104 /* ActionStringGreater */:
                    avm1_0x68_ActionStringGreater(executionContext);
                    break;
                case 142 /* ActionDefineFunction2 */:
                    avm1_0x8E_ActionDefineFunction2(executionContext, args);
                    break;
                case 105 /* ActionExtends */:
                    avm1_0x69_ActionExtends(executionContext);
                    break;
                case 43 /* ActionCastOp */:
                    avm1_0x2B_ActionCastOp(executionContext);
                    break;
                case 44 /* ActionImplementsOp */:
                    avm1_0x2C_ActionImplementsOp(executionContext);
                    break;
                case 143 /* ActionTry */:
                    avm1_0x8F_ActionTry(executionContext, args);
                    break;
                case 42 /* ActionThrow */:
                    avm1_0x2A_ActionThrow(executionContext);
                    break;
                case 45 /* ActionFSCommand2 */:
                    avm1_0x2D_ActionFSCommand2(executionContext);
                    break;
                case 137 /* ActionStrictMode */:
                    avm1_0x89_ActionStrictMode(executionContext, args);
                    break;
                case 0 /* None */:
                    executionContext.isEndOfActions = true;
                    break;
                default:
                    throw new Error('Unknown action code: ' + actionCode);
            }
            return shallBranch;
        }
        function interpretActionWithRecovery(executionContext, parsedAction) {
            var currentContext;
            var result;
            try {
                result = interpretAction(executionContext, parsedAction);
                executionContext.recoveringFromError = false;
            }
            catch (e) {
                currentContext = executionContext.context;
                e = as2CastError(e);
                if ((AVM1.avm1ErrorsEnabled.value && !currentContext.isTryCatchListening) || e instanceof AVM1CriticalError) {
                    throw e;
                }
                if (e instanceof AVM1Error) {
                    throw e;
                }
                Telemetry.instance.reportTelemetry({ topic: 'error', error: 1 /* AVM1_ERROR */ });
                if (!executionContext.recoveringFromError) {
                    if (currentContext.errorsIgnored++ >= MAX_AVM1_ERRORS_LIMIT) {
                        throw new AVM1CriticalError('long running script -- AVM1 errors limit is reached');
                    }
                    console.error('AVM1 error: ' + e);
                    var avm2 = Shumway.AVM2.Runtime.AVM2;
                    avm2.instance.exceptions.push({ source: 'avm1', message: e.message, stack: e.stack });
                    executionContext.recoveringFromError = true;
                }
            }
            return result;
        }
        function interpretActions(actionsData, scopeContainer, constantPool, registers) {
            var currentContext = AVM1.AVM1Context.instance;
            if (!actionsData.ir) {
                var parser = new AVM1.ActionsDataParser(actionsData, currentContext.loaderInfo.swfVersion);
                var analyzer = new AVM1.ActionsDataAnalyzer();
                analyzer.registersLimit = registers.length;
                analyzer.parentResults = actionsData.parent && actionsData.parent.ir;
                actionsData.ir = analyzer.analyze(parser);
                if (AVM1.avm1CompilerEnabled.value) {
                    try {
                        var c = new ActionsDataCompiler();
                        actionsData.ir.compiled = c.generate(actionsData.ir);
                    }
                    catch (e) {
                        console.error('Unable to compile AVM1 function: ' + e);
                    }
                }
            }
            var ir = actionsData.ir;
            var compiled = ir.compiled;
            var stack = [];
            var isSwfVersion5 = currentContext.loaderInfo.swfVersion >= 5;
            var actionTracer = ActionTracerFactory.get();
            var scope = scopeContainer.scope;
            var executionContext = {
                context: currentContext,
                global: currentContext.globals,
                scopeContainer: scopeContainer,
                scope: scope,
                actionTracer: actionTracer,
                constantPool: constantPool,
                registers: registers,
                stack: stack,
                frame: null,
                isSwfVersion5: isSwfVersion5,
                recoveringFromError: false,
                isEndOfActions: false
            };
            if (scope._as3Object && scope._as3Object._deferScriptExecution) {
                currentContext.deferScriptExecution = true;
            }
            if (compiled) {
                return compiled(executionContext);
            }
            var instructionsExecuted = 0;
            var abortExecutionAt = currentContext.abortExecutionAt;
            if (AVM1.avm1DebuggerEnabled.value && (AVM1.Debugger.pause || AVM1.Debugger.breakpoints[ir.dataId])) {
                debugger;
            }
            var position = 0;
            var nextAction = ir.actions[position];
            while (nextAction && !executionContext.isEndOfActions) {
                if (instructionsExecuted++ % CHECK_AVM1_HANG_EVERY === 0 && Date.now() >= abortExecutionAt) {
                    throw new AVM1CriticalError('long running script -- AVM1 instruction hang timeout');
                }
                var shallBranch = interpretActionWithRecovery(executionContext, nextAction.action);
                if (shallBranch) {
                    position = nextAction.conditionalJumpTo;
                }
                else {
                    position = nextAction.next;
                }
                nextAction = ir.actions[position];
            }
            return stack.pop();
        }
        var ActionsDataCompiler = (function () {
            function ActionsDataCompiler() {
                if (!ActionsDataCompiler.cachedCalls) {
                    ActionsDataCompiler.cachedCalls = generateActionCalls();
                }
            }
            ActionsDataCompiler.prototype.convertArgs = function (args, id, res, ir) {
                var parts = [];
                for (var i = 0; i < args.length; i++) {
                    var arg = args[i];
                    if (typeof arg === 'object' && arg !== null && !Array.isArray(arg)) {
                        if (arg instanceof AVM1.ParsedPushConstantAction) {
                            if (ir.singleConstantPool) {
                                var constant = ir.singleConstantPool[arg.constantIndex];
                                parts.push(constant === undefined ? 'undefined' : JSON.stringify(constant));
                            }
                            else {
                                var hint = '';
                                var currentConstantPool = res.constantPool;
                                if (currentConstantPool) {
                                    var constant = currentConstantPool[arg.constantIndex];
                                    hint = constant === undefined ? 'undefined' : JSON.stringify(constant);
                                    hint = hint.indexOf('*/') >= 0 ? '' : ' /* ' + hint + ' */';
                                }
                                parts.push('constantPool[' + arg.constantIndex + ']' + hint);
                            }
                        }
                        else if (arg instanceof AVM1.ParsedPushRegisterAction) {
                            var registerNumber = arg.registerNumber;
                            if (registerNumber < 0 || registerNumber >= ir.registersLimit) {
                                parts.push('undefined');
                            }
                            else {
                                parts.push('registers[' + registerNumber + ']');
                            }
                        }
                        else if (arg instanceof AVM1.AVM1ActionsData) {
                            var resName = 'code_' + id + '_' + i;
                            res[resName] = arg;
                            parts.push('res.' + resName);
                        }
                        else {
                            notImplemented('Unknown AVM1 action argument type');
                        }
                    }
                    else if (arg === undefined) {
                        parts.push('undefined');
                    }
                    else {
                        parts.push(JSON.stringify(arg));
                    }
                }
                return parts.join(',');
            };
            ActionsDataCompiler.prototype.convertAction = function (item, id, res, indexInBlock, ir) {
                switch (item.action.actionCode) {
                    case 153 /* ActionJump */:
                    case 62 /* ActionReturn */:
                        return '';
                    case 136 /* ActionConstantPool */:
                        res.constantPool = item.action.args[0];
                        return '  constantPool = [' + this.convertArgs(item.action.args[0], id, res, ir) + '];\n' + '  ectx.constantPool = constantPool;\n';
                    case 150 /* ActionPush */:
                        return '  stack.push(' + this.convertArgs(item.action.args, id, res, ir) + ');\n';
                    case 135 /* ActionStoreRegister */:
                        var registerNumber = item.action.args[0];
                        if (registerNumber < 0 || registerNumber >= ir.registersLimit) {
                            return '';
                        }
                        return '  registers[' + registerNumber + '] = stack[stack.length - 1];\n';
                    case 138 /* ActionWaitForFrame */:
                    case 141 /* ActionWaitForFrame2 */:
                        return '  if (calls.' + item.action.actionName + '(ectx,[' + this.convertArgs(item.action.args, id, res, ir) + '])) { position = ' + item.conditionalJumpTo + '; ' + 'checkTimeAfter -= ' + (indexInBlock + 1) + '; break; }\n';
                    case 157 /* ActionIf */:
                        return '  if (!!stack.pop()) { position = ' + item.conditionalJumpTo + '; ' + 'checkTimeAfter -= ' + (indexInBlock + 1) + '; break; }\n';
                    default:
                        var result = '  calls.' + item.action.actionName + '(ectx' + (item.action.args ? ',[' + this.convertArgs(item.action.args, id, res, ir) + ']' : '') + ');\n';
                        return result;
                }
            };
            ActionsDataCompiler.prototype.checkAvm1Timeout = function (ectx) {
                if (Date.now() >= ectx.context.abortExecutionAt) {
                    throw new AVM1CriticalError('long running script -- AVM1 instruction hang timeout');
                }
            };
            ActionsDataCompiler.prototype.generate = function (ir) {
                var _this = this;
                var blocks = ir.blocks;
                var res = {};
                var uniqueId = 0;
                var debugName = ir.dataId;
                var fn = 'return function avm1gen_' + debugName + '(ectx) {\n' + 'var position = 0;\n' + 'var checkTimeAfter = 0;\n' + 'var constantPool = ectx.constantPool, registers = ectx.registers, stack = ectx.stack;\n';
                if (AVM1.avm1DebuggerEnabled.value) {
                    fn += '/* Running ' + debugName + ' */ ' + 'if (Shumway.AVM1.Debugger.pause || Shumway.AVM1.Debugger.breakpoints.' + debugName + ') { debugger; }\n';
                }
                fn += 'while (!ectx.isEndOfActions) {\n' + 'if (checkTimeAfter <= 0) { checkTimeAfter = ' + CHECK_AVM1_HANG_EVERY + '; checkTimeout(ectx); }\n' + 'switch(position) {\n';
                blocks.forEach(function (b) {
                    fn += ' case ' + b.label + ':\n';
                    b.items.forEach(function (item, index) {
                        fn += _this.convertAction(item, uniqueId++, res, index, ir);
                    });
                    fn += '  position = ' + b.jump + ';\n' + '  checkTimeAfter -= ' + b.items.length + ';\n' + '  break;\n';
                });
                fn += ' default: ectx.isEndOfActions = true; break;\n}\n}\n' + 'return stack.pop();};';
                fn += '//# sourceURL=avm1gen-' + debugName;
                return (new Function('calls', 'res', 'checkTimeout', fn))(ActionsDataCompiler.cachedCalls, res, this.checkAvm1Timeout);
            };
            return ActionsDataCompiler;
        })();
        var ActionTracerFactory = (function () {
            function ActionTracerFactory() {
            }
            ActionTracerFactory.get = function () {
                return AVM1.avm1TraceEnabled.value ? ActionTracerFactory.tracer : ActionTracerFactory.nullTracer;
            };
            ActionTracerFactory.tracer = (function () {
                var indentation = 0;
                return {
                    print: function (parsedAction, stack) {
                        var position = parsedAction.position;
                        var actionCode = parsedAction.actionCode;
                        var actionName = parsedAction.actionName;
                        var stackDump = [];
                        for (var q = 0; q < stack.length; q++) {
                            var item = stack[q];
                            if (item && typeof item === 'object') {
                                var constr = item.asGetPublicProperty('__constructor__');
                                stackDump.push('[' + (constr ? constr.name : 'Object') + ']');
                            }
                            else {
                                stackDump.push(item);
                            }
                        }
                        var indent = new Array(indentation + 1).join('..');
                        console.log('AVM1 trace: ' + indent + position + ': ' + actionName + '(' + actionCode.toString(16) + '), ' + 'stack=' + stackDump);
                    },
                    indent: function () {
                        indentation++;
                    },
                    unindent: function () {
                        indentation--;
                    },
                    message: function (msg) {
                        console.log('AVM1 trace: ------- ' + msg);
                    }
                };
            })();
            ActionTracerFactory.nullTracer = {
                print: function (parsedAction, stack) {
                },
                indent: function () {
                },
                unindent: function () {
                },
                message: function (msg) {
                }
            };
            return ActionTracerFactory;
        })();
    })(AVM1 = Shumway.AVM1 || (Shumway.AVM1 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM1;
    (function (AVM1) {
        var Lib;
        (function (Lib) {
            var flash = Shumway.AVM2.AS.flash;
            var AVM1EventHandler = (function () {
                function AVM1EventHandler(propertyName, eventName, argsConverter) {
                    if (argsConverter === void 0) { argsConverter = null; }
                    this.propertyName = propertyName;
                    this.eventName = eventName;
                    this.argsConverter = argsConverter;
                }
                AVM1EventHandler.prototype.onBind = function (target) {
                };
                AVM1EventHandler.prototype.onUnbind = function (target) {
                };
                return AVM1EventHandler;
            })();
            Lib.AVM1EventHandler = AVM1EventHandler;
            var AVM1NativeObject = (function () {
                function AVM1NativeObject() {
                }
                Object.defineProperty(AVM1NativeObject.prototype, "context", {
                    get: function () {
                        return this._context;
                    },
                    enumerable: true,
                    configurable: true
                });
                AVM1NativeObject.prototype.initAVM1ObjectInstance = function (context) {
                    release && Shumway.Debug.assert(context);
                    this._context = context;
                };
                return AVM1NativeObject;
            })();
            Lib.AVM1NativeObject = AVM1NativeObject;
            var AVM1SymbolBase = (function (_super) {
                __extends(AVM1SymbolBase, _super);
                function AVM1SymbolBase() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(AVM1SymbolBase.prototype, "isAVM1Instance", {
                    get: function () {
                        return !!this._as3Object;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1SymbolBase.prototype, "as3Object", {
                    get: function () {
                        return this._as3Object;
                    },
                    enumerable: true,
                    configurable: true
                });
                AVM1SymbolBase.prototype.initAVM1SymbolInstance = function (context, as3Object) {
                    this.initAVM1ObjectInstance(context);
                    release && Shumway.Debug.assert(as3Object);
                    this._as3Object = as3Object;
                };
                AVM1SymbolBase.prototype.bindEvents = function (events, autoUnbind) {
                    if (autoUnbind === void 0) { autoUnbind = true; }
                    this._events = events;
                    var eventsMap = Object.create(null);
                    this._eventsMap = eventsMap;
                    this._eventsListeners = Object.create(null);
                    var observer = this;
                    var context = this.context;
                    events.forEach(function (event) {
                        eventsMap[event.propertyName] = event;
                        context.registerEventPropertyObserver(event.propertyName, observer);
                        observer._updateEvent(event);
                    });
                    if (autoUnbind) {
                        observer.as3Object.addEventListener('removedFromStage', function removedHandler() {
                            observer.as3Object.removeEventListener('removedFromStage', removedHandler);
                            observer.unbindEvents();
                        });
                    }
                };
                AVM1SymbolBase.prototype.unbindEvents = function () {
                    var events = this._events;
                    var observer = this;
                    var context = this.context;
                    events.forEach(function (event) {
                        context.unregisterEventPropertyObserver(event.propertyName, observer);
                        observer._removeEventListener(event);
                    });
                    this._events = null;
                    this._eventsMap = null;
                    this._eventsListeners = null;
                };
                AVM1SymbolBase.prototype.updateAllEvents = function () {
                    this._events.forEach(function (event) {
                        this._updateEvent(event);
                    }, this);
                };
                AVM1SymbolBase.prototype._updateEvent = function (event) {
                    if (avm1HasEventProperty(this.context, this, event.propertyName)) {
                        this._addEventListener(event);
                    }
                    else {
                        this._removeEventListener(event);
                    }
                };
                AVM1SymbolBase.prototype._addEventListener = function (event) {
                    var listener = this._eventsListeners[event.propertyName];
                    if (!listener) {
                        listener = function avm1EventHandler() {
                            var args = event.argsConverter ? event.argsConverter.apply(null, arguments) : null;
                            avm1BroadcastEvent(this.context, this, event.propertyName, args);
                        }.bind(this);
                        this.as3Object.addEventListener(event.eventName, listener);
                        event.onBind(this);
                        this._eventsListeners[event.propertyName] = listener;
                    }
                };
                AVM1SymbolBase.prototype._removeEventListener = function (event) {
                    var listener = this._eventsListeners[event.propertyName];
                    if (listener) {
                        event.onUnbind(this);
                        this.as3Object.removeEventListener(event.eventName, listener);
                        this._eventsListeners[event.propertyName] = null;
                    }
                };
                AVM1SymbolBase.prototype.onEventPropertyModified = function (propertyName) {
                    var event = this._eventsMap[propertyName];
                    this._updateEvent(event);
                };
                return AVM1SymbolBase;
            })(AVM1NativeObject);
            Lib.AVM1SymbolBase = AVM1SymbolBase;
            function avm1HasEventProperty(context, target, propertyName) {
                if (context.utils.hasProperty(target, propertyName)) {
                    return true;
                }
                var _listeners = context.utils.getProperty(target, '_listeners');
                if (!_listeners) {
                    return false;
                }
                return _listeners.some(function (listener) {
                    return context.utils.hasProperty(listener, propertyName);
                });
            }
            Lib.avm1HasEventProperty = avm1HasEventProperty;
            function avm1BroadcastEvent(context, target, propertyName, args) {
                if (args === void 0) { args = null; }
                var handler = context.utils.getProperty(target, propertyName);
                if (Shumway.isFunction(handler)) {
                    handler.apply(target, args);
                }
                var _listeners = context.utils.getProperty(this, '_listeners');
                if (Array.isArray(_listeners)) {
                    _listeners.forEach(function (listener) {
                        var handlerOnListener = context.utils.getProperty(listener, propertyName);
                        if (Shumway.isFunction(handlerOnListener)) {
                            handlerOnListener.apply(target, args);
                        }
                    });
                }
            }
            Lib.avm1BroadcastEvent = avm1BroadcastEvent;
            var AVM1Utils = (function () {
                function AVM1Utils() {
                }
                AVM1Utils.addProperty = function (obj, propertyName, getter, setter, enumerable) {
                    if (enumerable === void 0) { enumerable = true; }
                    obj.asDefinePublicProperty(propertyName, {
                        get: getter,
                        set: setter || undefined,
                        enumerable: enumerable,
                        configurable: true
                    });
                };
                AVM1Utils.resolveTarget = function (target_mc) {
                    if (target_mc === void 0) { target_mc = undefined; }
                    return AVM1.AVM1Context.instance.resolveTarget(target_mc);
                };
                AVM1Utils.resolveMovieClip = function (target) {
                    if (target === void 0) { target = undefined; }
                    return target ? AVM1.AVM1Context.instance.resolveTarget(target) : undefined;
                };
                AVM1Utils.resolveLevel = function (level) {
                    level = +level;
                    return AVM1.AVM1Context.instance.resolveLevel(level);
                };
                Object.defineProperty(AVM1Utils, "currentStage", {
                    get: function () {
                        return AVM1.AVM1Context.instance.root.as3Object.stage;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1Utils, "swfVersion", {
                    get: function () {
                        return AVM1.AVM1Context.instance.loaderInfo.swfVersion;
                    },
                    enumerable: true,
                    configurable: true
                });
                AVM1Utils.getTarget = function (mc) {
                    var nativeObject = mc.as3Object;
                    if (nativeObject === nativeObject.root) {
                        return '/';
                    }
                    var path = '';
                    do {
                        path = '/' + nativeObject.name + path;
                        nativeObject = nativeObject.parent;
                    } while (nativeObject !== nativeObject.root);
                    return path;
                };
                return AVM1Utils;
            })();
            Lib.AVM1Utils = AVM1Utils;
            function createAVM1Object(ctor, nativeObject, context) {
                var proto = ctor.prototype;
                while (proto && !proto.initAVM1SymbolInstance) {
                    proto = proto.asGetPublicProperty('__proto__');
                }
                release || Shumway.Debug.assert(proto);
                var avm1Object = Object.create(proto);
                avm1Object.asSetPublicProperty('__proto__', ctor.asGetPublicProperty('prototype'));
                avm1Object.asDefinePublicProperty('__constructor__', {
                    value: ctor,
                    writable: true,
                    enumerable: false,
                    configurable: false
                });
                nativeObject._as2Object = avm1Object;
                avm1Object.initAVM1SymbolInstance(context, nativeObject);
                ctor.call(avm1Object);
                return avm1Object;
            }
            function getAVM1Object(as3Object, context) {
                if (!as3Object) {
                    return null;
                }
                if (as3Object._as2Object) {
                    return as3Object._as2Object;
                }
                if (flash.display.MovieClip.isType(as3Object)) {
                    if (as3Object._avm1SymbolClass) {
                        return createAVM1Object(as3Object._avm1SymbolClass, as3Object, context);
                    }
                    return createAVM1Object(context.globals.MovieClip, as3Object, context);
                }
                if (flash.display.SimpleButton.isType(as3Object)) {
                    return createAVM1Object(context.globals.Button, as3Object, context);
                }
                if (flash.text.TextField.isType(as3Object)) {
                    return createAVM1Object(context.globals.TextField, as3Object, context);
                }
                if (flash.display.BitmapData.isType(as3Object)) {
                    return new as3Object;
                }
                return null;
            }
            Lib.getAVM1Object = getAVM1Object;
            function wrapAVM1Object(obj, members) {
                var wrap;
                if (typeof obj === 'function') {
                    wrap = function () {
                        return obj.apply(this, arguments);
                    };
                    Object.getOwnPropertyNames(obj).forEach(function (name) {
                        if (wrap.hasOwnProperty(name)) {
                            return;
                        }
                        Object.defineProperty(wrap, name, Object.getOwnPropertyDescriptor(obj, name));
                    });
                }
                else {
                    Shumway.Debug.assert(typeof obj === 'object' && obj !== null);
                    wrap = Object.create(obj);
                }
                if (!members) {
                    return wrap;
                }
                members.forEach(function (memberName) {
                    var definedAs = memberName;
                    var i = memberName.indexOf('=>');
                    if (i >= 0) {
                        definedAs = memberName.substring(0, i);
                        memberName = memberName.substring(i + 2);
                    }
                    var getter = function () {
                        return this[memberName];
                    };
                    var setter = function (value) {
                        this[memberName] = value;
                    };
                    wrap.asDefinePublicProperty(definedAs, {
                        get: getter,
                        set: setter,
                        enumerable: false,
                        configurable: true
                    });
                });
                return wrap;
            }
            Lib.wrapAVM1Object = wrapAVM1Object;
            function wrapAVM1Class(fn, staticMembers, members) {
                var wrappedFn = wrapAVM1Object(fn, staticMembers);
                var prototype = fn.prototype;
                var wrappedPrototype = wrapAVM1Object(prototype, members);
                wrappedFn.asSetPublicProperty('prototype', wrappedPrototype);
                return wrappedFn;
            }
            Lib.wrapAVM1Class = wrapAVM1Class;
            var isAvm1ObjectMethodsInstalled = false;
            function installObjectMethods() {
                if (isAvm1ObjectMethodsInstalled) {
                    return;
                }
                isAvm1ObjectMethodsInstalled = true;
                var c = Shumway.AVM2.AS.ASObject, p = c.asGetPublicProperty('prototype');
                c.asSetPublicProperty('registerClass', function registerClass(name, theClass) {
                    AVM1.AVM1Context.instance.registerClass(name, theClass);
                });
                p.asDefinePublicProperty('addProperty', {
                    value: function addProperty(name, getter, setter) {
                        if (typeof name !== 'string' || name === '') {
                            return false;
                        }
                        if (typeof getter !== 'function') {
                            return false;
                        }
                        if (typeof setter !== 'function' && setter !== null) {
                            return false;
                        }
                        this.asDefinePublicProperty(name, {
                            get: getter,
                            set: setter || undefined,
                            configurable: true,
                            enumerable: true
                        });
                        return true;
                    },
                    writable: false,
                    enumerable: false,
                    configurable: false
                });
                Object.defineProperty(p, '__proto__avm1', {
                    value: null,
                    writable: true,
                    enumerable: false
                });
                p.asDefinePublicProperty('__proto__', {
                    get: function () {
                        return this.__proto__avm1;
                    },
                    set: function (proto) {
                        if (proto === this.__proto__avm1) {
                            return;
                        }
                        if (!proto) {
                            this.__proto__avm1 = null;
                            return;
                        }
                        var p = proto;
                        while (p) {
                            if (p === this) {
                                return;
                            }
                            p = p.__proto__avm1;
                        }
                        this.__proto__avm1 = proto;
                    },
                    enumerable: false,
                    configurable: false
                });
            }
            Lib.installObjectMethods = installObjectMethods;
            function initializeAVM1Object(as3Object, context, placeObjectTag) {
                var instanceAVM1 = getAVM1Object(as3Object, context);
                release || Shumway.Debug.assert(instanceAVM1);
                if (placeObjectTag.variableName) {
                    instanceAVM1.asSetPublicProperty('variable', placeObjectTag.variableName);
                }
                var events = placeObjectTag.events;
                if (!events) {
                    return;
                }
                for (var j = 0; j < events.length; j++) {
                    var swfEvent = events[j];
                    var actionsData;
                    if (swfEvent.actionsData) {
                        actionsData = new AVM1.AVM1ActionsData(swfEvent.actionsData, 's' + placeObjectTag.symbolId + 'e' + j);
                        swfEvent.actionsData = null;
                        swfEvent.compiled = actionsData;
                    }
                    else {
                        actionsData = swfEvent.compiled;
                    }
                    release || Shumway.Debug.assert(actionsData);
                    var handler = clipEventHandler.bind(null, actionsData, instanceAVM1);
                    var flags = swfEvent.flags;
                    for (var eventFlag in ClipEventMappings) {
                        eventFlag |= 0;
                        if (!(flags & (eventFlag | 0))) {
                            continue;
                        }
                        var eventName = ClipEventMappings[eventFlag];
                        switch (eventFlag) {
                            case 2048 /* Release */:
                            case 4096 /* ReleaseOutside */:
                            case 8192 /* RollOver */:
                            case 16384 /* RollOut */:
                                as3Object.buttonMode = true;
                        }
                        as3Object.addEventListener(eventName, handler);
                    }
                }
            }
            Lib.initializeAVM1Object = initializeAVM1Object;
            function clipEventHandler(actionsData, receiver) {
                return receiver.context.executeActions(actionsData, receiver);
            }
            var AVM1ClipEvents = Shumway.SWF.Parser.AVM1ClipEvents;
            var ClipEventMappings = Object.create(null);
            ClipEventMappings[1 /* Load */] = 'load';
            ClipEventMappings[2 /* EnterFrame */] = 'frameConstructed';
            ClipEventMappings[4 /* Unload */] = 'unload';
            ClipEventMappings[8 /* MouseMove */] = 'mouseMove';
            ClipEventMappings[16 /* MouseDown */] = 'mouseDown';
            ClipEventMappings[32 /* MouseUp */] = 'mouseUp';
            ClipEventMappings[64 /* KeyDown */] = 'keyDown';
            ClipEventMappings[128 /* KeyUp */] = 'keyUp';
            ClipEventMappings[256 /* Data */] = { toString: function () {
                Shumway.Debug.warning('Data ClipEvent not implemented');
            } };
            ClipEventMappings[512 /* Initialize */] = 'initialize';
            ClipEventMappings[1024 /* Press */] = 'mouseDown';
            ClipEventMappings[2048 /* Release */] = 'click';
            ClipEventMappings[4096 /* ReleaseOutside */] = 'releaseOutside';
            ClipEventMappings[8192 /* RollOver */] = 'mouseOver';
            ClipEventMappings[16384 /* RollOut */] = 'mouseOut';
            ClipEventMappings[32768 /* DragOver */] = { toString: function () {
                Shumway.Debug.warning('DragOver ClipEvent not implemented');
            } };
            ClipEventMappings[65536 /* DragOut */] = { toString: function () {
                Shumway.Debug.warning('DragOut ClipEvent not implemented');
            } };
            ClipEventMappings[131072 /* KeyPress */] = { toString: function () {
                Shumway.Debug.warning('KeyPress ClipEvent not implemented');
            } };
            ClipEventMappings[262144 /* Construct */] = 'construct';
        })(Lib = AVM1.Lib || (AVM1.Lib = {}));
    })(AVM1 = Shumway.AVM1 || (Shumway.AVM1 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM1;
    (function (AVM1) {
        var Lib;
        (function (Lib) {
            var notImplemented = Shumway.Debug.notImplemented;
            var somewhatImplemented = Shumway.Debug.somewhatImplemented;
            var forEachPublicProperty = Shumway.AVM2.Runtime.forEachPublicProperty;
            var assert = Shumway.Debug.assert;
            var flash = Shumway.AVM2.AS.flash;
            var _escape = jsGlobal.escape;
            var _internalTimeouts = [];
            var AVM1Globals = (function () {
                function AVM1Globals(context) {
                    this.fscommand = flash.system.FSCommand._fscommand;
                    this.getTimer = Shumway.AVM2.AS.FlashUtilScript_getTimer;
                    this.NaN = Number.NaN;
                    this.Infinity = Number.POSITIVE_INFINITY;
                    this.isFinite = isFinite;
                    this.isNaN = isNaN;
                    this.parseFloat = parseFloat;
                    this.parseInt = parseInt;
                    this.Object = Shumway.AVM2.AS.ASObject;
                    this.Function = Shumway.AVM2.AS.ASFunction;
                    this.Array = Shumway.AVM2.AS.ASArray;
                    this.Number = Shumway.AVM2.AS.ASNumber;
                    this.Math = Shumway.AVM2.AS.ASMath;
                    this.Boolean = Shumway.AVM2.AS.ASBoolean;
                    this.Date = Shumway.AVM2.AS.ASDate;
                    this.RegExp = Shumway.AVM2.AS.ASRegExp;
                    this.String = Shumway.AVM2.AS.ASString;
                    this.undefined = undefined;
                    this.MovieClip = Lib.AVM1MovieClip.createAVM1Class();
                    this.AsBroadcaster = Lib.AVM1Broadcaster.createAVM1Class();
                    this.System = Lib.AVM1System.createAVM1Class();
                    this.Stage = Lib.AVM1Stage.createAVM1Class();
                    this.Button = Lib.AVM1Button.createAVM1Class();
                    this.TextField = Lib.AVM1TextField.createAVM1Class();
                    this.Color = Lib.AVM1Color.createAVM1Class();
                    this.Key = Lib.AVM1Key.createAVM1Class();
                    this.Mouse = Lib.AVM1Mouse.createAVM1Class();
                    this.MovieClipLoader = Lib.AVM1MovieClipLoader.createAVM1Class();
                    this.Sound = Lib.AVM1Sound.createAVM1Class();
                    this.SharedObject = flash.net.SharedObject;
                    this.ContextMenu = flash.ui.ContextMenu;
                    this.ContextMenuItem = flash.ui.ContextMenuItem;
                    this.TextFormat = Lib.AVM1TextFormat.createAVM1Class();
                    AVM1Globals.instance = this;
                    this._global = this;
                    var classes = ['Object', 'Function', 'Array', 'Number', 'Math', 'Boolean', 'Date', 'RegExp', 'String'];
                    classes.forEach(function (className) {
                        Shumway.AVM2.Runtime.AVM2.instance.systemDomain.getClass(className);
                    });
                    var swfVersion = context.loaderInfo.swfVersion;
                    if (swfVersion >= 8) {
                        this._initializeFlashObject();
                    }
                    this.AsBroadcaster.initializeWithContext(this.Stage, context);
                    this.AsBroadcaster.initializeWithContext(this.Key, context);
                    this.AsBroadcaster.initializeWithContext(this.Mouse, context);
                }
                AVM1Globals.createAVM1Class = function () {
                    return Lib.wrapAVM1Class(AVM1Globals, [], ['_global', 'flash', 'ASSetPropFlags', 'call', 'chr', 'clearInterval', 'clearTimeout', 'duplicateMovieClip', 'fscommand', 'escape', 'unescape', 'getTimer', 'getURL', 'getVersion', 'gotoAndPlay', 'gotoAndStop', 'ifFrameLoaded', 'int', 'length=>length_', 'loadMovie', 'loadMovieNum', 'loadVariables', 'loadVariablesNum', 'mbchr', 'mblength', 'mbord', 'mbsubstring', 'nextFrame', 'nextScene', 'ord', 'play', 'prevFrame', 'prevScene', 'print', 'printAsBitmap', 'printAsBitmapNum', 'printNum', 'random', 'removeMovieClip', 'setInterval', 'setTimeout', 'showRedrawRegions', 'startDrag', 'stop', 'stopDrag', 'substring', 'targetPath', 'toggleHighQuality', 'trace', 'unloadMovie', 'unloadMovieNum', 'updateAfterEvent', 'NaN', 'Infinity', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'Object', 'Function', 'Array', 'Number', 'Math', 'Boolean', 'Date', 'RegExp', 'String', 'MovieClip', 'AsBroadcaster', 'System', 'Stage', 'Button', 'TextField', 'Color', 'Key', 'Mouse', 'MovieClipLoader', 'Sound', 'SharedObject', 'ContextMenu', 'ContextMenuItem', 'TextFormat', 'toString', '$asfunction=>asfunction']);
                };
                AVM1Globals.prototype.asfunction = function (link) {
                    notImplemented('AVM1Globals.$asfunction');
                };
                AVM1Globals.prototype.ASSetPropFlags = function (obj, children, flags, allowFalse) {
                };
                AVM1Globals.prototype.call = function (frame) {
                    var nativeTarget = Lib.AVM1Utils.resolveTarget();
                    var as3Object = nativeTarget.as3Object;
                    var frameNum = as3Object._getAbsFrameNumber(frame, null);
                    if (frameNum === undefined) {
                        return;
                    }
                    as3Object.callFrame(frameNum);
                };
                AVM1Globals.prototype.chr = function (number) {
                    return String.fromCharCode(number);
                };
                AVM1Globals.prototype.clearInterval = function (id) {
                    var internalId = _internalTimeouts[id - 1];
                    if (internalId) {
                        clearInterval(internalId);
                        delete _internalTimeouts[id - 1];
                    }
                };
                AVM1Globals.prototype.clearTimeout = function (id) {
                    var internalId = _internalTimeouts[id - 1];
                    if (internalId) {
                        clearTimeout(internalId);
                        delete _internalTimeouts[id - 1];
                    }
                };
                AVM1Globals.prototype.duplicateMovieClip = function (target, newname, depth) {
                    var nativeTarget = Lib.AVM1Utils.resolveTarget(target);
                    nativeTarget.duplicateMovieClip(newname, depth, null);
                };
                AVM1Globals.prototype.getAVM1Property = function (target, index) {
                    var nativeTarget = Lib.AVM1Utils.resolveTarget(target);
                    return nativeTarget[PropertiesIndexMap[index]];
                };
                AVM1Globals.prototype.getURL = function (url, target, method) {
                    var request = new flash.net.URLRequest(String(url));
                    if (method) {
                        request.method = method;
                    }
                    if (typeof target === 'string' && target.indexOf('_level') === 0) {
                        this.loadMovieNum(url, +target.substr(6), method);
                        return;
                    }
                    Shumway.AVM2.AS.FlashNetScript_navigateToURL(request, target);
                };
                AVM1Globals.prototype.getVersion = function () {
                    return flash.system.Capabilities.version;
                };
                AVM1Globals.prototype._addToPendingScripts = function (subject, fn, args) {
                    if (args === void 0) { args = null; }
                    release || assert(fn, 'invalid function in _addToPendingScripts');
                    var currentContext = AVM1.AVM1Context.instance;
                    var defaultTarget = currentContext.resolveTarget(undefined);
                    currentContext.addToPendingScripts(function () {
                        currentContext.enterContext(function () {
                            try {
                                fn.apply(subject, args);
                            }
                            catch (ex) {
                                console.error('AVM1 pending script error: ' + ex.message);
                            }
                        }, defaultTarget);
                    });
                };
                AVM1Globals.prototype.escape = function (str) {
                    var result = encodeURIComponent(str);
                    return result.replace(/!|'|\(|\)|\*|-|\.|_|~/g, function (char) {
                        switch (char) {
                            case '*':
                                return '%2A';
                            case '-':
                                return '%2D';
                            case '.':
                                return '%2E';
                            case '_':
                                return '%5F';
                            default:
                                return _escape(char);
                        }
                    });
                };
                AVM1Globals.prototype.unescape = function (str) {
                    return decodeURIComponent(str);
                };
                AVM1Globals.prototype.gotoAndPlay = function (scene, frame) {
                    var nativeTarget = Lib.AVM1Utils.resolveTarget();
                    if (arguments.length < 2) {
                        this._addToPendingScripts(nativeTarget, nativeTarget.gotoAndPlay, [arguments[0]]);
                    }
                    else {
                        this._addToPendingScripts(nativeTarget, nativeTarget.gotoAndPlay, [arguments[1], arguments[0]]);
                    }
                };
                AVM1Globals.prototype.gotoAndStop = function (scene, frame) {
                    var nativeTarget = Lib.AVM1Utils.resolveTarget();
                    if (arguments.length < 2) {
                        this._addToPendingScripts(nativeTarget, nativeTarget.gotoAndStop, [arguments[0]]);
                    }
                    else {
                        this._addToPendingScripts(nativeTarget, nativeTarget.gotoAndStop, [arguments[1], arguments[0]]);
                    }
                };
                AVM1Globals.prototype.ifFrameLoaded = function (scene, frame) {
                    var nativeTarget = Lib.AVM1Utils.resolveTarget();
                    var frameNum = arguments.length < 2 ? arguments[0] : arguments[1];
                    var framesLoaded = nativeTarget._framesloaded;
                    var totalFrames = nativeTarget._totalframes;
                    return Math.min(frameNum + 1, totalFrames) <= framesLoaded;
                };
                AVM1Globals.prototype.int = function (value) {
                    return value | 0;
                };
                AVM1Globals.prototype.length_ = function (expression) {
                    return ('' + expression).length;
                };
                AVM1Globals.prototype.loadMovie = function (url, target, method) {
                    if (url && url.toLowerCase().indexOf('fscommand:') === 0) {
                        this.fscommand(url.substring('fscommand:'.length), target);
                        return;
                    }
                    var loadLevel = typeof target === 'string' && target.indexOf('_level') === 0;
                    var levelNumber;
                    if (loadLevel) {
                        var levelStr = target.charAt(6);
                        levelNumber = parseInt(levelStr, 10);
                        loadLevel = levelNumber.toString() === levelStr;
                    }
                    var loader = new flash.display.Loader();
                    if (loadLevel) {
                        this._setLevel(levelNumber, loader);
                        var request = new flash.net.URLRequest(url);
                        if (method) {
                            request.method = method;
                        }
                        loader.load(request);
                    }
                    else {
                        var nativeTarget = Lib.AVM1Utils.resolveTarget(target);
                        nativeTarget.loadMovie(url, method);
                    }
                };
                AVM1Globals.prototype._setLevel = function (level, loader) {
                    level = level >>> 0;
                };
                AVM1Globals.prototype.loadMovieNum = function (url, level, method) {
                    if (url && url.toLowerCase().indexOf('fscommand:') === 0) {
                        return this.fscommand(url.substring('fscommand:'.length));
                    }
                    var loader = new flash.display.Loader();
                    this._setLevel(level, loader);
                    var request = new flash.net.URLRequest(url);
                    if (method) {
                        request.method = method;
                    }
                    loader.load(request);
                };
                AVM1Globals.prototype.loadVariables = function (url, target, method) {
                    if (method === void 0) { method = ''; }
                    var nativeTarget = Lib.AVM1Utils.resolveTarget(target);
                    this._loadVariables(nativeTarget, url, method);
                };
                AVM1Globals.prototype.loadVariablesNum = function (url, level, method) {
                    if (method === void 0) { method = ''; }
                    var nativeTarget = Lib.AVM1Utils.resolveLevel(level);
                    this._loadVariables(nativeTarget, url, method);
                };
                AVM1Globals.prototype._loadVariables = function (nativeTarget, url, method) {
                    var request = new flash.net.URLRequest(url);
                    if (method) {
                        request.method = method;
                    }
                    var context = AVM1.AVM1Context.instance;
                    var loader = new flash.net.URLLoader(request);
                    loader._ignoreDecodeErrors = true;
                    loader.dataFormat = 'variables';
                    function completeHandler(event) {
                        loader.removeEventListener(flash.events.Event.COMPLETE, completeHandler);
                        release || Shumway.Debug.assert(typeof loader.data === 'object');
                        forEachPublicProperty(loader.data, function (key, value) {
                            context.utils.setProperty(nativeTarget, key, value);
                        });
                        if (nativeTarget instanceof Lib.AVM1MovieClip) {
                            Lib.avm1BroadcastEvent(context, nativeTarget, 'onData');
                        }
                    }
                    loader.addEventListener(flash.events.Event.COMPLETE, completeHandler);
                };
                AVM1Globals.prototype.mbchr = function (number) {
                    return String.fromCharCode(number);
                };
                AVM1Globals.prototype.mblength = function (expression) {
                    return ('' + expression).length;
                };
                AVM1Globals.prototype.mbord = function (character) {
                    return ('' + character).charCodeAt(0);
                };
                AVM1Globals.prototype.mbsubstring = function (value, index, count) {
                    if (index !== (0 | index) || count !== (0 | count)) {
                        return '';
                    }
                    return ('' + value).substr(index, count);
                };
                AVM1Globals.prototype.nextFrame = function () {
                    var nativeTarget = Lib.AVM1Utils.resolveTarget();
                    this._addToPendingScripts(nativeTarget, nativeTarget.nextFrame);
                };
                AVM1Globals.prototype.nextScene = function () {
                    var nativeTarget = Lib.AVM1Utils.resolveTarget();
                    this._addToPendingScripts(nativeTarget, nativeTarget.nextScene);
                };
                AVM1Globals.prototype.ord = function (character) {
                    return ('' + character).charCodeAt(0);
                };
                AVM1Globals.prototype.play = function () {
                    var nativeTarget = Lib.AVM1Utils.resolveTarget();
                    nativeTarget.play();
                };
                AVM1Globals.prototype.prevFrame = function () {
                    var nativeTarget = Lib.AVM1Utils.resolveTarget();
                    this._addToPendingScripts(nativeTarget, nativeTarget.prevFrame);
                };
                AVM1Globals.prototype.prevScene = function () {
                    var nativeTarget = Lib.AVM1Utils.resolveTarget();
                    this._addToPendingScripts(nativeTarget, nativeTarget.prevScene);
                };
                AVM1Globals.prototype.print = function (target, boundingBox) {
                    notImplemented('AVM1Globals.print');
                };
                AVM1Globals.prototype.printAsBitmap = function (target, boundingBox) {
                    notImplemented('AVM1Globals.printAsBitmap');
                };
                AVM1Globals.prototype.printAsBitmapNum = function (level, boundingBox) {
                    notImplemented('AVM1Globals.printAsBitmapNum');
                };
                AVM1Globals.prototype.printNum = function (level, bondingBox) {
                    notImplemented('AVM1Globals.printNum');
                };
                AVM1Globals.prototype.random = function (value) {
                    return 0 | (Math.random() * (0 | value));
                };
                AVM1Globals.prototype.removeMovieClip = function (target) {
                    var nativeTarget = Lib.AVM1Utils.resolveTarget(target);
                    nativeTarget.removeMovieClip();
                };
                AVM1Globals.prototype.setInterval = function () {
                    if (arguments.length < 2) {
                        return undefined;
                    }
                    var args = [];
                    if (typeof arguments[0] === 'function') {
                        args = arguments;
                    }
                    else {
                        if (arguments.length < 3) {
                            return undefined;
                        }
                        var obj = arguments[0];
                        var funName = arguments[1];
                        if (!(obj && typeof obj === 'object' && typeof funName === 'string')) {
                            return undefined;
                        }
                        args[0] = function () {
                            obj.asCallPublicProperty(funName, arguments);
                        };
                        for (var i = 2; i < arguments.length; i++) {
                            args.push(arguments[i]);
                        }
                    }
                    args[1] |= 0;
                    var internalId = setInterval.apply(null, args);
                    return _internalTimeouts.push(internalId);
                };
                AVM1Globals.prototype.setAVM1Property = function (target, index, value) {
                    var nativeTarget = Lib.AVM1Utils.resolveTarget(target);
                    nativeTarget[PropertiesIndexMap[index]] = value;
                };
                AVM1Globals.prototype.setTimeout = function () {
                    if (arguments.length < 2 || typeof arguments[0] !== 'function') {
                        return undefined;
                    }
                    arguments[1] |= 0;
                    var internalId = setTimeout.apply(null, arguments);
                    return _internalTimeouts.push(internalId);
                };
                AVM1Globals.prototype.showRedrawRegions = function (enable, color) {
                    notImplemented('AVM1Globals.showRedrawRegions');
                };
                AVM1Globals.prototype.startDrag = function (target, lock, left, top, right, bottom) {
                    var nativeTarget = Lib.AVM1Utils.resolveTarget(target);
                    nativeTarget.startDrag(lock, arguments.length < 3 ? null : new flash.geom.Rectangle(left, top, right - left, bottom - top));
                };
                AVM1Globals.prototype.stop = function () {
                    var nativeTarget = Lib.AVM1Utils.resolveTarget();
                    nativeTarget.stop();
                };
                AVM1Globals.prototype.stopAllSounds = function () {
                    flash.media.SoundMixer.stopAll();
                };
                AVM1Globals.prototype.stopDrag = function (target) {
                    var nativeTarget = Lib.AVM1Utils.resolveTarget(target);
                    nativeTarget.stopDrag();
                };
                AVM1Globals.prototype.substring = function (value, index, count) {
                    return this.mbsubstring(value, index, count);
                };
                AVM1Globals.prototype.targetPath = function (target) {
                    var nativeTarget = Lib.AVM1Utils.resolveTarget(target);
                    return nativeTarget._target;
                };
                AVM1Globals.prototype.toggleHighQuality = function () {
                    notImplemented('AVM1Globals.toggleHighQuality');
                };
                AVM1Globals.prototype.trace = function (expression) {
                    Shumway.AVM2.AS.Natives.print(expression);
                };
                AVM1Globals.prototype.unloadMovie = function (target) {
                    var nativeTarget = Lib.AVM1Utils.resolveTarget(target);
                    nativeTarget.unloadMovie();
                };
                AVM1Globals.prototype.unloadMovieNum = function (level) {
                    var nativeTarget = Lib.AVM1Utils.resolveLevel(level);
                    nativeTarget.unloadMovie();
                };
                AVM1Globals.prototype.updateAfterEvent = function () {
                    somewhatImplemented('AVM1Globals.updateAfterEvent');
                };
                AVM1Globals.prototype._initializeFlashObject = function () {
                    this.flash = {};
                    this.flash.asSetPublicProperty('_MovieClip', this.MovieClip);
                    var display = {};
                    display.asSetPublicProperty('BitmapData', Lib.AVM1BitmapData.createAVM1Class());
                    this.flash.asSetPublicProperty('display', display);
                    var external = {};
                    external.asSetPublicProperty('ExternalInterface', Lib.AVM1ExternalInterface.createAVM1Class());
                    this.flash.asSetPublicProperty('external', external);
                    var filters = {};
                    this.flash.asSetPublicProperty('filters', filters);
                    var geom = {};
                    geom.asSetPublicProperty('ColorTransform', flash.geom.ColorTransform);
                    geom.asSetPublicProperty('Matrix', flash.geom.Matrix);
                    geom.asSetPublicProperty('Point', flash.geom.Point);
                    geom.asSetPublicProperty('Rectangle', flash.geom.Rectangle);
                    geom.asSetPublicProperty('Transform', Lib.AVM1Transform.createAVM1Class());
                    this.flash.asSetPublicProperty('geom', geom);
                    var text = {};
                    this.flash.asSetPublicProperty('text', text);
                };
                AVM1Globals.prototype.toString = function () {
                    return '[type Object]';
                };
                return AVM1Globals;
            })();
            Lib.AVM1Globals = AVM1Globals;
            var PropertiesIndexMap = [
                '_x',
                '_y',
                '_xscale',
                '_yscale',
                '_currentframe',
                '_totalframes',
                '_alpha',
                '_visible',
                '_width',
                '_height',
                '_rotation',
                '_target',
                '_framesloaded',
                '_name',
                '_droptarget',
                '_url',
                '_highquality',
                '_focusrect',
                '_soundbuftime',
                '_quality',
                '_xmouse',
                '_ymouse'
            ];
        })(Lib = AVM1.Lib || (AVM1.Lib = {}));
    })(AVM1 = Shumway.AVM1 || (Shumway.AVM1 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM1;
    (function (AVM1) {
        var Lib;
        (function (Lib) {
            function _updateAllSymbolEvents(symbolInstance) {
                if (!symbolInstance.isAVM1Instance) {
                    return;
                }
                symbolInstance.updateAllEvents();
            }
            var AVM1Broadcaster = (function () {
                function AVM1Broadcaster() {
                }
                AVM1Broadcaster.setAVM1Context = function (context) {
                    this._context = context;
                };
                AVM1Broadcaster.createAVM1Class = function () {
                    return Lib.wrapAVM1Class(AVM1Broadcaster, ['initialize'], []);
                };
                AVM1Broadcaster.initialize = function (obj) {
                    AVM1Broadcaster.initializeWithContext(obj, AVM1.AVM1Context.instance);
                };
                AVM1Broadcaster.initializeWithContext = function (obj, context) {
                    obj.asSetPublicProperty('_listeners', []);
                    obj.asSetPublicProperty('broadcastMessage', function broadcastMessage(eventName) {
                        var args = [];
                        for (var _i = 1; _i < arguments.length; _i++) {
                            args[_i - 1] = arguments[_i];
                        }
                        Lib.avm1BroadcastEvent(context, this, eventName, args);
                    });
                    obj.asSetPublicProperty('addListener', function addListener(listener) {
                        var listeners = context.utils.getProperty(this, '_listeners');
                        listeners.push(listener);
                        _updateAllSymbolEvents(this);
                    });
                    obj.asSetPublicProperty('removeListener', function removeListener(listener) {
                        var listeners = context.utils.getProperty(this, '_listeners');
                        var i = listeners.indexOf(listener);
                        if (i < 0) {
                            return false;
                        }
                        listeners.splice(i, 1);
                        _updateAllSymbolEvents(this);
                        return true;
                    });
                };
                return AVM1Broadcaster;
            })();
            Lib.AVM1Broadcaster = AVM1Broadcaster;
        })(Lib = AVM1.Lib || (AVM1.Lib = {}));
    })(AVM1 = Shumway.AVM1 || (Shumway.AVM1 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM1;
    (function (AVM1) {
        var Lib;
        (function (Lib) {
            var AVM1Key = (function () {
                function AVM1Key() {
                }
                AVM1Key.createAVM1Class = function () {
                    return Lib.wrapAVM1Class(AVM1Key, ['DOWN', 'LEFT', 'RIGHT', 'UP', 'isDown'], []);
                };
                AVM1Key._bind = function (stage, context) {
                    stage.addEventListener('keyDown', function (e) {
                        var keyCode = e.asGetPublicProperty('keyCode');
                        AVM1Key._lastKeyCode = keyCode;
                        AVM1Key._keyStates[keyCode] = 1;
                        context.globals.Key.asCallPublicProperty('broadcastMessage', ['onKeyDown']);
                    }, false);
                    stage.addEventListener('keyUp', function (e) {
                        var keyCode = e.asGetPublicProperty('keyCode');
                        AVM1Key._lastKeyCode = keyCode;
                        delete AVM1Key._keyStates[keyCode];
                        context.globals.Key.asCallPublicProperty('broadcastMessage', ['onKeyUp']);
                    }, false);
                };
                AVM1Key.isDown = function (code) {
                    return !!AVM1Key._keyStates[code];
                };
                AVM1Key.DOWN = 40;
                AVM1Key.LEFT = 37;
                AVM1Key.RIGHT = 39;
                AVM1Key.UP = 38;
                AVM1Key._keyStates = [];
                AVM1Key._lastKeyCode = 0;
                return AVM1Key;
            })();
            Lib.AVM1Key = AVM1Key;
        })(Lib = AVM1.Lib || (AVM1.Lib = {}));
    })(AVM1 = Shumway.AVM1 || (Shumway.AVM1 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM1;
    (function (AVM1) {
        var Lib;
        (function (Lib) {
            var AVM1Mouse = (function () {
                function AVM1Mouse() {
                }
                AVM1Mouse.createAVM1Class = function () {
                    return Lib.wrapAVM1Class(AVM1Mouse, ['show', 'hide'], []);
                };
                AVM1Mouse._bind = function (stage, context) {
                    stage.addEventListener('mouseDown', function (e) {
                        context.globals.Mouse.asCallPublicProperty('broadcastMessage', ['onMouseDown']);
                    }, false);
                    stage.addEventListener('mouseMove', function (e) {
                        context.globals.Mouse.asCallPublicProperty('broadcastMessage', ['onMouseMove']);
                    }, false);
                    stage.addEventListener('mouseOut', function (e) {
                        context.globals.Mouse.asCallPublicProperty('broadcastMessage', ['onMouseMove']);
                    }, false);
                    stage.addEventListener('mouseUp', function (e) {
                        context.globals.Mouse.asCallPublicProperty('broadcastMessage', ['onMouseUp']);
                    }, false);
                };
                AVM1Mouse.hide = function () {
                };
                AVM1Mouse.show = function () {
                };
                return AVM1Mouse;
            })();
            Lib.AVM1Mouse = AVM1Mouse;
        })(Lib = AVM1.Lib || (AVM1.Lib = {}));
    })(AVM1 = Shumway.AVM1 || (Shumway.AVM1 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM1;
    (function (AVM1) {
        var Lib;
        (function (Lib) {
            var AVM1Stage = (function () {
                function AVM1Stage() {
                }
                AVM1Stage.createAVM1Class = function () {
                    return Lib.wrapAVM1Class(AVM1Stage, ['align', 'displayState', 'fullScreenSourceRect', 'height', 'scaleMode', 'showMenu', 'width'], []);
                };
                Object.defineProperty(AVM1Stage, "align", {
                    get: function () {
                        return Lib.AVM1Utils.currentStage.align;
                    },
                    set: function (value) {
                        Lib.AVM1Utils.currentStage.align = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1Stage, "displayState", {
                    get: function () {
                        return Lib.AVM1Utils.currentStage.displayState;
                    },
                    set: function (value) {
                        Lib.AVM1Utils.currentStage.displayState = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1Stage, "fullScreenSourceRect", {
                    get: function () {
                        return Lib.AVM1Utils.currentStage.fullScreenSourceRect;
                    },
                    set: function (value) {
                        Lib.AVM1Utils.currentStage.fullScreenSourceRect = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1Stage, "height", {
                    get: function () {
                        return Lib.AVM1Utils.currentStage.stageHeight;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1Stage, "scaleMode", {
                    get: function () {
                        return Lib.AVM1Utils.currentStage.scaleMode;
                    },
                    set: function (value) {
                        Lib.AVM1Utils.currentStage.scaleMode = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1Stage, "showMenu", {
                    get: function () {
                        return Lib.AVM1Utils.currentStage.showDefaultContextMenu;
                    },
                    set: function (value) {
                        Lib.AVM1Utils.currentStage.showDefaultContextMenu = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1Stage, "width", {
                    get: function () {
                        return Lib.AVM1Utils.currentStage.stageWidth;
                    },
                    enumerable: true,
                    configurable: true
                });
                return AVM1Stage;
            })();
            Lib.AVM1Stage = AVM1Stage;
        })(Lib = AVM1.Lib || (AVM1.Lib = {}));
    })(AVM1 = Shumway.AVM1 || (Shumway.AVM1 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM1;
    (function (AVM1) {
        var Lib;
        (function (Lib) {
            var flash = Shumway.AVM2.AS.flash;
            var assert = Shumway.Debug.assert;
            var Multiname = Shumway.AVM2.ABC.Multiname;
            var resolveMultinameProperty = Shumway.AVM2.Runtime.resolveMultinameProperty;
            var _asGetProperty = Object.prototype.asGetProperty;
            var _asSetProperty = Object.prototype.asSetProperty;
            var _asCallProperty = Object.prototype.asCallProperty;
            var _asHasProperty = Object.prototype.asHasProperty;
            var _asHasOwnProperty = Object.prototype.asHasOwnProperty;
            var _asHasTraitProperty = Object.prototype.asHasTraitProperty;
            var _asDeleteProperty = Object.prototype.asDeleteProperty;
            var _asGetEnumerableKeys = Object.prototype.asGetEnumerableKeys;
            var AVM1MovieClipButtonModeEvent = (function (_super) {
                __extends(AVM1MovieClipButtonModeEvent, _super);
                function AVM1MovieClipButtonModeEvent(propertyName, eventName, argsConverter) {
                    if (argsConverter === void 0) { argsConverter = null; }
                    _super.call(this, propertyName, eventName, argsConverter);
                    this.propertyName = propertyName;
                    this.eventName = eventName;
                    this.argsConverter = argsConverter;
                }
                AVM1MovieClipButtonModeEvent.prototype.onBind = function (target) {
                    var mc = target;
                    mc.as3Object.buttonMode = true;
                };
                return AVM1MovieClipButtonModeEvent;
            })(Lib.AVM1EventHandler);
            var AVM1MovieClip = (function (_super) {
                __extends(AVM1MovieClip, _super);
                function AVM1MovieClip() {
                    _super.call(this);
                }
                AVM1MovieClip.createAVM1Class = function () {
                    return Lib.wrapAVM1Class(AVM1MovieClip, [], ['_alpha', 'attachAudio', 'attachBitmap', 'attachMovie', 'beginFill', 'beginBitmapFill', 'beginGradientFill', 'blendMode', 'cacheAsBitmap', '_callFrame', 'clear', 'createEmptyMovieClip', 'createTextField', '_currentframe', 'curveTo', '_droptarget', 'duplicateMovieClip', 'enabled', 'endFill', 'filters', '_framesloaded', 'focusEnabled', '_focusrect', 'forceSmothing', 'getBounds', 'getBytesLoaded', 'getBytesTotal', 'getDepth', 'getInstanceAtDepth', 'getNextHighestDepth', 'getRect', 'getSWFVersion', 'getTextSnapshot', 'getURL', 'globalToLocal', 'gotoAndPlay', 'gotoAndStop', '_height', '_highquality', 'hitArea', 'hitTest', 'lineGradientStyle', 'listStyle', 'lineTo', 'loadMovie', 'loadVariables', 'localToGlobal', '_lockroot', 'menu', 'moveTo', '_name', 'nextFrame', 'opaqueBackground', '_parent', 'play', 'prevFrame', '_quality', 'removeMovieClip', '_rotation', 'scale9Grid', 'scrollRect', 'setMask', '_soundbuftime', 'startDrag', 'stop', 'stopDrag', 'swapDepths', 'tabChildren', 'tabEnabled', 'tabIndex', '_target', '_totalframes', 'trackAsMenu', 'transform', 'toString', 'unloadMovie', '_url', 'useHandCursor', '_visible', '_width', '_x', '_xmouse', '_xscale', '_y', '_ymouse', '_yscale']);
                };
                Object.defineProperty(AVM1MovieClip.prototype, "graphics", {
                    get: function () {
                        return this.as3Object.graphics;
                    },
                    enumerable: true,
                    configurable: true
                });
                AVM1MovieClip.prototype.initAVM1SymbolInstance = function (context, as3Object) {
                    _super.prototype.initAVM1SymbolInstance.call(this, context, as3Object);
                    this._frameScripts = null;
                    this._boundExecuteFrameScripts = null;
                    this._initEventsHandlers();
                };
                AVM1MovieClip.prototype.__lookupChild = function (id) {
                    if (id == '.') {
                        return this;
                    }
                    else if (id == '..') {
                        return Lib.getAVM1Object(this.as3Object.parent, this.context);
                    }
                    else {
                        return Lib.getAVM1Object(this._lookupChildByName(id), this.context);
                    }
                };
                AVM1MovieClip.prototype._lookupChildByName = function (name) {
                    name = asCoerceString(name);
                    return this.as3Object._lookupChildByName(name);
                };
                Object.defineProperty(AVM1MovieClip.prototype, "__targetPath", {
                    get: function () {
                        var target = this._target;
                        var prefix = '_level0';
                        return target != '/' ? prefix + target.replace(/\//g, '.') : prefix;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1MovieClip.prototype, "_alpha", {
                    get: function () {
                        return this.as3Object.alpha;
                    },
                    set: function (value) {
                        this.as3Object.alpha = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                AVM1MovieClip.prototype.attachAudio = function (id) {
                    throw 'Not implemented: attachAudio';
                };
                AVM1MovieClip.prototype._constructMovieClipSymbol = function (symbolId, name) {
                    var symbol = AVM1.AVM1Context.instance.getAsset(symbolId);
                    if (!symbol) {
                        return undefined;
                    }
                    var props = Object.create(symbol.symbolProps);
                    props.avm1Name = name;
                    props.avm1SymbolClass = symbol.theClass;
                    var mc = flash.display.MovieClip.initializeFrom(props);
                    flash.display.MovieClip.instanceConstructorNoInitialize.call(mc);
                    return mc;
                };
                AVM1MovieClip.prototype.attachMovie = function (symbolId, name, depth, initObject) {
                    var mc = this._constructMovieClipSymbol(symbolId, name);
                    if (!mc) {
                        return undefined;
                    }
                    var as2mc = this._insertChildAtDepth(mc, depth);
                    for (var i in initObject) {
                        as2mc[i] = initObject[i];
                    }
                    return as2mc;
                };
                AVM1MovieClip.prototype.beginFill = function (color, alpha) {
                    this.graphics.beginFill(color, alpha);
                };
                AVM1MovieClip.prototype.beginBitmapFill = function (bmp, matrix, repeat, smoothing) {
                    if (!(bmp instanceof flash.display.BitmapData)) {
                        return;
                    }
                    this.graphics.beginBitmapFill(bmp, matrix, repeat, smoothing);
                };
                AVM1MovieClip.prototype.beginGradientFill = function (fillType, colors, alphas, ratios, matrix, spreadMethod, interpolationMethod, focalPointRatio) {
                    this.graphics.beginGradientFill(fillType, colors, alphas, ratios, matrix, spreadMethod, interpolationMethod, focalPointRatio);
                };
                Object.defineProperty(AVM1MovieClip.prototype, "blendMode", {
                    get: function () {
                        return this.as3Object.blendMode;
                    },
                    set: function (value) {
                        this.as3Object.blendMode = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1MovieClip.prototype, "cacheAsBitmap", {
                    get: function () {
                        return this.as3Object.cacheAsBitmap;
                    },
                    set: function (value) {
                        this.as3Object.cacheAsBitmap = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                AVM1MovieClip.prototype._callFrame = function (frame) {
                    var nativeAS3Object = this.as3Object;
                    nativeAS3Object._callFrame(frame);
                };
                AVM1MovieClip.prototype.clear = function () {
                    this.graphics.clear();
                };
                AVM1MovieClip.prototype._insertChildAtDepth = function (mc, depth) {
                    var nativeAS3Object = this.as3Object;
                    nativeAS3Object.addTimelineObjectAtDepth(mc, Math.min(nativeAS3Object.numChildren, depth));
                    if (flash.display.Bitmap.isType(mc)) {
                        return null;
                    }
                    var as2mc = Lib.getAVM1Object(mc, this.context);
                    return as2mc;
                };
                AVM1MovieClip.prototype.createEmptyMovieClip = function (name, depth) {
                    var mc = new flash.display.MovieClip();
                    mc.name = name;
                    return this._insertChildAtDepth(mc, depth);
                };
                AVM1MovieClip.prototype.createTextField = function (name, depth, x, y, width, height) {
                    var text = new flash.text.TextField();
                    text.name = name;
                    text.x = x;
                    text.y = y;
                    text.width = width;
                    text.height = height;
                    return this._insertChildAtDepth(text, depth);
                };
                Object.defineProperty(AVM1MovieClip.prototype, "_currentframe", {
                    get: function () {
                        return this.as3Object.currentFrame;
                    },
                    enumerable: true,
                    configurable: true
                });
                AVM1MovieClip.prototype.curveTo = function (controlX, controlY, anchorX, anchorY) {
                    this.graphics.curveTo(controlX, controlY, anchorX, anchorY);
                };
                Object.defineProperty(AVM1MovieClip.prototype, "_droptarget", {
                    get: function () {
                        return this.as3Object.dropTarget;
                    },
                    enumerable: true,
                    configurable: true
                });
                AVM1MovieClip.prototype._duplicate = function (name, depth, initObject) {
                    var nativeAS3Object = this.as3Object;
                    nativeAS3Object._duplicate(name, depth, initObject);
                };
                AVM1MovieClip.prototype.duplicateMovieClip = function (name, depth, initObject) {
                    var mc = this._duplicate(name, +depth, initObject);
                    return Lib.getAVM1Object(mc, this.context);
                };
                Object.defineProperty(AVM1MovieClip.prototype, "enabled", {
                    get: function () {
                        return this.as3Object.enabled;
                    },
                    set: function (value) {
                        this.as3Object.enabled = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                AVM1MovieClip.prototype.endFill = function () {
                    this.graphics.endFill();
                };
                Object.defineProperty(AVM1MovieClip.prototype, "filters", {
                    get: function () {
                        throw 'Not implemented: get$filters';
                    },
                    set: function (value) {
                        throw 'Not implemented: set$filters';
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1MovieClip.prototype, "focusEnabled", {
                    get: function () {
                        throw 'Not implemented: get$focusEnabled';
                    },
                    set: function (value) {
                        throw 'Not implemented: set$focusEnabled';
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1MovieClip.prototype, "_focusrect", {
                    get: function () {
                        throw 'Not implemented: get$_focusrect';
                    },
                    set: function (value) {
                        throw 'Not implemented: set$_focusrect';
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1MovieClip.prototype, "forceSmoothing", {
                    get: function () {
                        throw 'Not implemented: get$forceSmoothing';
                    },
                    set: function (value) {
                        throw 'Not implemented: set$forceSmoothing';
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1MovieClip.prototype, "_framesloaded", {
                    get: function () {
                        return this.as3Object.framesLoaded;
                    },
                    enumerable: true,
                    configurable: true
                });
                AVM1MovieClip.prototype.getBounds = function (bounds) {
                    var obj = bounds.as3Object;
                    if (!obj) {
                        throw 'Unsupported bounds type';
                    }
                    return this.as3Object.getBounds(obj);
                };
                AVM1MovieClip.prototype.getBytesLoaded = function () {
                    var loaderInfo = this.as3Object.loaderInfo;
                    return loaderInfo.bytesLoaded;
                };
                AVM1MovieClip.prototype.getBytesTotal = function () {
                    var loaderInfo = this.as3Object.loaderInfo;
                    return loaderInfo.bytesTotal;
                };
                AVM1MovieClip.prototype.getDepth = function () {
                    return this.as3Object._depth;
                };
                AVM1MovieClip.prototype.getInstanceAtDepth = function (depth) {
                    var nativeObject = this.as3Object;
                    for (var i = 0, numChildren = nativeObject.numChildren; i < numChildren; i++) {
                        var child = nativeObject._lookupChildByIndex(i);
                        if (child && child._depth === depth) {
                            if (flash.display.Bitmap.isType(child)) {
                                return this;
                            }
                            return Lib.getAVM1Object(child, this.context);
                        }
                    }
                    return null;
                };
                AVM1MovieClip.prototype.getNextHighestDepth = function () {
                    var nativeObject = this.as3Object;
                    var maxDepth = 0;
                    for (var i = 0, numChildren = nativeObject.numChildren; i < numChildren; i++) {
                        var child = nativeObject._lookupChildByIndex(i);
                        if (child._depth > maxDepth) {
                            maxDepth = child._depth;
                        }
                    }
                    return maxDepth + 1;
                };
                AVM1MovieClip.prototype.getRect = function (bounds) {
                    throw 'Not implemented: getRect';
                };
                AVM1MovieClip.prototype.getSWFVersion = function () {
                    var loaderInfo = this.as3Object.loaderInfo;
                    return loaderInfo.swfVersion;
                };
                AVM1MovieClip.prototype.getTextSnapshot = function () {
                    throw 'Not implemented: getTextSnapshot';
                };
                AVM1MovieClip.prototype.getURL = function (url, window, method) {
                    var request = new flash.net.URLRequest(url);
                    if (method) {
                        request.method = method;
                    }
                    Shumway.AVM2.AS.FlashNetScript_navigateToURL(request, window);
                };
                AVM1MovieClip.prototype.globalToLocal = function (pt) {
                    var tmp = this.as3Object.globalToLocal(new flash.geom.Point(pt.asGetPublicProperty('x'), pt.asGetPublicProperty('y')));
                    pt.asSetPublicProperty('x', tmp.x);
                    pt.asSetPublicProperty('y', tmp.y);
                };
                AVM1MovieClip.prototype.gotoAndPlay = function (frame) {
                    return this.as3Object.gotoAndPlay(frame);
                };
                AVM1MovieClip.prototype.gotoAndStop = function (frame) {
                    return this.as3Object.gotoAndStop(frame);
                };
                Object.defineProperty(AVM1MovieClip.prototype, "_height", {
                    get: function () {
                        return this.as3Object.height;
                    },
                    set: function (value) {
                        if (isNaN(value)) {
                            return;
                        }
                        this.as3Object.height = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1MovieClip.prototype, "_highquality", {
                    get: function () {
                        return 1;
                    },
                    set: function (value) {
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1MovieClip.prototype, "hitArea", {
                    get: function () {
                        throw 'Not implemented: get$hitArea';
                    },
                    set: function (value) {
                        throw 'Not implemented: set$hitArea';
                    },
                    enumerable: true,
                    configurable: true
                });
                AVM1MovieClip.prototype.hitTest = function (x, y, shapeFlag) {
                    if (x instanceof AVM1MovieClip) {
                        return this.as3Object.hitTestObject(x.as3Object);
                    }
                    else {
                        return this.as3Object.hitTestPoint(x, y, shapeFlag);
                    }
                };
                AVM1MovieClip.prototype.lineGradientStyle = function (fillType, colors, alphas, ratios, matrix, spreadMethod, interpolationMethod, focalPointRatio) {
                    this.graphics.lineGradientStyle(fillType, colors, alphas, ratios, matrix, spreadMethod, interpolationMethod, focalPointRatio);
                };
                AVM1MovieClip.prototype.lineStyle = function (thickness, rgb, alpha, pixelHinting, noScale, capsStyle, jointStyle, miterLimit) {
                    this.graphics.lineStyle(thickness, rgb, alpha, pixelHinting, noScale, capsStyle, jointStyle, miterLimit);
                };
                AVM1MovieClip.prototype.lineTo = function (x, y) {
                    this.graphics.lineTo(x, y);
                };
                AVM1MovieClip.prototype.loadMovie = function (url, method) {
                    var loader = new flash.display.Loader();
                    var request = new flash.net.URLRequest(url);
                    if (method) {
                        request.method = method;
                    }
                    loader.load(request);
                    function completeHandler(event) {
                        loader.removeEventListener(flash.events.Event.COMPLETE, completeHandler);
                        var parent = this.as3Object.parent;
                        var depth = parent.getChildIndex(this.as3Object);
                        parent.removeChild(this.as3Object);
                        parent.addChildAt(loader.content, depth);
                    }
                    loader.addEventListener(flash.events.Event.COMPLETE, completeHandler);
                };
                AVM1MovieClip.prototype.loadVariables = function (url, method) {
                    this.context.globals._loadVariables(this, url, method);
                };
                AVM1MovieClip.prototype.localToGlobal = function (pt) {
                    var tmp = this.as3Object.localToGlobal(new flash.geom.Point(pt.asGetPublicProperty('x'), pt.asGetPublicProperty('y')));
                    pt.asSetPublicProperty('x', tmp.x);
                    pt.asSetPublicProperty('y', tmp.y);
                };
                Object.defineProperty(AVM1MovieClip.prototype, "_lockroot", {
                    get: function () {
                        throw 'Not implemented: get$_lockroot';
                    },
                    set: function (value) {
                        throw 'Not implemented: set$_lockroot';
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1MovieClip.prototype, "menu", {
                    get: function () {
                        return this.as3Object.contextMenu;
                    },
                    set: function (value) {
                        this.as3Object.contextMenu = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                AVM1MovieClip.prototype.moveTo = function (x, y) {
                    this.graphics.moveTo(x, y);
                };
                Object.defineProperty(AVM1MovieClip.prototype, "_name", {
                    get: function () {
                        return this.as3Object.name;
                    },
                    set: function (value) {
                        this.as3Object.name = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                AVM1MovieClip.prototype.nextFrame = function () {
                    this.as3Object.nextFrame();
                };
                AVM1MovieClip.prototype.nextScene = function () {
                    this.as3Object.nextScene();
                };
                Object.defineProperty(AVM1MovieClip.prototype, "opaqueBackground", {
                    get: function () {
                        return this.as3Object.opaqueBackground;
                    },
                    set: function (value) {
                        this.as3Object.opaqueBackground = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1MovieClip.prototype, "_parent", {
                    get: function () {
                        var parent = Lib.getAVM1Object(this.as3Object.parent, this.context);
                        return parent || undefined;
                    },
                    set: function (value) {
                        throw 'Not implemented: set$_parent';
                    },
                    enumerable: true,
                    configurable: true
                });
                AVM1MovieClip.prototype.play = function () {
                    this.as3Object.play();
                };
                AVM1MovieClip.prototype.prevFrame = function () {
                    this.as3Object.prevFrame();
                };
                AVM1MovieClip.prototype.prevScene = function () {
                    this.as3Object.prevScene();
                };
                Object.defineProperty(AVM1MovieClip.prototype, "_quality", {
                    get: function () {
                        return 'HIGH';
                    },
                    set: function (value) {
                    },
                    enumerable: true,
                    configurable: true
                });
                AVM1MovieClip.prototype.removeMovieClip = function () {
                    var parent = this._parent.as3Object;
                    parent.removeChild(this.as3Object);
                };
                Object.defineProperty(AVM1MovieClip.prototype, "_rotation", {
                    get: function () {
                        return this.as3Object.rotation;
                    },
                    set: function (value) {
                        this.as3Object.rotation = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1MovieClip.prototype, "scale9Grid", {
                    get: function () {
                        throw 'Not implemented: get$scale9Grid';
                    },
                    set: function (value) {
                        throw 'Not implemented: set$scale9Grid';
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1MovieClip.prototype, "scrollRect", {
                    get: function () {
                        throw 'Not implemented: get$scrollRect';
                    },
                    set: function (value) {
                        throw 'Not implemented: set$scrollRect';
                    },
                    enumerable: true,
                    configurable: true
                });
                AVM1MovieClip.prototype.setMask = function (mc) {
                    var nativeObject = this.as3Object;
                    var mask = Lib.AVM1Utils.resolveMovieClip(mc);
                    if (mask) {
                        nativeObject.mask = mask.as3Object;
                    }
                };
                Object.defineProperty(AVM1MovieClip.prototype, "_soundbuftime", {
                    get: function () {
                        throw 'Not implemented: get$_soundbuftime';
                    },
                    set: function (value) {
                        throw 'Not implemented: set$_soundbuftime';
                    },
                    enumerable: true,
                    configurable: true
                });
                AVM1MovieClip.prototype.startDrag = function (lock, left, top, right, bottom) {
                    this.as3Object.startDrag(lock, arguments.length < 3 ? null : new flash.geom.Rectangle(left, top, right - left, bottom - top));
                };
                AVM1MovieClip.prototype.stop = function () {
                    return this.as3Object.stop();
                };
                AVM1MovieClip.prototype.stopDrag = function () {
                    return this.as3Object.stopDrag();
                };
                AVM1MovieClip.prototype.swapDepths = function (target) {
                    var child1 = this.as3Object;
                    var child2 = typeof target === 'number' ? Lib.AVM1Utils.resolveLevel(Number(target)).as3Object : Lib.AVM1Utils.resolveTarget(target).as3Object;
                    if (child1.parent !== child2.parent) {
                        return;
                    }
                    child1.parent.swapChildren(child1, child2);
                };
                Object.defineProperty(AVM1MovieClip.prototype, "tabChildren", {
                    get: function () {
                        return this.as3Object.tabChildren;
                    },
                    set: function (value) {
                        this.as3Object.tabChildren = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1MovieClip.prototype, "tabEnabled", {
                    get: function () {
                        return this.as3Object.tabEnabled;
                    },
                    set: function (value) {
                        this.as3Object.tabEnabled = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1MovieClip.prototype, "tabIndex", {
                    get: function () {
                        return this.as3Object.tabIndex;
                    },
                    set: function (value) {
                        this.as3Object.tabIndex = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1MovieClip.prototype, "_target", {
                    get: function () {
                        var nativeObject = this.as3Object;
                        if (nativeObject === nativeObject.root) {
                            return '/';
                        }
                        var path = '';
                        do {
                            path = '/' + nativeObject.name + path;
                            nativeObject = nativeObject.parent;
                        } while (nativeObject !== nativeObject.root);
                        return path;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1MovieClip.prototype, "_totalframes", {
                    get: function () {
                        return this.as3Object.totalFrames;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1MovieClip.prototype, "trackAsMenu", {
                    get: function () {
                        throw 'Not implemented: get$trackAsMenu';
                    },
                    set: function (value) {
                        throw 'Not implemented: set$trackAsMenu';
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1MovieClip.prototype, "transform", {
                    get: function () {
                        throw 'Not implemented: get$transform';
                    },
                    set: function (value) {
                        throw 'Not implemented: set$transform';
                    },
                    enumerable: true,
                    configurable: true
                });
                AVM1MovieClip.prototype.toString = function () {
                    return this.as3Object.toString();
                };
                AVM1MovieClip.prototype.unloadMovie = function () {
                    var nativeObject = this.as3Object;
                    var loader = nativeObject.loaderInfo.loader;
                    if (loader.parent) {
                        loader.parent.removeChild(loader);
                    }
                    nativeObject.stop();
                };
                Object.defineProperty(AVM1MovieClip.prototype, "_url", {
                    get: function () {
                        return this.as3Object.loaderInfo.url;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1MovieClip.prototype, "useHandCursor", {
                    get: function () {
                        return this.as3Object.useHandCursor;
                    },
                    set: function (value) {
                        this.as3Object.useHandCursor = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1MovieClip.prototype, "_visible", {
                    get: function () {
                        return this.as3Object.visible;
                    },
                    set: function (value) {
                        this.as3Object.visible = +value !== 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1MovieClip.prototype, "_width", {
                    get: function () {
                        return this.as3Object.width;
                    },
                    set: function (value) {
                        if (isNaN(value)) {
                            return;
                        }
                        this.as3Object.width = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1MovieClip.prototype, "_x", {
                    get: function () {
                        return this.as3Object.x;
                    },
                    set: function (value) {
                        if (isNaN(value)) {
                            return;
                        }
                        this.as3Object.x = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1MovieClip.prototype, "_xmouse", {
                    get: function () {
                        return this.as3Object.mouseX;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1MovieClip.prototype, "_xscale", {
                    get: function () {
                        return this.as3Object.scaleX * 100;
                    },
                    set: function (value) {
                        if (isNaN(value)) {
                            return;
                        }
                        this.as3Object.scaleX = value / 100;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1MovieClip.prototype, "_y", {
                    get: function () {
                        return this.as3Object.y;
                    },
                    set: function (value) {
                        if (isNaN(value)) {
                            return;
                        }
                        this.as3Object.y = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1MovieClip.prototype, "_ymouse", {
                    get: function () {
                        return this.as3Object.mouseY;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1MovieClip.prototype, "_yscale", {
                    get: function () {
                        return this.as3Object.scaleY * 100;
                    },
                    set: function (value) {
                        if (isNaN(value)) {
                            return;
                        }
                        this.as3Object.scaleY = value / 100;
                    },
                    enumerable: true,
                    configurable: true
                });
                AVM1MovieClip.prototype._resolveLevelNProperty = function (name) {
                    if (name === '_root' || name === '_level0') {
                        return AVM1.AVM1Context.instance.resolveLevel(0);
                    }
                    else if (name.indexOf('_level') === 0) {
                        var level = name.substring(6), levelNum = level | 0;
                        if (levelNum > 0 && level == levelNum) {
                            return AVM1.AVM1Context.instance.resolveLevel(levelNum);
                        }
                    }
                    return null;
                };
                AVM1MovieClip.prototype.asGetProperty = function (namespaces, name, flags) {
                    if (_asHasProperty.call(this, namespaces, name, flags)) {
                        return _asGetProperty.call(this, namespaces, name, flags);
                    }
                    if (typeof name === 'string' && name[0] === '_') {
                        var level = this._resolveLevelNProperty(name);
                        if (level) {
                            return level;
                        }
                    }
                    var resolved = resolveMultinameProperty(namespaces, name, flags);
                    if (Multiname.isPublicQualifiedName(resolved) && this.isAVM1Instance) {
                        return this.__lookupChild(Multiname.getNameFromPublicQualifiedName(resolved));
                    }
                    return undefined;
                };
                AVM1MovieClip.prototype.asHasProperty = function (namespaces, name, flags) {
                    if (_asHasProperty.call(this, namespaces, name, flags)) {
                        return true;
                    }
                    if (typeof name === 'string' && name[0] === '_') {
                        var level = this._resolveLevelNProperty(name);
                        if (level) {
                            return true;
                        }
                    }
                    var resolved = resolveMultinameProperty(namespaces, name, flags);
                    if (Multiname.isPublicQualifiedName(resolved) && this.isAVM1Instance) {
                        return !!this.__lookupChild(Multiname.getNameFromPublicQualifiedName(resolved));
                    }
                    return false;
                };
                AVM1MovieClip.prototype.asGetEnumerableKeys = function () {
                    var keys = _asGetEnumerableKeys.call(this);
                    if (!this.isAVM1Instance) {
                        return keys;
                    }
                    var as3MovieClip = this.as3Object;
                    for (var i = 0, length = as3MovieClip._children.length; i < length; i++) {
                        var child = as3MovieClip._children[i];
                        var name = child.name;
                        if (!_asHasProperty.call(this, undefined, name, 0)) {
                            keys.push(Multiname.getPublicQualifiedName(name));
                        }
                    }
                    return keys;
                };
                AVM1MovieClip.prototype.addFrameActionBlocks = function (frameIndex, frameData) {
                    var initActionBlocks = frameData.initActionBlocks;
                    var actionBlocks = frameData.actionBlocks;
                    if (initActionBlocks) {
                        this._addInitActionBlocks(frameIndex, initActionBlocks);
                    }
                    if (actionBlocks) {
                        for (var i = 0; i < actionBlocks.length; i++) {
                            this.addFrameScript(frameIndex, actionBlocks[i]);
                        }
                    }
                };
                AVM1MovieClip.prototype.addFrameScript = function (frameIndex, actionsBlock) {
                    var frameScripts = this._frameScripts;
                    if (!frameScripts) {
                        release || assert(!this._boundExecuteFrameScripts);
                        this._boundExecuteFrameScripts = this._executeFrameScripts.bind(this);
                        frameScripts = this._frameScripts = [];
                    }
                    var scripts = frameScripts[frameIndex + 1];
                    if (!scripts) {
                        scripts = frameScripts[frameIndex + 1] = [];
                        this.as3Object.addFrameScript(frameIndex, this._boundExecuteFrameScripts);
                    }
                    var actionsData = new AVM1.AVM1ActionsData(actionsBlock, 'f' + frameIndex + 'i' + scripts.length);
                    scripts.push(actionsData);
                };
                AVM1MovieClip.prototype._addInitActionBlocks = function (frameIndex, actionsBlocks) {
                    var avm2MovieClip = this.as3Object;
                    var self = this;
                    function listener(e) {
                        if (avm2MovieClip.currentFrame !== frameIndex + 1) {
                            return;
                        }
                        avm2MovieClip.removeEventListener('enterFrame', listener);
                        var avm1Context = self.context;
                        for (var i = 0; i < actionsBlocks.length; i++) {
                            var actionsData = new AVM1.AVM1ActionsData(actionsBlocks[i].actionsData, 'f' + frameIndex + 'i' + i);
                            avm1Context.executeActions(actionsData, self);
                        }
                    }
                    avm2MovieClip.addEventListener('enterFrame', listener);
                };
                AVM1MovieClip.prototype._executeFrameScripts = function () {
                    var context = this.context;
                    var scripts = this._frameScripts[this.as3Object.currentFrame];
                    release || assert(scripts && scripts.length);
                    for (var i = 0; i < scripts.length; i++) {
                        var actionsData = scripts[i];
                        context.executeActions(actionsData, this);
                    }
                };
                AVM1MovieClip.prototype._initEventsHandlers = function () {
                    this.bindEvents([
                        new Lib.AVM1EventHandler('onData', 'data'),
                        new Lib.AVM1EventHandler('onDragOut', 'dragOut'),
                        new Lib.AVM1EventHandler('onDragOver', 'dragOver'),
                        new Lib.AVM1EventHandler('onEnterFrame', 'enterFrame'),
                        new Lib.AVM1EventHandler('onKeyDown', 'keyDown'),
                        new Lib.AVM1EventHandler('onKeyUp', 'keyUp'),
                        new Lib.AVM1EventHandler('onKillFocus', 'focusOut', function (e) {
                            return [e.relatedObject];
                        }),
                        new Lib.AVM1EventHandler('onLoad', 'load'),
                        new Lib.AVM1EventHandler('onMouseDown', 'mouseDown'),
                        new Lib.AVM1EventHandler('onMouseUp', 'mouseUp'),
                        new AVM1MovieClipButtonModeEvent('onPress', 'mouseDown'),
                        new AVM1MovieClipButtonModeEvent('onRelease', 'mouseUp'),
                        new AVM1MovieClipButtonModeEvent('onReleaseOutside', 'releaseOutside'),
                        new AVM1MovieClipButtonModeEvent('onRollOut', 'mouseOut'),
                        new AVM1MovieClipButtonModeEvent('onRollOver', 'mouseOver'),
                        new Lib.AVM1EventHandler('onSetFocus', 'focusIn', function (e) {
                            return [e.relatedObject];
                        }),
                        new Lib.AVM1EventHandler('onUnload', 'unload')
                    ]);
                };
                return AVM1MovieClip;
            })(Lib.AVM1SymbolBase);
            Lib.AVM1MovieClip = AVM1MovieClip;
        })(Lib = AVM1.Lib || (AVM1.Lib = {}));
    })(AVM1 = Shumway.AVM1 || (Shumway.AVM1 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM1;
    (function (AVM1) {
        var Lib;
        (function (Lib) {
            var somewhatImplemented = Shumway.Debug.somewhatImplemented;
            var StateTransitions;
            (function (StateTransitions) {
                StateTransitions[StateTransitions["IdleToOverUp"] = 0x001] = "IdleToOverUp";
                StateTransitions[StateTransitions["OverUpToIdle"] = 0x002] = "OverUpToIdle";
                StateTransitions[StateTransitions["OverUpToOverDown"] = 0x004] = "OverUpToOverDown";
                StateTransitions[StateTransitions["OverDownToOverUp"] = 0x008] = "OverDownToOverUp";
                StateTransitions[StateTransitions["OverDownToOutDown"] = 0x010] = "OverDownToOutDown";
                StateTransitions[StateTransitions["OutDownToOverDown"] = 0x020] = "OutDownToOverDown";
                StateTransitions[StateTransitions["OutDownToIdle"] = 0x040] = "OutDownToIdle";
                StateTransitions[StateTransitions["IdleToOverDown"] = 0x080] = "IdleToOverDown";
                StateTransitions[StateTransitions["OverDownToIdle"] = 0x100] = "OverDownToIdle";
            })(StateTransitions || (StateTransitions = {}));
            var AVM1KeyCodeMap = [-1, 37, 39, 36, 35, 45, 46, -1, 8, -1, -1, -1, -1, 13, 38, 40, 33, 34, 9, 27];
            var AVM1Button = (function (_super) {
                __extends(AVM1Button, _super);
                function AVM1Button() {
                    _super.apply(this, arguments);
                }
                AVM1Button.createAVM1Class = function () {
                    return Lib.wrapAVM1Class(AVM1Button, [], ['_alpha', 'blendMode', 'cacheAsBitmap', 'enabled', 'filters', '_focusrect', 'getDepth', '_height', '_highquality', 'menu', '_name', '_parent', '_quality', '_rotation', 'scale9Grid', '_soundbuftime', 'tabEnabled', 'tabIndex', '_target', 'trackAsMenu', '_url', 'useHandCursor', '_visible', '_width', '_x', '_xmouse', '_xscale', '_y', '_ymouse', '_yscale']);
                };
                AVM1Button.prototype.initAVM1SymbolInstance = function (context, as3Object) {
                    _super.prototype.initAVM1SymbolInstance.call(this, context, as3Object);
                    var nativeButton = this._as3Object;
                    if (!nativeButton._symbol || !nativeButton._symbol.data.buttonActions) {
                        this._initEventsHandlers();
                        return;
                    }
                    nativeButton.buttonMode = true;
                    nativeButton.addEventListener('addedToStage', this._addListeners.bind(this));
                    nativeButton.addEventListener('removedFromStage', this._removeListeners.bind(this));
                    var requiredListeners = this._requiredListeners = Object.create(null);
                    var actions = this._actions = nativeButton._symbol.data.buttonActions;
                    for (var i = 0; i < actions.length; i++) {
                        var action = actions[i];
                        if (!action.actionsBlock) {
                            action.actionsBlock = new AVM1.AVM1ActionsData(action.actionsData, 's' + nativeButton._symbol.id + 'e' + i);
                        }
                        if (action.keyCode) {
                            requiredListeners['keyDown'] = this._keyDownHandler.bind(this);
                            continue;
                        }
                        var type;
                        switch (action.stateTransitionFlags) {
                            case 64 /* OutDownToIdle */:
                                type = 'releaseOutside';
                                break;
                            case 1 /* IdleToOverUp */:
                                type = 'rollOver';
                                break;
                            case 2 /* OverUpToIdle */:
                                type = 'rollOut';
                                break;
                            case 4 /* OverUpToOverDown */:
                                type = 'mouseDown';
                                break;
                            case 8 /* OverDownToOverUp */:
                                type = 'mouseUp';
                                break;
                            case 16 /* OverDownToOutDown */:
                            case 32 /* OutDownToOverDown */:
                                somewhatImplemented('AVM1 drag over/out button actions');
                                break;
                            case 128 /* IdleToOverDown */:
                            case 256 /* OverDownToIdle */:
                                somewhatImplemented('AVM1 drag trackAsMenu over/out button actions');
                                break;
                            default:
                                console.warn('Unknown AVM1 button action type: ' + action.stateTransitionFlags);
                                continue;
                        }
                        requiredListeners[type] = this._mouseEventHandler.bind(this, action.stateTransitionFlags);
                    }
                    this._initEventsHandlers();
                };
                Object.defineProperty(AVM1Button.prototype, "_alpha", {
                    get: function () {
                        return this._as3Object.alpha;
                    },
                    set: function (value) {
                        this._as3Object.alpha = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1Button.prototype, "blendMode", {
                    get: function () {
                        return this._as3Object.blendMode;
                    },
                    set: function (value) {
                        this._as3Object.blendMode = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1Button.prototype, "cacheAsBitmap", {
                    get: function () {
                        return this._as3Object.cacheAsBitmap;
                    },
                    set: function (value) {
                        this._as3Object.cacheAsBitmap = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1Button.prototype, "enabled", {
                    get: function () {
                        return this._as3Object.enabled;
                    },
                    set: function (value) {
                        this._as3Object.enabled = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1Button.prototype, "filters", {
                    get: function () {
                        throw 'Not implemented: get$filters';
                    },
                    set: function (value) {
                        throw 'Not implemented: set$filters';
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1Button.prototype, "_focusrect", {
                    get: function () {
                        throw 'Not implemented: get$_focusrect';
                    },
                    set: function (value) {
                        throw 'Not implemented: set$_focusrect';
                    },
                    enumerable: true,
                    configurable: true
                });
                AVM1Button.prototype.getDepth = function () {
                    return this._as3Object._clipDepth;
                };
                Object.defineProperty(AVM1Button.prototype, "_height", {
                    get: function () {
                        return this._as3Object.height;
                    },
                    set: function (value) {
                        if (isNaN(value)) {
                            return;
                        }
                        this._as3Object.height = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1Button.prototype, "_highquality", {
                    get: function () {
                        return 1;
                    },
                    set: function (value) {
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1Button.prototype, "menu", {
                    get: function () {
                        return this._as3Object.contextMenu;
                    },
                    set: function (value) {
                        this._as3Object.contextMenu = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1Button.prototype, "_name", {
                    get: function () {
                        return this._as3Object.contextMenu;
                    },
                    set: function (value) {
                        this._as3Object.contextMenu = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1Button.prototype, "_parent", {
                    get: function () {
                        return Lib.getAVM1Object(this._as3Object.parent, this.context);
                    },
                    set: function (value) {
                        throw 'Not implemented: set$_parent';
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1Button.prototype, "_quality", {
                    get: function () {
                        return 'HIGH';
                    },
                    set: function (value) {
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1Button.prototype, "_rotation", {
                    get: function () {
                        return this._as3Object.rotation;
                    },
                    set: function (value) {
                        this._as3Object.rotation = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1Button.prototype, "scale9Grid", {
                    get: function () {
                        throw 'Not implemented: get$scale9Grid';
                    },
                    set: function (value) {
                        throw 'Not implemented: set$scale9Grid';
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1Button.prototype, "_soundbuftime", {
                    get: function () {
                        throw 'Not implemented: get$_soundbuftime';
                    },
                    set: function (value) {
                        throw 'Not implemented: set$_soundbuftime';
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1Button.prototype, "tabEnabled", {
                    get: function () {
                        return this._as3Object.tabEnabled;
                    },
                    set: function (value) {
                        this._as3Object.tabEnabled = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1Button.prototype, "tabIndex", {
                    get: function () {
                        return this._as3Object.tabIndex;
                    },
                    set: function (value) {
                        this._as3Object.tabIndex = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1Button.prototype, "_target", {
                    get: function () {
                        return Lib.AVM1Utils.getTarget(this);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1Button.prototype, "trackAsMenu", {
                    get: function () {
                        throw 'Not implemented: get$trackAsMenu';
                    },
                    set: function (value) {
                        throw 'Not implemented: set$trackAsMenu';
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1Button.prototype, "_url", {
                    get: function () {
                        return this._as3Object.loaderInfo.url;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1Button.prototype, "useHandCursor", {
                    get: function () {
                        return this._as3Object.useHandCursor;
                    },
                    set: function (value) {
                        this._as3Object.useHandCursor = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1Button.prototype, "_visible", {
                    get: function () {
                        return this._as3Object.visible;
                    },
                    set: function (value) {
                        this._as3Object.visible = +value !== 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1Button.prototype, "_width", {
                    get: function () {
                        return this._as3Object.width;
                    },
                    set: function (value) {
                        if (isNaN(value)) {
                            return;
                        }
                        this._as3Object.width = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1Button.prototype, "_x", {
                    get: function () {
                        return this._as3Object.x;
                    },
                    set: function (value) {
                        if (isNaN(value)) {
                            return;
                        }
                        this._as3Object.x = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1Button.prototype, "_xmouse", {
                    get: function () {
                        return this._as3Object.mouseX;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1Button.prototype, "_xscale", {
                    get: function () {
                        return this._as3Object.scaleX;
                    },
                    set: function (value) {
                        if (isNaN(value)) {
                            return;
                        }
                        this._as3Object.scaleX = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1Button.prototype, "_y", {
                    get: function () {
                        return this._as3Object.y;
                    },
                    set: function (value) {
                        if (isNaN(value)) {
                            return;
                        }
                        this._as3Object.y = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1Button.prototype, "_ymouse", {
                    get: function () {
                        return this._as3Object.mouseY;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1Button.prototype, "_yscale", {
                    get: function () {
                        return this._as3Object.scaleY;
                    },
                    set: function (value) {
                        if (isNaN(value)) {
                            return;
                        }
                        this._as3Object.scaleY = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                AVM1Button.prototype._addListeners = function () {
                    for (var type in this._requiredListeners) {
                        var target = type === 'keyDown' ? this._as3Object.stage : this._as3Object;
                        target.addEventListener(type, this._requiredListeners[type]);
                    }
                };
                AVM1Button.prototype._removeListeners = function () {
                    for (var type in this._requiredListeners) {
                        var target = type === 'keyDown' ? this._as3Object.stage : this._as3Object;
                        target.removeEventListener(type, this._requiredListeners[type]);
                    }
                };
                AVM1Button.prototype._keyDownHandler = function (event) {
                    var actions = this._actions;
                    for (var i = 0; i < actions.length; i++) {
                        var action = actions[i];
                        if (!action.keyCode) {
                            continue;
                        }
                        if ((action.keyCode < 32 && AVM1KeyCodeMap[action.keyCode] === event.asGetPublicProperty('keyCode')) || action.keyCode === event.asGetPublicProperty('charCode')) {
                            this._runAction(action);
                        }
                    }
                };
                AVM1Button.prototype._mouseEventHandler = function (type) {
                    var actions = this._actions;
                    for (var i = 0; i < actions.length; i++) {
                        var action = actions[i];
                        if (action.stateTransitionFlags === type) {
                            this._runAction(action);
                        }
                    }
                };
                AVM1Button.prototype._runAction = function (action) {
                    var avm1Context = this._as3Object.loaderInfo._avm1Context;
                    avm1Context.executeActions(action.actionsBlock, Lib.getAVM1Object(this._as3Object._parent, this.context));
                };
                AVM1Button.prototype._initEventsHandlers = function () {
                    this.bindEvents([
                        new Lib.AVM1EventHandler('onDragOut', 'dragOut'),
                        new Lib.AVM1EventHandler('onDragOver', 'dragOver'),
                        new Lib.AVM1EventHandler('onKeyDown', 'keyDown'),
                        new Lib.AVM1EventHandler('onKeyUp', 'keyUp'),
                        new Lib.AVM1EventHandler('onKillFocus', 'focusOut', function (e) {
                            return [e.relatedObject];
                        }),
                        new Lib.AVM1EventHandler('onLoad', 'load'),
                        new Lib.AVM1EventHandler('onMouseDown', 'mouseDown'),
                        new Lib.AVM1EventHandler('onMouseUp', 'mouseUp'),
                        new Lib.AVM1EventHandler('onPress', 'mouseDown'),
                        new Lib.AVM1EventHandler('onRelease', 'mouseUp'),
                        new Lib.AVM1EventHandler('onReleaseOutside', 'releaseOutside'),
                        new Lib.AVM1EventHandler('onRollOut', 'mouseOut'),
                        new Lib.AVM1EventHandler('onRollOver', 'mouseOver'),
                        new Lib.AVM1EventHandler('onSetFocus', 'focusIn', function (e) {
                            return [e.relatedObject];
                        })
                    ]);
                };
                return AVM1Button;
            })(Lib.AVM1SymbolBase);
            Lib.AVM1Button = AVM1Button;
        })(Lib = AVM1.Lib || (AVM1.Lib = {}));
    })(AVM1 = Shumway.AVM1 || (Shumway.AVM1 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM1;
    (function (AVM1) {
        var Lib;
        (function (Lib) {
            var AVM1TextField = (function (_super) {
                __extends(AVM1TextField, _super);
                function AVM1TextField() {
                    _super.apply(this, arguments);
                }
                AVM1TextField.createAVM1Class = function () {
                    return Lib.wrapAVM1Class(AVM1TextField, [], ['_alpha', 'antiAliasType', 'autoSize', 'background', 'backgroundColor', 'border', 'borderColor', 'bottomScroll', 'condenseWhite', 'embedFonts', 'getNewTextFormat', 'getTextFormat', '_height', '_highquality', 'hscroll', 'html', 'htmlText', 'length', 'maxChars', 'maxhscroll', 'maxscroll', 'multiline', '_name', '_parent', 'password', '_quality', '_rotation', 'scroll', 'selectable', 'setNewTextFormat', 'setTextFormat', '_soundbuftime', 'tabEnabled', 'tabIndex', '_target', 'text', 'textColor', 'textHeight', 'textWidth', 'type', '_url', '_visible', '_width', 'wordWrap', '_x', '_xmouse', '_xscale', '_y', '_ymouse', '_yscale']);
                };
                AVM1TextField.prototype.initAVM1SymbolInstance = function (context, as3Object) {
                    _super.prototype.initAVM1SymbolInstance.call(this, context, as3Object);
                    this._variable = '';
                    this._exitFrameHandler = null;
                    if (as3Object._symbol) {
                        this.variable = as3Object._symbol.variableName || '';
                    }
                    this._initEventsHandlers();
                };
                Object.defineProperty(AVM1TextField.prototype, "_alpha", {
                    get: function () {
                        return this._as3Object.alpha;
                    },
                    set: function (value) {
                        this._as3Object.alpha = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "antiAliasType", {
                    get: function () {
                        return this._as3Object.antiAliasType;
                    },
                    set: function (value) {
                        this._as3Object.antiAliasType = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "autoSize", {
                    get: function () {
                        return this._as3Object.autoSize;
                    },
                    set: function (value) {
                        if (value === true) {
                            value = "left";
                        }
                        else if (value === false) {
                            value = "none";
                        }
                        this._as3Object.autoSize = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "background", {
                    get: function () {
                        return this._as3Object.background;
                    },
                    set: function (value) {
                        this._as3Object.background = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "backgroundColor", {
                    get: function () {
                        return this._as3Object.backgroundColor;
                    },
                    set: function (value) {
                        this._as3Object.backgroundColor = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "border", {
                    get: function () {
                        return this._as3Object.border;
                    },
                    set: function (value) {
                        this._as3Object.border = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "borderColor", {
                    get: function () {
                        return this._as3Object.borderColor;
                    },
                    set: function (value) {
                        this._as3Object.borderColor = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "bottomScroll", {
                    get: function () {
                        return this._as3Object.bottomScrollV;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "condenseWhite", {
                    get: function () {
                        return this._as3Object.condenseWhite;
                    },
                    set: function (value) {
                        this._as3Object.condenseWhite = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "embedFonts", {
                    get: function () {
                        return this._as3Object.embedFonts;
                    },
                    set: function (value) {
                        this._as3Object.embedFonts = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                AVM1TextField.prototype.getNewTextFormat = function () {
                    return this._as3Object.defaultTextFormat;
                };
                AVM1TextField.prototype.getTextFormat = function () {
                    return this._as3Object.getTextFormat;
                };
                Object.defineProperty(AVM1TextField.prototype, "_height", {
                    get: function () {
                        return this._as3Object.height;
                    },
                    set: function (value) {
                        if (isNaN(value)) {
                            return;
                        }
                        this._as3Object.height = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "_highquality", {
                    get: function () {
                        return 1;
                    },
                    set: function (value) {
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "hscroll", {
                    get: function () {
                        return this._as3Object.scrollH;
                    },
                    set: function (value) {
                        this._as3Object.scrollH = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "html", {
                    get: function () {
                        throw 'Not implemented: get$_html';
                    },
                    set: function (value) {
                        throw 'Not implemented: set$_html';
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "htmlText", {
                    get: function () {
                        return this._as3Object.htmlText;
                    },
                    set: function (value) {
                        this._as3Object.htmlText = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "length", {
                    get: function () {
                        return this._as3Object.length;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "maxChars", {
                    get: function () {
                        return this._as3Object.maxChars;
                    },
                    set: function (value) {
                        this._as3Object.maxChars = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "maxhscroll", {
                    get: function () {
                        return this._as3Object.maxScrollH;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "maxscroll", {
                    get: function () {
                        return this._as3Object.maxScrollV;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "multiline", {
                    get: function () {
                        return this._as3Object.multiline;
                    },
                    set: function (value) {
                        this._as3Object.multiline = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "_name", {
                    get: function () {
                        return this.as3Object._name;
                    },
                    set: function (value) {
                        this.as3Object._name = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "_parent", {
                    get: function () {
                        return this._as3Object.parent;
                    },
                    set: function (value) {
                        throw 'Not implemented: set$_parent';
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "password", {
                    get: function () {
                        return this._as3Object.displayAsPassword;
                    },
                    set: function (value) {
                        this._as3Object.displayAsPassword = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "_quality", {
                    get: function () {
                        return 'HIGH';
                    },
                    set: function (value) {
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "_rotation", {
                    get: function () {
                        return this._as3Object.rotation;
                    },
                    set: function (value) {
                        this._as3Object.rotation = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "scroll", {
                    get: function () {
                        return this._as3Object.scrollV;
                    },
                    set: function (value) {
                        this._as3Object.scrollV = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "selectable", {
                    get: function () {
                        return this._as3Object.selectable;
                    },
                    set: function (value) {
                        this._as3Object.selectable = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                AVM1TextField.prototype.setNewTextFormat = function (value) {
                    this._as3Object.defaultTextFormat = value;
                };
                AVM1TextField.prototype.setTextFormat = function () {
                    this._as3Object.setTextFormat.apply(this._as3Object, arguments);
                };
                Object.defineProperty(AVM1TextField.prototype, "_soundbuftime", {
                    get: function () {
                        throw 'Not implemented: get$_soundbuftime';
                    },
                    set: function (value) {
                        throw 'Not implemented: set$_soundbuftime';
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "tabEnabled", {
                    get: function () {
                        return this._as3Object.tabEnabled;
                    },
                    set: function (value) {
                        this._as3Object.tabEnabled = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "tabIndex", {
                    get: function () {
                        return this._as3Object.tabIndex;
                    },
                    set: function (value) {
                        this._as3Object.tabIndex = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "_target", {
                    get: function () {
                        return Lib.AVM1Utils.getTarget(this);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "text", {
                    get: function () {
                        return this._as3Object.text;
                    },
                    set: function (value) {
                        this._as3Object.text = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "textColor", {
                    get: function () {
                        return this._as3Object.textColor;
                    },
                    set: function (value) {
                        this._as3Object.textColor = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "textHeight", {
                    get: function () {
                        return this._as3Object.textHeight;
                    },
                    set: function (value) {
                        throw 'Not supported: set$textHeight';
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "textWidth", {
                    get: function () {
                        return this._as3Object.textWidth;
                    },
                    set: function (value) {
                        throw 'Not supported: set$textWidth';
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "type", {
                    get: function () {
                        return this._as3Object.type;
                    },
                    set: function (value) {
                        this._as3Object.type = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "_url", {
                    get: function () {
                        return this._as3Object.loaderInfo.url;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "variable", {
                    get: function () {
                        return this._variable;
                    },
                    set: function (name) {
                        if (name === this._variable) {
                            return;
                        }
                        var instance = this.as3Object;
                        if (this._exitFrameHandler && !name) {
                            instance.removeEventListener('exitFrame', this._exitFrameHandler);
                            this._exitFrameHandler = null;
                        }
                        this._variable = name;
                        if (!this._exitFrameHandler && name) {
                            this._exitFrameHandler = this._onAS3ObjectExitFrame.bind(this);
                            instance.addEventListener('exitFrame', this._exitFrameHandler);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                AVM1TextField.prototype._onAS3ObjectExitFrame = function () {
                    this._syncTextFieldValue(this.as3Object, this._variable);
                };
                AVM1TextField.prototype._syncTextFieldValue = function (instance, name) {
                    var clip;
                    var hasPath = name.indexOf('.') >= 0 || name.indexOf(':') >= 0;
                    var avm1ContextUtils = this.context.utils;
                    if (hasPath) {
                        var targetPath = name.split(/[.:\/]/g);
                        name = targetPath.pop();
                        if (targetPath[0] == '_root' || targetPath[0] === '') {
                            if (instance.root === null) {
                                return;
                            }
                            clip = Lib.getAVM1Object(instance.root, this.context);
                            targetPath.shift();
                            if (targetPath[0] === '') {
                                targetPath.shift();
                            }
                        }
                        else {
                            clip = Lib.getAVM1Object(instance._parent, this.context);
                        }
                        while (targetPath.length > 0) {
                            var childName = targetPath.shift();
                            clip = avm1ContextUtils.getProperty(clip, childName);
                            if (!clip) {
                                return;
                            }
                        }
                    }
                    else {
                        clip = Lib.getAVM1Object(instance._parent, this.context);
                    }
                    if (!avm1ContextUtils.hasProperty(clip, name)) {
                        avm1ContextUtils.setProperty(clip, name, instance.text);
                    }
                    instance.text = '' + avm1ContextUtils.getProperty(clip, name);
                };
                Object.defineProperty(AVM1TextField.prototype, "_visible", {
                    get: function () {
                        return this._as3Object.visible;
                    },
                    set: function (value) {
                        this._as3Object.visible = +value !== 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "_width", {
                    get: function () {
                        return this._as3Object.width;
                    },
                    set: function (value) {
                        if (isNaN(value)) {
                            return;
                        }
                        this._as3Object.width = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "wordWrap", {
                    get: function () {
                        return this._as3Object.wordWrap;
                    },
                    set: function (value) {
                        this._as3Object.wordWrap = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "_x", {
                    get: function () {
                        return this._as3Object.x;
                    },
                    set: function (value) {
                        if (isNaN(value)) {
                            return;
                        }
                        this._as3Object.x = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "_xmouse", {
                    get: function () {
                        return this._as3Object.mouseX;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "_xscale", {
                    get: function () {
                        return this._as3Object.scaleX;
                    },
                    set: function (value) {
                        if (isNaN(value)) {
                            return;
                        }
                        this._as3Object.scaleX = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "_y", {
                    get: function () {
                        return this._as3Object.y;
                    },
                    set: function (value) {
                        if (isNaN(value)) {
                            return;
                        }
                        this._as3Object.y = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "_ymouse", {
                    get: function () {
                        return this._as3Object.mouseY;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1TextField.prototype, "_yscale", {
                    get: function () {
                        return this._as3Object.scaleY;
                    },
                    set: function (value) {
                        if (isNaN(value)) {
                            return;
                        }
                        this._as3Object.scaleY = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                AVM1TextField.prototype._initEventsHandlers = function () {
                    this.bindEvents([
                        new Lib.AVM1EventHandler('onDragOut', 'dragOut'),
                        new Lib.AVM1EventHandler('onDragOver', 'dragOver'),
                        new Lib.AVM1EventHandler('onKeyDown', 'keyDown'),
                        new Lib.AVM1EventHandler('onKeyUp', 'keyUp'),
                        new Lib.AVM1EventHandler('onKillFocus', 'focusOut', function (e) {
                            return [e.relatedObject];
                        }),
                        new Lib.AVM1EventHandler('onLoad', 'load'),
                        new Lib.AVM1EventHandler('onMouseDown', 'mouseDown'),
                        new Lib.AVM1EventHandler('onMouseUp', 'mouseUp'),
                        new Lib.AVM1EventHandler('onPress', 'mouseDown'),
                        new Lib.AVM1EventHandler('onRelease', 'mouseUp'),
                        new Lib.AVM1EventHandler('onReleaseOutside', 'releaseOutside'),
                        new Lib.AVM1EventHandler('onRollOut', 'mouseOut'),
                        new Lib.AVM1EventHandler('onRollOver', 'mouseOver'),
                        new Lib.AVM1EventHandler('onSetFocus', 'focusIn', function (e) {
                            return [e.relatedObject];
                        })
                    ]);
                };
                return AVM1TextField;
            })(Lib.AVM1SymbolBase);
            Lib.AVM1TextField = AVM1TextField;
        })(Lib = AVM1.Lib || (AVM1.Lib = {}));
    })(AVM1 = Shumway.AVM1 || (Shumway.AVM1 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM1;
    (function (AVM1) {
        var Lib;
        (function (Lib) {
            var flash = Shumway.AVM2.AS.flash;
            var AVM1Color = (function () {
                function AVM1Color(target_mc) {
                    this._target = Lib.AVM1Utils.resolveTarget(target_mc);
                }
                AVM1Color.createAVM1Class = function () {
                    return Lib.wrapAVM1Class(AVM1Color, [], ['getRGB', 'getTransform', 'setRGB', 'setTransform']);
                };
                AVM1Color.prototype.getRGB = function () {
                    var transform = this.getTransform();
                    return transform.asGetPublicProperty('color');
                };
                AVM1Color.prototype.getTransform = function () {
                    return this._target.as3Object.transform.colorTransform;
                };
                AVM1Color.prototype.setRGB = function (offset) {
                    var transform = new flash.geom.ColorTransform();
                    transform.asSetPublicProperty('color', offset);
                    this.setTransform(transform);
                };
                AVM1Color.prototype.setTransform = function (transform) {
                    this._target.as3Object.transform.colorTransform = transform;
                };
                return AVM1Color;
            })();
            Lib.AVM1Color = AVM1Color;
        })(Lib = AVM1.Lib || (AVM1.Lib = {}));
    })(AVM1 = Shumway.AVM1 || (Shumway.AVM1 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM1;
    (function (AVM1) {
        var Lib;
        (function (Lib) {
            var flash = Shumway.AVM2.AS.flash;
            var AVM1Transform = (function () {
                function AVM1Transform(target_mc) {
                    this._target = Lib.AVM1Utils.resolveTarget(target_mc);
                }
                AVM1Transform.createAVM1Class = function () {
                    return Lib.wrapAVM1Class(AVM1Transform, [], ['matrix', 'concatenatedMatrix', 'colorTransform', 'pixelBounds']);
                };
                Object.defineProperty(AVM1Transform.prototype, "matrix", {
                    get: function () {
                        return this._target.as3Object.transform.matrix;
                    },
                    set: function (value) {
                        if (value instanceof flash.geom.Matrix) {
                            this._target.as3Object.transform.matrix = value;
                            return;
                        }
                        if (value == null) {
                            return;
                        }
                        var m = this.matrix;
                        if (value.asHasProperty(undefined, 'a', 0)) {
                            m.a = value.asGetPublicProperty('a');
                        }
                        if (value.asHasProperty(undefined, 'b', 0)) {
                            m.b = value.asGetPublicProperty('b');
                        }
                        if (value.asHasProperty(undefined, 'c', 0)) {
                            m.c = value.asGetPublicProperty('c');
                        }
                        if (value.asHasProperty(undefined, 'd', 0)) {
                            m.d = value.asGetPublicProperty('d');
                        }
                        if (value.asHasProperty(undefined, 'tx', 0)) {
                            m.tx = value.asGetPublicProperty('tx');
                        }
                        if (value.asHasProperty(undefined, 'ty', 0)) {
                            m.ty = value.asGetPublicProperty('ty');
                        }
                        this._target.as3Object.transform.matrix = m;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1Transform.prototype, "concatenatedMatrix", {
                    get: function () {
                        return this._target.as3Object.transform.concatenatedMatrix;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1Transform.prototype, "colorTransform", {
                    get: function () {
                        return this._target.as3Object.transform.colorTransform;
                    },
                    set: function (value) {
                        this._target.as3Object.transform.colorTransform = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1Transform.prototype, "pixelBounds", {
                    get: function () {
                        return this._target.as3Object.pixelBounds;
                    },
                    enumerable: true,
                    configurable: true
                });
                return AVM1Transform;
            })();
            Lib.AVM1Transform = AVM1Transform;
        })(Lib = AVM1.Lib || (AVM1.Lib = {}));
    })(AVM1 = Shumway.AVM1 || (Shumway.AVM1 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM1;
    (function (AVM1) {
        var Lib;
        (function (Lib) {
            var notImplemented = Shumway.Debug.notImplemented;
            var _asGetProperty = Object.prototype.asGetProperty;
            var _asSetProperty = Object.prototype.asSetProperty;
            var _asCallProperty = Object.prototype.asCallProperty;
            var _asHasProperty = Object.prototype.asHasProperty;
            var _asHasOwnProperty = Object.prototype.asHasOwnProperty;
            var _asHasTraitProperty = Object.prototype.asHasTraitProperty;
            var _asDeleteProperty = Object.prototype.asDeleteProperty;
            var AVM1Proxy = (function (_super) {
                __extends(AVM1Proxy, _super);
                function AVM1Proxy() {
                    false && _super.call(this);
                }
                AVM1Proxy.prototype.setTarget = function (target) {
                    this._target = target;
                };
                AVM1Proxy.prototype._isInternalProperty = function (namespaces, name, flags) {
                    if (!this._target) {
                        return true;
                    }
                    if (namespaces) {
                        return true;
                    }
                    if (name === '__proto__' || name === '__constructor__') {
                        return true;
                    }
                    return false;
                };
                AVM1Proxy.prototype.asGetProperty = function (namespaces, name, flags) {
                    var self = this;
                    if (this._isInternalProperty(namespaces, name, flags)) {
                        return _asGetProperty.call(self, namespaces, name, flags);
                    }
                    return this._target.asGetPublicProperty(name);
                };
                AVM1Proxy.prototype.asGetNumericProperty = function (name) {
                    return this._target.asGetNumericProperty(name);
                };
                AVM1Proxy.prototype.asSetNumericProperty = function (name, value) {
                    return this._target.asSetNumericProperty(name, value);
                };
                AVM1Proxy.prototype.asSetProperty = function (namespaces, name, flags, value) {
                    var self = this;
                    if (this._isInternalProperty(namespaces, name, flags)) {
                        _asSetProperty.call(self, namespaces, name, flags, value);
                        return;
                    }
                    return this._target.asSetPublicProperty(name, value);
                };
                AVM1Proxy.prototype.asCallProperty = function (namespaces, name, flags, isLex, args) {
                    var self = this;
                    if (this._isInternalProperty(namespaces, name, flags)) {
                        return _asCallProperty.call(self, namespaces, name, flags, false, args);
                    }
                    return this._target.asCallPublicProperty(name, args);
                };
                AVM1Proxy.prototype.asHasProperty = function (namespaces, name, flags) {
                    var self = this;
                    if (this._isInternalProperty(namespaces, name, flags)) {
                        return _asHasProperty.call(self, namespaces, name, flags);
                    }
                    return this._target.asHasProperty(undefined, name, 0);
                };
                AVM1Proxy.prototype.asHasOwnProperty = function (namespaces, name, flags) {
                    var self = this;
                    if (this._isInternalProperty(namespaces, name, flags)) {
                        return _asHasOwnProperty.call(self, namespaces, name, flags);
                    }
                    return this._target.asHasOwnProperty(undefined, name, 0);
                };
                AVM1Proxy.prototype.asDeleteProperty = function (namespaces, name, flags) {
                    var self = this;
                    if (_asHasTraitProperty.call(self, namespaces, name, flags)) {
                        return _asDeleteProperty.call(self, namespaces, name, flags);
                    }
                    notImplemented("AVM1Proxy asDeleteProperty");
                    return false;
                };
                AVM1Proxy.prototype.asNextName = function (index) {
                    notImplemented("AVM1Proxy asNextName");
                };
                AVM1Proxy.prototype.asNextValue = function (index) {
                    notImplemented("AVM1Proxy asNextValue");
                };
                AVM1Proxy.prototype.asNextNameIndex = function (index) {
                    notImplemented("AVM1Proxy asNextNameIndex");
                    return;
                };
                AVM1Proxy.prototype.proxyNativeMethod = function (name) {
                    var boundMethod = this._target[name].bind(this._target);
                    this._target.asSetPublicProperty(name, boundMethod);
                };
                AVM1Proxy.wrap = function (cls, natives) {
                    var wrapped = function () {
                        var nativeThis = Object.create(cls.prototype);
                        Lib.AVM1TextFormat.apply(nativeThis, arguments);
                        var proxy = this;
                        proxy.setTarget(nativeThis);
                        if (natives && natives.methods) {
                            natives.methods.forEach(proxy.proxyNativeMethod, proxy);
                        }
                    };
                    wrapped.prototype = AVM1Proxy.prototype;
                    return wrapped;
                };
                return AVM1Proxy;
            })(Shumway.AVM2.AS.ASObject);
            Lib.AVM1Proxy = AVM1Proxy;
        })(Lib = AVM1.Lib || (AVM1.Lib = {}));
    })(AVM1 = Shumway.AVM1 || (Shumway.AVM1 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM1;
    (function (AVM1) {
        var Lib;
        (function (Lib) {
            var flash = Shumway.AVM2.AS.flash;
            var asCoerceString = Shumway.AVM2.Runtime.asCoerceString;
            var AVM1TextFormat = (function (_super) {
                __extends(AVM1TextFormat, _super);
                function AVM1TextFormat(font, size, color, bold, italic, underline, url, target, align, leftMargin, rightMargin, indent, leading) {
                    false && _super.call(this, font, size, color, bold, italic, underline, url, target, align, leftMargin, rightMargin, indent, leading);
                    flash.text.TextFormat.apply(this, arguments);
                }
                AVM1TextFormat.createAVM1Class = function () {
                    return Lib.AVM1Proxy.wrap(AVM1TextFormat, {
                        methods: ['getTextExtent']
                    });
                };
                AVM1TextFormat.prototype.getTextExtent = function (text, width) {
                    text = asCoerceString(text);
                    width = +width;
                    var measureTextField = AVM1TextFormat._measureTextField;
                    if (!measureTextField) {
                        measureTextField = new flash.text.TextField();
                        measureTextField.multiline = true;
                        AVM1TextFormat._measureTextField = measureTextField;
                    }
                    if (!isNaN(width) && width > 0) {
                        measureTextField.width = width + 4;
                        measureTextField.wordWrap = true;
                    }
                    else {
                        measureTextField.wordWrap = false;
                    }
                    measureTextField.defaultTextFormat = this;
                    measureTextField.text = text;
                    var result = {};
                    var textWidth = measureTextField.textWidth;
                    var textHeight = measureTextField.textHeight;
                    result.asSetPublicProperty('width', textWidth);
                    result.asSetPublicProperty('height', textHeight);
                    result.asSetPublicProperty('textFieldWidth', textWidth + 4);
                    result.asSetPublicProperty('textFieldHeight', textHeight + 4);
                    var metrics = measureTextField.getLineMetrics(0);
                    result.asSetPublicProperty('ascent', metrics.asGetPublicProperty('ascent'));
                    result.asSetPublicProperty('descent', metrics.asGetPublicProperty('descent'));
                    return result;
                };
                return AVM1TextFormat;
            })(flash.text.TextFormat);
            Lib.AVM1TextFormat = AVM1TextFormat;
        })(Lib = AVM1.Lib || (AVM1.Lib = {}));
    })(AVM1 = Shumway.AVM1 || (Shumway.AVM1 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM1;
    (function (AVM1) {
        var Lib;
        (function (Lib) {
            var flash = Shumway.AVM2.AS.flash;
            var AVM1BitmapData = (function (_super) {
                __extends(AVM1BitmapData, _super);
                function AVM1BitmapData() {
                    _super.apply(this, arguments);
                }
                AVM1BitmapData.createAVM1Class = function () {
                    var wrapped = Lib.AVM1Proxy.wrap(AVM1BitmapData, null);
                    wrapped.asSetPublicProperty('loadBitmap', AVM1BitmapData.loadBitmap);
                    return wrapped;
                };
                AVM1BitmapData.loadBitmap = function (symbolId) {
                    symbolId = asCoerceString(symbolId);
                    var symbol = AVM1.AVM1Context.instance.getAsset(symbolId);
                    if (symbol && symbol.symbolProps instanceof flash.display.BitmapSymbol) {
                        var bitmap = AVM1BitmapData.initializeFrom(symbol);
                        bitmap.class.instanceConstructorNoInitialize.call(bitmap);
                        return bitmap;
                    }
                    return null;
                };
                return AVM1BitmapData;
            })(flash.display.BitmapData);
            Lib.AVM1BitmapData = AVM1BitmapData;
        })(Lib = AVM1.Lib || (AVM1.Lib = {}));
    })(AVM1 = Shumway.AVM1 || (Shumway.AVM1 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM1;
    (function (AVM1) {
        var Lib;
        (function (Lib) {
            var flash = Shumway.AVM2.AS.flash;
            var AVM1ExternalInterface = (function () {
                function AVM1ExternalInterface() {
                }
                AVM1ExternalInterface.createAVM1Class = function () {
                    return Lib.wrapAVM1Class(AVM1ExternalInterface, ['available', 'addCallback', 'call'], []);
                };
                Object.defineProperty(AVM1ExternalInterface, "available", {
                    get: function () {
                        return flash.external.ExternalInterface.asGetPublicProperty('available');
                    },
                    enumerable: true,
                    configurable: true
                });
                AVM1ExternalInterface.addCallback = function (methodName, instance, method) {
                    try {
                        flash.external.ExternalInterface.asCallPublicProperty('addCallback', [methodName, function () {
                            return method.apply(instance, arguments);
                        }]);
                        return true;
                    }
                    catch (e) {
                    }
                    return false;
                };
                AVM1ExternalInterface.call = function (methodName) {
                    var args = Array.prototype.slice.call(arguments, 0);
                    return flash.external.ExternalInterface.asCallPublicProperty('call', args);
                };
                return AVM1ExternalInterface;
            })();
            Lib.AVM1ExternalInterface = AVM1ExternalInterface;
        })(Lib = AVM1.Lib || (AVM1.Lib = {}));
    })(AVM1 = Shumway.AVM1 || (Shumway.AVM1 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM1;
    (function (AVM1) {
        var Lib;
        (function (Lib) {
            var flash = Shumway.AVM2.AS.flash;
            var AVM1Sound = (function (_super) {
                __extends(AVM1Sound, _super);
                function AVM1Sound(target_mc) {
                    _super.call(this);
                    this._target = Lib.AVM1Utils.resolveTarget(target_mc);
                    this._sound = null;
                    this._channel = null;
                    this._linkageID = null;
                }
                AVM1Sound.createAVM1Class = function () {
                    return Lib.wrapAVM1Class(AVM1Sound, [], ['attachSound', 'duration', 'getBytesLoaded', 'getBytesTotal', 'getPan', 'setPan', 'getTransform', 'setTransform', 'getVolume', 'setVolume', 'start', 'stop']);
                };
                AVM1Sound.prototype.attachSound = function (id) {
                    var symbol = this.context.getAsset(id);
                    if (!symbol) {
                        return;
                    }
                    var props = Object.create(symbol.symbolProps);
                    var sound = flash.media.Sound.initializeFrom(props);
                    flash.media.Sound.instanceConstructorNoInitialize.call(sound);
                    this._linkageID = id;
                    this._sound = sound;
                };
                AVM1Sound.prototype.loadSound = function (url, isStreaming) {
                };
                AVM1Sound.prototype.getBytesLoaded = function () {
                    return 0;
                };
                AVM1Sound.prototype.getBytesTotal = function () {
                    return 0;
                };
                AVM1Sound.prototype.getPan = function () {
                    var transform = this._channel && this._channel.soundTransform;
                    return transform ? transform.asGetPublicProperty('pan') * 100 : 0;
                };
                AVM1Sound.prototype.setPan = function (value) {
                    var transform = this._channel && this._channel.soundTransform;
                    if (transform) {
                        transform.asSetPublicProperty('pan', value / 100);
                        this._channel.soundTransform = transform;
                    }
                };
                AVM1Sound.prototype.getTransform = function () {
                    return null;
                };
                AVM1Sound.prototype.setTransform = function (transformObject) {
                };
                AVM1Sound.prototype.getVolume = function () {
                    var transform = this._channel && this._channel.soundTransform;
                    return transform ? transform.asGetPublicProperty('volume') * 100 : 0;
                };
                AVM1Sound.prototype.setVolume = function (value) {
                    var transform = this._channel && this._channel.soundTransform;
                    if (transform) {
                        transform.asSetPublicProperty('volume', value / 100);
                        this._channel.soundTransform = transform;
                    }
                };
                AVM1Sound.prototype.start = function (secondOffset, loops) {
                    if (!this._sound) {
                        return;
                    }
                    secondOffset = isNaN(secondOffset) || secondOffset < 0 ? 0 : +secondOffset;
                    loops = isNaN(loops) || loops < 1 ? 1 : Math.floor(loops);
                    this._stopSoundChannel();
                    this._channel = this._sound.play(secondOffset, loops - 1);
                };
                AVM1Sound.prototype._stopSoundChannel = function () {
                    if (!this._channel) {
                        return;
                    }
                    this._channel.stop();
                    this._channel = null;
                };
                AVM1Sound.prototype.stop = function (linkageID) {
                    if (!linkageID || linkageID === this._linkageID) {
                        this._stopSoundChannel();
                    }
                };
                return AVM1Sound;
            })(Lib.AVM1NativeObject);
            Lib.AVM1Sound = AVM1Sound;
        })(Lib = AVM1.Lib || (AVM1.Lib = {}));
    })(AVM1 = Shumway.AVM1 || (Shumway.AVM1 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM1;
    (function (AVM1) {
        var Lib;
        (function (Lib) {
            var flash = Shumway.AVM2.AS.flash;
            var AVM1System = (function () {
                function AVM1System() {
                }
                AVM1System.createAVM1Class = function () {
                    return Lib.wrapAVM1Class(AVM1System, ['capabilities', 'security'], []);
                };
                Object.defineProperty(AVM1System, "capabilities", {
                    get: function () {
                        return flash.system.Capabilities;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AVM1System, "security", {
                    get: function () {
                        return flash.system.Security;
                    },
                    enumerable: true,
                    configurable: true
                });
                return AVM1System;
            })();
            Lib.AVM1System = AVM1System;
        })(Lib = AVM1.Lib || (AVM1.Lib = {}));
    })(AVM1 = Shumway.AVM1 || (Shumway.AVM1 = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var AVM1;
    (function (AVM1) {
        var Lib;
        (function (Lib) {
            var flash = Shumway.AVM2.AS.flash;
            var AVM1MovieClipLoader = (function () {
                function AVM1MovieClipLoader() {
                    this._loader = new flash.display.Loader();
                }
                AVM1MovieClipLoader.createAVM1Class = function () {
                    return Lib.wrapAVM1Class(AVM1MovieClipLoader, [], ['loadClip', 'unloadClip', 'getProgress']);
                };
                AVM1MovieClipLoader.prototype.initAVM1ObjectInstance = function (context) {
                };
                AVM1MovieClipLoader.prototype.loadClip = function (url, target) {
                    this._target = typeof target === 'number' ? Lib.AVM1Utils.resolveLevel(target) : Lib.AVM1Utils.resolveTarget(target);
                    this._target.as3Object.addChild(this._loader);
                    this._loader.contentLoaderInfo.addEventListener(flash.events.Event.OPEN, this.openHandler.bind(this));
                    this._loader.contentLoaderInfo.addEventListener(flash.events.ProgressEvent.PROGRESS, this.progressHandler.bind(this));
                    this._loader.contentLoaderInfo.addEventListener(flash.events.IOErrorEvent.IO_ERROR, this.ioErrorHandler.bind(this));
                    this._loader.contentLoaderInfo.addEventListener(flash.events.Event.COMPLETE, this.completeHandler.bind(this));
                    this._loader.contentLoaderInfo.addEventListener(flash.events.Event.INIT, this.initHandler.bind(this));
                    this._loader.load(new flash.net.URLRequest(url));
                    return true;
                };
                AVM1MovieClipLoader.prototype.unloadClip = function (target) {
                    var nativeTarget = typeof target === 'number' ? Lib.AVM1Utils.resolveLevel(target) : Lib.AVM1Utils.resolveTarget(target);
                    nativeTarget.as3Object.removeChild(this._loader);
                    return true;
                };
                AVM1MovieClipLoader.prototype.getProgress = function (target) {
                    return this._loader.contentLoaderInfo.bytesLoaded;
                };
                AVM1MovieClipLoader.prototype._broadcastMessage = function (message, args) {
                    if (args === void 0) { args = null; }
                    Lib.avm1BroadcastEvent(this._target.context, this, message, args);
                };
                AVM1MovieClipLoader.prototype.openHandler = function (event) {
                    this._broadcastMessage('onLoadStart', [this._target]);
                };
                AVM1MovieClipLoader.prototype.progressHandler = function (event) {
                    this._broadcastMessage('onLoadProgress', [this._target, event.bytesLoaded, event.bytesTotal]);
                };
                AVM1MovieClipLoader.prototype.ioErrorHandler = function (event) {
                    this._broadcastMessage('onLoadError', [this._target, event.errorID, 501]);
                };
                AVM1MovieClipLoader.prototype.completeHandler = function (event) {
                    this._broadcastMessage('onLoadComplete', [this._target]);
                };
                AVM1MovieClipLoader.prototype.initHandler = function (event) {
                    var exitFrameCallback = function () {
                        this._target.as3Object.removeEventListener(flash.events.Event.EXIT_FRAME, exitFrameCallback);
                        this._broadcastMessage('onLoadInit', [this._target]);
                    }.bind(this);
                    this._target.as3Object.addEventListener(flash.events.Event.EXIT_FRAME, exitFrameCallback);
                };
                return AVM1MovieClipLoader;
            })();
            Lib.AVM1MovieClipLoader = AVM1MovieClipLoader;
        })(Lib = AVM1.Lib || (AVM1.Lib = {}));
    })(AVM1 = Shumway.AVM1 || (Shumway.AVM1 = {}));
})(Shumway || (Shumway = {}));
//# sourceMappingURL=avm1.js.map
console.timeEnd("Load AVM1 Dependencies");
var Shumway;
(function (Shumway) {
    var GFX;
    (function (GFX) {
        var assert = Shumway.Debug.assert;
        var clamp = Shumway.NumberUtilities.clamp;
        (function (TraceLevel) {
            TraceLevel[TraceLevel["None"] = 0] = "None";
            TraceLevel[TraceLevel["Brief"] = 1] = "Brief";
            TraceLevel[TraceLevel["Verbose"] = 2] = "Verbose";
        })(GFX.TraceLevel || (GFX.TraceLevel = {}));
        var TraceLevel = GFX.TraceLevel;
        var counter = Shumway.Metrics.Counter.instance;
        GFX.frameCounter = new Shumway.Metrics.Counter(true);
        GFX.traceLevel = 2 /* Verbose */;
        GFX.writer = null;
        function frameCount(name) {
            counter.count(name);
            GFX.frameCounter.count(name);
        }
        GFX.frameCount = frameCount;
        GFX.timelineBuffer = new Shumway.Tools.Profiler.TimelineBuffer("GFX");
        function enterTimeline(name, data) {
            profile && GFX.timelineBuffer && GFX.timelineBuffer.enter(name, data);
        }
        GFX.enterTimeline = enterTimeline;
        function leaveTimeline(name, data) {
            profile && GFX.timelineBuffer && GFX.timelineBuffer.leave(name, data);
        }
        GFX.leaveTimeline = leaveTimeline;
        var nativeAddColorStop = null;
        var nativeCreateLinearGradient = null;
        var nativeCreateRadialGradient = null;
        function transformStyle(context, style, colorMatrix) {
            if (!polyfillColorTransform || !colorMatrix) {
                return style;
            }
            if (typeof style === "string") {
                var rgba = Shumway.ColorUtilities.cssStyleToRGBA(style);
                return Shumway.ColorUtilities.rgbaToCSSStyle(colorMatrix.transformRGBA(rgba));
            }
            else if (style instanceof CanvasGradient) {
                if (style._template) {
                    return style._template.createCanvasGradient(context, colorMatrix);
                }
            }
            return style;
        }
        var polyfillColorTransform = true;
        if (polyfillColorTransform && typeof CanvasRenderingContext2D !== 'undefined') {
            nativeAddColorStop = CanvasGradient.prototype.addColorStop;
            nativeCreateLinearGradient = CanvasRenderingContext2D.prototype.createLinearGradient;
            nativeCreateRadialGradient = CanvasRenderingContext2D.prototype.createRadialGradient;
            CanvasRenderingContext2D.prototype.createLinearGradient = function (x0, y0, x1, y1) {
                var gradient = new CanvasLinearGradient(x0, y0, x1, y1);
                return gradient.createCanvasGradient(this, null);
            };
            CanvasRenderingContext2D.prototype.createRadialGradient = function (x0, y0, r0, x1, y1, r1) {
                var gradient = new CanvasRadialGradient(x0, y0, r0, x1, y1, r1);
                return gradient.createCanvasGradient(this, null);
            };
            CanvasGradient.prototype.addColorStop = function (offset, color) {
                nativeAddColorStop.call(this, offset, color);
                this._template.addColorStop(offset, color);
            };
        }
        var ColorStop = (function () {
            function ColorStop(offset, color) {
                this.offset = offset;
                this.color = color;
            }
            return ColorStop;
        })();
        var CanvasLinearGradient = (function () {
            function CanvasLinearGradient(x0, y0, x1, y1) {
                this.x0 = x0;
                this.y0 = y0;
                this.x1 = x1;
                this.y1 = y1;
                this.colorStops = [];
            }
            CanvasLinearGradient.prototype.addColorStop = function (offset, color) {
                this.colorStops.push(new ColorStop(offset, color));
            };
            CanvasLinearGradient.prototype.createCanvasGradient = function (context, colorMatrix) {
                var gradient = nativeCreateLinearGradient.call(context, this.x0, this.y0, this.x1, this.y1);
                var colorStops = this.colorStops;
                for (var i = 0; i < colorStops.length; i++) {
                    var colorStop = colorStops[i];
                    var offset = colorStop.offset;
                    var color = colorStop.color;
                    color = colorMatrix ? transformStyle(context, color, colorMatrix) : color;
                    nativeAddColorStop.call(gradient, offset, color);
                }
                gradient._template = this;
                gradient._transform = this._transform;
                return gradient;
            };
            return CanvasLinearGradient;
        })();
        var CanvasRadialGradient = (function () {
            function CanvasRadialGradient(x0, y0, r0, x1, y1, r1) {
                this.x0 = x0;
                this.y0 = y0;
                this.r0 = r0;
                this.x1 = x1;
                this.y1 = y1;
                this.r1 = r1;
                this.colorStops = [];
            }
            CanvasRadialGradient.prototype.addColorStop = function (offset, color) {
                this.colorStops.push(new ColorStop(offset, color));
            };
            CanvasRadialGradient.prototype.createCanvasGradient = function (context, colorMatrix) {
                var gradient = nativeCreateRadialGradient.call(context, this.x0, this.y0, this.r0, this.x1, this.y1, this.r1);
                var colorStops = this.colorStops;
                for (var i = 0; i < colorStops.length; i++) {
                    var colorStop = colorStops[i];
                    var offset = colorStop.offset;
                    var color = colorStop.color;
                    color = colorMatrix ? transformStyle(context, color, colorMatrix) : color;
                    nativeAddColorStop.call(gradient, offset, color);
                }
                gradient._template = this;
                gradient._transform = this._transform;
                return gradient;
            };
            return CanvasRadialGradient;
        })();
        var PathCommand;
        (function (PathCommand) {
            PathCommand[PathCommand["ClosePath"] = 1] = "ClosePath";
            PathCommand[PathCommand["MoveTo"] = 2] = "MoveTo";
            PathCommand[PathCommand["LineTo"] = 3] = "LineTo";
            PathCommand[PathCommand["QuadraticCurveTo"] = 4] = "QuadraticCurveTo";
            PathCommand[PathCommand["BezierCurveTo"] = 5] = "BezierCurveTo";
            PathCommand[PathCommand["ArcTo"] = 6] = "ArcTo";
            PathCommand[PathCommand["Rect"] = 7] = "Rect";
            PathCommand[PathCommand["Arc"] = 8] = "Arc";
            PathCommand[PathCommand["Save"] = 9] = "Save";
            PathCommand[PathCommand["Restore"] = 10] = "Restore";
            PathCommand[PathCommand["Transform"] = 11] = "Transform";
        })(PathCommand || (PathCommand = {}));
        var Path = (function () {
            function Path(arg) {
                this._commands = new Uint8Array(Path._arrayBufferPool.acquire(8), 0, 8);
                this._commandPosition = 0;
                this._data = new Float64Array(Path._arrayBufferPool.acquire(8 * Float64Array.BYTES_PER_ELEMENT), 0, 8);
                this._dataPosition = 0;
                if (arg instanceof Path) {
                    this.addPath(arg);
                }
            }
            Path._apply = function (path, context) {
                var commands = path._commands;
                var d = path._data;
                var i = 0;
                var j = 0;
                context.beginPath();
                var commandPosition = path._commandPosition;
                while (i < commandPosition) {
                    switch (commands[i++]) {
                        case 1 /* ClosePath */:
                            context.closePath();
                            break;
                        case 2 /* MoveTo */:
                            context.moveTo(d[j++], d[j++]);
                            break;
                        case 3 /* LineTo */:
                            context.lineTo(d[j++], d[j++]);
                            break;
                        case 4 /* QuadraticCurveTo */:
                            context.quadraticCurveTo(d[j++], d[j++], d[j++], d[j++]);
                            break;
                        case 5 /* BezierCurveTo */:
                            context.bezierCurveTo(d[j++], d[j++], d[j++], d[j++], d[j++], d[j++]);
                            break;
                        case 6 /* ArcTo */:
                            context.arcTo(d[j++], d[j++], d[j++], d[j++], d[j++]);
                            break;
                        case 7 /* Rect */:
                            context.rect(d[j++], d[j++], d[j++], d[j++]);
                            break;
                        case 8 /* Arc */:
                            context.arc(d[j++], d[j++], d[j++], d[j++], d[j++], !!d[j++]);
                            break;
                        case 9 /* Save */:
                            context.save();
                            break;
                        case 10 /* Restore */:
                            context.restore();
                            break;
                        case 11 /* Transform */:
                            context.transform(d[j++], d[j++], d[j++], d[j++], d[j++], d[j++]);
                            break;
                    }
                }
            };
            Path.prototype._ensureCommandCapacity = function (length) {
                this._commands = Path._arrayBufferPool.ensureUint8ArrayLength(this._commands, length);
            };
            Path.prototype._ensureDataCapacity = function (length) {
                this._data = Path._arrayBufferPool.ensureFloat64ArrayLength(this._data, length);
            };
            Path.prototype._writeCommand = function (command) {
                if (this._commandPosition >= this._commands.length) {
                    this._ensureCommandCapacity(this._commandPosition + 1);
                }
                this._commands[this._commandPosition++] = command;
            };
            Path.prototype._writeData = function (a, b, c, d, e, f) {
                var argc = arguments.length;
                release || assert(argc <= 6 && (argc % 2 === 0 || argc === 5));
                if (this._dataPosition + argc >= this._data.length) {
                    this._ensureDataCapacity(this._dataPosition + argc);
                }
                var data = this._data;
                var p = this._dataPosition;
                data[p] = a;
                data[p + 1] = b;
                if (argc > 2) {
                    data[p + 2] = c;
                    data[p + 3] = d;
                    if (argc > 4) {
                        data[p + 4] = e;
                        if (argc === 6) {
                            data[p + 5] = f;
                        }
                    }
                }
                this._dataPosition += argc;
            };
            Path.prototype.closePath = function () {
                this._writeCommand(1 /* ClosePath */);
            };
            Path.prototype.moveTo = function (x, y) {
                this._writeCommand(2 /* MoveTo */);
                this._writeData(x, y);
            };
            Path.prototype.lineTo = function (x, y) {
                this._writeCommand(3 /* LineTo */);
                this._writeData(x, y);
            };
            Path.prototype.quadraticCurveTo = function (cpx, cpy, x, y) {
                this._writeCommand(4 /* QuadraticCurveTo */);
                this._writeData(cpx, cpy, x, y);
            };
            Path.prototype.bezierCurveTo = function (cp1x, cp1y, cp2x, cp2y, x, y) {
                this._writeCommand(5 /* BezierCurveTo */);
                this._writeData(cp1x, cp1y, cp2x, cp2y, x, y);
            };
            Path.prototype.arcTo = function (x1, y1, x2, y2, radius) {
                this._writeCommand(6 /* ArcTo */);
                this._writeData(x1, y1, x2, y2, radius);
            };
            Path.prototype.rect = function (x, y, width, height) {
                this._writeCommand(7 /* Rect */);
                this._writeData(x, y, width, height);
            };
            Path.prototype.arc = function (x, y, radius, startAngle, endAngle, anticlockwise) {
                this._writeCommand(8 /* Arc */);
                this._writeData(x, y, radius, startAngle, endAngle, +anticlockwise);
            };
            Path.prototype.addPath = function (path, transformation) {
                if (transformation) {
                    this._writeCommand(9 /* Save */);
                    this._writeCommand(11 /* Transform */);
                    this._writeData(transformation.a, transformation.b, transformation.c, transformation.d, transformation.e, transformation.f);
                }
                var newCommandPosition = this._commandPosition + path._commandPosition;
                if (newCommandPosition >= this._commands.length) {
                    this._ensureCommandCapacity(newCommandPosition);
                }
                var commands = this._commands;
                var pathCommands = path._commands;
                for (var i = this._commandPosition, j = 0; i < newCommandPosition; i++) {
                    commands[i] = pathCommands[j++];
                }
                this._commandPosition = newCommandPosition;
                var newDataPosition = this._dataPosition + path._dataPosition;
                if (newDataPosition >= this._data.length) {
                    this._ensureDataCapacity(newDataPosition);
                }
                var data = this._data;
                var pathData = path._data;
                for (var i = this._dataPosition, j = 0; i < newDataPosition; i++) {
                    data[i] = pathData[j++];
                }
                this._dataPosition = newDataPosition;
                if (transformation) {
                    this._writeCommand(10 /* Restore */);
                }
            };
            Path._arrayBufferPool = new Shumway.ArrayBufferPool();
            return Path;
        })();
        GFX.Path = Path;
        if (typeof CanvasRenderingContext2D !== 'undefined' && (typeof Path2D === 'undefined' || !Path2D.prototype.addPath)) {
            var nativeFill = CanvasRenderingContext2D.prototype.fill;
            CanvasRenderingContext2D.prototype.fill = (function (path, fillRule) {
                if (arguments.length) {
                    if (path instanceof Path) {
                        Path._apply(path, this);
                    }
                    else {
                        fillRule = path;
                    }
                }
                if (fillRule) {
                    nativeFill.call(this, fillRule);
                }
                else {
                    nativeFill.call(this);
                }
            });
            var nativeStroke = CanvasRenderingContext2D.prototype.stroke;
            CanvasRenderingContext2D.prototype.stroke = (function (path, fillRule) {
                if (arguments.length) {
                    if (path instanceof Path) {
                        Path._apply(path, this);
                    }
                    else {
                        fillRule = path;
                    }
                }
                if (fillRule) {
                    nativeStroke.call(this, fillRule);
                }
                else {
                    nativeStroke.call(this);
                }
            });
            var nativeClip = CanvasRenderingContext2D.prototype.clip;
            CanvasRenderingContext2D.prototype.clip = (function (path, fillRule) {
                if (arguments.length) {
                    if (path instanceof Path) {
                        Path._apply(path, this);
                    }
                    else {
                        fillRule = path;
                    }
                }
                if (fillRule) {
                    nativeClip.call(this, fillRule);
                }
                else {
                    nativeClip.call(this);
                }
            });
            window['Path2D'] = Path;
        }
        if (typeof CanvasPattern !== "undefined") {
            if (Path2D.prototype.addPath) {
                function setTransform(matrix) {
                    this._transform = matrix;
                    if (this._template) {
                        this._template._transform = matrix;
                    }
                }
                if (!CanvasPattern.prototype.setTransform) {
                    CanvasPattern.prototype.setTransform = setTransform;
                }
                if (!CanvasGradient.prototype.setTransform) {
                    CanvasGradient.prototype.setTransform = setTransform;
                }
                var originalFill = CanvasRenderingContext2D.prototype.fill;
                var originalStroke = CanvasRenderingContext2D.prototype.stroke;
                CanvasRenderingContext2D.prototype.fill = (function fill(path, fillRule) {
                    var supportsStyle = this.fillStyle instanceof CanvasPattern || this.fillStyle instanceof CanvasGradient;
                    var hasStyleTransformation = !!this.fillStyle._transform;
                    if (supportsStyle && hasStyleTransformation && path instanceof Path2D) {
                        var m = this.fillStyle._transform;
                        var i;
                        try {
                            i = m.inverse();
                        }
                        catch (e) {
                            i = m = GFX.Geometry.Matrix.createIdentitySVGMatrix();
                        }
                        this.transform(m.a, m.b, m.c, m.d, m.e, m.f);
                        var transformedPath = new Path2D();
                        transformedPath.addPath(path, i);
                        originalFill.call(this, transformedPath, fillRule);
                        this.transform(i.a, i.b, i.c, i.d, i.e, i.f);
                        return;
                    }
                    if (arguments.length === 0) {
                        originalFill.call(this);
                    }
                    else if (arguments.length === 1) {
                        originalFill.call(this, path);
                    }
                    else if (arguments.length === 2) {
                        originalFill.call(this, path, fillRule);
                    }
                });
                CanvasRenderingContext2D.prototype.stroke = (function stroke(path) {
                    var supportsStyle = this.strokeStyle instanceof CanvasPattern || this.strokeStyle instanceof CanvasGradient;
                    var hasStyleTransformation = !!this.strokeStyle._transform;
                    if (supportsStyle && hasStyleTransformation && path instanceof Path2D) {
                        var m = this.strokeStyle._transform;
                        var i = m.inverse();
                        this.transform(m.a, m.b, m.c, m.d, m.e, m.f);
                        var transformedPath = new Path2D();
                        transformedPath.addPath(path, i);
                        var oldLineWidth = this.lineWidth;
                        this.lineWidth *= (i.a + i.d) / 2;
                        originalStroke.call(this, transformedPath);
                        this.transform(i.a, i.b, i.c, i.d, i.e, i.f);
                        this.lineWidth = oldLineWidth;
                        return;
                    }
                    if (arguments.length === 0) {
                        originalStroke.call(this);
                    }
                    else if (arguments.length === 1) {
                        originalStroke.call(this, path);
                    }
                });
            }
        }
        if (typeof CanvasRenderingContext2D !== 'undefined') {
            (function () {
                var MIN_LINE_WIDTH = 1;
                var MAX_LINE_WIDTH = 1024;
                CanvasRenderingContext2D.prototype.flashStroke = function (path, lineScaleMode) {
                    var m = this.currentTransform;
                    if (!m) {
                        this.stroke(path);
                        return;
                    }
                    var transformedPath = new Path2D();
                    transformedPath.addPath(path, m);
                    var oldLineWidth = this.lineWidth;
                    this.setTransform(1, 0, 0, 1, 0, 0);
                    switch (lineScaleMode) {
                        case 0 /* None */:
                            break;
                        case 1 /* Normal */:
                            this.lineWidth = clamp(oldLineWidth * (Shumway.getScaleX(m) + Shumway.getScaleY(m)) / 2, MIN_LINE_WIDTH, MAX_LINE_WIDTH);
                            break;
                        case 2 /* Vertical */:
                            this.lineWidth = clamp(oldLineWidth * Shumway.getScaleY(m), MIN_LINE_WIDTH, MAX_LINE_WIDTH);
                            break;
                        case 3 /* Horizontal */:
                            this.lineWidth = clamp(oldLineWidth * Shumway.getScaleX(m), MIN_LINE_WIDTH, MAX_LINE_WIDTH);
                            break;
                    }
                    this.stroke(transformedPath);
                    this.setTransform(m.a, m.b, m.c, m.d, m.e, m.f);
                    this.lineWidth = oldLineWidth;
                };
                if (!('currentTransform' in CanvasRenderingContext2D.prototype) && 'mozCurrentTransform' in CanvasRenderingContext2D.prototype) {
                    Object.defineProperty(CanvasRenderingContext2D.prototype, 'currentTransform', {
                        get: mozPolyfillCurrentTransform
                    });
                }
                function mozPolyfillCurrentTransform() {
                    release || assert(this.mozCurrentTransform);
                    return GFX.Geometry.Matrix.createSVGMatrixFromArray(this.mozCurrentTransform);
                }
            })();
        }
        if (typeof CanvasRenderingContext2D !== 'undefined' && CanvasRenderingContext2D.prototype.globalColorMatrix === undefined) {
            var previousFill = CanvasRenderingContext2D.prototype.fill;
            var previousStroke = CanvasRenderingContext2D.prototype.stroke;
            var previousFillText = CanvasRenderingContext2D.prototype.fillText;
            var previousStrokeText = CanvasRenderingContext2D.prototype.strokeText;
            Object.defineProperty(CanvasRenderingContext2D.prototype, "globalColorMatrix", {
                get: function () {
                    if (this._globalColorMatrix) {
                        return this._globalColorMatrix.clone();
                    }
                    return null;
                },
                set: function (matrix) {
                    if (!matrix) {
                        this._globalColorMatrix = null;
                        return;
                    }
                    if (this._globalColorMatrix) {
                        this._globalColorMatrix.set(matrix);
                    }
                    else {
                        this._globalColorMatrix = matrix.clone();
                    }
                },
                enumerable: true,
                configurable: true
            });
            CanvasRenderingContext2D.prototype.fill = (function (a, b) {
                var oldFillStyle = null;
                if (this._globalColorMatrix) {
                    oldFillStyle = this.fillStyle;
                    this.fillStyle = transformStyle(this, this.fillStyle, this._globalColorMatrix);
                }
                if (arguments.length === 0) {
                    previousFill.call(this);
                }
                else if (arguments.length === 1) {
                    previousFill.call(this, a);
                }
                else if (arguments.length === 2) {
                    previousFill.call(this, a, b);
                }
                if (oldFillStyle) {
                    this.fillStyle = oldFillStyle;
                }
            });
            CanvasRenderingContext2D.prototype.stroke = (function (a, b) {
                var oldStrokeStyle = null;
                if (this._globalColorMatrix) {
                    oldStrokeStyle = this.strokeStyle;
                    this.strokeStyle = transformStyle(this, this.strokeStyle, this._globalColorMatrix);
                }
                if (arguments.length === 0) {
                    previousStroke.call(this);
                }
                else if (arguments.length === 1) {
                    previousStroke.call(this, a);
                }
                if (oldStrokeStyle) {
                    this.strokeStyle = oldStrokeStyle;
                }
            });
            CanvasRenderingContext2D.prototype.fillText = (function (text, x, y, maxWidth) {
                var oldFillStyle = null;
                if (this._globalColorMatrix) {
                    oldFillStyle = this.fillStyle;
                    this.fillStyle = transformStyle(this, this.fillStyle, this._globalColorMatrix);
                }
                if (arguments.length === 3) {
                    previousFillText.call(this, text, x, y);
                }
                else if (arguments.length === 4) {
                    previousFillText.call(this, text, x, y, maxWidth);
                }
                else {
                    Shumway.Debug.unexpected();
                }
                if (oldFillStyle) {
                    this.fillStyle = oldFillStyle;
                }
            });
            CanvasRenderingContext2D.prototype.strokeText = (function (text, x, y, maxWidth) {
                var oldStrokeStyle = null;
                if (this._globalColorMatrix) {
                    oldStrokeStyle = this.strokeStyle;
                    this.strokeStyle = transformStyle(this, this.strokeStyle, this._globalColorMatrix);
                }
                if (arguments.length === 3) {
                    previousStrokeText.call(this, text, x, y);
                }
                else if (arguments.length === 4) {
                    previousStrokeText.call(this, text, x, y, maxWidth);
                }
                else {
                    Shumway.Debug.unexpected();
                }
                if (oldStrokeStyle) {
                    this.strokeStyle = oldStrokeStyle;
                }
            });
        }
    })(GFX = Shumway.GFX || (Shumway.GFX = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var GFX;
    (function (GFX) {
        var ScreenShot = (function () {
            function ScreenShot(dataURL, w, h) {
                this.dataURL = dataURL;
                this.w = w;
                this.h = h;
            }
            return ScreenShot;
        })();
        GFX.ScreenShot = ScreenShot;
    })(GFX = Shumway.GFX || (Shumway.GFX = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var assert = Shumway.Debug.assert;
    var LRUList = (function () {
        function LRUList() {
            this._count = 0;
            this._head = this._tail = null;
        }
        Object.defineProperty(LRUList.prototype, "count", {
            get: function () {
                return this._count;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LRUList.prototype, "head", {
            get: function () {
                return this._head;
            },
            enumerable: true,
            configurable: true
        });
        LRUList.prototype._unshift = function (node) {
            release || assert(!node.next && !node.previous);
            if (this._count === 0) {
                this._head = this._tail = node;
            }
            else {
                node.next = this._head;
                node.next.previous = node;
                this._head = node;
            }
            this._count++;
        };
        LRUList.prototype._remove = function (node) {
            release || assert(this._count > 0);
            if (node === this._head && node === this._tail) {
                this._head = this._tail = null;
            }
            else if (node === this._head) {
                this._head = (node.next);
                this._head.previous = null;
            }
            else if (node == this._tail) {
                this._tail = (node.previous);
                this._tail.next = null;
            }
            else {
                node.previous.next = node.next;
                node.next.previous = node.previous;
            }
            node.previous = node.next = null;
            this._count--;
        };
        LRUList.prototype.use = function (node) {
            if (this._head === node) {
                return;
            }
            if (node.next || node.previous || this._tail === node) {
                this._remove(node);
            }
            this._unshift(node);
        };
        LRUList.prototype.pop = function () {
            if (!this._tail) {
                return null;
            }
            var node = this._tail;
            this._remove(node);
            return node;
        };
        LRUList.prototype.visit = function (callback, forward) {
            if (forward === void 0) { forward = true; }
            var node = (forward ? this._head : this._tail);
            while (node) {
                if (!callback(node)) {
                    break;
                }
                node = (forward ? node.next : node.previous);
            }
        };
        return LRUList;
    })();
    Shumway.LRUList = LRUList;
    function getDeterminant(matrix) {
        return matrix.a * matrix.d - matrix.b * matrix.c;
    }
    function getScaleX(matrix) {
        return matrix.a;
        if (matrix.a === 1 && matrix.b === 0) {
            return 1;
        }
        var result = Math.sqrt(matrix.a * matrix.a + matrix.b * matrix.b);
        return getDeterminant(matrix) < 0 ? -result : result;
    }
    Shumway.getScaleX = getScaleX;
    function getScaleY(matrix) {
        return matrix.d;
        if (matrix.c === 0 && matrix.d === 1) {
            return 1;
        }
        var result = Math.sqrt(matrix.c * matrix.c + matrix.d * matrix.d);
        return getDeterminant(matrix) < 0 ? -result : result;
    }
    Shumway.getScaleY = getScaleY;
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var GFX;
    (function (GFX) {
        var Option = Shumway.Options.Option;
        var OptionSet = Shumway.Options.OptionSet;
        var shumwayOptions = Shumway.Settings.shumwayOptions;
        var rendererOptions = shumwayOptions.register(new OptionSet("Renderer Options"));
        GFX.imageUpdateOption = rendererOptions.register(new Option("", "imageUpdate", "boolean", true, "Enable image updating."));
        GFX.imageConvertOption = rendererOptions.register(new Option("", "imageConvert", "boolean", true, "Enable image conversion."));
        GFX.stageOptions = shumwayOptions.register(new OptionSet("Stage Renderer Options"));
        GFX.forcePaint = GFX.stageOptions.register(new Option("", "forcePaint", "boolean", false, "Force repainting."));
        GFX.ignoreViewport = GFX.stageOptions.register(new Option("", "ignoreViewport", "boolean", false, "Cull elements outside of the viewport."));
        GFX.viewportLoupeDiameter = GFX.stageOptions.register(new Option("", "viewportLoupeDiameter", "number", 256, "Size of the viewport loupe.", { range: { min: 1, max: 1024, step: 1 } }));
        GFX.disableClipping = GFX.stageOptions.register(new Option("", "disableClipping", "boolean", false, "Disable clipping."));
        GFX.debugClipping = GFX.stageOptions.register(new Option("", "debugClipping", "boolean", false, "Disable clipping."));
        GFX.hud = GFX.stageOptions.register(new Option("", "hud", "boolean", false, "Enable HUD."));
        var webGLOptions = GFX.stageOptions.register(new OptionSet("WebGL Options"));
        GFX.perspectiveCamera = webGLOptions.register(new Option("", "pc", "boolean", false, "Use perspective camera."));
        GFX.perspectiveCameraFOV = webGLOptions.register(new Option("", "pcFOV", "number", 60, "Perspective Camera FOV."));
        GFX.perspectiveCameraDistance = webGLOptions.register(new Option("", "pcDistance", "number", 2, "Perspective Camera Distance."));
        GFX.perspectiveCameraAngle = webGLOptions.register(new Option("", "pcAngle", "number", 0, "Perspective Camera Angle."));
        GFX.perspectiveCameraAngleRotate = webGLOptions.register(new Option("", "pcRotate", "boolean", false, "Rotate Use perspective camera."));
        GFX.perspectiveCameraSpacing = webGLOptions.register(new Option("", "pcSpacing", "number", 0.01, "Element Spacing."));
        GFX.perspectiveCameraSpacingInflate = webGLOptions.register(new Option("", "pcInflate", "boolean", false, "Rotate Use perspective camera."));
        GFX.drawTiles = webGLOptions.register(new Option("", "drawTiles", "boolean", false, "Draw WebGL Tiles"));
        GFX.drawSurfaces = webGLOptions.register(new Option("", "drawSurfaces", "boolean", false, "Draw WebGL Surfaces."));
        GFX.drawSurface = webGLOptions.register(new Option("", "drawSurface", "number", -1, "Draw WebGL Surface #"));
        GFX.drawElements = webGLOptions.register(new Option("", "drawElements", "boolean", true, "Actually call gl.drawElements. This is useful to test if the GPU is the bottleneck."));
        GFX.disableSurfaceUploads = webGLOptions.register(new Option("", "disableSurfaceUploads", "boolean", false, "Disable surface uploads."));
        GFX.premultipliedAlpha = webGLOptions.register(new Option("", "premultipliedAlpha", "boolean", false, "Set the premultipliedAlpha flag on getContext()."));
        GFX.unpackPremultiplyAlpha = webGLOptions.register(new Option("", "unpackPremultiplyAlpha", "boolean", true, "Use UNPACK_PREMULTIPLY_ALPHA_WEBGL in pixelStorei."));
        var factorChoices = {
            ZERO: 0,
            ONE: 1,
            SRC_COLOR: 768,
            ONE_MINUS_SRC_COLOR: 769,
            DST_COLOR: 774,
            ONE_MINUS_DST_COLOR: 775,
            SRC_ALPHA: 770,
            ONE_MINUS_SRC_ALPHA: 771,
            DST_ALPHA: 772,
            ONE_MINUS_DST_ALPHA: 773,
            SRC_ALPHA_SATURATE: 776,
            CONSTANT_COLOR: 32769,
            ONE_MINUS_CONSTANT_COLOR: 32770,
            CONSTANT_ALPHA: 32771,
            ONE_MINUS_CONSTANT_ALPHA: 32772
        };
        GFX.sourceBlendFactor = webGLOptions.register(new Option("", "sourceBlendFactor", "number", factorChoices.ONE, "", { choices: factorChoices }));
        GFX.destinationBlendFactor = webGLOptions.register(new Option("", "destinationBlendFactor", "number", factorChoices.ONE_MINUS_SRC_ALPHA, "", { choices: factorChoices }));
        var canvas2DOptions = GFX.stageOptions.register(new OptionSet("Canvas2D Options"));
        GFX.clipDirtyRegions = canvas2DOptions.register(new Option("", "clipDirtyRegions", "boolean", false, "Clip dirty regions."));
        GFX.clipCanvas = canvas2DOptions.register(new Option("", "clipCanvas", "boolean", false, "Clip Regions."));
        GFX.cull = canvas2DOptions.register(new Option("", "cull", "boolean", false, "Enable culling."));
        GFX.snapToDevicePixels = canvas2DOptions.register(new Option("", "snapToDevicePixels", "boolean", false, ""));
        GFX.imageSmoothing = canvas2DOptions.register(new Option("", "imageSmoothing", "boolean", false, ""));
        GFX.masking = canvas2DOptions.register(new Option("", "masking", "boolean", true, "Composite Mask."));
        GFX.blending = canvas2DOptions.register(new Option("", "blending", "boolean", true, ""));
        GFX.debugLayers = canvas2DOptions.register(new Option("", "debugLayers", "boolean", false, ""));
        GFX.filters = canvas2DOptions.register(new Option("", "filters", "boolean", false, ""));
        GFX.cacheShapes = canvas2DOptions.register(new Option("", "cacheShapes", "boolean", true, ""));
        GFX.cacheShapesMaxSize = canvas2DOptions.register(new Option("", "cacheShapesMaxSize", "number", 256, "", { range: { min: 1, max: 1024, step: 1 } }));
        GFX.cacheShapesThreshold = canvas2DOptions.register(new Option("", "cacheShapesThreshold", "number", 256, "", { range: { min: 1, max: 1024, step: 1 } }));
    })(GFX = Shumway.GFX || (Shumway.GFX = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var GFX;
    (function (GFX) {
        var Geometry;
        (function (Geometry) {
            var clamp = Shumway.NumberUtilities.clamp;
            var pow2 = Shumway.NumberUtilities.pow2;
            var epsilonEquals = Shumway.NumberUtilities.epsilonEquals;
            var assert = Shumway.Debug.assert;
            function radianToDegrees(r) {
                return r * 180 / Math.PI;
            }
            Geometry.radianToDegrees = radianToDegrees;
            function degreesToRadian(d) {
                return d * Math.PI / 180;
            }
            Geometry.degreesToRadian = degreesToRadian;
            function quadraticBezier(from, cp, to, t) {
                var inverseT = 1 - t;
                return from * inverseT * inverseT + 2 * cp * inverseT * t + to * t * t;
            }
            Geometry.quadraticBezier = quadraticBezier;
            function quadraticBezierExtreme(from, cp, to) {
                var t = (from - cp) / (from - 2 * cp + to);
                if (t < 0) {
                    return from;
                }
                if (t > 1) {
                    return to;
                }
                return quadraticBezier(from, cp, to, t);
            }
            Geometry.quadraticBezierExtreme = quadraticBezierExtreme;
            function cubicBezier(from, cp, cp2, to, t) {
                var tSq = t * t;
                var inverseT = 1 - t;
                var inverseTSq = inverseT * inverseT;
                return from * inverseT * inverseTSq + 3 * cp * t * inverseTSq + 3 * cp2 * inverseT * tSq + to * t * tSq;
            }
            Geometry.cubicBezier = cubicBezier;
            function cubicBezierExtremes(from, cp, cp2, to) {
                var d1 = cp - from;
                var d2 = cp2 - cp;
                d2 *= 2;
                var d3 = to - cp2;
                if (d1 + d3 === d2) {
                    d3 *= 1.0001;
                }
                var fHead = 2 * d1 - d2;
                var part1 = d2 - 2 * d1;
                var fCenter = Math.sqrt(part1 * part1 - 4 * d1 * (d1 - d2 + d3));
                var fTail = 2 * (d1 - d2 + d3);
                var t1 = (fHead + fCenter) / fTail;
                var t2 = (fHead - fCenter) / fTail;
                var result = [];
                if (t1 >= 0 && t1 <= 1) {
                    result.push(cubicBezier(from, cp, cp2, to, t1));
                }
                if (t2 >= 0 && t2 <= 1) {
                    result.push(cubicBezier(from, cp, cp2, to, t2));
                }
                return result;
            }
            Geometry.cubicBezierExtremes = cubicBezierExtremes;
            var E = 0.0001;
            function eqFloat(a, b) {
                return Math.abs(a - b) < E;
            }
            var Point = (function () {
                function Point(x, y) {
                    this.x = x;
                    this.y = y;
                }
                Point.prototype.setElements = function (x, y) {
                    this.x = x;
                    this.y = y;
                    return this;
                };
                Point.prototype.set = function (other) {
                    this.x = other.x;
                    this.y = other.y;
                    return this;
                };
                Point.prototype.dot = function (other) {
                    return this.x * other.x + this.y * other.y;
                };
                Point.prototype.squaredLength = function () {
                    return this.dot(this);
                };
                Point.prototype.distanceTo = function (other) {
                    return Math.sqrt(this.dot(other));
                };
                Point.prototype.sub = function (other) {
                    this.x -= other.x;
                    this.y -= other.y;
                    return this;
                };
                Point.prototype.mul = function (value) {
                    this.x *= value;
                    this.y *= value;
                    return this;
                };
                Point.prototype.clone = function () {
                    return new Point(this.x, this.y);
                };
                Point.prototype.toString = function (digits) {
                    if (digits === void 0) { digits = 2; }
                    return "{x: " + this.x.toFixed(digits) + ", y: " + this.y.toFixed(digits) + "}";
                };
                Point.prototype.inTriangle = function (a, b, c) {
                    var s = a.y * c.x - a.x * c.y + (c.y - a.y) * this.x + (a.x - c.x) * this.y;
                    var t = a.x * b.y - a.y * b.x + (a.y - b.y) * this.x + (b.x - a.x) * this.y;
                    if ((s < 0) != (t < 0)) {
                        return false;
                    }
                    var T = -b.y * c.x + a.y * (c.x - b.x) + a.x * (b.y - c.y) + b.x * c.y;
                    if (T < 0.0) {
                        s = -s;
                        t = -t;
                        T = -T;
                    }
                    return s > 0 && t > 0 && (s + t) < T;
                };
                Point.createEmpty = function () {
                    return new Point(0, 0);
                };
                Point.createEmptyPoints = function (count) {
                    var result = [];
                    for (var i = 0; i < count; i++) {
                        result.push(new Point(0, 0));
                    }
                    return result;
                };
                return Point;
            })();
            Geometry.Point = Point;
            var Point3D = (function () {
                function Point3D(x, y, z) {
                    this.x = x;
                    this.y = y;
                    this.z = z;
                }
                Point3D.prototype.setElements = function (x, y, z) {
                    this.x = x;
                    this.y = y;
                    this.z = z;
                    return this;
                };
                Point3D.prototype.set = function (other) {
                    this.x = other.x;
                    this.y = other.y;
                    this.z = other.z;
                    return this;
                };
                Point3D.prototype.dot = function (other) {
                    return this.x * other.x + this.y * other.y + this.z * other.z;
                };
                Point3D.prototype.cross = function (other) {
                    var x = this.y * other.z - this.z * other.y;
                    var y = this.z * other.x - this.x * other.z;
                    var z = this.x * other.y - this.y * other.x;
                    this.x = x;
                    this.y = y;
                    this.z = z;
                    return this;
                };
                Point3D.prototype.squaredLength = function () {
                    return this.dot(this);
                };
                Point3D.prototype.sub = function (other) {
                    this.x -= other.x;
                    this.y -= other.y;
                    this.z -= other.z;
                    return this;
                };
                Point3D.prototype.mul = function (value) {
                    this.x *= value;
                    this.y *= value;
                    this.z *= value;
                    return this;
                };
                Point3D.prototype.normalize = function () {
                    var length = Math.sqrt(this.squaredLength());
                    if (length > 0.00001) {
                        this.mul(1 / length);
                    }
                    else {
                        this.setElements(0, 0, 0);
                    }
                    return this;
                };
                Point3D.prototype.clone = function () {
                    return new Point3D(this.x, this.y, this.z);
                };
                Point3D.prototype.toString = function (digits) {
                    if (digits === void 0) { digits = 2; }
                    return "{x: " + this.x.toFixed(digits) + ", y: " + this.y.toFixed(digits) + ", z: " + this.z.toFixed(digits) + "}";
                };
                Point3D.createEmpty = function () {
                    return new Point3D(0, 0, 0);
                };
                Point3D.createEmptyPoints = function (count) {
                    var result = [];
                    for (var i = 0; i < count; i++) {
                        result.push(new Point3D(0, 0, 0));
                    }
                    return result;
                };
                return Point3D;
            })();
            Geometry.Point3D = Point3D;
            var Rectangle = (function () {
                function Rectangle(x, y, w, h) {
                    this.setElements(x, y, w, h);
                    Rectangle.allocationCount++;
                }
                Rectangle.prototype.setElements = function (x, y, w, h) {
                    this.x = x;
                    this.y = y;
                    this.w = w;
                    this.h = h;
                };
                Rectangle.prototype.set = function (other) {
                    this.x = other.x;
                    this.y = other.y;
                    this.w = other.w;
                    this.h = other.h;
                };
                Rectangle.prototype.contains = function (other) {
                    var r1 = other.x + other.w;
                    var b1 = other.y + other.h;
                    var r2 = this.x + this.w;
                    var b2 = this.y + this.h;
                    return (other.x >= this.x) && (other.x < r2) && (other.y >= this.y) && (other.y < b2) && (r1 > this.x) && (r1 <= r2) && (b1 > this.y) && (b1 <= b2);
                };
                Rectangle.prototype.containsPoint = function (point) {
                    return (point.x >= this.x) && (point.x < this.x + this.w) && (point.y >= this.y) && (point.y < this.y + this.h);
                };
                Rectangle.prototype.isContained = function (others) {
                    for (var i = 0; i < others.length; i++) {
                        if (others[i].contains(this)) {
                            return true;
                        }
                    }
                    return false;
                };
                Rectangle.prototype.isSmallerThan = function (other) {
                    return this.w < other.w && this.h < other.h;
                };
                Rectangle.prototype.isLargerThan = function (other) {
                    return this.w > other.w && this.h > other.h;
                };
                Rectangle.prototype.union = function (other) {
                    if (this.isEmpty()) {
                        this.set(other);
                        return;
                    }
                    else if (other.isEmpty()) {
                        return;
                    }
                    var x = this.x, y = this.y;
                    if (this.x > other.x) {
                        x = other.x;
                    }
                    if (this.y > other.y) {
                        y = other.y;
                    }
                    var x0 = this.x + this.w;
                    if (x0 < other.x + other.w) {
                        x0 = other.x + other.w;
                    }
                    var y0 = this.y + this.h;
                    if (y0 < other.y + other.h) {
                        y0 = other.y + other.h;
                    }
                    this.x = x;
                    this.y = y;
                    this.w = x0 - x;
                    this.h = y0 - y;
                };
                Rectangle.prototype.isEmpty = function () {
                    return this.w <= 0 || this.h <= 0;
                };
                Rectangle.prototype.setEmpty = function () {
                    this.x = 0;
                    this.y = 0;
                    this.w = 0;
                    this.h = 0;
                };
                Rectangle.prototype.intersect = function (other) {
                    var result = Rectangle.createEmpty();
                    if (this.isEmpty() || other.isEmpty()) {
                        result.setEmpty();
                        return result;
                    }
                    result.x = Math.max(this.x, other.x);
                    result.y = Math.max(this.y, other.y);
                    result.w = Math.min(this.x + this.w, other.x + other.w) - result.x;
                    result.h = Math.min(this.y + this.h, other.y + other.h) - result.y;
                    if (result.isEmpty()) {
                        result.setEmpty();
                    }
                    this.set(result);
                };
                Rectangle.prototype.intersects = function (other) {
                    if (this.isEmpty() || other.isEmpty()) {
                        return false;
                    }
                    var x = Math.max(this.x, other.x);
                    var y = Math.max(this.y, other.y);
                    var w = Math.min(this.x + this.w, other.x + other.w) - x;
                    var h = Math.min(this.y + this.h, other.y + other.h) - y;
                    return !(w <= 0 || h <= 0);
                };
                Rectangle.prototype.intersectsTransformedAABB = function (other, matrix) {
                    var rectangle = Rectangle._temporary;
                    rectangle.set(other);
                    matrix.transformRectangleAABB(rectangle);
                    return this.intersects(rectangle);
                };
                Rectangle.prototype.intersectsTranslated = function (other, tx, ty) {
                    if (this.isEmpty() || other.isEmpty()) {
                        return false;
                    }
                    var x = Math.max(this.x, other.x + tx);
                    var y = Math.max(this.y, other.y + ty);
                    var w = Math.min(this.x + this.w, other.x + tx + other.w) - x;
                    var h = Math.min(this.y + this.h, other.y + ty + other.h) - y;
                    return !(w <= 0 || h <= 0);
                };
                Rectangle.prototype.area = function () {
                    return this.w * this.h;
                };
                Rectangle.prototype.clone = function () {
                    var rectangle = Rectangle.allocate();
                    rectangle.set(this);
                    return rectangle;
                };
                Rectangle.allocate = function () {
                    var dirtyStack = Rectangle._dirtyStack;
                    if (dirtyStack.length) {
                        return dirtyStack.pop();
                    }
                    else {
                        return new Rectangle(12345, 67890, 12345, 67890);
                    }
                };
                Rectangle.prototype.free = function () {
                    Rectangle._dirtyStack.push(this);
                };
                Rectangle.prototype.snap = function () {
                    var x1 = Math.ceil(this.x + this.w);
                    var y1 = Math.ceil(this.y + this.h);
                    this.x = Math.floor(this.x);
                    this.y = Math.floor(this.y);
                    this.w = x1 - this.x;
                    this.h = y1 - this.y;
                    return this;
                };
                Rectangle.prototype.scale = function (x, y) {
                    this.x *= x;
                    this.y *= y;
                    this.w *= x;
                    this.h *= y;
                    return this;
                };
                Rectangle.prototype.offset = function (x, y) {
                    this.x += x;
                    this.y += y;
                    return this;
                };
                Rectangle.prototype.resize = function (w, h) {
                    this.w += w;
                    this.h += h;
                    return this;
                };
                Rectangle.prototype.expand = function (w, h) {
                    this.offset(-w, -h).resize(2 * w, 2 * h);
                    return this;
                };
                Rectangle.prototype.getCenter = function () {
                    return new Point(this.x + this.w / 2, this.y + this.h / 2);
                };
                Rectangle.prototype.getAbsoluteBounds = function () {
                    return new Rectangle(0, 0, this.w, this.h);
                };
                Rectangle.prototype.toString = function (digits) {
                    if (digits === void 0) { digits = 2; }
                    return "{" + this.x.toFixed(digits) + ", " + this.y.toFixed(digits) + ", " + this.w.toFixed(digits) + ", " + this.h.toFixed(digits) + "}";
                };
                Rectangle.createEmpty = function () {
                    var rectangle = Rectangle.allocate();
                    rectangle.setEmpty();
                    return rectangle;
                };
                Rectangle.createSquare = function (size) {
                    return new Rectangle(-size / 2, -size / 2, size, size);
                };
                Rectangle.createMaxI16 = function () {
                    return new Rectangle(-32768 /* MinI16 */, -32768 /* MinI16 */, 65535 /* MaxU16 */, 65535 /* MaxU16 */);
                };
                Rectangle.prototype.setMaxI16 = function () {
                    this.setElements(-32768 /* MinI16 */, -32768 /* MinI16 */, 65535 /* MaxU16 */, 65535 /* MaxU16 */);
                };
                Rectangle.prototype.getCorners = function (points) {
                    points[0].x = this.x;
                    points[0].y = this.y;
                    points[1].x = this.x + this.w;
                    points[1].y = this.y;
                    points[2].x = this.x + this.w;
                    points[2].y = this.y + this.h;
                    points[3].x = this.x;
                    points[3].y = this.y + this.h;
                };
                Rectangle.allocationCount = 0;
                Rectangle._temporary = new Rectangle(0, 0, 0, 0);
                Rectangle._dirtyStack = [];
                return Rectangle;
            })();
            Geometry.Rectangle = Rectangle;
            var OBB = (function () {
                function OBB(corners) {
                    this.corners = corners.map(function (corner) {
                        return corner.clone();
                    });
                    this.axes = [
                        corners[1].clone().sub(corners[0]),
                        corners[3].clone().sub(corners[0])
                    ];
                    this.origins = [];
                    for (var i = 0; i < 2; i++) {
                        this.axes[i].mul(1 / this.axes[i].squaredLength());
                        this.origins.push(corners[0].dot(this.axes[i]));
                    }
                }
                OBB.prototype.getBounds = function () {
                    return OBB.getBounds(this.corners);
                };
                OBB.getBounds = function (points) {
                    var min = new Point(Number.MAX_VALUE, Number.MAX_VALUE);
                    var max = new Point(Number.MIN_VALUE, Number.MIN_VALUE);
                    for (var i = 0; i < 4; i++) {
                        var x = points[i].x, y = points[i].y;
                        min.x = Math.min(min.x, x);
                        min.y = Math.min(min.y, y);
                        max.x = Math.max(max.x, x);
                        max.y = Math.max(max.y, y);
                    }
                    return new Rectangle(min.x, min.y, max.x - min.x, max.y - min.y);
                };
                OBB.prototype.intersects = function (other) {
                    return this.intersectsOneWay(other) && other.intersectsOneWay(this);
                };
                OBB.prototype.intersectsOneWay = function (other) {
                    for (var i = 0; i < 2; i++) {
                        for (var j = 0; j < 4; j++) {
                            var t = other.corners[j].dot(this.axes[i]);
                            var tMin, tMax;
                            if (j === 0) {
                                tMax = tMin = t;
                            }
                            else {
                                if (t < tMin) {
                                    tMin = t;
                                }
                                else if (t > tMax) {
                                    tMax = t;
                                }
                            }
                        }
                        if ((tMin > 1 + this.origins[i]) || (tMax < this.origins[i])) {
                            return false;
                        }
                    }
                    return true;
                };
                return OBB;
            })();
            Geometry.OBB = OBB;
            (function (MatrixType) {
                MatrixType[MatrixType["Unknown"] = 0x0000] = "Unknown";
                MatrixType[MatrixType["Identity"] = 0x0001] = "Identity";
                MatrixType[MatrixType["Translation"] = 0x0002] = "Translation";
            })(Geometry.MatrixType || (Geometry.MatrixType = {}));
            var MatrixType = Geometry.MatrixType;
            var Matrix = (function () {
                function Matrix(a, b, c, d, tx, ty) {
                    this._data = new Float64Array(6);
                    this._type = 0 /* Unknown */;
                    this.setElements(a, b, c, d, tx, ty);
                    Matrix.allocationCount++;
                }
                Object.defineProperty(Matrix.prototype, "a", {
                    get: function () {
                        return this._data[0];
                    },
                    set: function (a) {
                        this._data[0] = a;
                        this._type = 0 /* Unknown */;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Matrix.prototype, "b", {
                    get: function () {
                        return this._data[1];
                    },
                    set: function (b) {
                        this._data[1] = b;
                        this._type = 0 /* Unknown */;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Matrix.prototype, "c", {
                    get: function () {
                        return this._data[2];
                    },
                    set: function (c) {
                        this._data[2] = c;
                        this._type = 0 /* Unknown */;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Matrix.prototype, "d", {
                    get: function () {
                        return this._data[3];
                    },
                    set: function (d) {
                        this._data[3] = d;
                        this._type = 0 /* Unknown */;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Matrix.prototype, "tx", {
                    get: function () {
                        return this._data[4];
                    },
                    set: function (tx) {
                        this._data[4] = tx;
                        if (this._type === 1 /* Identity */) {
                            this._type = 2 /* Translation */;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Matrix.prototype, "ty", {
                    get: function () {
                        return this._data[5];
                    },
                    set: function (ty) {
                        this._data[5] = ty;
                        if (this._type === 1 /* Identity */) {
                            this._type = 2 /* Translation */;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Matrix.prototype.setElements = function (a, b, c, d, tx, ty) {
                    var m = this._data;
                    m[0] = a;
                    m[1] = b;
                    m[2] = c;
                    m[3] = d;
                    m[4] = tx;
                    m[5] = ty;
                    this._type = 0 /* Unknown */;
                };
                Matrix.prototype.set = function (other) {
                    var m = this._data, n = other._data;
                    m[0] = n[0];
                    m[1] = n[1];
                    m[2] = n[2];
                    m[3] = n[3];
                    m[4] = n[4];
                    m[5] = n[5];
                    this._type = other._type;
                };
                Matrix.prototype.emptyArea = function (query) {
                    var m = this._data;
                    if (m[0] === 0 || m[3] === 0) {
                        return true;
                    }
                    return false;
                };
                Matrix.prototype.infiniteArea = function (query) {
                    var m = this._data;
                    if (Math.abs(m[0]) === Infinity || Math.abs(m[3]) === Infinity) {
                        return true;
                    }
                    return false;
                };
                Matrix.prototype.isEqual = function (other) {
                    if (this._type === 1 /* Identity */ && other._type === 1 /* Identity */) {
                        return true;
                    }
                    var m = this._data, n = other._data;
                    return m[0] === n[0] && m[1] === n[1] && m[2] === n[2] && m[3] === n[3] && m[4] === n[4] && m[5] === n[5];
                };
                Matrix.prototype.clone = function () {
                    var matrix = Matrix.allocate();
                    matrix.set(this);
                    return matrix;
                };
                Matrix.allocate = function () {
                    var dirtyStack = Matrix._dirtyStack;
                    var matrix = null;
                    if (dirtyStack.length) {
                        return dirtyStack.pop();
                    }
                    else {
                        return new Matrix(12345, 12345, 12345, 12345, 12345, 12345);
                    }
                };
                Matrix.prototype.free = function () {
                    Matrix._dirtyStack.push(this);
                };
                Matrix.prototype.transform = function (a, b, c, d, tx, ty) {
                    var m = this._data;
                    var _a = m[0], _b = m[1], _c = m[2], _d = m[3], _tx = m[4], _ty = m[5];
                    m[0] = _a * a + _c * b;
                    m[1] = _b * a + _d * b;
                    m[2] = _a * c + _c * d;
                    m[3] = _b * c + _d * d;
                    m[4] = _a * tx + _c * ty + _tx;
                    m[5] = _b * tx + _d * ty + _ty;
                    this._type = 0 /* Unknown */;
                    return this;
                };
                Matrix.prototype.transformRectangle = function (rectangle, points) {
                    release || assert(points.length === 4);
                    var m = this._data, a = m[0], b = m[1], c = m[2], d = m[3], tx = m[4], ty = m[5];
                    var x = rectangle.x;
                    var y = rectangle.y;
                    var w = rectangle.w;
                    var h = rectangle.h;
                    points[0].x = a * x + c * y + tx;
                    points[0].y = b * x + d * y + ty;
                    points[1].x = a * (x + w) + c * y + tx;
                    points[1].y = b * (x + w) + d * y + ty;
                    points[2].x = a * (x + w) + c * (y + h) + tx;
                    points[2].y = b * (x + w) + d * (y + h) + ty;
                    points[3].x = a * x + c * (y + h) + tx;
                    points[3].y = b * x + d * (y + h) + ty;
                };
                Matrix.prototype.isTranslationOnly = function () {
                    if (this._type === 2 /* Translation */) {
                        return true;
                    }
                    var m = this._data;
                    if (m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1) {
                        this._type = 2 /* Translation */;
                        return true;
                    }
                    else if (epsilonEquals(m[0], 1) && epsilonEquals(m[1], 0) && epsilonEquals(m[2], 0) && epsilonEquals(m[3], 1)) {
                        this._type = 2 /* Translation */;
                        return true;
                    }
                    return false;
                };
                Matrix.prototype.transformRectangleAABB = function (rectangle) {
                    var m = this._data;
                    if (this._type === 1 /* Identity */) {
                        return;
                    }
                    else if (this._type === 2 /* Translation */) {
                        rectangle.x += m[4];
                        rectangle.y += m[5];
                        return;
                    }
                    var a = m[0], b = m[1], c = m[2], d = m[3], tx = m[4], ty = m[5];
                    var x = rectangle.x;
                    var y = rectangle.y;
                    var w = rectangle.w;
                    var h = rectangle.h;
                    var x0 = a * x + c * y + tx;
                    var y0 = b * x + d * y + ty;
                    var x1 = a * (x + w) + c * y + tx;
                    var y1 = b * (x + w) + d * y + ty;
                    var x2 = a * (x + w) + c * (y + h) + tx;
                    var y2 = b * (x + w) + d * (y + h) + ty;
                    var x3 = a * x + c * (y + h) + tx;
                    var y3 = b * x + d * (y + h) + ty;
                    var tmp = 0;
                    if (x0 > x1) {
                        tmp = x0;
                        x0 = x1;
                        x1 = tmp;
                    }
                    if (x2 > x3) {
                        tmp = x2;
                        x2 = x3;
                        x3 = tmp;
                    }
                    rectangle.x = x0 < x2 ? x0 : x2;
                    rectangle.w = (x1 > x3 ? x1 : x3) - rectangle.x;
                    if (y0 > y1) {
                        tmp = y0;
                        y0 = y1;
                        y1 = tmp;
                    }
                    if (y2 > y3) {
                        tmp = y2;
                        y2 = y3;
                        y3 = tmp;
                    }
                    rectangle.y = y0 < y2 ? y0 : y2;
                    rectangle.h = (y1 > y3 ? y1 : y3) - rectangle.y;
                };
                Matrix.prototype.scale = function (x, y) {
                    var m = this._data;
                    m[0] *= x;
                    m[1] *= y;
                    m[2] *= x;
                    m[3] *= y;
                    m[4] *= x;
                    m[5] *= y;
                    this._type = 0 /* Unknown */;
                    return this;
                };
                Matrix.prototype.scaleClone = function (x, y) {
                    if (x === 1 && y === 1) {
                        return this;
                    }
                    return this.clone().scale(x, y);
                };
                Matrix.prototype.rotate = function (angle) {
                    var m = this._data, a = m[0], b = m[1], c = m[2], d = m[3], tx = m[4], ty = m[5];
                    var cos = Math.cos(angle);
                    var sin = Math.sin(angle);
                    m[0] = cos * a - sin * b;
                    m[1] = sin * a + cos * b;
                    m[2] = cos * c - sin * d;
                    m[3] = sin * c + cos * d;
                    m[4] = cos * tx - sin * ty;
                    m[5] = sin * tx + cos * ty;
                    this._type = 0 /* Unknown */;
                    return this;
                };
                Matrix.prototype.concat = function (other) {
                    if (other._type === 1 /* Identity */) {
                        return this;
                    }
                    var m = this._data, n = other._data;
                    var a = m[0] * n[0];
                    var b = 0.0;
                    var c = 0.0;
                    var d = m[3] * n[3];
                    var tx = m[4] * n[0] + n[4];
                    var ty = m[5] * n[3] + n[5];
                    if (m[1] !== 0.0 || m[2] !== 0.0 || n[1] !== 0.0 || n[2] !== 0.0) {
                        a += m[1] * n[2];
                        d += m[2] * n[1];
                        b += m[0] * n[1] + m[1] * n[3];
                        c += m[2] * n[0] + m[3] * n[2];
                        tx += m[5] * n[2];
                        ty += m[4] * n[1];
                    }
                    m[0] = a;
                    m[1] = b;
                    m[2] = c;
                    m[3] = d;
                    m[4] = tx;
                    m[5] = ty;
                    this._type = 0 /* Unknown */;
                    return this;
                };
                Matrix.prototype.concatClone = function (other) {
                    return this.clone().concat(other);
                };
                Matrix.prototype.preMultiply = function (other) {
                    var m = this._data, n = other._data;
                    if (other._type === 2 /* Translation */ && (this._type & (1 /* Identity */ | 2 /* Translation */))) {
                        m[4] += n[4];
                        m[5] += n[5];
                        this._type = 2 /* Translation */;
                        return;
                    }
                    else if (other._type === 1 /* Identity */) {
                        return;
                    }
                    var a = n[0] * m[0];
                    var b = 0.0;
                    var c = 0.0;
                    var d = n[3] * m[3];
                    var tx = n[4] * m[0] + m[4];
                    var ty = n[5] * m[3] + m[5];
                    if (n[1] !== 0.0 || n[2] !== 0.0 || m[1] !== 0.0 || m[2] !== 0.0) {
                        a += n[1] * m[2];
                        d += n[2] * m[1];
                        b += n[0] * m[1] + n[1] * m[3];
                        c += n[2] * m[0] + n[3] * m[2];
                        tx += n[5] * m[2];
                        ty += n[4] * m[1];
                    }
                    m[0] = a;
                    m[1] = b;
                    m[2] = c;
                    m[3] = d;
                    m[4] = tx;
                    m[5] = ty;
                    this._type = 0 /* Unknown */;
                };
                Matrix.prototype.translate = function (x, y) {
                    var m = this._data;
                    m[4] += x;
                    m[5] += y;
                    if (this._type === 1 /* Identity */) {
                        this._type = 2 /* Translation */;
                    }
                    return this;
                };
                Matrix.prototype.setIdentity = function () {
                    var m = this._data;
                    m[0] = 1;
                    m[1] = 0;
                    m[2] = 0;
                    m[3] = 1;
                    m[4] = 0;
                    m[5] = 0;
                    this._type = 1 /* Identity */;
                };
                Matrix.prototype.isIdentity = function () {
                    if (this._type === 1 /* Identity */) {
                        return true;
                    }
                    var m = this._data;
                    return m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1 && m[4] === 0 && m[5] === 0;
                };
                Matrix.prototype.transformPoint = function (point) {
                    if (this._type === 1 /* Identity */) {
                        return;
                    }
                    var m = this._data;
                    var x = point.x;
                    var y = point.y;
                    point.x = m[0] * x + m[2] * y + m[4];
                    point.y = m[1] * x + m[3] * y + m[5];
                };
                Matrix.prototype.transformPoints = function (points) {
                    if (this._type === 1 /* Identity */) {
                        return;
                    }
                    for (var i = 0; i < points.length; i++) {
                        this.transformPoint(points[i]);
                    }
                };
                Matrix.prototype.deltaTransformPoint = function (point) {
                    if (this._type === 1 /* Identity */) {
                        return;
                    }
                    var m = this._data;
                    var x = point.x;
                    var y = point.y;
                    point.x = m[0] * x + m[2] * y;
                    point.y = m[1] * x + m[3] * y;
                };
                Matrix.prototype.inverse = function (result) {
                    var m = this._data, r = result._data;
                    if (this._type === 1 /* Identity */) {
                        result.setIdentity();
                        return;
                    }
                    else if (this._type === 2 /* Translation */) {
                        r[0] = 1;
                        r[1] = 0;
                        r[2] = 0;
                        r[3] = 1;
                        r[4] = -m[4];
                        r[5] = -m[5];
                        result._type = 2 /* Translation */;
                        return;
                    }
                    var b = m[1];
                    var c = m[2];
                    var tx = m[4];
                    var ty = m[5];
                    if (b === 0 && c === 0) {
                        var a = r[0] = 1 / m[0];
                        var d = r[3] = 1 / m[3];
                        r[1] = 0;
                        r[2] = 0;
                        r[4] = -a * tx;
                        r[5] = -d * ty;
                    }
                    else {
                        var a = m[0];
                        var d = m[3];
                        var determinant = a * d - b * c;
                        if (determinant === 0) {
                            result.setIdentity();
                            return;
                        }
                        determinant = 1 / determinant;
                        r[0] = d * determinant;
                        b = r[1] = -b * determinant;
                        c = r[2] = -c * determinant;
                        d = r[3] = a * determinant;
                        r[4] = -(r[0] * tx + c * ty);
                        r[5] = -(b * tx + d * ty);
                    }
                    result._type = 0 /* Unknown */;
                    return;
                };
                Matrix.prototype.getTranslateX = function () {
                    return this._data[4];
                };
                Matrix.prototype.getTranslateY = function () {
                    return this._data[4];
                };
                Matrix.prototype.getScaleX = function () {
                    var m = this._data;
                    if (m[0] === 1 && m[1] === 0) {
                        return 1;
                    }
                    var result = Math.sqrt(m[0] * m[0] + m[1] * m[1]);
                    return m[0] > 0 ? result : -result;
                };
                Matrix.prototype.getScaleY = function () {
                    var m = this._data;
                    if (m[2] === 0 && m[3] === 1) {
                        return 1;
                    }
                    var result = Math.sqrt(m[2] * m[2] + m[3] * m[3]);
                    return m[3] > 0 ? result : -result;
                };
                Matrix.prototype.getScale = function () {
                    return (this.getScaleX() + this.getScaleY()) / 2;
                };
                Matrix.prototype.getAbsoluteScaleX = function () {
                    return Math.abs(this.getScaleX());
                };
                Matrix.prototype.getAbsoluteScaleY = function () {
                    return Math.abs(this.getScaleY());
                };
                Matrix.prototype.getRotation = function () {
                    var m = this._data;
                    return Math.atan(m[1] / m[0]) * 180 / Math.PI;
                };
                Matrix.prototype.isScaleOrRotation = function () {
                    var m = this._data;
                    return Math.abs(m[0] * m[2] + m[1] * m[3]) < 0.01;
                };
                Matrix.prototype.toString = function (digits) {
                    if (digits === void 0) { digits = 2; }
                    var m = this._data;
                    return "{" + m[0].toFixed(digits) + ", " + m[1].toFixed(digits) + ", " + m[2].toFixed(digits) + ", " + m[3].toFixed(digits) + ", " + m[4].toFixed(digits) + ", " + m[5].toFixed(digits) + "}";
                };
                Matrix.prototype.toWebGLMatrix = function () {
                    var m = this._data;
                    return new Float32Array([
                        m[0],
                        m[1],
                        0,
                        m[2],
                        m[3],
                        0,
                        m[4],
                        m[5],
                        1
                    ]);
                };
                Matrix.prototype.toCSSTransform = function () {
                    var m = this._data;
                    return "matrix(" + m[0] + ", " + m[1] + ", " + m[2] + ", " + m[3] + ", " + m[4] + ", " + m[5] + ")";
                };
                Matrix.createIdentity = function () {
                    var matrix = Matrix.allocate();
                    matrix.setIdentity();
                    return matrix;
                };
                Matrix.prototype.toSVGMatrix = function () {
                    var m = this._data;
                    var matrix = Matrix._svg.createSVGMatrix();
                    matrix.a = m[0];
                    matrix.b = m[1];
                    matrix.c = m[2];
                    matrix.d = m[3];
                    matrix.e = m[4];
                    matrix.f = m[5];
                    return matrix;
                };
                Matrix.prototype.snap = function () {
                    var m = this._data;
                    if (this.isTranslationOnly()) {
                        m[0] = 1;
                        m[1] = 0;
                        m[2] = 0;
                        m[3] = 1;
                        m[4] = Math.round(m[4]);
                        m[5] = Math.round(m[5]);
                        this._type = 2 /* Translation */;
                        return true;
                    }
                    return false;
                };
                Matrix.createIdentitySVGMatrix = function () {
                    return Matrix._svg.createSVGMatrix();
                };
                Matrix.createSVGMatrixFromArray = function (array) {
                    var matrix = Matrix._svg.createSVGMatrix();
                    matrix.a = array[0];
                    matrix.b = array[1];
                    matrix.c = array[2];
                    matrix.d = array[3];
                    matrix.e = array[4];
                    matrix.f = array[5];
                    return matrix;
                };
                Matrix.allocationCount = 0;
                Matrix._dirtyStack = [];
                Matrix._svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
                Matrix.multiply = function (dst, src) {
                    var n = src._data;
                    dst.transform(n[0], n[1], n[2], n[3], n[4], n[5]);
                };
                return Matrix;
            })();
            Geometry.Matrix = Matrix;
            var Matrix3D = (function () {
                function Matrix3D(m) {
                    this._m = new Float32Array(m);
                }
                Matrix3D.prototype.asWebGLMatrix = function () {
                    return this._m;
                };
                Matrix3D.createCameraLookAt = function (cameraPosition, target, up) {
                    var zAxis = cameraPosition.clone().sub(target).normalize();
                    var xAxis = up.clone().cross(zAxis).normalize();
                    var yAxis = zAxis.clone().cross(xAxis);
                    return new Matrix3D([
                        xAxis.x,
                        xAxis.y,
                        xAxis.z,
                        0,
                        yAxis.x,
                        yAxis.y,
                        yAxis.z,
                        0,
                        zAxis.x,
                        zAxis.y,
                        zAxis.z,
                        0,
                        cameraPosition.x,
                        cameraPosition.y,
                        cameraPosition.z,
                        1
                    ]);
                };
                Matrix3D.createLookAt = function (cameraPosition, target, up) {
                    var zAxis = cameraPosition.clone().sub(target).normalize();
                    var xAxis = up.clone().cross(zAxis).normalize();
                    var yAxis = zAxis.clone().cross(xAxis);
                    return new Matrix3D([
                        xAxis.x,
                        yAxis.x,
                        zAxis.x,
                        0,
                        yAxis.x,
                        yAxis.y,
                        zAxis.y,
                        0,
                        zAxis.x,
                        yAxis.z,
                        zAxis.z,
                        0,
                        -xAxis.dot(cameraPosition),
                        -yAxis.dot(cameraPosition),
                        -zAxis.dot(cameraPosition),
                        1
                    ]);
                };
                Matrix3D.prototype.mul = function (point) {
                    var v = [point.x, point.y, point.z, 0];
                    var m = this._m;
                    var d = [];
                    for (var i = 0; i < 4; i++) {
                        d[i] = 0.0;
                        var row = i * 4;
                        for (var j = 0; j < 4; j++) {
                            d[i] += m[row + j] * v[j];
                        }
                    }
                    return new Point3D(d[0], d[1], d[2]);
                };
                Matrix3D.create2DProjection = function (width, height, depth) {
                    return new Matrix3D([
                        2 / width,
                        0,
                        0,
                        0,
                        0,
                        -2 / height,
                        0,
                        0,
                        0,
                        0,
                        2 / depth,
                        0,
                        -1,
                        1,
                        0,
                        1,
                    ]);
                };
                Matrix3D.createPerspective = function (fieldOfViewInRadians, aspectRatio, near, far) {
                    var f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewInRadians);
                    var rangeInverse = 1.0 / (near - far);
                    return new Matrix3D([
                        f / aspectRatio,
                        0,
                        0,
                        0,
                        0,
                        f,
                        0,
                        0,
                        0,
                        0,
                        (near + far) * rangeInverse,
                        -1,
                        0,
                        0,
                        near * far * rangeInverse * 2,
                        0
                    ]);
                };
                Matrix3D.createIdentity = function () {
                    return Matrix3D.createTranslation(0, 0, 0);
                };
                Matrix3D.createTranslation = function (tx, ty, tz) {
                    return new Matrix3D([
                        1,
                        0,
                        0,
                        0,
                        0,
                        1,
                        0,
                        0,
                        0,
                        0,
                        1,
                        0,
                        tx,
                        ty,
                        tz,
                        1
                    ]);
                };
                Matrix3D.createXRotation = function (angleInRadians) {
                    var c = Math.cos(angleInRadians);
                    var s = Math.sin(angleInRadians);
                    return new Matrix3D([
                        1,
                        0,
                        0,
                        0,
                        0,
                        c,
                        s,
                        0,
                        0,
                        -s,
                        c,
                        0,
                        0,
                        0,
                        0,
                        1
                    ]);
                };
                Matrix3D.createYRotation = function (angleInRadians) {
                    var c = Math.cos(angleInRadians);
                    var s = Math.sin(angleInRadians);
                    return new Matrix3D([
                        c,
                        0,
                        -s,
                        0,
                        0,
                        1,
                        0,
                        0,
                        s,
                        0,
                        c,
                        0,
                        0,
                        0,
                        0,
                        1
                    ]);
                };
                Matrix3D.createZRotation = function (angleInRadians) {
                    var c = Math.cos(angleInRadians);
                    var s = Math.sin(angleInRadians);
                    return new Matrix3D([
                        c,
                        s,
                        0,
                        0,
                        -s,
                        c,
                        0,
                        0,
                        0,
                        0,
                        1,
                        0,
                        0,
                        0,
                        0,
                        1,
                    ]);
                };
                Matrix3D.createScale = function (sx, sy, sz) {
                    return new Matrix3D([
                        sx,
                        0,
                        0,
                        0,
                        0,
                        sy,
                        0,
                        0,
                        0,
                        0,
                        sz,
                        0,
                        0,
                        0,
                        0,
                        1,
                    ]);
                };
                Matrix3D.createMultiply = function (a, b) {
                    var am = a._m;
                    var bm = b._m;
                    var a00 = am[0 * 4 + 0];
                    var a01 = am[0 * 4 + 1];
                    var a02 = am[0 * 4 + 2];
                    var a03 = am[0 * 4 + 3];
                    var a10 = am[1 * 4 + 0];
                    var a11 = am[1 * 4 + 1];
                    var a12 = am[1 * 4 + 2];
                    var a13 = am[1 * 4 + 3];
                    var a20 = am[2 * 4 + 0];
                    var a21 = am[2 * 4 + 1];
                    var a22 = am[2 * 4 + 2];
                    var a23 = am[2 * 4 + 3];
                    var a30 = am[3 * 4 + 0];
                    var a31 = am[3 * 4 + 1];
                    var a32 = am[3 * 4 + 2];
                    var a33 = am[3 * 4 + 3];
                    var b00 = bm[0 * 4 + 0];
                    var b01 = bm[0 * 4 + 1];
                    var b02 = bm[0 * 4 + 2];
                    var b03 = bm[0 * 4 + 3];
                    var b10 = bm[1 * 4 + 0];
                    var b11 = bm[1 * 4 + 1];
                    var b12 = bm[1 * 4 + 2];
                    var b13 = bm[1 * 4 + 3];
                    var b20 = bm[2 * 4 + 0];
                    var b21 = bm[2 * 4 + 1];
                    var b22 = bm[2 * 4 + 2];
                    var b23 = bm[2 * 4 + 3];
                    var b30 = bm[3 * 4 + 0];
                    var b31 = bm[3 * 4 + 1];
                    var b32 = bm[3 * 4 + 2];
                    var b33 = bm[3 * 4 + 3];
                    return new Matrix3D([
                        a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30,
                        a00 * b01 + a01 * b11 + a02 * b21 + a03 * b31,
                        a00 * b02 + a01 * b12 + a02 * b22 + a03 * b32,
                        a00 * b03 + a01 * b13 + a02 * b23 + a03 * b33,
                        a10 * b00 + a11 * b10 + a12 * b20 + a13 * b30,
                        a10 * b01 + a11 * b11 + a12 * b21 + a13 * b31,
                        a10 * b02 + a11 * b12 + a12 * b22 + a13 * b32,
                        a10 * b03 + a11 * b13 + a12 * b23 + a13 * b33,
                        a20 * b00 + a21 * b10 + a22 * b20 + a23 * b30,
                        a20 * b01 + a21 * b11 + a22 * b21 + a23 * b31,
                        a20 * b02 + a21 * b12 + a22 * b22 + a23 * b32,
                        a20 * b03 + a21 * b13 + a22 * b23 + a23 * b33,
                        a30 * b00 + a31 * b10 + a32 * b20 + a33 * b30,
                        a30 * b01 + a31 * b11 + a32 * b21 + a33 * b31,
                        a30 * b02 + a31 * b12 + a32 * b22 + a33 * b32,
                        a30 * b03 + a31 * b13 + a32 * b23 + a33 * b33
                    ]);
                };
                Matrix3D.createInverse = function (a) {
                    var m = a._m;
                    var m00 = m[0 * 4 + 0];
                    var m01 = m[0 * 4 + 1];
                    var m02 = m[0 * 4 + 2];
                    var m03 = m[0 * 4 + 3];
                    var m10 = m[1 * 4 + 0];
                    var m11 = m[1 * 4 + 1];
                    var m12 = m[1 * 4 + 2];
                    var m13 = m[1 * 4 + 3];
                    var m20 = m[2 * 4 + 0];
                    var m21 = m[2 * 4 + 1];
                    var m22 = m[2 * 4 + 2];
                    var m23 = m[2 * 4 + 3];
                    var m30 = m[3 * 4 + 0];
                    var m31 = m[3 * 4 + 1];
                    var m32 = m[3 * 4 + 2];
                    var m33 = m[3 * 4 + 3];
                    var tmp_0 = m22 * m33;
                    var tmp_1 = m32 * m23;
                    var tmp_2 = m12 * m33;
                    var tmp_3 = m32 * m13;
                    var tmp_4 = m12 * m23;
                    var tmp_5 = m22 * m13;
                    var tmp_6 = m02 * m33;
                    var tmp_7 = m32 * m03;
                    var tmp_8 = m02 * m23;
                    var tmp_9 = m22 * m03;
                    var tmp_10 = m02 * m13;
                    var tmp_11 = m12 * m03;
                    var tmp_12 = m20 * m31;
                    var tmp_13 = m30 * m21;
                    var tmp_14 = m10 * m31;
                    var tmp_15 = m30 * m11;
                    var tmp_16 = m10 * m21;
                    var tmp_17 = m20 * m11;
                    var tmp_18 = m00 * m31;
                    var tmp_19 = m30 * m01;
                    var tmp_20 = m00 * m21;
                    var tmp_21 = m20 * m01;
                    var tmp_22 = m00 * m11;
                    var tmp_23 = m10 * m01;
                    var t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) - (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);
                    var t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) - (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);
                    var t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) - (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);
                    var t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) - (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);
                    var d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);
                    return new Matrix3D([
                        d * t0,
                        d * t1,
                        d * t2,
                        d * t3,
                        d * ((tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30) - (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30)),
                        d * ((tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30) - (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30)),
                        d * ((tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30) - (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30)),
                        d * ((tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20) - (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20)),
                        d * ((tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33) - (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33)),
                        d * ((tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33) - (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33)),
                        d * ((tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33) - (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33)),
                        d * ((tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23) - (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23)),
                        d * ((tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12) - (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22)),
                        d * ((tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22) - (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02)),
                        d * ((tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02) - (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12)),
                        d * ((tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12) - (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02))
                    ]);
                };
                return Matrix3D;
            })();
            Geometry.Matrix3D = Matrix3D;
            var DirtyRegion = (function () {
                function DirtyRegion(w, h, sizeInBits) {
                    if (sizeInBits === void 0) { sizeInBits = 7; }
                    var size = this.size = 1 << sizeInBits;
                    this.sizeInBits = sizeInBits;
                    this.w = w;
                    this.h = h;
                    this.c = Math.ceil(w / size);
                    this.r = Math.ceil(h / size);
                    this.grid = [];
                    for (var y = 0; y < this.r; y++) {
                        this.grid.push([]);
                        for (var x = 0; x < this.c; x++) {
                            this.grid[y][x] = new DirtyRegion.Cell(new Rectangle(x * size, y * size, size, size));
                        }
                    }
                }
                DirtyRegion.prototype.clear = function () {
                    for (var y = 0; y < this.r; y++) {
                        for (var x = 0; x < this.c; x++) {
                            this.grid[y][x].clear();
                        }
                    }
                };
                DirtyRegion.prototype.getBounds = function () {
                    return new Rectangle(0, 0, this.w, this.h);
                };
                DirtyRegion.prototype.addDirtyRectangle = function (rectangle) {
                    var x = rectangle.x >> this.sizeInBits;
                    var y = rectangle.y >> this.sizeInBits;
                    if (x >= this.c || y >= this.r) {
                        return;
                    }
                    if (x < 0) {
                        x = 0;
                    }
                    if (y < 0) {
                        y = 0;
                    }
                    var cell = this.grid[y][x];
                    rectangle = rectangle.clone();
                    rectangle.snap();
                    if (cell.region.contains(rectangle)) {
                        if (cell.bounds.isEmpty()) {
                            cell.bounds.set(rectangle);
                        }
                        else if (!cell.bounds.contains(rectangle)) {
                            cell.bounds.union(rectangle);
                        }
                    }
                    else {
                        var w = Math.min(this.c, Math.ceil((rectangle.x + rectangle.w) / this.size)) - x;
                        var h = Math.min(this.r, Math.ceil((rectangle.y + rectangle.h) / this.size)) - y;
                        for (var i = 0; i < w; i++) {
                            for (var j = 0; j < h; j++) {
                                var cell = this.grid[y + j][x + i];
                                var intersection = cell.region.clone();
                                intersection.intersect(rectangle);
                                if (!intersection.isEmpty()) {
                                    this.addDirtyRectangle(intersection);
                                }
                            }
                        }
                    }
                };
                DirtyRegion.prototype.gatherRegions = function (regions) {
                    for (var y = 0; y < this.r; y++) {
                        for (var x = 0; x < this.c; x++) {
                            var bounds = this.grid[y][x].bounds;
                            if (!bounds.isEmpty()) {
                                regions.push(this.grid[y][x].bounds);
                            }
                        }
                    }
                };
                DirtyRegion.prototype.gatherOptimizedRegions = function (regions) {
                    this.gatherRegions(regions);
                };
                DirtyRegion.prototype.getDirtyRatio = function () {
                    var totalArea = this.w * this.h;
                    if (totalArea === 0) {
                        return 0;
                    }
                    var dirtyArea = 0;
                    for (var y = 0; y < this.r; y++) {
                        for (var x = 0; x < this.c; x++) {
                            dirtyArea += this.grid[y][x].region.area();
                        }
                    }
                    return dirtyArea / totalArea;
                };
                DirtyRegion.prototype.render = function (context, options) {
                    function drawRectangle(rectangle) {
                        context.rect(rectangle.x, rectangle.y, rectangle.w, rectangle.h);
                    }
                    if (options && options.drawGrid) {
                        context.strokeStyle = "white";
                        for (var y = 0; y < this.r; y++) {
                            for (var x = 0; x < this.c; x++) {
                                var cell = this.grid[y][x];
                                context.beginPath();
                                drawRectangle(cell.region);
                                context.closePath();
                                context.stroke();
                            }
                        }
                    }
                    context.strokeStyle = "#E0F8D8";
                    for (var y = 0; y < this.r; y++) {
                        for (var x = 0; x < this.c; x++) {
                            var cell = this.grid[y][x];
                            context.beginPath();
                            drawRectangle(cell.bounds);
                            context.closePath();
                            context.stroke();
                        }
                    }
                };
                DirtyRegion.tmpRectangle = Rectangle.createEmpty();
                return DirtyRegion;
            })();
            Geometry.DirtyRegion = DirtyRegion;
            var DirtyRegion;
            (function (DirtyRegion) {
                var Cell = (function () {
                    function Cell(region) {
                        this.region = region;
                        this.bounds = Rectangle.createEmpty();
                    }
                    Cell.prototype.clear = function () {
                        this.bounds.setEmpty();
                    };
                    return Cell;
                })();
                DirtyRegion.Cell = Cell;
            })(DirtyRegion = Geometry.DirtyRegion || (Geometry.DirtyRegion = {}));
            var Tile = (function () {
                function Tile(index, x, y, w, h, scale) {
                    this.index = index;
                    this.x = x;
                    this.y = y;
                    this.scale = scale;
                    this.bounds = new Rectangle(x * w, y * h, w, h);
                }
                Tile.prototype.getOBB = function () {
                    if (this._obb) {
                        return this._obb;
                    }
                    this.bounds.getCorners(Tile.corners);
                    return this._obb = new OBB(Tile.corners);
                };
                Tile.corners = Point.createEmptyPoints(4);
                return Tile;
            })();
            Geometry.Tile = Tile;
            var TileCache = (function () {
                function TileCache(w, h, tileW, tileH, scale) {
                    this.tileW = tileW;
                    this.tileH = tileH;
                    this.scale = scale;
                    this.w = w;
                    this.h = h;
                    this.rows = Math.ceil(h / tileH);
                    this.columns = Math.ceil(w / tileW);
                    release || assert(this.rows < 2048 && this.columns < 2048);
                    this.tiles = [];
                    var index = 0;
                    for (var y = 0; y < this.rows; y++) {
                        for (var x = 0; x < this.columns; x++) {
                            this.tiles.push(new Tile(index++, x, y, tileW, tileH, scale));
                        }
                    }
                }
                TileCache.prototype.getTiles = function (query, transform) {
                    if (transform.emptyArea(query)) {
                        return [];
                    }
                    else if (transform.infiniteArea(query)) {
                        return this.tiles;
                    }
                    var tileCount = this.columns * this.rows;
                    if (tileCount < 40 && transform.isScaleOrRotation()) {
                        var precise = tileCount > 10;
                        return this.getFewTiles(query, transform, precise);
                    }
                    else {
                        return this.getManyTiles(query, transform);
                    }
                };
                TileCache.prototype.getFewTiles = function (query, transform, precise) {
                    if (precise === void 0) { precise = true; }
                    if (transform.isTranslationOnly() && this.tiles.length === 1) {
                        if (this.tiles[0].bounds.intersectsTranslated(query, transform.tx, transform.ty)) {
                            return [this.tiles[0]];
                        }
                        return [];
                    }
                    transform.transformRectangle(query, TileCache._points);
                    var queryOBB;
                    var queryBounds = new Rectangle(0, 0, this.w, this.h);
                    if (precise) {
                        queryOBB = new OBB(TileCache._points);
                    }
                    queryBounds.intersect(OBB.getBounds(TileCache._points));
                    if (queryBounds.isEmpty()) {
                        return [];
                    }
                    var minX = queryBounds.x / this.tileW | 0;
                    var minY = queryBounds.y / this.tileH | 0;
                    var maxX = Math.ceil((queryBounds.x + queryBounds.w) / this.tileW) | 0;
                    var maxY = Math.ceil((queryBounds.y + queryBounds.h) / this.tileH) | 0;
                    minX = clamp(minX, 0, this.columns);
                    maxX = clamp(maxX, 0, this.columns);
                    minY = clamp(minY, 0, this.rows);
                    maxY = clamp(maxY, 0, this.rows);
                    var tiles = [];
                    for (var x = minX; x < maxX; x++) {
                        for (var y = minY; y < maxY; y++) {
                            var tile = this.tiles[y * this.columns + x];
                            if (tile.bounds.intersects(queryBounds) && (precise ? tile.getOBB().intersects(queryOBB) : true)) {
                                tiles.push(tile);
                            }
                        }
                    }
                    return tiles;
                };
                TileCache.prototype.getManyTiles = function (query, transform) {
                    function intersectX(x, p1, p2) {
                        return (x - p1.x) * (p2.y - p1.y) / (p2.x - p1.x) + p1.y;
                    }
                    function appendTiles(tiles, cache, column, startRow, endRow) {
                        if (column < 0 || column >= cache.columns) {
                            return;
                        }
                        var j1 = clamp(startRow, 0, cache.rows);
                        var j2 = clamp(endRow + 1, 0, cache.rows);
                        for (var j = j1; j < j2; j++) {
                            tiles.push(cache.tiles[j * cache.columns + column]);
                        }
                    }
                    var rectPoints = TileCache._points;
                    transform.transformRectangle(query, rectPoints);
                    var i1 = rectPoints[0].x < rectPoints[1].x ? 0 : 1;
                    var i2 = rectPoints[2].x < rectPoints[3].x ? 2 : 3;
                    var i0 = rectPoints[i1].x < rectPoints[i2].x ? i1 : i2;
                    var lines = [];
                    for (var j = 0; j < 5; j++, i0++) {
                        lines.push(rectPoints[i0 % 4]);
                    }
                    if ((lines[1].x - lines[0].x) * (lines[3].y - lines[0].y) < (lines[1].y - lines[0].y) * (lines[3].x - lines[0].x)) {
                        var tmp = lines[1];
                        lines[1] = lines[3];
                        lines[3] = tmp;
                    }
                    var tiles = [];
                    var lastY1, lastY2;
                    var i = Math.floor(lines[0].x / this.tileW);
                    var nextX = (i + 1) * this.tileW;
                    if (lines[2].x < nextX) {
                        lastY1 = Math.min(lines[0].y, lines[1].y, lines[2].y, lines[3].y);
                        lastY2 = Math.max(lines[0].y, lines[1].y, lines[2].y, lines[3].y);
                        var j1 = Math.floor(lastY1 / this.tileH);
                        var j2 = Math.floor(lastY2 / this.tileH);
                        appendTiles(tiles, this, i, j1, j2);
                        return tiles;
                    }
                    var line1 = 0, line2 = 4;
                    var lastSegment1 = false, lastSegment2 = false;
                    if (lines[0].x === lines[1].x || lines[0].x === lines[3].x) {
                        if (lines[0].x === lines[1].x) {
                            lastSegment1 = true;
                            line1++;
                        }
                        else {
                            lastSegment2 = true;
                            line2--;
                        }
                        lastY1 = intersectX(nextX, lines[line1], lines[line1 + 1]);
                        lastY2 = intersectX(nextX, lines[line2], lines[line2 - 1]);
                        var j1 = Math.floor(lines[line1].y / this.tileH);
                        var j2 = Math.floor(lines[line2].y / this.tileH);
                        appendTiles(tiles, this, i, j1, j2);
                        i++;
                    }
                    do {
                        var nextY1, nextY2;
                        var nextSegment1, nextSegment2;
                        if (lines[line1 + 1].x < nextX) {
                            nextY1 = lines[line1 + 1].y;
                            nextSegment1 = true;
                        }
                        else {
                            nextY1 = intersectX(nextX, lines[line1], lines[line1 + 1]);
                            nextSegment1 = false;
                        }
                        if (lines[line2 - 1].x < nextX) {
                            nextY2 = lines[line2 - 1].y;
                            nextSegment2 = true;
                        }
                        else {
                            nextY2 = intersectX(nextX, lines[line2], lines[line2 - 1]);
                            nextSegment2 = false;
                        }
                        var j1 = Math.floor((lines[line1].y < lines[line1 + 1].y ? lastY1 : nextY1) / this.tileH);
                        var j2 = Math.floor((lines[line2].y > lines[line2 - 1].y ? lastY2 : nextY2) / this.tileH);
                        appendTiles(tiles, this, i, j1, j2);
                        if (nextSegment1 && lastSegment1) {
                            break;
                        }
                        if (nextSegment1) {
                            lastSegment1 = true;
                            line1++;
                            lastY1 = intersectX(nextX, lines[line1], lines[line1 + 1]);
                        }
                        else {
                            lastY1 = nextY1;
                        }
                        if (nextSegment2) {
                            lastSegment2 = true;
                            line2--;
                            lastY2 = intersectX(nextX, lines[line2], lines[line2 - 1]);
                        }
                        else {
                            lastY2 = nextY2;
                        }
                        i++;
                        nextX = (i + 1) * this.tileW;
                    } while (line1 < line2);
                    return tiles;
                };
                TileCache._points = Point.createEmptyPoints(4);
                return TileCache;
            })();
            Geometry.TileCache = TileCache;
            var MIN_CACHE_LEVELS = 5;
            var MAX_CACHE_LEVELS = 3;
            var RenderableTileCache = (function () {
                function RenderableTileCache(source, tileSize, minUntiledSize) {
                    this._cacheLevels = [];
                    this._source = source;
                    this._tileSize = tileSize;
                    this._minUntiledSize = minUntiledSize;
                }
                RenderableTileCache.prototype._getTilesAtScale = function (query, transform, scratchBounds) {
                    var transformScale = Math.max(transform.getAbsoluteScaleX(), transform.getAbsoluteScaleY());
                    var level = 0;
                    if (transformScale !== 1) {
                        level = clamp(Math.round(Math.log(1 / transformScale) / Math.LN2), -MIN_CACHE_LEVELS, MAX_CACHE_LEVELS);
                    }
                    var scale = pow2(level);
                    if (this._source.hasFlags(1048576 /* Dynamic */)) {
                        while (true) {
                            scale = pow2(level);
                            if (scratchBounds.contains(this._source.getBounds().getAbsoluteBounds().clone().scale(scale, scale))) {
                                break;
                            }
                            level--;
                            release || assert(level >= -MIN_CACHE_LEVELS);
                        }
                    }
                    if (!(this._source.hasFlags(2097152 /* Scalable */))) {
                        level = clamp(level, -MIN_CACHE_LEVELS, 0);
                    }
                    var scale = pow2(level);
                    var levelIndex = MIN_CACHE_LEVELS + level;
                    var cache = this._cacheLevels[levelIndex];
                    if (!cache) {
                        var bounds = this._source.getBounds().getAbsoluteBounds();
                        var scaledBounds = bounds.clone().scale(scale, scale);
                        var tileW, tileH;
                        if (this._source.hasFlags(1048576 /* Dynamic */) || !this._source.hasFlags(4194304 /* Tileable */) || Math.max(scaledBounds.w, scaledBounds.h) <= this._minUntiledSize) {
                            tileW = scaledBounds.w;
                            tileH = scaledBounds.h;
                        }
                        else {
                            tileW = tileH = this._tileSize;
                        }
                        cache = this._cacheLevels[levelIndex] = new TileCache(scaledBounds.w, scaledBounds.h, tileW, tileH, scale);
                    }
                    return cache.getTiles(query, transform.scaleClone(scale, scale));
                };
                RenderableTileCache.prototype.fetchTiles = function (query, transform, scratchContext, cacheImageCallback) {
                    var scratchBounds = new Rectangle(0, 0, scratchContext.canvas.width, scratchContext.canvas.height);
                    var tiles = this._getTilesAtScale(query, transform, scratchBounds);
                    var uncachedTiles;
                    var source = this._source;
                    for (var i = 0; i < tiles.length; i++) {
                        var tile = tiles[i];
                        if (!tile.cachedSurfaceRegion || !tile.cachedSurfaceRegion.surface || (source.hasFlags(1048576 /* Dynamic */ | 16 /* Dirty */))) {
                            if (!uncachedTiles) {
                                uncachedTiles = [];
                            }
                            uncachedTiles.push(tile);
                        }
                    }
                    if (uncachedTiles) {
                        this._cacheTiles(scratchContext, uncachedTiles, cacheImageCallback, scratchBounds);
                    }
                    source.removeFlags(16 /* Dirty */);
                    return tiles;
                };
                RenderableTileCache.prototype._getTileBounds = function (tiles) {
                    var bounds = Rectangle.createEmpty();
                    for (var i = 0; i < tiles.length; i++) {
                        bounds.union(tiles[i].bounds);
                    }
                    return bounds;
                };
                RenderableTileCache.prototype._cacheTiles = function (scratchContext, uncachedTiles, cacheImageCallback, scratchBounds, maxRecursionDepth) {
                    if (maxRecursionDepth === void 0) { maxRecursionDepth = 4; }
                    release || assert(maxRecursionDepth > 0, "Infinite recursion is likely.");
                    var uncachedTileBounds = this._getTileBounds(uncachedTiles);
                    scratchContext.save();
                    scratchContext.setTransform(1, 0, 0, 1, 0, 0);
                    scratchContext.clearRect(0, 0, scratchBounds.w, scratchBounds.h);
                    scratchContext.translate(-uncachedTileBounds.x, -uncachedTileBounds.y);
                    scratchContext.scale(uncachedTiles[0].scale, uncachedTiles[0].scale);
                    var sourceBounds = this._source.getBounds();
                    scratchContext.translate(-sourceBounds.x, -sourceBounds.y);
                    profile && GFX.timelineBuffer && GFX.timelineBuffer.enter("renderTiles");
                    GFX.traceLevel >= 2 /* Verbose */ && GFX.writer && GFX.writer.writeLn("Rendering Tiles: " + uncachedTileBounds);
                    this._source.render(scratchContext, 0);
                    scratchContext.restore();
                    profile && GFX.timelineBuffer && GFX.timelineBuffer.leave("renderTiles");
                    var remainingUncachedTiles = null;
                    for (var i = 0; i < uncachedTiles.length; i++) {
                        var tile = uncachedTiles[i];
                        var region = tile.bounds.clone();
                        region.x -= uncachedTileBounds.x;
                        region.y -= uncachedTileBounds.y;
                        if (!scratchBounds.contains(region)) {
                            if (!remainingUncachedTiles) {
                                remainingUncachedTiles = [];
                            }
                            remainingUncachedTiles.push(tile);
                        }
                        tile.cachedSurfaceRegion = cacheImageCallback(tile.cachedSurfaceRegion, scratchContext, region);
                    }
                    if (remainingUncachedTiles) {
                        if (remainingUncachedTiles.length >= 2) {
                            var a = remainingUncachedTiles.slice(0, remainingUncachedTiles.length / 2 | 0);
                            var b = remainingUncachedTiles.slice(a.length);
                            this._cacheTiles(scratchContext, a, cacheImageCallback, scratchBounds, maxRecursionDepth - 1);
                            this._cacheTiles(scratchContext, b, cacheImageCallback, scratchBounds, maxRecursionDepth - 1);
                        }
                        else {
                            this._cacheTiles(scratchContext, remainingUncachedTiles, cacheImageCallback, scratchBounds, maxRecursionDepth - 1);
                        }
                    }
                };
                return RenderableTileCache;
            })();
            Geometry.RenderableTileCache = RenderableTileCache;
        })(Geometry = GFX.Geometry || (GFX.Geometry = {}));
    })(GFX = Shumway.GFX || (Shumway.GFX = {}));
})(Shumway || (Shumway = {}));
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Shumway;
(function (Shumway) {
    var GFX;
    (function (GFX) {
        var roundToMultipleOfPowerOfTwo = Shumway.IntegerUtilities.roundToMultipleOfPowerOfTwo;
        var assert = Shumway.Debug.assert;
        var Rectangle = GFX.Geometry.Rectangle;
        var RegionAllocator;
        (function (RegionAllocator) {
            var Region = (function (_super) {
                __extends(Region, _super);
                function Region() {
                    _super.apply(this, arguments);
                }
                return Region;
            })(GFX.Geometry.Rectangle);
            RegionAllocator.Region = Region;
            var CompactAllocator = (function () {
                function CompactAllocator(w, h) {
                    this._root = new CompactCell(0, 0, w | 0, h | 0, false);
                }
                CompactAllocator.prototype.allocate = function (w, h) {
                    w = Math.ceil(w);
                    h = Math.ceil(h);
                    release || assert(w > 0 && h > 0);
                    var result = this._root.insert(w, h);
                    if (result) {
                        result.allocator = this;
                        result.allocated = true;
                    }
                    return result;
                };
                CompactAllocator.prototype.free = function (region) {
                    var cell = region;
                    release || assert(cell.allocator === this);
                    cell.clear();
                    region.allocated = false;
                };
                CompactAllocator.RANDOM_ORIENTATION = true;
                CompactAllocator.MAX_DEPTH = 256;
                return CompactAllocator;
            })();
            RegionAllocator.CompactAllocator = CompactAllocator;
            var CompactCell = (function (_super) {
                __extends(CompactCell, _super);
                function CompactCell(x, y, w, h, horizontal) {
                    _super.call(this, x, y, w, h);
                    this._children = null;
                    this._horizontal = horizontal;
                    this.allocated = false;
                }
                CompactCell.prototype.clear = function () {
                    this._children = null;
                    this.allocated = false;
                };
                CompactCell.prototype.insert = function (w, h) {
                    return this._insert(w, h, 0);
                };
                CompactCell.prototype._insert = function (w, h, depth) {
                    if (depth > CompactAllocator.MAX_DEPTH) {
                        return;
                    }
                    if (this.allocated) {
                        return;
                    }
                    if (this.w < w || this.h < h) {
                        return;
                    }
                    if (!this._children) {
                        var orientation = !this._horizontal;
                        if (CompactAllocator.RANDOM_ORIENTATION) {
                            orientation = Math.random() >= 0.5;
                        }
                        if (this._horizontal) {
                            this._children = [
                                new CompactCell(this.x, this.y, this.w, h, false),
                                new CompactCell(this.x, this.y + h, this.w, this.h - h, orientation),
                            ];
                        }
                        else {
                            this._children = [
                                new CompactCell(this.x, this.y, w, this.h, true),
                                new CompactCell(this.x + w, this.y, this.w - w, this.h, orientation),
                            ];
                        }
                        var first = this._children[0];
                        if (first.w === w && first.h === h) {
                            first.allocated = true;
                            return first;
                        }
                        return this._insert(w, h, depth + 1);
                    }
                    else {
                        var result;
                        result = this._children[0]._insert(w, h, depth + 1);
                        if (result) {
                            return result;
                        }
                        result = this._children[1]._insert(w, h, depth + 1);
                        if (result) {
                            return result;
                        }
                    }
                };
                return CompactCell;
            })(RegionAllocator.Region);
            var GridAllocator = (function () {
                function GridAllocator(w, h, sizeW, sizeH) {
                    this._columns = w / sizeW | 0;
                    this._rows = h / sizeH | 0;
                    this._sizeW = sizeW;
                    this._sizeH = sizeH;
                    this._freeList = [];
                    this._index = 0;
                    this._total = this._columns * this._rows;
                }
                GridAllocator.prototype.allocate = function (w, h) {
                    w = Math.ceil(w);
                    h = Math.ceil(h);
                    release || assert(w > 0 && h > 0);
                    var sizeW = this._sizeW;
                    var sizeH = this._sizeH;
                    if (w > sizeW || h > sizeH) {
                        return null;
                    }
                    var freeList = this._freeList;
                    var index = this._index;
                    if (freeList.length > 0) {
                        var cell = freeList.pop();
                        release || assert(cell.allocated === false);
                        cell.w = w;
                        cell.h = h;
                        cell.allocated = true;
                        return cell;
                    }
                    else if (index < this._total) {
                        var y = (index / this._columns) | 0;
                        var x = index - (y * this._columns);
                        var cell = new GridCell(x * sizeW, y * sizeH, w, h);
                        cell.index = index;
                        cell.allocator = this;
                        cell.allocated = true;
                        this._index++;
                        return cell;
                    }
                    return null;
                };
                GridAllocator.prototype.free = function (region) {
                    var cell = region;
                    release || assert(cell.allocator === this);
                    cell.allocated = false;
                    this._freeList.push(cell);
                };
                return GridAllocator;
            })();
            RegionAllocator.GridAllocator = GridAllocator;
            var GridCell = (function (_super) {
                __extends(GridCell, _super);
                function GridCell(x, y, w, h) {
                    _super.call(this, x, y, w, h);
                    this.index = -1;
                }
                return GridCell;
            })(RegionAllocator.Region);
            RegionAllocator.GridCell = GridCell;
            var Bucket = (function () {
                function Bucket(size, region, allocator) {
                    this.size = size;
                    this.region = region;
                    this.allocator = allocator;
                }
                return Bucket;
            })();
            var BucketCell = (function (_super) {
                __extends(BucketCell, _super);
                function BucketCell(x, y, w, h, region) {
                    _super.call(this, x, y, w, h);
                    this.region = region;
                }
                return BucketCell;
            })(RegionAllocator.Region);
            RegionAllocator.BucketCell = BucketCell;
            var BucketAllocator = (function () {
                function BucketAllocator(w, h) {
                    release || assert(w > 0 && h > 0);
                    this._buckets = [];
                    this._w = w | 0;
                    this._h = h | 0;
                    this._filled = 0;
                }
                BucketAllocator.prototype.allocate = function (w, h) {
                    w = Math.ceil(w);
                    h = Math.ceil(h);
                    release || assert(w > 0 && h > 0);
                    var size = Math.max(w, h);
                    if (w > this._w || h > this._h) {
                        return null;
                    }
                    var region = null;
                    var bucket;
                    var buckets = this._buckets;
                    do {
                        for (var i = 0; i < buckets.length; i++) {
                            if (buckets[i].size >= size) {
                                bucket = buckets[i];
                                region = bucket.allocator.allocate(w, h);
                                if (region) {
                                    break;
                                }
                            }
                        }
                        if (!region) {
                            var remainingSpace = this._h - this._filled;
                            if (remainingSpace < h) {
                                return null;
                            }
                            var gridSize = roundToMultipleOfPowerOfTwo(size, 8);
                            var bucketHeight = gridSize * 2;
                            if (bucketHeight > remainingSpace) {
                                bucketHeight = remainingSpace;
                            }
                            if (bucketHeight < gridSize) {
                                return null;
                            }
                            var bucketRegion = new Rectangle(0, this._filled, this._w, bucketHeight);
                            this._buckets.push(new Bucket(gridSize, bucketRegion, new GridAllocator(bucketRegion.w, bucketRegion.h, gridSize, gridSize)));
                            this._filled += bucketHeight;
                        }
                    } while (!region);
                    return new BucketCell(bucket.region.x + region.x, bucket.region.y + region.y, region.w, region.h, region);
                };
                BucketAllocator.prototype.free = function (region) {
                    region.region.allocator.free(region.region);
                };
                return BucketAllocator;
            })();
            RegionAllocator.BucketAllocator = BucketAllocator;
        })(RegionAllocator = GFX.RegionAllocator || (GFX.RegionAllocator = {}));
        var SurfaceRegionAllocator;
        (function (SurfaceRegionAllocator) {
            var SimpleAllocator = (function () {
                function SimpleAllocator(createSurface) {
                    this._createSurface = createSurface;
                    this._surfaces = [];
                }
                Object.defineProperty(SimpleAllocator.prototype, "surfaces", {
                    get: function () {
                        return this._surfaces;
                    },
                    enumerable: true,
                    configurable: true
                });
                SimpleAllocator.prototype._createNewSurface = function (w, h) {
                    var surface = this._createSurface(w, h);
                    this._surfaces.push(surface);
                    return surface;
                };
                SimpleAllocator.prototype.addSurface = function (surface) {
                    this._surfaces.push(surface);
                };
                SimpleAllocator.prototype.allocate = function (w, h) {
                    for (var i = 0; i < this._surfaces.length; i++) {
                        var region = this._surfaces[i].allocate(w, h);
                        if (region) {
                            return region;
                        }
                    }
                    return this._createNewSurface(w, h).allocate(w, h);
                };
                SimpleAllocator.prototype.free = function (region) {
                };
                return SimpleAllocator;
            })();
            SurfaceRegionAllocator.SimpleAllocator = SimpleAllocator;
        })(SurfaceRegionAllocator = GFX.SurfaceRegionAllocator || (GFX.SurfaceRegionAllocator = {}));
    })(GFX = Shumway.GFX || (Shumway.GFX = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var GFX;
    (function (GFX) {
        var Rectangle = GFX.Geometry.Rectangle;
        var Matrix = GFX.Geometry.Matrix;
        var DirtyRegion = GFX.Geometry.DirtyRegion;
        var assert = Shumway.Debug.assert;
        (function (BlendMode) {
            BlendMode[BlendMode["Normal"] = 1] = "Normal";
            BlendMode[BlendMode["Layer"] = 2] = "Layer";
            BlendMode[BlendMode["Multiply"] = 3] = "Multiply";
            BlendMode[BlendMode["Screen"] = 4] = "Screen";
            BlendMode[BlendMode["Lighten"] = 5] = "Lighten";
            BlendMode[BlendMode["Darken"] = 6] = "Darken";
            BlendMode[BlendMode["Difference"] = 7] = "Difference";
            BlendMode[BlendMode["Add"] = 8] = "Add";
            BlendMode[BlendMode["Subtract"] = 9] = "Subtract";
            BlendMode[BlendMode["Invert"] = 10] = "Invert";
            BlendMode[BlendMode["Alpha"] = 11] = "Alpha";
            BlendMode[BlendMode["Erase"] = 12] = "Erase";
            BlendMode[BlendMode["Overlay"] = 13] = "Overlay";
            BlendMode[BlendMode["HardLight"] = 14] = "HardLight";
        })(GFX.BlendMode || (GFX.BlendMode = {}));
        var BlendMode = GFX.BlendMode;
        (function (NodeFlags) {
            NodeFlags[NodeFlags["None"] = 0x00000] = "None";
            NodeFlags[NodeFlags["BoundsAutoCompute"] = 0x00002] = "BoundsAutoCompute";
            NodeFlags[NodeFlags["IsMask"] = 0x00004] = "IsMask";
            NodeFlags[NodeFlags["Dirty"] = 0x00010] = "Dirty";
            NodeFlags[NodeFlags["InvalidBounds"] = 0x00100] = "InvalidBounds";
            NodeFlags[NodeFlags["InvalidConcatenatedMatrix"] = 0x00200] = "InvalidConcatenatedMatrix";
            NodeFlags[NodeFlags["InvalidInvertedConcatenatedMatrix"] = 0x00400] = "InvalidInvertedConcatenatedMatrix";
            NodeFlags[NodeFlags["InvalidConcatenatedColorMatrix"] = 0x00800] = "InvalidConcatenatedColorMatrix";
            NodeFlags[NodeFlags["UpOnAddedOrRemoved"] = NodeFlags.InvalidBounds | NodeFlags.Dirty] = "UpOnAddedOrRemoved";
            NodeFlags[NodeFlags["UpOnMoved"] = NodeFlags.InvalidBounds | NodeFlags.Dirty] = "UpOnMoved";
            NodeFlags[NodeFlags["DownOnAddedOrRemoved"] = NodeFlags.InvalidConcatenatedMatrix | NodeFlags.InvalidInvertedConcatenatedMatrix | NodeFlags.InvalidConcatenatedColorMatrix] = "DownOnAddedOrRemoved";
            NodeFlags[NodeFlags["DownOnMoved"] = NodeFlags.InvalidConcatenatedMatrix | NodeFlags.InvalidInvertedConcatenatedMatrix | NodeFlags.InvalidConcatenatedColorMatrix] = "DownOnMoved";
            NodeFlags[NodeFlags["UpOnColorMatrixChanged"] = NodeFlags.Dirty] = "UpOnColorMatrixChanged";
            NodeFlags[NodeFlags["DownOnColorMatrixChanged"] = NodeFlags.InvalidConcatenatedColorMatrix] = "DownOnColorMatrixChanged";
            NodeFlags[NodeFlags["Visible"] = 0x10000] = "Visible";
            NodeFlags[NodeFlags["UpOnInvalidate"] = NodeFlags.InvalidBounds | NodeFlags.Dirty] = "UpOnInvalidate";
            NodeFlags[NodeFlags["Default"] = NodeFlags.BoundsAutoCompute | NodeFlags.InvalidBounds | NodeFlags.InvalidConcatenatedMatrix | NodeFlags.InvalidInvertedConcatenatedMatrix | NodeFlags.Visible] = "Default";
            NodeFlags[NodeFlags["CacheAsBitmap"] = 0x20000] = "CacheAsBitmap";
            NodeFlags[NodeFlags["PixelSnapping"] = 0x40000] = "PixelSnapping";
            NodeFlags[NodeFlags["ImageSmoothing"] = 0x80000] = "ImageSmoothing";
            NodeFlags[NodeFlags["Dynamic"] = 0x100000] = "Dynamic";
            NodeFlags[NodeFlags["Scalable"] = 0x200000] = "Scalable";
            NodeFlags[NodeFlags["Tileable"] = 0x400000] = "Tileable";
            NodeFlags[NodeFlags["Transparent"] = 0x08000] = "Transparent";
        })(GFX.NodeFlags || (GFX.NodeFlags = {}));
        var NodeFlags = GFX.NodeFlags;
        (function (NodeType) {
            NodeType[NodeType["Node"] = 0x0001] = "Node";
            NodeType[NodeType["Shape"] = 0x0003] = "Shape";
            NodeType[NodeType["Group"] = 0x0005] = "Group";
            NodeType[NodeType["Stage"] = 0x000D] = "Stage";
            NodeType[NodeType["Renderable"] = 0x0021] = "Renderable";
        })(GFX.NodeType || (GFX.NodeType = {}));
        var NodeType = GFX.NodeType;
        (function (NodeEventType) {
            NodeEventType[NodeEventType["None"] = 0x0000] = "None";
            NodeEventType[NodeEventType["OnStageBoundsChanged"] = 0x0001] = "OnStageBoundsChanged";
        })(GFX.NodeEventType || (GFX.NodeEventType = {}));
        var NodeEventType = GFX.NodeEventType;
        var NodeVisitor = (function () {
            function NodeVisitor() {
            }
            NodeVisitor.prototype.visitNode = function (node, state) {
            };
            NodeVisitor.prototype.visitShape = function (node, state) {
                this.visitNode(node, state);
            };
            NodeVisitor.prototype.visitGroup = function (node, state) {
                this.visitNode(node, state);
                var children = node.getChildren();
                for (var i = 0; i < children.length; i++) {
                    children[i].visit(this, state);
                }
            };
            NodeVisitor.prototype.visitStage = function (node, state) {
                this.visitGroup(node, state);
            };
            NodeVisitor.prototype.visitRenderable = function (node, state) {
                this.visitNode(node, state);
            };
            return NodeVisitor;
        })();
        GFX.NodeVisitor = NodeVisitor;
        var State = (function () {
            function State() {
            }
            return State;
        })();
        GFX.State = State;
        var MatrixState = (function (_super) {
            __extends(MatrixState, _super);
            function MatrixState() {
                _super.call(this);
                this.matrix = Matrix.createIdentity();
            }
            MatrixState.prototype.transform = function (transform) {
                var state = this.clone();
                state.matrix.preMultiply(transform.getMatrix());
                return state;
            };
            MatrixState.allocate = function () {
                var dirtyStack = MatrixState._dirtyStack;
                var state = null;
                if (dirtyStack.length) {
                    state = dirtyStack.pop();
                }
                return state;
            };
            MatrixState.prototype.clone = function () {
                var state = MatrixState.allocate();
                if (!state) {
                    state = new MatrixState();
                }
                state.set(this);
                return state;
            };
            MatrixState.prototype.set = function (state) {
                this.matrix.set(state.matrix);
            };
            MatrixState.prototype.free = function () {
                MatrixState._dirtyStack.push(this);
            };
            MatrixState._dirtyStack = [];
            return MatrixState;
        })(State);
        GFX.MatrixState = MatrixState;
        var DirtyNodeVisitor = (function (_super) {
            __extends(DirtyNodeVisitor, _super);
            function DirtyNodeVisitor() {
                _super.apply(this, arguments);
                this.isDirty = true;
            }
            DirtyNodeVisitor.prototype.start = function (node, dirtyRegion) {
                this._dirtyRegion = dirtyRegion;
                var state = new MatrixState();
                state.matrix.setIdentity();
                node.visit(this, state);
                state.free();
            };
            DirtyNodeVisitor.prototype.visitGroup = function (node, state) {
                var children = node.getChildren();
                this.visitNode(node, state);
                for (var i = 0; i < children.length; i++) {
                    var child = children[i];
                    var childState = state.transform(child.getTransform());
                    child.visit(this, childState);
                    childState.free();
                }
            };
            DirtyNodeVisitor.prototype.visitNode = function (node, state) {
                if (node.hasFlags(16 /* Dirty */)) {
                    this.isDirty = true;
                }
                node.toggleFlags(16 /* Dirty */, false);
            };
            return DirtyNodeVisitor;
        })(NodeVisitor);
        GFX.DirtyNodeVisitor = DirtyNodeVisitor;
        var TracingNodeVisitor = (function (_super) {
            __extends(TracingNodeVisitor, _super);
            function TracingNodeVisitor(writer) {
                _super.call(this);
                this.writer = writer;
            }
            TracingNodeVisitor.prototype.visitNode = function (node, state) {
            };
            TracingNodeVisitor.prototype.visitShape = function (node, state) {
                this.writer.writeLn(node.toString());
                this.visitNode(node, state);
            };
            TracingNodeVisitor.prototype.visitGroup = function (node, state) {
                this.visitNode(node, state);
                var children = node.getChildren();
                this.writer.enter(node.toString() + " " + children.length);
                for (var i = 0; i < children.length; i++) {
                    children[i].visit(this, state);
                }
                this.writer.outdent();
            };
            TracingNodeVisitor.prototype.visitStage = function (node, state) {
                this.visitGroup(node, state);
            };
            return TracingNodeVisitor;
        })(NodeVisitor);
        GFX.TracingNodeVisitor = TracingNodeVisitor;
        var Node = (function () {
            function Node() {
                this._clip = -1;
                this._eventListeners = null;
                this._id = Node._nextId++;
                this._type = 1 /* Node */;
                this._index = -1;
                this._parent = null;
                this.reset();
            }
            Object.defineProperty(Node.prototype, "id", {
                get: function () {
                    return this._id;
                },
                enumerable: true,
                configurable: true
            });
            Node.prototype._dispatchEvent = function (type) {
                if (!this._eventListeners) {
                    return;
                }
                var listeners = this._eventListeners;
                for (var i = 0; i < listeners.length; i++) {
                    var listener = listeners[i];
                    if (listener.type === type) {
                        listener.listener(this, type);
                    }
                }
            };
            Node.prototype.addEventListener = function (type, listener) {
                if (!this._eventListeners) {
                    this._eventListeners = [];
                }
                this._eventListeners.push({ type: type, listener: listener });
            };
            Object.defineProperty(Node.prototype, "properties", {
                get: function () {
                    return this._properties || (this._properties = {});
                },
                enumerable: true,
                configurable: true
            });
            Node.prototype.reset = function () {
                this._flags = NodeFlags.Default;
                this._bounds = null;
                this._layer = null;
                this._transform = null;
                this._properties = null;
            };
            Object.defineProperty(Node.prototype, "clip", {
                get: function () {
                    return this._clip;
                },
                set: function (value) {
                    this._clip = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Node.prototype, "parent", {
                get: function () {
                    return this._parent;
                },
                enumerable: true,
                configurable: true
            });
            Node.prototype.getTransformedBounds = function (target) {
                var bounds = this.getBounds(true);
                if (target === this || bounds.isEmpty()) {
                }
                else {
                    var m = this.getTransform().getConcatenatedMatrix();
                    if (target) {
                        var t = target.getTransform().getInvertedConcatenatedMatrix(true);
                        t.preMultiply(m);
                        t.transformRectangleAABB(bounds);
                        t.free();
                    }
                    else {
                        m.transformRectangleAABB(bounds);
                    }
                }
                return bounds;
            };
            Node.prototype._markCurrentBoundsAsDirtyRegion = function () {
                return;
            };
            Node.prototype.getStage = function (withDirtyRegion) {
                if (withDirtyRegion === void 0) { withDirtyRegion = true; }
                var node = this._parent;
                while (node) {
                    if (node.isType(13 /* Stage */)) {
                        var stage = node;
                        if (withDirtyRegion) {
                            if (stage.dirtyRegion) {
                                return stage;
                            }
                        }
                        else {
                            return stage;
                        }
                    }
                    node = node._parent;
                }
                return null;
            };
            Node.prototype.getChildren = function (clone) {
                if (clone === void 0) { clone = false; }
                throw Shumway.Debug.abstractMethod("Node::getChildren");
            };
            Node.prototype.getBounds = function (clone) {
                if (clone === void 0) { clone = false; }
                throw Shumway.Debug.abstractMethod("Node::getBounds");
            };
            Node.prototype.setBounds = function (value) {
                release || assert(!(this._flags & 2 /* BoundsAutoCompute */));
                var bounds = this._bounds || (this._bounds = Rectangle.createEmpty());
                bounds.set(value);
                this.removeFlags(256 /* InvalidBounds */);
            };
            Node.prototype.clone = function () {
                throw Shumway.Debug.abstractMethod("Node::clone");
            };
            Node.prototype.setFlags = function (flags) {
                this._flags |= flags;
            };
            Node.prototype.hasFlags = function (flags) {
                return (this._flags & flags) === flags;
            };
            Node.prototype.hasAnyFlags = function (flags) {
                return !!(this._flags & flags);
            };
            Node.prototype.removeFlags = function (flags) {
                this._flags &= ~flags;
            };
            Node.prototype.toggleFlags = function (flags, on) {
                if (on) {
                    this._flags |= flags;
                }
                else {
                    this._flags &= ~flags;
                }
            };
            Node.prototype._propagateFlagsUp = function (flags) {
                if (flags === 0 /* None */ || this.hasFlags(flags)) {
                    return;
                }
                if (!this.hasFlags(2 /* BoundsAutoCompute */)) {
                    flags &= ~256 /* InvalidBounds */;
                }
                this.setFlags(flags);
                var parent = this._parent;
                if (parent) {
                    parent._propagateFlagsUp(flags);
                }
            };
            Node.prototype._propagateFlagsDown = function (flags) {
                throw Shumway.Debug.abstractMethod("Node::_propagateFlagsDown");
            };
            Node.prototype.isAncestor = function (node) {
                while (node) {
                    if (node === this) {
                        return true;
                    }
                    release || assert(node !== node._parent);
                    node = node._parent;
                }
                return false;
            };
            Node._getAncestors = function (node, last) {
                var path = Node._path;
                path.length = 0;
                while (node && node !== last) {
                    release || assert(node !== node._parent);
                    path.push(node);
                    node = node._parent;
                }
                release || assert(node === last, "Last ancestor is not an ancestor.");
                return path;
            };
            Node.prototype._findClosestAncestor = function (flags, on) {
                var node = this;
                while (node) {
                    if (node.hasFlags(flags) === on) {
                        return node;
                    }
                    release || assert(node !== node._parent);
                    node = node._parent;
                }
                return null;
            };
            Node.prototype.isType = function (type) {
                return this._type === type;
            };
            Node.prototype.isTypeOf = function (type) {
                return (this._type & type) === type;
            };
            Node.prototype.isLeaf = function () {
                return this.isType(33 /* Renderable */) || this.isType(3 /* Shape */);
            };
            Node.prototype.isLinear = function () {
                if (this.isLeaf()) {
                    return true;
                }
                if (this.isType(5 /* Group */)) {
                    var children = this._children;
                    if (children.length === 1 && children[0].isLinear()) {
                        return true;
                    }
                }
                return false;
            };
            Node.prototype.getTransformMatrix = function (clone) {
                if (clone === void 0) { clone = false; }
                return this.getTransform().getMatrix(clone);
            };
            Node.prototype.getTransform = function () {
                if (this._transform === null) {
                    this._transform = new Transform(this);
                }
                return this._transform;
            };
            Node.prototype.getLayer = function () {
                if (this._layer === null) {
                    this._layer = new Layer(this);
                }
                return this._layer;
            };
            Node.prototype.visit = function (visitor, state) {
                switch (this._type) {
                    case 1 /* Node */:
                        visitor.visitNode(this, state);
                        break;
                    case 5 /* Group */:
                        visitor.visitGroup(this, state);
                        break;
                    case 13 /* Stage */:
                        visitor.visitStage(this, state);
                        break;
                    case 3 /* Shape */:
                        visitor.visitShape(this, state);
                        break;
                    case 33 /* Renderable */:
                        visitor.visitRenderable(this, state);
                        break;
                    default:
                        Shumway.Debug.unexpectedCase();
                }
            };
            Node.prototype.invalidate = function () {
                this._markCurrentBoundsAsDirtyRegion();
                this._propagateFlagsUp(NodeFlags.UpOnInvalidate);
            };
            Node.prototype.toString = function (bounds) {
                if (bounds === void 0) { bounds = false; }
                var s = NodeType[this._type] + " " + this._id;
                if (bounds) {
                    s += " " + this._bounds.toString();
                }
                return s;
            };
            Node._path = [];
            Node._nextId = 0;
            return Node;
        })();
        GFX.Node = Node;
        var Group = (function (_super) {
            __extends(Group, _super);
            function Group() {
                _super.call(this);
                this._type = 5 /* Group */;
                this._children = [];
            }
            Group.prototype.getChildren = function (clone) {
                if (clone === void 0) { clone = false; }
                if (clone) {
                    return this._children.slice(0);
                }
                return this._children;
            };
            Group.prototype.childAt = function (index) {
                release || assert(index >= 0 && index < this._children.length);
                return this._children[index];
            };
            Object.defineProperty(Group.prototype, "child", {
                get: function () {
                    release || assert(this._children.length === 1);
                    return this._children[0];
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Group.prototype, "groupChild", {
                get: function () {
                    release || assert(this._children.length === 1);
                    release || assert(this._children[0] instanceof Group);
                    return this._children[0];
                },
                enumerable: true,
                configurable: true
            });
            Group.prototype.addChild = function (node) {
                release || assert(node);
                release || assert(!node.isAncestor(this));
                if (node._parent) {
                    node._parent.removeChildAt(node._index);
                }
                node._parent = this;
                node._index = this._children.length;
                this._children.push(node);
                this._propagateFlagsUp(NodeFlags.UpOnAddedOrRemoved);
                node._propagateFlagsDown(NodeFlags.DownOnAddedOrRemoved);
                node._markCurrentBoundsAsDirtyRegion();
            };
            Group.prototype.removeChildAt = function (index) {
                release || assert(index >= 0 && index < this._children.length);
                var node = this._children[index];
                release || assert(index === node._index);
                node._markCurrentBoundsAsDirtyRegion();
                this._children.splice(index, 1);
                node._index = -1;
                node._parent = null;
                this._propagateFlagsUp(NodeFlags.UpOnAddedOrRemoved);
                node._propagateFlagsDown(NodeFlags.DownOnAddedOrRemoved);
            };
            Group.prototype.clearChildren = function () {
                for (var i = 0; i < this._children.length; i++) {
                    var child = this._children[i];
                    child._markCurrentBoundsAsDirtyRegion();
                    if (child) {
                        child._index = -1;
                        child._parent = null;
                        child._propagateFlagsDown(NodeFlags.DownOnAddedOrRemoved);
                    }
                }
                this._children.length = 0;
                this._propagateFlagsUp(NodeFlags.UpOnAddedOrRemoved);
            };
            Group.prototype._propagateFlagsDown = function (flags) {
                if (this.hasFlags(flags)) {
                    return;
                }
                this.setFlags(flags);
                var children = this._children;
                for (var i = 0; i < children.length; i++) {
                    children[i]._propagateFlagsDown(flags);
                }
            };
            Group.prototype.getBounds = function (clone) {
                if (clone === void 0) { clone = false; }
                var bounds = this._bounds || (this._bounds = Rectangle.createEmpty());
                if (this.hasFlags(256 /* InvalidBounds */)) {
                    bounds.setEmpty();
                    var children = this._children;
                    var childBounds = Rectangle.allocate();
                    for (var i = 0; i < children.length; i++) {
                        var child = children[i];
                        childBounds.set(child.getBounds());
                        child.getTransformMatrix().transformRectangleAABB(childBounds);
                        bounds.union(childBounds);
                    }
                    childBounds.free();
                    this.removeFlags(256 /* InvalidBounds */);
                }
                if (clone) {
                    return bounds.clone();
                }
                return bounds;
            };
            return Group;
        })(Node);
        GFX.Group = Group;
        var Transform = (function () {
            function Transform(node) {
                this._node = node;
                this._matrix = Matrix.createIdentity();
                this._colorMatrix = GFX.ColorMatrix.createIdentity();
                this._concatenatedMatrix = Matrix.createIdentity();
                this._invertedConcatenatedMatrix = Matrix.createIdentity();
                this._concatenatedColorMatrix = GFX.ColorMatrix.createIdentity();
            }
            Transform.prototype.setMatrix = function (value) {
                if (this._matrix.isEqual(value)) {
                    return;
                }
                this._node._markCurrentBoundsAsDirtyRegion();
                this._matrix.set(value);
                this._node._propagateFlagsUp(NodeFlags.UpOnMoved);
                this._node._propagateFlagsDown(NodeFlags.DownOnMoved);
                this._node._markCurrentBoundsAsDirtyRegion();
            };
            Transform.prototype.setColorMatrix = function (value) {
                this._colorMatrix.set(value);
                this._node._propagateFlagsUp(NodeFlags.UpOnColorMatrixChanged);
                this._node._propagateFlagsDown(NodeFlags.DownOnColorMatrixChanged);
            };
            Transform.prototype.getMatrix = function (clone) {
                if (clone === void 0) { clone = false; }
                if (clone) {
                    return this._matrix.clone();
                }
                return this._matrix;
            };
            Transform.prototype.hasColorMatrix = function () {
                return this._colorMatrix !== null;
            };
            Transform.prototype.getColorMatrix = function (clone) {
                if (clone === void 0) { clone = false; }
                if (this._colorMatrix === null) {
                    this._colorMatrix = GFX.ColorMatrix.createIdentity();
                }
                if (clone) {
                    return this._colorMatrix.clone();
                }
                return this._colorMatrix;
            };
            Transform.prototype.getConcatenatedMatrix = function (clone) {
                if (clone === void 0) { clone = false; }
                if (this._node.hasFlags(512 /* InvalidConcatenatedMatrix */)) {
                    var ancestor = this._node._findClosestAncestor(512 /* InvalidConcatenatedMatrix */, false);
                    var path = Node._getAncestors(this._node, ancestor);
                    var m = ancestor ? ancestor.getTransform()._concatenatedMatrix.clone() : Matrix.createIdentity();
                    for (var i = path.length - 1; i >= 0; i--) {
                        var ancestor = path[i];
                        var ancestorTransform = ancestor.getTransform();
                        release || assert(ancestor.hasFlags(512 /* InvalidConcatenatedMatrix */));
                        m.preMultiply(ancestorTransform._matrix);
                        ancestorTransform._concatenatedMatrix.set(m);
                        ancestor.removeFlags(512 /* InvalidConcatenatedMatrix */);
                    }
                }
                if (clone) {
                    return this._concatenatedMatrix.clone();
                }
                return this._concatenatedMatrix;
            };
            Transform.prototype.getInvertedConcatenatedMatrix = function (clone) {
                if (clone === void 0) { clone = false; }
                if (this._node.hasFlags(1024 /* InvalidInvertedConcatenatedMatrix */)) {
                    this.getConcatenatedMatrix().inverse(this._invertedConcatenatedMatrix);
                    this._node.removeFlags(1024 /* InvalidInvertedConcatenatedMatrix */);
                }
                if (clone) {
                    return this._invertedConcatenatedMatrix.clone();
                }
                return this._invertedConcatenatedMatrix;
            };
            Transform.prototype.toString = function () {
                return this._matrix.toString();
            };
            return Transform;
        })();
        GFX.Transform = Transform;
        var Layer = (function () {
            function Layer(node) {
                this._node = node;
                this._mask = null;
                this._blendMode = 1 /* Normal */;
            }
            Object.defineProperty(Layer.prototype, "filters", {
                get: function () {
                    return this._filters;
                },
                set: function (value) {
                    this._filters = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Layer.prototype, "blendMode", {
                get: function () {
                    return this._blendMode;
                },
                set: function (value) {
                    this._blendMode = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Layer.prototype, "mask", {
                get: function () {
                    return this._mask;
                },
                set: function (value) {
                    if (this._mask && this._mask !== value) {
                        this._mask.removeFlags(4 /* IsMask */);
                    }
                    this._mask = value;
                    if (this._mask) {
                        this._mask.setFlags(4 /* IsMask */);
                    }
                },
                enumerable: true,
                configurable: true
            });
            Layer.prototype.toString = function () {
                return BlendMode[this._blendMode];
            };
            return Layer;
        })();
        GFX.Layer = Layer;
        var Shape = (function (_super) {
            __extends(Shape, _super);
            function Shape(source) {
                _super.call(this);
                release || assert(source);
                this._source = source;
                this._type = 3 /* Shape */;
                this.ratio = 0;
            }
            Shape.prototype.getBounds = function (clone) {
                if (clone === void 0) { clone = false; }
                var bounds = this._bounds || (this._bounds = Rectangle.createEmpty());
                if (this.hasFlags(256 /* InvalidBounds */)) {
                    bounds.set(this._source.getBounds());
                    this.removeFlags(256 /* InvalidBounds */);
                }
                if (clone) {
                    return bounds.clone();
                }
                return bounds;
            };
            Object.defineProperty(Shape.prototype, "source", {
                get: function () {
                    return this._source;
                },
                enumerable: true,
                configurable: true
            });
            Shape.prototype._propagateFlagsDown = function (flags) {
                this.setFlags(flags);
            };
            Shape.prototype.getChildren = function (clone) {
                if (clone === void 0) { clone = false; }
                return [this._source];
            };
            return Shape;
        })(Node);
        GFX.Shape = Shape;
        var StageAlignFlags = Shumway.Remoting.StageAlignFlags;
        var StageScaleMode = Shumway.Remoting.StageScaleMode;
        function getRandomIntInclusive(min, max) {
            return Math.floor(Math.random() * (max - min + 1)) + min;
        }
        var RendererOptions = (function () {
            function RendererOptions() {
                this.debug = false;
                this.paintRenderable = true;
                this.paintBounds = false;
                this.paintDirtyRegion = false;
                this.paintFlashing = false;
                this.paintViewport = false;
                this.clear = true;
            }
            return RendererOptions;
        })();
        GFX.RendererOptions = RendererOptions;
        (function (Backend) {
            Backend[Backend["Canvas2D"] = 0] = "Canvas2D";
            Backend[Backend["WebGL"] = 1] = "WebGL";
            Backend[Backend["Both"] = 2] = "Both";
            Backend[Backend["DOM"] = 3] = "DOM";
            Backend[Backend["SVG"] = 4] = "SVG";
        })(GFX.Backend || (GFX.Backend = {}));
        var Backend = GFX.Backend;
        var Renderer = (function (_super) {
            __extends(Renderer, _super);
            function Renderer(container, stage, options) {
                _super.call(this);
                this._container = container;
                this._stage = stage;
                this._options = options;
                this._viewport = Rectangle.createSquare(1024);
                this._devicePixelRatio = 1;
            }
            Object.defineProperty(Renderer.prototype, "viewport", {
                set: function (viewport) {
                    this._viewport.set(viewport);
                },
                enumerable: true,
                configurable: true
            });
            Renderer.prototype.render = function () {
                throw Shumway.Debug.abstractMethod("Renderer::render");
            };
            Renderer.prototype.resize = function () {
                throw Shumway.Debug.abstractMethod("Renderer::resize");
            };
            Renderer.prototype.screenShot = function (bounds, stageContent) {
                throw Shumway.Debug.abstractMethod("Renderer::screenShot");
            };
            return Renderer;
        })(NodeVisitor);
        GFX.Renderer = Renderer;
        var Stage = (function (_super) {
            __extends(Stage, _super);
            function Stage(w, h, trackDirtyRegion) {
                if (trackDirtyRegion === void 0) { trackDirtyRegion = false; }
                _super.call(this);
                this._dirtyVisitor = new DirtyNodeVisitor();
                this._flags &= ~2 /* BoundsAutoCompute */;
                this._type = 13 /* Stage */;
                this._scaleMode = Stage.DEFAULT_SCALE;
                this._align = Stage.DEFAULT_ALIGN;
                this._content = new Group();
                this._content._flags &= ~2 /* BoundsAutoCompute */;
                this.addChild(this._content);
                this.setFlags(16 /* Dirty */);
                this.setBounds(new Rectangle(0, 0, w, h));
                if (trackDirtyRegion) {
                    this._dirtyRegion = new DirtyRegion(w, h);
                    this._dirtyRegion.addDirtyRectangle(new Rectangle(0, 0, w, h));
                }
                else {
                    this._dirtyRegion = null;
                }
                this._updateContentMatrix();
            }
            Object.defineProperty(Stage.prototype, "dirtyRegion", {
                get: function () {
                    return this._dirtyRegion;
                },
                enumerable: true,
                configurable: true
            });
            Stage.prototype.setBounds = function (value) {
                _super.prototype.setBounds.call(this, value);
                this._updateContentMatrix();
                this._dispatchEvent(1 /* OnStageBoundsChanged */);
                if (this._dirtyRegion) {
                    this._dirtyRegion = new DirtyRegion(value.w, value.h);
                    this._dirtyRegion.addDirtyRectangle(value);
                }
            };
            Object.defineProperty(Stage.prototype, "content", {
                get: function () {
                    return this._content;
                },
                enumerable: true,
                configurable: true
            });
            Stage.prototype.readyToRender = function () {
                this._dirtyVisitor.isDirty = false;
                this._dirtyVisitor.start(this, this._dirtyRegion);
                if (this._dirtyVisitor.isDirty) {
                    return true;
                }
                return false;
            };
            Object.defineProperty(Stage.prototype, "align", {
                get: function () {
                    return this._align;
                },
                set: function (value) {
                    this._align = value;
                    this._updateContentMatrix();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Stage.prototype, "scaleMode", {
                get: function () {
                    return this._scaleMode;
                },
                set: function (value) {
                    this._scaleMode = value;
                    this._updateContentMatrix();
                },
                enumerable: true,
                configurable: true
            });
            Stage.prototype._updateContentMatrix = function () {
                if (this._scaleMode === Stage.DEFAULT_SCALE && this._align === Stage.DEFAULT_ALIGN) {
                    this._content.getTransform().setMatrix(new Matrix(1, 0, 0, 1, 0, 0));
                    return;
                }
                var bounds = this.getBounds();
                var contentBounds = this._content.getBounds();
                var wScale = bounds.w / contentBounds.w;
                var hScale = bounds.h / contentBounds.h;
                var scaleX, scaleY;
                switch (this._scaleMode) {
                    case 2 /* NoBorder */:
                        scaleX = scaleY = Math.max(wScale, hScale);
                        break;
                    case 4 /* NoScale */:
                        scaleX = scaleY = 1;
                        break;
                    case 1 /* ExactFit */:
                        scaleX = wScale;
                        scaleY = hScale;
                        break;
                    default:
                        scaleX = scaleY = Math.min(wScale, hScale);
                        break;
                }
                var offsetX;
                if ((this._align & 4 /* Left */)) {
                    offsetX = 0;
                }
                else if ((this._align & 8 /* Right */)) {
                    offsetX = bounds.w - contentBounds.w * scaleX;
                }
                else {
                    offsetX = (bounds.w - contentBounds.w * scaleX) / 2;
                }
                var offsetY;
                if ((this._align & 1 /* Top */)) {
                    offsetY = 0;
                }
                else if ((this._align & 2 /* Bottom */)) {
                    offsetY = bounds.h - contentBounds.h * scaleY;
                }
                else {
                    offsetY = (bounds.h - contentBounds.h * scaleY) / 2;
                }
                this._content.getTransform().setMatrix(new Matrix(scaleX, 0, 0, scaleY, offsetX, offsetY));
            };
            Stage.DEFAULT_SCALE = 4 /* NoScale */;
            Stage.DEFAULT_ALIGN = 4 /* Left */ | 1 /* Top */;
            return Stage;
        })(Group);
        GFX.Stage = Stage;
    })(GFX = Shumway.GFX || (Shumway.GFX = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var GFX;
    (function (GFX) {
        var Point = GFX.Geometry.Point;
        var Rectangle = GFX.Geometry.Rectangle;
        var PathCommand = Shumway.PathCommand;
        var Matrix = GFX.Geometry.Matrix;
        var assertUnreachable = Shumway.Debug.assertUnreachable;
        var assert = Shumway.Debug.assert;
        var indexOf = Shumway.ArrayUtilities.indexOf;
        var VideoPlaybackEvent = Shumway.Remoting.VideoPlaybackEvent;
        var VideoControlEvent = Shumway.Remoting.VideoControlEvent;
        var Renderable = (function (_super) {
            __extends(Renderable, _super);
            function Renderable() {
                _super.call(this);
                this._parents = [];
                this._renderableParents = [];
                this._invalidateEventListeners = null;
                this._flags &= ~2 /* BoundsAutoCompute */;
                this._type = 33 /* Renderable */;
            }
            Renderable.prototype.addParent = function (frame) {
                release || assert(frame);
                var index = indexOf(this._parents, frame);
                release || assert(index < 0);
                this._parents.push(frame);
            };
            Renderable.prototype.addRenderableParent = function (renderable) {
                release || assert(renderable);
                var index = indexOf(this._renderableParents, renderable);
                release || assert(index < 0);
                this._renderableParents.push(renderable);
            };
            Renderable.prototype.wrap = function () {
                var node;
                var parents = this._parents;
                for (var i = 0; i < parents.length; i++) {
                    node = parents[i];
                    if (!node._parent) {
                        return node;
                    }
                }
                node = new GFX.Shape(this);
                this.addParent(node);
                return node;
            };
            Renderable.prototype.invalidate = function () {
                this.setFlags(16 /* Dirty */);
                var nodes = this._parents;
                for (var i = 0; i < nodes.length; i++) {
                    nodes[i].invalidate();
                }
                var renderables = this._renderableParents;
                for (var i = 0; i < renderables.length; i++) {
                    renderables[i].invalidate();
                }
                var listeners = this._invalidateEventListeners;
                if (listeners) {
                    for (var i = 0; i < listeners.length; i++) {
                        listeners[i](this);
                    }
                }
            };
            Renderable.prototype.addInvalidateEventListener = function (listener) {
                if (!this._invalidateEventListeners) {
                    this._invalidateEventListeners = [];
                }
                var index = indexOf(this._invalidateEventListeners, listener);
                release || assert(index < 0);
                this._invalidateEventListeners.push(listener);
            };
            Renderable.prototype.getBounds = function (clone) {
                if (clone === void 0) { clone = false; }
                if (clone) {
                    return this._bounds.clone();
                }
                return this._bounds;
            };
            Renderable.prototype.getChildren = function (clone) {
                if (clone === void 0) { clone = false; }
                return null;
            };
            Renderable.prototype._propagateFlagsUp = function (flags) {
                if (flags === 0 /* None */ || this.hasFlags(flags)) {
                    return;
                }
                for (var i = 0; i < this._parents.length; i++) {
                    this._parents[i]._propagateFlagsUp(flags);
                }
            };
            Renderable.prototype.render = function (context, ratio, cullBounds, paintClip, paintpaintStencil) {
            };
            return Renderable;
        })(GFX.Node);
        GFX.Renderable = Renderable;
        var CustomRenderable = (function (_super) {
            __extends(CustomRenderable, _super);
            function CustomRenderable(bounds, render) {
                _super.call(this);
                this.setBounds(bounds);
                this.render = render;
            }
            return CustomRenderable;
        })(Renderable);
        GFX.CustomRenderable = CustomRenderable;
        var RenderableVideo = (function (_super) {
            __extends(RenderableVideo, _super);
            function RenderableVideo(assetId, eventSerializer) {
                _super.call(this);
                this._flags = 1048576 /* Dynamic */ | 16 /* Dirty */;
                this._lastTimeInvalidated = 0;
                this._lastPausedTime = 0;
                this._seekHappens = false;
                this._isDOMElement = true;
                this.setBounds(new Rectangle(0, 0, 1, 1));
                this._assetId = assetId;
                this._eventSerializer = eventSerializer;
                var element = document.createElement('video');
                var elementEventHandler = this._handleVideoEvent.bind(this);
                element.preload = 'metadata';
                element.addEventListener("play", elementEventHandler);
                element.addEventListener("ended", elementEventHandler);
                element.addEventListener("loadeddata", elementEventHandler);
                element.addEventListener("progress", elementEventHandler);
                element.addEventListener("waiting", elementEventHandler);
                element.addEventListener("loadedmetadata", elementEventHandler);
                element.addEventListener("error", elementEventHandler);
                element.addEventListener("seeking", elementEventHandler);
                this._video = element;
                this._videoEventHandler = elementEventHandler;
                RenderableVideo._renderableVideos.push(this);
                if (typeof registerInspectorAsset !== "undefined") {
                    registerInspectorAsset(-1, -1, this);
                }
            }
            Object.defineProperty(RenderableVideo.prototype, "video", {
                get: function () {
                    return this._video;
                },
                enumerable: true,
                configurable: true
            });
            RenderableVideo.prototype._handleVideoEvent = function (evt) {
                var type;
                var data = null;
                var element = this._video;
                switch (evt.type) {
                    case "play":
                        type = 1 /* PlayStart */;
                        break;
                    case "ended":
                        type = 2 /* PlayStop */;
                        break;
                    case "loadeddata":
                        type = 3 /* BufferFull */;
                        break;
                    case "progress":
                        type = 4 /* Progress */;
                        break;
                    case "waiting":
                        type = 5 /* BufferEmpty */;
                        break;
                    case "loadedmetadata":
                        type = 7 /* Metadata */;
                        data = {
                            videoWidth: element.videoWidth,
                            videoHeight: element.videoHeight,
                            duration: element.duration
                        };
                        break;
                    case "error":
                        type = 6 /* Error */;
                        data = {
                            code: element.error.code
                        };
                        break;
                    case "seeking":
                        type = 8 /* Seeking */;
                        this._seekHappens = true;
                        break;
                    default:
                        return;
                }
                this._notifyNetStream(type, data);
            };
            RenderableVideo.prototype._notifyNetStream = function (eventType, data) {
                this._eventSerializer.sendVideoPlaybackEvent(this._assetId, eventType, data);
            };
            RenderableVideo.prototype.processControlRequest = function (type, data) {
                var videoElement = this._video;
                var ESTIMATED_VIDEO_SECOND_SIZE = 500;
                switch (type) {
                    case 1 /* Init */:
                        videoElement.src = data.url;
                        videoElement.play();
                        this._notifyNetStream(0 /* Initialized */, null);
                        break;
                    case 2 /* Pause */:
                        if (videoElement) {
                            if (data.paused && !videoElement.paused) {
                                if (!isNaN(data.time)) {
                                    videoElement.currentTime = data.time;
                                    this._lastPausedTime = data.time;
                                }
                                else {
                                    this._lastPausedTime = videoElement.currentTime;
                                }
                                videoElement.pause();
                            }
                            else if (!data.paused && videoElement.paused) {
                                videoElement.play();
                                if (!isNaN(data.time) && this._lastPausedTime !== data.time) {
                                    videoElement.currentTime = data.time;
                                }
                                if (this._seekHappens) {
                                    this._seekHappens = false;
                                    this._notifyNetStream(3 /* BufferFull */, null);
                                }
                            }
                        }
                        return;
                    case 3 /* Seek */:
                        if (videoElement) {
                            videoElement.currentTime = data.time;
                        }
                        return;
                    case 4 /* GetTime */:
                        return videoElement ? videoElement.currentTime : 0;
                    case 5 /* GetBufferLength */:
                        return videoElement ? videoElement.duration : 0;
                    case 6 /* SetSoundLevels */:
                        if (videoElement) {
                            videoElement.volume = data.volume;
                        }
                        return;
                    case 7 /* GetBytesLoaded */:
                        if (!videoElement) {
                            return 0;
                        }
                        var bufferedTill = -1;
                        if (videoElement.buffered) {
                            for (var i = 0; i < videoElement.buffered.length; i++) {
                                bufferedTill = Math.max(bufferedTill, videoElement.buffered.end(i));
                            }
                        }
                        else {
                            bufferedTill = videoElement.duration;
                        }
                        return Math.round(bufferedTill * ESTIMATED_VIDEO_SECOND_SIZE);
                    case 8 /* GetBytesTotal */:
                        return videoElement ? Math.round(videoElement.duration * ESTIMATED_VIDEO_SECOND_SIZE) : 0;
                }
            };
            RenderableVideo.prototype.checkForUpdate = function () {
                if (this._lastTimeInvalidated !== this._video.currentTime) {
                    if (!this._isDOMElement) {
                        this.invalidate();
                    }
                }
                this._lastTimeInvalidated = this._video.currentTime;
            };
            RenderableVideo.checkForVideoUpdates = function () {
                var renderables = RenderableVideo._renderableVideos;
                for (var i = 0; i < renderables.length; i++) {
                    renderables[i].checkForUpdate();
                }
            };
            RenderableVideo.prototype.render = function (context, ratio, cullBounds) {
                GFX.enterTimeline("RenderableVideo.render");
                var videoElement = this._video;
                if (videoElement && videoElement.videoWidth > 0) {
                    context.drawImage(videoElement, 0, 0, videoElement.videoWidth, videoElement.videoHeight, 0, 0, this._bounds.w, this._bounds.h);
                }
                GFX.leaveTimeline("RenderableVideo.render");
            };
            RenderableVideo._renderableVideos = [];
            return RenderableVideo;
        })(Renderable);
        GFX.RenderableVideo = RenderableVideo;
        var RenderableBitmap = (function (_super) {
            __extends(RenderableBitmap, _super);
            function RenderableBitmap(source, bounds) {
                _super.call(this);
                this._flags = 1048576 /* Dynamic */ | 16 /* Dirty */;
                this.properties = {};
                this.setBounds(bounds);
                if (source instanceof HTMLCanvasElement) {
                    this._initializeSourceCanvas(source);
                }
                else {
                    this._sourceImage = source;
                }
            }
            RenderableBitmap.FromDataBuffer = function (type, dataBuffer, bounds) {
                GFX.enterTimeline("RenderableBitmap.FromDataBuffer");
                var canvas = document.createElement("canvas");
                canvas.width = bounds.w;
                canvas.height = bounds.h;
                var renderableBitmap = new RenderableBitmap(canvas, bounds);
                renderableBitmap.updateFromDataBuffer(type, dataBuffer);
                GFX.leaveTimeline("RenderableBitmap.FromDataBuffer");
                return renderableBitmap;
            };
            RenderableBitmap.FromNode = function (source, matrix, colorMatrix, blendMode, clipRect) {
                GFX.enterTimeline("RenderableBitmap.FromFrame");
                var canvas = document.createElement("canvas");
                var bounds = source.getBounds();
                canvas.width = bounds.w;
                canvas.height = bounds.h;
                var renderableBitmap = new RenderableBitmap(canvas, bounds);
                renderableBitmap.drawNode(source, matrix, colorMatrix, blendMode, clipRect);
                GFX.leaveTimeline("RenderableBitmap.FromFrame");
                return renderableBitmap;
            };
            RenderableBitmap.FromImage = function (image, width, height) {
                return new RenderableBitmap(image, new Rectangle(0, 0, width, height));
            };
            RenderableBitmap.prototype.updateFromDataBuffer = function (type, dataBuffer) {
                if (!GFX.imageUpdateOption.value) {
                    return;
                }
                var buffer = dataBuffer.buffer;
                GFX.enterTimeline("RenderableBitmap.updateFromDataBuffer", { length: dataBuffer.length });
                if (type === 4 /* JPEG */ || type === 5 /* PNG */ || type === 6 /* GIF */) {
                    release || Shumway.Debug.assertUnreachable("Mustn't encounter un-decoded images here");
                }
                else {
                    var bounds = this._bounds;
                    var imageData = this._imageData;
                    if (!imageData || imageData.width !== bounds.w || imageData.height !== bounds.h) {
                        imageData = this._imageData = this._context.createImageData(bounds.w, bounds.h);
                    }
                    if (GFX.imageConvertOption.value) {
                        GFX.enterTimeline("ColorUtilities.convertImage");
                        var pixels = new Int32Array(buffer);
                        var out = new Int32Array(imageData.data.buffer);
                        Shumway.ColorUtilities.convertImage(type, 3 /* StraightAlphaRGBA */, pixels, out);
                        GFX.leaveTimeline("ColorUtilities.convertImage");
                    }
                    GFX.enterTimeline("putImageData");
                    this._ensureSourceCanvas();
                    this._context.putImageData(imageData, 0, 0);
                    GFX.leaveTimeline("putImageData");
                }
                this.invalidate();
                GFX.leaveTimeline("RenderableBitmap.updateFromDataBuffer");
            };
            RenderableBitmap.prototype.readImageData = function (output) {
                output.writeRawBytes(this.imageData.data);
            };
            RenderableBitmap.prototype.render = function (context, ratio, cullBounds) {
                GFX.enterTimeline("RenderableBitmap.render");
                if (this.renderSource) {
                    context.drawImage(this.renderSource, 0, 0);
                }
                else {
                    this._renderFallback(context);
                }
                GFX.leaveTimeline("RenderableBitmap.render");
            };
            RenderableBitmap.prototype.drawNode = function (source, matrix, colorMatrix, blendMode, clip) {
                GFX.enterTimeline("RenderableBitmap.drawFrame");
                var Canvas2D = GFX.Canvas2D;
                var bounds = this.getBounds();
                var renderer = new Canvas2D.Canvas2DRenderer(this._canvas, null);
                renderer.renderNode(source, clip || bounds, matrix);
                GFX.leaveTimeline("RenderableBitmap.drawFrame");
            };
            RenderableBitmap.prototype._initializeSourceCanvas = function (source) {
                this._canvas = source;
                this._context = this._canvas.getContext("2d");
            };
            RenderableBitmap.prototype._ensureSourceCanvas = function () {
                if (this._canvas) {
                    return;
                }
                var canvas = document.createElement("canvas");
                var bounds = this._bounds;
                canvas.width = bounds.w;
                canvas.height = bounds.h;
                this._initializeSourceCanvas(canvas);
            };
            Object.defineProperty(RenderableBitmap.prototype, "imageData", {
                get: function () {
                    if (!this._canvas) {
                        release || assert(this._sourceImage);
                        this._ensureSourceCanvas();
                        this._context.drawImage(this._sourceImage, 0, 0);
                        this._sourceImage = null;
                    }
                    return this._context.getImageData(0, 0, this._bounds.w, this._bounds.h);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RenderableBitmap.prototype, "renderSource", {
                get: function () {
                    return this._canvas || this._sourceImage;
                },
                enumerable: true,
                configurable: true
            });
            RenderableBitmap.prototype._renderFallback = function (context) {
                if (!this.fillStyle) {
                    this.fillStyle = Shumway.ColorStyle.randomStyle();
                }
                var bounds = this._bounds;
                context.save();
                context.beginPath();
                context.lineWidth = 2;
                context.fillStyle = this.fillStyle;
                context.fillRect(bounds.x, bounds.y, bounds.w, bounds.h);
                context.restore();
            };
            return RenderableBitmap;
        })(Renderable);
        GFX.RenderableBitmap = RenderableBitmap;
        (function (PathType) {
            PathType[PathType["Fill"] = 0] = "Fill";
            PathType[PathType["Stroke"] = 1] = "Stroke";
            PathType[PathType["StrokeFill"] = 2] = "StrokeFill";
        })(GFX.PathType || (GFX.PathType = {}));
        var PathType = GFX.PathType;
        var StyledPath = (function () {
            function StyledPath(type, style, smoothImage, strokeProperties) {
                this.type = type;
                this.style = style;
                this.smoothImage = smoothImage;
                this.strokeProperties = strokeProperties;
                this.path = new Path2D();
                release || assert((type === 1 /* Stroke */) === !!strokeProperties);
            }
            return StyledPath;
        })();
        GFX.StyledPath = StyledPath;
        var StrokeProperties = (function () {
            function StrokeProperties(thickness, scaleMode, capsStyle, jointsStyle, miterLimit) {
                this.thickness = thickness;
                this.scaleMode = scaleMode;
                this.capsStyle = capsStyle;
                this.jointsStyle = jointsStyle;
                this.miterLimit = miterLimit;
            }
            return StrokeProperties;
        })();
        GFX.StrokeProperties = StrokeProperties;
        function morph(start, end, ratio) {
            return start + (end - start) * ratio;
        }
        function morphColor(start, end, ratio) {
            return morph(start >> 24 & 0xff, end >> 24 & 0xff, ratio) << 24 | morph(start >> 16 & 0xff, end >> 16 & 0xff, ratio) << 16 | morph(start >> 8 & 0xff, end >> 8 & 0xff, ratio) << 8 | morph(start & 0xff, end & 0xff, ratio);
        }
        var RenderableShape = (function (_super) {
            __extends(RenderableShape, _super);
            function RenderableShape(id, pathData, textures, bounds) {
                _super.call(this);
                this._flags = 16 /* Dirty */ | 2097152 /* Scalable */ | 4194304 /* Tileable */;
                this.properties = {};
                this.setBounds(bounds);
                this._id = id;
                this._pathData = pathData;
                this._textures = textures;
                if (textures.length) {
                    this.setFlags(1048576 /* Dynamic */);
                }
            }
            RenderableShape.prototype.update = function (pathData, textures, bounds) {
                this.setBounds(bounds);
                this._pathData = pathData;
                this._paths = null;
                this._textures = textures;
                this.setFlags(1048576 /* Dynamic */);
                this.invalidate();
            };
            RenderableShape.prototype.render = function (context, ratio, cullBounds, paintClip, paintStencil) {
                if (paintClip === void 0) { paintClip = false; }
                if (paintStencil === void 0) { paintStencil = false; }
                var paintStencilStyle = '#FF4981';
                context.fillStyle = context.strokeStyle = 'transparent';
                var paths = this._deserializePaths(this._pathData, context, ratio);
                release || assert(paths);
                GFX.enterTimeline("RenderableShape.render", this);
                for (var i = 0; i < paths.length; i++) {
                    var path = paths[i];
                    context['mozImageSmoothingEnabled'] = context.msImageSmoothingEnabled = context['imageSmoothingEnabled'] = path.smoothImage;
                    if (path.type === 0 /* Fill */) {
                        context.fillStyle = paintStencil ? paintStencilStyle : path.style;
                        paintClip ? context.clip(path.path, 'evenodd') : context.fill(path.path, 'evenodd');
                        context.fillStyle = 'transparent';
                    }
                    else if (!paintClip && !paintStencil) {
                        context.strokeStyle = path.style;
                        var lineScaleMode = 1 /* Normal */;
                        if (path.strokeProperties) {
                            lineScaleMode = path.strokeProperties.scaleMode;
                            context.lineWidth = path.strokeProperties.thickness;
                            context.lineCap = path.strokeProperties.capsStyle;
                            context.lineJoin = path.strokeProperties.jointsStyle;
                            context.miterLimit = path.strokeProperties.miterLimit;
                        }
                        var lineWidth = context.lineWidth;
                        var isSpecialCaseWidth = lineWidth === 1 || lineWidth === 3;
                        if (isSpecialCaseWidth) {
                            context.translate(0.5, 0.5);
                        }
                        context.flashStroke(path.path, lineScaleMode);
                        if (isSpecialCaseWidth) {
                            context.translate(-0.5, -0.5);
                        }
                        context.strokeStyle = 'transparent';
                    }
                }
                GFX.leaveTimeline("RenderableShape.render");
            };
            RenderableShape.prototype._deserializePaths = function (data, context, ratio) {
                release || assert(data ? !this._paths : this._paths);
                GFX.enterTimeline("RenderableShape.deserializePaths");
                if (this._paths) {
                    return this._paths;
                }
                var paths = this._paths = [];
                var fillPath = null;
                var strokePath = null;
                var x = 0;
                var y = 0;
                var cpX;
                var cpY;
                var formOpen = false;
                var formOpenX = 0;
                var formOpenY = 0;
                var commands = data.commands;
                var coordinates = data.coordinates;
                var styles = data.styles;
                styles.position = 0;
                var coordinatesIndex = 0;
                var commandsCount = data.commandsPosition;
                for (var commandIndex = 0; commandIndex < commandsCount; commandIndex++) {
                    var command = commands[commandIndex];
                    switch (command) {
                        case 9 /* MoveTo */:
                            release || assert(coordinatesIndex <= data.coordinatesPosition - 2);
                            if (formOpen && fillPath) {
                                fillPath.lineTo(formOpenX, formOpenY);
                                strokePath && strokePath.lineTo(formOpenX, formOpenY);
                            }
                            formOpen = true;
                            x = formOpenX = coordinates[coordinatesIndex++] / 20;
                            y = formOpenY = coordinates[coordinatesIndex++] / 20;
                            fillPath && fillPath.moveTo(x, y);
                            strokePath && strokePath.moveTo(x, y);
                            break;
                        case 10 /* LineTo */:
                            release || assert(coordinatesIndex <= data.coordinatesPosition - 2);
                            x = coordinates[coordinatesIndex++] / 20;
                            y = coordinates[coordinatesIndex++] / 20;
                            fillPath && fillPath.lineTo(x, y);
                            strokePath && strokePath.lineTo(x, y);
                            break;
                        case 11 /* CurveTo */:
                            release || assert(coordinatesIndex <= data.coordinatesPosition - 4);
                            cpX = coordinates[coordinatesIndex++] / 20;
                            cpY = coordinates[coordinatesIndex++] / 20;
                            x = coordinates[coordinatesIndex++] / 20;
                            y = coordinates[coordinatesIndex++] / 20;
                            fillPath && fillPath.quadraticCurveTo(cpX, cpY, x, y);
                            strokePath && strokePath.quadraticCurveTo(cpX, cpY, x, y);
                            break;
                        case 12 /* CubicCurveTo */:
                            release || assert(coordinatesIndex <= data.coordinatesPosition - 6);
                            cpX = coordinates[coordinatesIndex++] / 20;
                            cpY = coordinates[coordinatesIndex++] / 20;
                            var cpX2 = coordinates[coordinatesIndex++] / 20;
                            var cpY2 = coordinates[coordinatesIndex++] / 20;
                            x = coordinates[coordinatesIndex++] / 20;
                            y = coordinates[coordinatesIndex++] / 20;
                            fillPath && fillPath.bezierCurveTo(cpX, cpY, cpX2, cpY2, x, y);
                            strokePath && strokePath.bezierCurveTo(cpX, cpY, cpX2, cpY2, x, y);
                            break;
                        case 1 /* BeginSolidFill */:
                            release || assert(styles.bytesAvailable >= 4);
                            fillPath = this._createPath(0 /* Fill */, Shumway.ColorUtilities.rgbaToCSSStyle(styles.readUnsignedInt()), false, null, x, y);
                            break;
                        case 3 /* BeginBitmapFill */:
                            var bitmapStyle = this._readBitmap(styles, context);
                            fillPath = this._createPath(0 /* Fill */, bitmapStyle.style, bitmapStyle.smoothImage, null, x, y);
                            break;
                        case 2 /* BeginGradientFill */:
                            fillPath = this._createPath(0 /* Fill */, this._readGradient(styles, context), false, null, x, y);
                            break;
                        case 4 /* EndFill */:
                            fillPath = null;
                            break;
                        case 5 /* LineStyleSolid */:
                            var color = Shumway.ColorUtilities.rgbaToCSSStyle(styles.readUnsignedInt());
                            styles.position += 1;
                            var scaleMode = styles.readByte();
                            var capsStyle = RenderableShape.LINE_CAPS_STYLES[styles.readByte()];
                            var jointsStyle = RenderableShape.LINE_JOINTS_STYLES[styles.readByte()];
                            var strokeProperties = new StrokeProperties(coordinates[coordinatesIndex++] / 20, scaleMode, capsStyle, jointsStyle, styles.readByte());
                            strokePath = this._createPath(1 /* Stroke */, color, false, strokeProperties, x, y);
                            break;
                        case 6 /* LineStyleGradient */:
                            strokePath = this._createPath(2 /* StrokeFill */, this._readGradient(styles, context), false, null, x, y);
                            break;
                        case 7 /* LineStyleBitmap */:
                            var bitmapStyle = this._readBitmap(styles, context);
                            strokePath = this._createPath(2 /* StrokeFill */, bitmapStyle.style, bitmapStyle.smoothImage, null, x, y);
                            break;
                        case 8 /* LineEnd */:
                            strokePath = null;
                            break;
                        default:
                            release || assertUnreachable('Invalid command ' + command + ' encountered at index' + commandIndex + ' of ' + commandsCount);
                    }
                }
                release || assert(styles.bytesAvailable === 0);
                release || assert(commandIndex === commandsCount);
                release || assert(coordinatesIndex === data.coordinatesPosition);
                if (formOpen && fillPath) {
                    fillPath.lineTo(formOpenX, formOpenY);
                    strokePath && strokePath.lineTo(formOpenX, formOpenY);
                }
                this._pathData = null;
                GFX.leaveTimeline("RenderableShape.deserializePaths");
                return paths;
            };
            RenderableShape.prototype._createPath = function (type, style, smoothImage, strokeProperties, x, y) {
                var path = new StyledPath(type, style, smoothImage, strokeProperties);
                this._paths.push(path);
                path.path.moveTo(x, y);
                return path.path;
            };
            RenderableShape.prototype._readMatrix = function (data) {
                return new Matrix(data.readFloat(), data.readFloat(), data.readFloat(), data.readFloat(), data.readFloat(), data.readFloat());
            };
            RenderableShape.prototype._readGradient = function (styles, context) {
                release || assert(styles.bytesAvailable >= 1 + 1 + 6 * 4 + 1 + 1 + 4 + 1 + 1);
                var gradientType = styles.readUnsignedByte();
                var focalPoint = styles.readShort() * 2 / 0xff;
                release || assert(focalPoint >= -1 && focalPoint <= 1);
                var transform = this._readMatrix(styles);
                var gradient = gradientType === 16 /* Linear */ ? context.createLinearGradient(-1, 0, 1, 0) : context.createRadialGradient(focalPoint, 0, 0, 0, 0, 1);
                gradient.setTransform && gradient.setTransform(transform.toSVGMatrix());
                var colorStopsCount = styles.readUnsignedByte();
                for (var i = 0; i < colorStopsCount; i++) {
                    var ratio = styles.readUnsignedByte() / 0xff;
                    var cssColor = Shumway.ColorUtilities.rgbaToCSSStyle(styles.readUnsignedInt());
                    gradient.addColorStop(ratio, cssColor);
                }
                styles.position += 2;
                return gradient;
            };
            RenderableShape.prototype._readBitmap = function (styles, context) {
                release || assert(styles.bytesAvailable >= 4 + 6 * 4 + 1 + 1);
                var textureIndex = styles.readUnsignedInt();
                var fillTransform = this._readMatrix(styles);
                var repeat = styles.readBoolean() ? 'repeat' : 'no-repeat';
                var smooth = styles.readBoolean();
                var texture = this._textures[textureIndex];
                var fillStyle;
                if (texture) {
                    fillStyle = context.createPattern(texture.renderSource, repeat);
                    fillStyle.setTransform(fillTransform.toSVGMatrix());
                }
                else {
                    fillStyle = null;
                }
                return { style: fillStyle, smoothImage: smooth };
            };
            RenderableShape.prototype._renderFallback = function (context) {
                if (!this.fillStyle) {
                    this.fillStyle = Shumway.ColorStyle.randomStyle();
                }
                var bounds = this._bounds;
                context.save();
                context.beginPath();
                context.lineWidth = 2;
                context.fillStyle = this.fillStyle;
                context.fillRect(bounds.x, bounds.y, bounds.w, bounds.h);
                context.restore();
            };
            RenderableShape.LINE_CAPS_STYLES = ['round', 'butt', 'square'];
            RenderableShape.LINE_JOINTS_STYLES = ['round', 'bevel', 'miter'];
            return RenderableShape;
        })(Renderable);
        GFX.RenderableShape = RenderableShape;
        var RenderableMorphShape = (function (_super) {
            __extends(RenderableMorphShape, _super);
            function RenderableMorphShape() {
                _super.apply(this, arguments);
                this._flags = 1048576 /* Dynamic */ | 16 /* Dirty */ | 2097152 /* Scalable */ | 4194304 /* Tileable */;
                this._morphPaths = Object.create(null);
            }
            RenderableMorphShape.prototype._deserializePaths = function (data, context, ratio) {
                GFX.enterTimeline("RenderableMorphShape.deserializePaths");
                if (this._morphPaths[ratio]) {
                    return this._morphPaths[ratio];
                }
                var paths = this._morphPaths[ratio] = [];
                var fillPath = null;
                var strokePath = null;
                var x = 0;
                var y = 0;
                var cpX;
                var cpY;
                var formOpen = false;
                var formOpenX = 0;
                var formOpenY = 0;
                var commands = data.commands;
                var coordinates = data.coordinates;
                var morphCoordinates = data.morphCoordinates;
                var styles = data.styles;
                var morphStyles = data.morphStyles;
                styles.position = 0;
                morphStyles.position = 0;
                var coordinatesIndex = 0;
                var commandsCount = data.commandsPosition;
                for (var commandIndex = 0; commandIndex < commandsCount; commandIndex++) {
                    var command = commands[commandIndex];
                    switch (command) {
                        case 9 /* MoveTo */:
                            release || assert(coordinatesIndex <= data.coordinatesPosition - 2);
                            if (formOpen && fillPath) {
                                fillPath.lineTo(formOpenX, formOpenY);
                                strokePath && strokePath.lineTo(formOpenX, formOpenY);
                            }
                            formOpen = true;
                            x = formOpenX = morph(coordinates[coordinatesIndex], morphCoordinates[coordinatesIndex++], ratio) / 20;
                            y = formOpenY = morph(coordinates[coordinatesIndex], morphCoordinates[coordinatesIndex++], ratio) / 20;
                            fillPath && fillPath.moveTo(x, y);
                            strokePath && strokePath.moveTo(x, y);
                            break;
                        case 10 /* LineTo */:
                            release || assert(coordinatesIndex <= data.coordinatesPosition - 2);
                            x = morph(coordinates[coordinatesIndex], morphCoordinates[coordinatesIndex++], ratio) / 20;
                            y = morph(coordinates[coordinatesIndex], morphCoordinates[coordinatesIndex++], ratio) / 20;
                            fillPath && fillPath.lineTo(x, y);
                            strokePath && strokePath.lineTo(x, y);
                            break;
                        case 11 /* CurveTo */:
                            release || assert(coordinatesIndex <= data.coordinatesPosition - 4);
                            cpX = morph(coordinates[coordinatesIndex], morphCoordinates[coordinatesIndex++], ratio) / 20;
                            cpY = morph(coordinates[coordinatesIndex], morphCoordinates[coordinatesIndex++], ratio) / 20;
                            x = morph(coordinates[coordinatesIndex], morphCoordinates[coordinatesIndex++], ratio) / 20;
                            y = morph(coordinates[coordinatesIndex], morphCoordinates[coordinatesIndex++], ratio) / 20;
                            fillPath && fillPath.quadraticCurveTo(cpX, cpY, x, y);
                            strokePath && strokePath.quadraticCurveTo(cpX, cpY, x, y);
                            break;
                        case 12 /* CubicCurveTo */:
                            release || assert(coordinatesIndex <= data.coordinatesPosition - 6);
                            cpX = morph(coordinates[coordinatesIndex], morphCoordinates[coordinatesIndex++], ratio) / 20;
                            cpY = morph(coordinates[coordinatesIndex], morphCoordinates[coordinatesIndex++], ratio) / 20;
                            var cpX2 = morph(coordinates[coordinatesIndex], morphCoordinates[coordinatesIndex++], ratio) / 20;
                            var cpY2 = morph(coordinates[coordinatesIndex], morphCoordinates[coordinatesIndex++], ratio) / 20;
                            x = morph(coordinates[coordinatesIndex], morphCoordinates[coordinatesIndex++], ratio) / 20;
                            y = morph(coordinates[coordinatesIndex], morphCoordinates[coordinatesIndex++], ratio) / 20;
                            fillPath && fillPath.bezierCurveTo(cpX, cpY, cpX2, cpY2, x, y);
                            strokePath && strokePath.bezierCurveTo(cpX, cpY, cpX2, cpY2, x, y);
                            break;
                        case 1 /* BeginSolidFill */:
                            release || assert(styles.bytesAvailable >= 4);
                            fillPath = this._createMorphPath(0 /* Fill */, ratio, Shumway.ColorUtilities.rgbaToCSSStyle(morphColor(styles.readUnsignedInt(), morphStyles.readUnsignedInt(), ratio)), false, null, x, y);
                            break;
                        case 3 /* BeginBitmapFill */:
                            var bitmapStyle = this._readMorphBitmap(styles, morphStyles, ratio, context);
                            fillPath = this._createMorphPath(0 /* Fill */, ratio, bitmapStyle.style, bitmapStyle.smoothImage, null, x, y);
                            break;
                        case 2 /* BeginGradientFill */:
                            var gradientStyle = this._readMorphGradient(styles, morphStyles, ratio, context);
                            fillPath = this._createMorphPath(0 /* Fill */, ratio, gradientStyle, false, null, x, y);
                            break;
                        case 4 /* EndFill */:
                            fillPath = null;
                            break;
                        case 5 /* LineStyleSolid */:
                            var width = morph(coordinates[coordinatesIndex], morphCoordinates[coordinatesIndex++], ratio) / 20;
                            var color = Shumway.ColorUtilities.rgbaToCSSStyle(morphColor(styles.readUnsignedInt(), morphStyles.readUnsignedInt(), ratio));
                            styles.position += 1;
                            var scaleMode = styles.readByte();
                            var capsStyle = RenderableShape.LINE_CAPS_STYLES[styles.readByte()];
                            var jointsStyle = RenderableShape.LINE_JOINTS_STYLES[styles.readByte()];
                            var strokeProperties = new StrokeProperties(width, scaleMode, capsStyle, jointsStyle, styles.readByte());
                            strokePath = this._createMorphPath(1 /* Stroke */, ratio, color, false, strokeProperties, x, y);
                            break;
                        case 6 /* LineStyleGradient */:
                            var gradientStyle = this._readMorphGradient(styles, morphStyles, ratio, context);
                            strokePath = this._createMorphPath(2 /* StrokeFill */, ratio, gradientStyle, false, null, x, y);
                            break;
                        case 7 /* LineStyleBitmap */:
                            var bitmapStyle = this._readMorphBitmap(styles, morphStyles, ratio, context);
                            strokePath = this._createMorphPath(2 /* StrokeFill */, ratio, bitmapStyle.style, bitmapStyle.smoothImage, null, x, y);
                            break;
                        case 8 /* LineEnd */:
                            strokePath = null;
                            break;
                        default:
                            release || assertUnreachable('Invalid command ' + command + ' encountered at index' + commandIndex + ' of ' + commandsCount);
                    }
                }
                release || assert(styles.bytesAvailable === 0);
                release || assert(commandIndex === commandsCount);
                release || assert(coordinatesIndex === data.coordinatesPosition);
                if (formOpen && fillPath) {
                    fillPath.lineTo(formOpenX, formOpenY);
                    strokePath && strokePath.lineTo(formOpenX, formOpenY);
                }
                GFX.leaveTimeline("RenderableMorphShape.deserializPaths");
                return paths;
            };
            RenderableMorphShape.prototype._createMorphPath = function (type, ratio, style, smoothImage, strokeProperties, x, y) {
                var path = new StyledPath(type, style, smoothImage, strokeProperties);
                this._morphPaths[ratio].push(path);
                path.path.moveTo(x, y);
                return path.path;
            };
            RenderableMorphShape.prototype._readMorphMatrix = function (data, morphData, ratio) {
                return new Matrix(morph(data.readFloat(), morphData.readFloat(), ratio), morph(data.readFloat(), morphData.readFloat(), ratio), morph(data.readFloat(), morphData.readFloat(), ratio), morph(data.readFloat(), morphData.readFloat(), ratio), morph(data.readFloat(), morphData.readFloat(), ratio), morph(data.readFloat(), morphData.readFloat(), ratio));
            };
            RenderableMorphShape.prototype._readMorphGradient = function (styles, morphStyles, ratio, context) {
                release || assert(styles.bytesAvailable >= 1 + 1 + 6 * 4 + 1 + 1 + 4 + 1 + 1);
                var gradientType = styles.readUnsignedByte();
                var focalPoint = styles.readShort() * 2 / 0xff;
                release || assert(focalPoint >= -1 && focalPoint <= 1);
                var transform = this._readMorphMatrix(styles, morphStyles, ratio);
                var gradient = gradientType === 16 /* Linear */ ? context.createLinearGradient(-1, 0, 1, 0) : context.createRadialGradient(focalPoint, 0, 0, 0, 0, 1);
                gradient.setTransform && gradient.setTransform(transform.toSVGMatrix());
                var colorStopsCount = styles.readUnsignedByte();
                for (var i = 0; i < colorStopsCount; i++) {
                    var stop = morph(styles.readUnsignedByte() / 0xff, morphStyles.readUnsignedByte() / 0xff, ratio);
                    var color = morphColor(styles.readUnsignedInt(), morphStyles.readUnsignedInt(), ratio);
                    var cssColor = Shumway.ColorUtilities.rgbaToCSSStyle(color);
                    gradient.addColorStop(stop, cssColor);
                }
                styles.position += 2;
                return gradient;
            };
            RenderableMorphShape.prototype._readMorphBitmap = function (styles, morphStyles, ratio, context) {
                release || assert(styles.bytesAvailable >= 4 + 6 * 4 + 1 + 1);
                var textureIndex = styles.readUnsignedInt();
                var fillTransform = this._readMorphMatrix(styles, morphStyles, ratio);
                var repeat = styles.readBoolean() ? 'repeat' : 'no-repeat';
                var smooth = styles.readBoolean();
                var texture = this._textures[textureIndex];
                release || assert(texture._canvas);
                var fillStyle = context.createPattern(texture._canvas, repeat);
                fillStyle.setTransform(fillTransform.toSVGMatrix());
                return { style: fillStyle, smoothImage: smooth };
            };
            return RenderableMorphShape;
        })(RenderableShape);
        GFX.RenderableMorphShape = RenderableMorphShape;
        var TextLine = (function () {
            function TextLine() {
                this.x = 0;
                this.y = 0;
                this.width = 0;
                this.ascent = 0;
                this.descent = 0;
                this.leading = 0;
                this.align = 0;
                this.runs = [];
            }
            TextLine.prototype.addRun = function (font, fillStyle, text, underline) {
                if (text) {
                    TextLine._measureContext.font = font;
                    var width = TextLine._measureContext.measureText(text).width | 0;
                    this.runs.push(new TextRun(font, fillStyle, text, width, underline));
                    this.width += width;
                }
            };
            TextLine.prototype.wrap = function (maxWidth) {
                var lines = [this];
                var runs = this.runs;
                var currentLine = this;
                currentLine.width = 0;
                currentLine.runs = [];
                var measureContext = TextLine._measureContext;
                for (var i = 0; i < runs.length; i++) {
                    var run = runs[i];
                    var text = run.text;
                    run.text = '';
                    run.width = 0;
                    measureContext.font = run.font;
                    var spaceLeft = maxWidth;
                    var words = text.split(/[\s.-]/);
                    var offset = 0;
                    for (var j = 0; j < words.length; j++) {
                        var word = words[j];
                        var chunk = text.substr(offset, word.length + 1);
                        var wordWidth = measureContext.measureText(chunk).width | 0;
                        if (wordWidth > spaceLeft) {
                            do {
                                if (run.text) {
                                    currentLine.runs.push(run);
                                    currentLine.width += run.width;
                                    run = new TextRun(run.font, run.fillStyle, '', 0, run.underline);
                                    var newLine = new TextLine();
                                    newLine.y = (currentLine.y + currentLine.descent + currentLine.leading + currentLine.ascent) | 0;
                                    newLine.ascent = currentLine.ascent;
                                    newLine.descent = currentLine.descent;
                                    newLine.leading = currentLine.leading;
                                    newLine.align = currentLine.align;
                                    lines.push(newLine);
                                    currentLine = newLine;
                                }
                                spaceLeft = maxWidth - wordWidth;
                                if (spaceLeft < 0) {
                                    var k = chunk.length;
                                    var t;
                                    var w;
                                    do {
                                        k--;
                                        if (k < 1)
                                            throw new Error('Shall never happen: bad maxWidth?');
                                        t = chunk.substr(0, k);
                                        w = measureContext.measureText(t).width | 0;
                                    } while (w > maxWidth);
                                    run.text = t;
                                    run.width = w;
                                    chunk = chunk.substr(k);
                                    wordWidth = measureContext.measureText(chunk).width | 0;
                                }
                            } while (spaceLeft < 0);
                        }
                        else {
                            spaceLeft = spaceLeft - wordWidth;
                        }
                        run.text += chunk;
                        run.width += wordWidth;
                        offset += word.length + 1;
                    }
                    currentLine.runs.push(run);
                    currentLine.width += run.width;
                }
                return lines;
            };
            TextLine._measureContext = document.createElement('canvas').getContext('2d');
            return TextLine;
        })();
        GFX.TextLine = TextLine;
        var TextRun = (function () {
            function TextRun(font, fillStyle, text, width, underline) {
                if (font === void 0) { font = ''; }
                if (fillStyle === void 0) { fillStyle = ''; }
                if (text === void 0) { text = ''; }
                if (width === void 0) { width = 0; }
                if (underline === void 0) { underline = false; }
                this.font = font;
                this.fillStyle = fillStyle;
                this.text = text;
                this.width = width;
                this.underline = underline;
            }
            return TextRun;
        })();
        GFX.TextRun = TextRun;
        var RenderableText = (function (_super) {
            __extends(RenderableText, _super);
            function RenderableText(bounds) {
                _super.call(this);
                this._flags = 1048576 /* Dynamic */ | 16 /* Dirty */;
                this.properties = {};
                this._textBounds = bounds.clone();
                this._textRunData = null;
                this._plainText = '';
                this._backgroundColor = 0;
                this._borderColor = 0;
                this._matrix = Matrix.createIdentity();
                this._coords = null;
                this._scrollV = 1;
                this._scrollH = 0;
                this.textRect = bounds.clone();
                this.lines = [];
                this.setBounds(bounds);
            }
            RenderableText.prototype.setBounds = function (bounds) {
                _super.prototype.setBounds.call(this, bounds);
                this._textBounds.set(bounds);
                this.textRect.setElements(bounds.x + 2, bounds.y + 2, bounds.w - 2, bounds.h - 2);
            };
            RenderableText.prototype.setContent = function (plainText, textRunData, matrix, coords) {
                this._textRunData = textRunData;
                this._plainText = plainText;
                this._matrix.set(matrix);
                this._coords = coords;
                this.lines = [];
            };
            RenderableText.prototype.setStyle = function (backgroundColor, borderColor, scrollV, scrollH) {
                this._backgroundColor = backgroundColor;
                this._borderColor = borderColor;
                this._scrollV = scrollV;
                this._scrollH = scrollH;
            };
            RenderableText.prototype.reflow = function (autoSize, wordWrap) {
                var textRunData = this._textRunData;
                if (!textRunData) {
                    return;
                }
                var bounds = this._bounds;
                var availableWidth = bounds.w - 4;
                var plainText = this._plainText;
                var lines = this.lines;
                var currentLine = new TextLine();
                var baseLinePos = 0;
                var maxWidth = 0;
                var maxAscent = 0;
                var maxDescent = 0;
                var maxLeading = 0;
                var firstAlign = -1;
                var finishLine = function () {
                    if (!currentLine.runs.length) {
                        baseLinePos += maxAscent + maxDescent + maxLeading;
                        return;
                    }
                    if (lines.length) {
                        baseLinePos += maxLeading;
                    }
                    baseLinePos += maxAscent;
                    currentLine.y = baseLinePos | 0;
                    baseLinePos += maxDescent;
                    currentLine.ascent = maxAscent;
                    currentLine.descent = maxDescent;
                    currentLine.leading = maxLeading;
                    currentLine.align = firstAlign;
                    if (wordWrap && currentLine.width > availableWidth) {
                        var wrappedLines = currentLine.wrap(availableWidth);
                        for (var i = 0; i < wrappedLines.length; i++) {
                            var line = wrappedLines[i];
                            baseLinePos = line.y + line.descent + line.leading;
                            lines.push(line);
                            if (line.width > maxWidth) {
                                maxWidth = line.width;
                            }
                        }
                    }
                    else {
                        lines.push(currentLine);
                        if (currentLine.width > maxWidth) {
                            maxWidth = currentLine.width;
                        }
                    }
                    currentLine = new TextLine();
                };
                GFX.enterTimeline("RenderableText.reflow");
                while (textRunData.position < textRunData.length) {
                    var beginIndex = textRunData.readInt();
                    var endIndex = textRunData.readInt();
                    var size = textRunData.readInt();
                    var fontName = textRunData.readUTF();
                    var ascent = textRunData.readInt();
                    var descent = textRunData.readInt();
                    var leading = textRunData.readInt();
                    if (ascent > maxAscent) {
                        maxAscent = ascent;
                    }
                    if (descent > maxDescent) {
                        maxDescent = descent;
                    }
                    if (leading > maxLeading) {
                        maxLeading = leading;
                    }
                    var bold = textRunData.readBoolean();
                    var italic = textRunData.readBoolean();
                    var boldItalic = '';
                    if (italic) {
                        boldItalic += 'italic ';
                    }
                    if (bold) {
                        boldItalic += 'bold ';
                    }
                    var font = boldItalic + size + 'px ' + fontName;
                    var color = textRunData.readInt();
                    var fillStyle = Shumway.ColorUtilities.rgbToHex(color);
                    var align = textRunData.readInt();
                    if (firstAlign === -1) {
                        firstAlign = align;
                    }
                    var bullet = textRunData.readBoolean();
                    var indent = textRunData.readInt();
                    var kerning = textRunData.readInt();
                    var leftMargin = textRunData.readInt();
                    var letterSpacing = textRunData.readInt();
                    var rightMargin = textRunData.readInt();
                    var underline = textRunData.readBoolean();
                    var text = '';
                    var eof = false;
                    for (var i = beginIndex; !eof; i++) {
                        var eof = i >= endIndex - 1;
                        var char = plainText[i];
                        if (char !== '\r' && char !== '\n') {
                            text += char;
                            if (i < plainText.length - 1) {
                                continue;
                            }
                        }
                        currentLine.addRun(font, fillStyle, text, underline);
                        finishLine();
                        text = '';
                        if (eof) {
                            maxAscent = 0;
                            maxDescent = 0;
                            maxLeading = 0;
                            firstAlign = -1;
                            break;
                        }
                        if (char === '\r' && plainText[i + 1] === '\n') {
                            i++;
                        }
                    }
                    currentLine.addRun(font, fillStyle, text, underline);
                }
                var endCharacter = plainText[plainText.length - 1];
                if (endCharacter === '\r' || endCharacter === '\n') {
                    lines.push(currentLine);
                }
                var rect = this.textRect;
                rect.w = maxWidth;
                rect.h = baseLinePos;
                if (autoSize) {
                    if (!wordWrap) {
                        availableWidth = maxWidth;
                        var width = bounds.w;
                        switch (autoSize) {
                            case 1:
                                rect.x = (width - (availableWidth + 4)) >> 1;
                                break;
                            case 2:
                                break;
                            case 3:
                                rect.x = width - (availableWidth + 4);
                                break;
                        }
                        this._textBounds.setElements(rect.x - 2, rect.y - 2, rect.w + 4, rect.h + 4);
                    }
                    bounds.h = baseLinePos + 4;
                }
                else {
                    this._textBounds = bounds;
                }
                var numLines = lines.length;
                for (var i = 0; i < lines.length; i++) {
                    var line = lines[i];
                    if (line.width < availableWidth) {
                        switch (line.align) {
                            case 0:
                                break;
                            case 1:
                                line.x = (availableWidth - line.width) | 0;
                                break;
                            case 2:
                                line.x = ((availableWidth - line.width) / 2) | 0;
                                break;
                        }
                    }
                }
                this.invalidate();
                GFX.leaveTimeline("RenderableText.reflow");
            };
            RenderableText.roundBoundPoints = function (points) {
                release || assert(points === RenderableText.absoluteBoundPoints);
                for (var i = 0; i < points.length; i++) {
                    var point = points[i];
                    point.x = Math.floor(point.x + .1) + .5;
                    point.y = Math.floor(point.y + .1) + .5;
                }
            };
            RenderableText.prototype.render = function (context) {
                GFX.enterTimeline("RenderableText.render");
                context.save();
                var rect = this._textBounds;
                if (this._backgroundColor) {
                    context.fillStyle = Shumway.ColorUtilities.rgbaToCSSStyle(this._backgroundColor);
                    context.fillRect(rect.x, rect.y, rect.w, rect.h);
                }
                if (this._borderColor) {
                    context.strokeStyle = Shumway.ColorUtilities.rgbaToCSSStyle(this._borderColor);
                    context.lineCap = 'square';
                    context.lineWidth = 1;
                    var boundPoints = RenderableText.absoluteBoundPoints;
                    var m = context['currentTransform'];
                    if (m) {
                        rect = rect.clone();
                        var matrix = new Matrix(m.a, m.b, m.c, m.d, m.e, m.f);
                        matrix.transformRectangle(rect, boundPoints);
                        context.setTransform(1, 0, 0, 1, 0, 0);
                    }
                    else {
                        boundPoints[0].x = rect.x;
                        boundPoints[0].y = rect.y;
                        boundPoints[1].x = rect.x + rect.w;
                        boundPoints[1].y = rect.y;
                        boundPoints[2].x = rect.x + rect.w;
                        boundPoints[2].y = rect.y + rect.h;
                        boundPoints[3].x = rect.x;
                        boundPoints[3].y = rect.y + rect.h;
                    }
                    RenderableText.roundBoundPoints(boundPoints);
                    var path = new Path2D();
                    path.moveTo(boundPoints[0].x, boundPoints[0].y);
                    path.lineTo(boundPoints[1].x, boundPoints[1].y);
                    path.lineTo(boundPoints[2].x, boundPoints[2].y);
                    path.lineTo(boundPoints[3].x, boundPoints[3].y);
                    path.lineTo(boundPoints[0].x, boundPoints[0].y);
                    context.stroke(path);
                    if (m) {
                        context.setTransform(m.a, m.b, m.c, m.d, m.e, m.f);
                    }
                }
                if (this._coords) {
                    this._renderChars(context);
                }
                else {
                    this._renderLines(context);
                }
                context.restore();
                GFX.leaveTimeline("RenderableText.render");
            };
            RenderableText.prototype._renderChars = function (context) {
                if (this._matrix) {
                    var m = this._matrix;
                    context.transform(m.a, m.b, m.c, m.d, m.tx, m.ty);
                }
                var lines = this.lines;
                var coords = this._coords;
                coords.position = 0;
                for (var i = 0; i < lines.length; i++) {
                    var line = lines[i];
                    var runs = line.runs;
                    for (var j = 0; j < runs.length; j++) {
                        var run = runs[j];
                        context.font = run.font;
                        context.fillStyle = run.fillStyle;
                        var text = run.text;
                        for (var k = 0; k < text.length; k++) {
                            var x = coords.readInt() / 20;
                            var y = coords.readInt() / 20;
                            context.fillText(text[k], x, y);
                        }
                    }
                }
            };
            RenderableText.prototype._renderLines = function (context) {
                var bounds = this._textBounds;
                context.beginPath();
                context.rect(bounds.x + 2, bounds.y + 2, bounds.w - 4, bounds.h - 4);
                context.clip();
                context.translate((bounds.x - this._scrollH) + 2, bounds.y + 2);
                var lines = this.lines;
                var scrollV = this._scrollV;
                var scrollY = 0;
                for (var i = 0; i < lines.length; i++) {
                    var line = lines[i];
                    var x = line.x;
                    var y = line.y;
                    if (i + 1 < scrollV) {
                        scrollY = y + line.descent + line.leading;
                        continue;
                    }
                    y -= scrollY;
                    if ((i + 1) - scrollV && y > bounds.h) {
                        break;
                    }
                    var runs = line.runs;
                    for (var j = 0; j < runs.length; j++) {
                        var run = runs[j];
                        context.font = run.font;
                        context.fillStyle = run.fillStyle;
                        if (run.underline) {
                            context.fillRect(x, (y + (line.descent / 2)) | 0, run.width, 1);
                        }
                        context.textAlign = "left";
                        context.textBaseline = "alphabetic";
                        context.fillText(run.text, x, y);
                        x += run.width;
                    }
                }
            };
            RenderableText.absoluteBoundPoints = [new Point(0, 0), new Point(0, 0), new Point(0, 0), new Point(0, 0)];
            return RenderableText;
        })(Renderable);
        GFX.RenderableText = RenderableText;
        var Label = (function (_super) {
            __extends(Label, _super);
            function Label(w, h) {
                _super.call(this);
                this._flags = 1048576 /* Dynamic */ | 2097152 /* Scalable */;
                this.properties = {};
                this.setBounds(new Rectangle(0, 0, w, h));
            }
            Object.defineProperty(Label.prototype, "text", {
                get: function () {
                    return this._text;
                },
                set: function (value) {
                    this._text = value;
                },
                enumerable: true,
                configurable: true
            });
            Label.prototype.render = function (context, ratio, cullBounds) {
                context.save();
                context.textBaseline = "top";
                context.fillStyle = "white";
                context.fillText(this.text, 0, 0);
                context.restore();
            };
            return Label;
        })(Renderable);
        GFX.Label = Label;
    })(GFX = Shumway.GFX || (Shumway.GFX = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var GFX;
    (function (GFX) {
        var clampByte = Shumway.ColorUtilities.clampByte;
        var assert = Shumway.Debug.assert;
        var Filter = (function () {
            function Filter() {
            }
            return Filter;
        })();
        GFX.Filter = Filter;
        var BlurFilter = (function (_super) {
            __extends(BlurFilter, _super);
            function BlurFilter(blurX, blurY, quality) {
                _super.call(this);
                this.blurX = blurX;
                this.blurY = blurY;
                this.quality = quality;
            }
            return BlurFilter;
        })(Filter);
        GFX.BlurFilter = BlurFilter;
        var DropshadowFilter = (function (_super) {
            __extends(DropshadowFilter, _super);
            function DropshadowFilter(alpha, angle, blurX, blurY, color, distance, hideObject, inner, knockout, quality, strength) {
                _super.call(this);
                this.alpha = alpha;
                this.angle = angle;
                this.blurX = blurX;
                this.blurY = blurY;
                this.color = color;
                this.distance = distance;
                this.hideObject = hideObject;
                this.inner = inner;
                this.knockout = knockout;
                this.quality = quality;
                this.strength = strength;
            }
            return DropshadowFilter;
        })(Filter);
        GFX.DropshadowFilter = DropshadowFilter;
        var GlowFilter = (function (_super) {
            __extends(GlowFilter, _super);
            function GlowFilter(alpha, blurX, blurY, color, inner, knockout, quality, strength) {
                _super.call(this);
                this.alpha = alpha;
                this.blurX = blurX;
                this.blurY = blurY;
                this.color = color;
                this.inner = inner;
                this.knockout = knockout;
                this.quality = quality;
                this.strength = strength;
            }
            return GlowFilter;
        })(Filter);
        GFX.GlowFilter = GlowFilter;
        (function (ColorMatrixType) {
            ColorMatrixType[ColorMatrixType["Unknown"] = 0x0000] = "Unknown";
            ColorMatrixType[ColorMatrixType["Identity"] = 0x0001] = "Identity";
        })(GFX.ColorMatrixType || (GFX.ColorMatrixType = {}));
        var ColorMatrixType = GFX.ColorMatrixType;
        var ColorMatrix = (function () {
            function ColorMatrix(data) {
                release || assert(data.length === 20);
                this._data = new Float32Array(data);
                this._type = 0 /* Unknown */;
            }
            ColorMatrix.prototype.clone = function () {
                var colorMatrix = new ColorMatrix(this._data);
                colorMatrix._type = this._type;
                return colorMatrix;
            };
            ColorMatrix.prototype.set = function (other) {
                this._data.set(other._data);
                this._type = other._type;
            };
            ColorMatrix.prototype.toWebGLMatrix = function () {
                return new Float32Array(this._data);
            };
            ColorMatrix.prototype.asWebGLMatrix = function () {
                return this._data.subarray(0, 16);
            };
            ColorMatrix.prototype.asWebGLVector = function () {
                return this._data.subarray(16, 20);
            };
            ColorMatrix.prototype.isIdentity = function () {
                if (this._type & 1 /* Identity */) {
                    return true;
                }
                var m = this._data;
                return m[0] == 1 && m[1] == 0 && m[2] == 0 && m[3] == 0 && m[4] == 0 && m[5] == 1 && m[6] == 0 && m[7] == 0 && m[8] == 0 && m[9] == 0 && m[10] == 1 && m[11] == 0 && m[12] == 0 && m[13] == 0 && m[14] == 0 && m[15] == 1 && m[16] == 0 && m[17] == 0 && m[18] == 0 && m[19] == 0;
            };
            ColorMatrix.createIdentity = function () {
                var colorMatrix = new ColorMatrix([
                    1,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0
                ]);
                colorMatrix._type = 1 /* Identity */;
                return colorMatrix;
            };
            ColorMatrix.prototype.setMultipliersAndOffsets = function (redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier, redOffset, greenOffset, blueOffset, alphaOffset) {
                var m = this._data;
                for (var i = 0; i < m.length; i++) {
                    m[i] = 0;
                }
                m[0] = redMultiplier;
                m[5] = greenMultiplier;
                m[10] = blueMultiplier;
                m[15] = alphaMultiplier;
                m[16] = redOffset / 255;
                m[17] = greenOffset / 255;
                m[18] = blueOffset / 255;
                m[19] = alphaOffset / 255;
                this._type = 0 /* Unknown */;
            };
            ColorMatrix.prototype.transformRGBA = function (rgba) {
                var r = (rgba >> 24) & 0xff;
                var g = (rgba >> 16) & 0xff;
                var b = (rgba >> 8) & 0xff;
                var a = rgba & 0xff;
                var m = this._data;
                var R = clampByte(r * m[0] + g * m[1] + b * m[2] + a * m[3] + m[16] * 255);
                var G = clampByte(r * m[4] + g * m[5] + b * m[6] + a * m[7] + m[17] * 255);
                var B = clampByte(r * m[8] + g * m[9] + b * m[10] + a * m[11] + m[18] * 255);
                var A = clampByte(r * m[12] + g * m[13] + b * m[14] + a * m[15] + m[19] * 255);
                return R << 24 | G << 16 | B << 8 | A;
            };
            ColorMatrix.prototype.multiply = function (other) {
                if (other._type & 1 /* Identity */) {
                    return;
                }
                var a = this._data, b = other._data;
                var a00 = a[0 * 4 + 0];
                var a01 = a[0 * 4 + 1];
                var a02 = a[0 * 4 + 2];
                var a03 = a[0 * 4 + 3];
                var a10 = a[1 * 4 + 0];
                var a11 = a[1 * 4 + 1];
                var a12 = a[1 * 4 + 2];
                var a13 = a[1 * 4 + 3];
                var a20 = a[2 * 4 + 0];
                var a21 = a[2 * 4 + 1];
                var a22 = a[2 * 4 + 2];
                var a23 = a[2 * 4 + 3];
                var a30 = a[3 * 4 + 0];
                var a31 = a[3 * 4 + 1];
                var a32 = a[3 * 4 + 2];
                var a33 = a[3 * 4 + 3];
                var a40 = a[4 * 4 + 0];
                var a41 = a[4 * 4 + 1];
                var a42 = a[4 * 4 + 2];
                var a43 = a[4 * 4 + 3];
                var b00 = b[0 * 4 + 0];
                var b01 = b[0 * 4 + 1];
                var b02 = b[0 * 4 + 2];
                var b03 = b[0 * 4 + 3];
                var b10 = b[1 * 4 + 0];
                var b11 = b[1 * 4 + 1];
                var b12 = b[1 * 4 + 2];
                var b13 = b[1 * 4 + 3];
                var b20 = b[2 * 4 + 0];
                var b21 = b[2 * 4 + 1];
                var b22 = b[2 * 4 + 2];
                var b23 = b[2 * 4 + 3];
                var b30 = b[3 * 4 + 0];
                var b31 = b[3 * 4 + 1];
                var b32 = b[3 * 4 + 2];
                var b33 = b[3 * 4 + 3];
                var b40 = b[4 * 4 + 0];
                var b41 = b[4 * 4 + 1];
                var b42 = b[4 * 4 + 2];
                var b43 = b[4 * 4 + 3];
                a[0 * 4 + 0] = a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03;
                a[0 * 4 + 1] = a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03;
                a[0 * 4 + 2] = a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03;
                a[0 * 4 + 3] = a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03;
                a[1 * 4 + 0] = a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13;
                a[1 * 4 + 1] = a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13;
                a[1 * 4 + 2] = a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13;
                a[1 * 4 + 3] = a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13;
                a[2 * 4 + 0] = a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23;
                a[2 * 4 + 1] = a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23;
                a[2 * 4 + 2] = a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23;
                a[2 * 4 + 3] = a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23;
                a[3 * 4 + 0] = a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33;
                a[3 * 4 + 1] = a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33;
                a[3 * 4 + 2] = a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33;
                a[3 * 4 + 3] = a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33;
                a[4 * 4 + 0] = a00 * b40 + a10 * b41 + a20 * b42 + a30 * b43 + a40;
                a[4 * 4 + 1] = a01 * b40 + a11 * b41 + a21 * b42 + a31 * b43 + a41;
                a[4 * 4 + 2] = a02 * b40 + a12 * b41 + a22 * b42 + a32 * b43 + a42;
                a[4 * 4 + 3] = a03 * b40 + a13 * b41 + a23 * b42 + a33 * b43 + a43;
                this._type = 0 /* Unknown */;
            };
            Object.defineProperty(ColorMatrix.prototype, "alphaMultiplier", {
                get: function () {
                    return this._data[15];
                },
                enumerable: true,
                configurable: true
            });
            ColorMatrix.prototype.hasOnlyAlphaMultiplier = function () {
                var m = this._data;
                return m[0] == 1 && m[1] == 0 && m[2] == 0 && m[3] == 0 && m[4] == 0 && m[5] == 1 && m[6] == 0 && m[7] == 0 && m[8] == 0 && m[9] == 0 && m[10] == 1 && m[11] == 0 && m[12] == 0 && m[13] == 0 && m[14] == 0 && m[16] == 0 && m[17] == 0 && m[18] == 0 && m[19] == 0;
            };
            ColorMatrix.prototype.equals = function (other) {
                if (!other) {
                    return false;
                }
                else if (this._type === other._type && this._type === 1 /* Identity */) {
                    return true;
                }
                var a = this._data;
                var b = other._data;
                for (var i = 0; i < 20; i++) {
                    if (Math.abs(a[i] - b[i]) > 0.001) {
                        return false;
                    }
                }
                return true;
            };
            ColorMatrix.prototype.toSVGFilterMatrix = function () {
                var m = this._data;
                return [m[0], m[4], m[8], m[12], m[16], m[1], m[5], m[9], m[13], m[17], m[2], m[6], m[10], m[14], m[18], m[3], m[7], m[11], m[15], m[19]].join(" ");
            };
            return ColorMatrix;
        })();
        GFX.ColorMatrix = ColorMatrix;
    })(GFX = Shumway.GFX || (Shumway.GFX = {}));
})(Shumway || (Shumway = {}));
//# sourceMappingURL=gfx-base.js.map
var Shumway;
(function (Shumway) {
    var Player;
    (function (Player) {
        Player.timelineBuffer = new Shumway.Tools.Profiler.TimelineBuffer("Player");
        Player.counter = new Shumway.Metrics.Counter(!release);
        Player.writer = null;
        function enterTimeline(name, data) {
            Player.writer && Player.writer.enter(name);
            profile && Player.timelineBuffer && Player.timelineBuffer.enter(name, data);
        }
        Player.enterTimeline = enterTimeline;
        function leaveTimeline(name, data) {
            Player.writer && Player.writer.leave(name);
            profile && Player.timelineBuffer && Player.timelineBuffer.leave(name, data);
        }
        Player.leaveTimeline = leaveTimeline;
    })(Player = Shumway.Player || (Shumway.Player = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var OptionSet = Shumway.Options.OptionSet;
    var shumwayOptions = Shumway.Settings.shumwayOptions;
    Shumway.playerOptions = shumwayOptions.register(new OptionSet("Player Options"));
    Shumway.frameEnabledOption = Shumway.playerOptions.register(new Shumway.Options.Option("", "Enable Frame Execution", "boolean", true, "Enable frame execution."));
    Shumway.timerEnabledOption = Shumway.playerOptions.register(new Shumway.Options.Option("", "Enable Timers", "boolean", true, "Enable timer events."));
    Shumway.pumpEnabledOption = Shumway.playerOptions.register(new Shumway.Options.Option("", "Enable Pump", "boolean", true, "Enable display tree serialization."));
    Shumway.pumpRateOption = Shumway.playerOptions.register(new Shumway.Options.Option("", "Pump Rate", "number", 60, "Number of times / second that the display list is synchronized.", { range: { min: 1, max: 120, step: 1 } }));
    Shumway.frameRateOption = Shumway.playerOptions.register(new Shumway.Options.Option("", "Frame Rate", "number", 60, "Override a movie's frame rate, set to -1 to use the movies default frame rate.", { range: { min: -1, max: 120, step: 1 } }));
    Shumway.tracePlayerOption = Shumway.playerOptions.register(new Shumway.Options.Option("tp", "Trace Player", "number", 0, "Trace player every n frames.", { range: { min: 0, max: 512, step: 1 } }));
    Shumway.traceMouseEventOption = Shumway.playerOptions.register(new Shumway.Options.Option("tme", "Trace Mouse Events", "boolean", false, "Trace mouse events."));
    Shumway.frameRateMultiplierOption = Shumway.playerOptions.register(new Shumway.Options.Option("", "Frame Rate Multiplier", "number", 1, "Play frames at a faster rate.", { range: { min: 1, max: 16, step: 1 } }));
    Shumway.dontSkipFramesOption = Shumway.playerOptions.register(new Shumway.Options.Option("", "Disables Frame Skipping", "boolean", false, "Play all frames, e.g. no skipping frame during throttle."));
    Shumway.playAllSymbolsOption = Shumway.playerOptions.register(new Shumway.Options.Option("", "Play Symbols", "boolean", false, "Plays all SWF symbols automatically."));
    Shumway.playSymbolOption = Shumway.playerOptions.register(new Shumway.Options.Option("", "Play Symbol Number", "number", 0, "Select symbol by Id.", { range: { min: 0, max: 20000, step: 1 } }));
    Shumway.playSymbolFrameDurationOption = Shumway.playerOptions.register(new Shumway.Options.Option("", "Play Symbol Duration", "number", 0, "How many frames to play, 0 for all frames of the movie clip.", { range: { min: 0, max: 128, step: 1 } }));
    Shumway.playSymbolCountOption = Shumway.playerOptions.register(new Shumway.Options.Option("", "Play Symbol Count", "number", -1, "Select symbol count.", { range: { min: 0, max: 20000, step: 1 } }));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var FrameScheduler = (function () {
        function FrameScheduler() {
            this._expectedNextFrameAt = performance.now();
            this._drawStats = [];
            this._drawStatsSum = 0;
            this._drawStarted = 0;
            this._drawsSkipped = 0;
            this._expectedNextFrameAt = performance.now();
            this._onTime = true;
            this._trackDelta = false;
            this._delta = 0;
            this._onTimeDelta = 0;
        }
        Object.defineProperty(FrameScheduler.prototype, "shallSkipDraw", {
            get: function () {
                if (this._drawsSkipped >= FrameScheduler.MAX_DRAWS_TO_SKIP) {
                    return false;
                }
                var averageDraw = this._drawStats.length < FrameScheduler.STATS_TO_REMEMBER ? 0 : this._drawStatsSum / this._drawStats.length;
                var estimatedDrawEnd = performance.now() + averageDraw;
                return estimatedDrawEnd + FrameScheduler.INTERVAL_PADDING_MS > this._expectedNextFrameAt;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FrameScheduler.prototype, "nextFrameIn", {
            get: function () {
                return Math.max(0, this._expectedNextFrameAt - performance.now());
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FrameScheduler.prototype, "isOnTime", {
            get: function () {
                return this._onTime;
            },
            enumerable: true,
            configurable: true
        });
        FrameScheduler.prototype.startFrame = function (frameRate) {
            var interval = 1000 / frameRate;
            var adjustedInterval = interval;
            var delta = this._onTimeDelta + this._delta;
            if (delta !== 0) {
                if (delta < 0) {
                    adjustedInterval *= FrameScheduler.SPEED_ADJUST_RATE;
                }
                else if (delta > 0) {
                    adjustedInterval /= FrameScheduler.SPEED_ADJUST_RATE;
                }
                this._onTimeDelta += (interval - adjustedInterval);
            }
            this._expectedNextFrameAt += adjustedInterval;
            this._onTime = true;
        };
        FrameScheduler.prototype.endFrame = function () {
            var estimatedNextFrameStart = performance.now() + FrameScheduler.INTERVAL_PADDING_MS;
            if (estimatedNextFrameStart > this._expectedNextFrameAt) {
                if (this._trackDelta) {
                    this._onTimeDelta += (this._expectedNextFrameAt - estimatedNextFrameStart);
                    console.log(this._onTimeDelta);
                }
                this._expectedNextFrameAt = estimatedNextFrameStart;
                this._onTime = false;
            }
        };
        FrameScheduler.prototype.startDraw = function () {
            this._drawsSkipped = 0;
            this._drawStarted = performance.now();
        };
        FrameScheduler.prototype.endDraw = function () {
            var drawTime = performance.now() - this._drawStarted;
            this._drawStats.push(drawTime);
            this._drawStatsSum += drawTime;
            while (this._drawStats.length > FrameScheduler.STATS_TO_REMEMBER) {
                this._drawStatsSum -= this._drawStats.shift();
            }
        };
        FrameScheduler.prototype.skipDraw = function () {
            this._drawsSkipped++;
        };
        FrameScheduler.prototype.setDelta = function (value) {
            if (!this._trackDelta) {
                return;
            }
            this._delta = value;
        };
        FrameScheduler.prototype.startTrackDelta = function () {
            this._trackDelta = true;
        };
        FrameScheduler.prototype.endTrackDelta = function () {
            if (!this._trackDelta) {
                return;
            }
            this._trackDelta = false;
            this._delta = 0;
            this._onTimeDelta = 0;
        };
        FrameScheduler.STATS_TO_REMEMBER = 50;
        FrameScheduler.MAX_DRAWS_TO_SKIP = 2;
        FrameScheduler.INTERVAL_PADDING_MS = 4;
        FrameScheduler.SPEED_ADJUST_RATE = 0.9;
        return FrameScheduler;
    })();
    Shumway.FrameScheduler = FrameScheduler;
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var Remoting;
    (function (Remoting) {
        var Player;
        (function (Player) {
            var MessageTag = Shumway.Remoting.MessageTag;
            var MessageBits = Shumway.Remoting.MessageBits;
            var flash = Shumway.AVM2.AS.flash;
            var display = flash.display;
            var BitmapData = flash.display.BitmapData;
            var DisplayObjectFlags = flash.display.DisplayObjectFlags;
            var BlendMode = flash.display.BlendMode;
            var PixelSnapping = flash.display.PixelSnapping;
            var VisitorFlags = flash.display.VisitorFlags;
            var Point = flash.geom.Point;
            var Bounds = Shumway.Bounds;
            var MouseCursor = flash.ui.MouseCursor;
            var assert = Shumway.Debug.assert;
            var writer = Shumway.Player.writer;
            var PlayerChannelSerializer = (function () {
                function PlayerChannelSerializer() {
                    this.phase = 0 /* Objects */;
                    this.roots = null;
                }
                PlayerChannelSerializer.prototype.begin = function (displayObject) {
                    this.roots = [displayObject];
                };
                PlayerChannelSerializer.prototype.remoteObjects = function () {
                    this.phase = 0 /* Objects */;
                    var roots = this.roots;
                    for (var i = 0; i < roots.length; i++) {
                        Shumway.Player.enterTimeline("remoting objects");
                        this.writeDirtyDisplayObjects(roots[i]);
                        Shumway.Player.leaveTimeline("remoting objects");
                    }
                };
                PlayerChannelSerializer.prototype.remoteReferences = function () {
                    this.phase = 1 /* References */;
                    var roots = this.roots;
                    for (var i = 0; i < roots.length; i++) {
                        Shumway.Player.enterTimeline("remoting references");
                        this.writeDirtyDisplayObjects(roots[i], true);
                        Shumway.Player.leaveTimeline("remoting references");
                    }
                };
                PlayerChannelSerializer.prototype.writeDirtyDisplayObjects = function (displayObject, clearDirtyDescendentsFlag) {
                    if (clearDirtyDescendentsFlag === void 0) { clearDirtyDescendentsFlag = false; }
                    var self = this;
                    var roots = this.roots;
                    displayObject.visit(function (displayObject) {
                        if (displayObject._hasAnyFlags(DisplayObjectFlags.Dirty)) {
                            self.writeUpdateFrame(displayObject);
                            if (roots && displayObject.mask) {
                                var root = displayObject.mask._findFurthestAncestorOrSelf();
                                Shumway.ArrayUtilities.pushUnique(roots, root);
                            }
                        }
                        self.writeDirtyAssets(displayObject);
                        if (displayObject._hasFlags(536870912 /* DirtyDescendents */)) {
                            return 0 /* Continue */;
                        }
                        if (clearDirtyDescendentsFlag) {
                            displayObject._removeFlags(536870912 /* DirtyDescendents */);
                        }
                        return 2 /* Skip */;
                    }, 0 /* None */);
                };
                PlayerChannelSerializer.prototype.writeStage = function (stage, currentMouseTarget) {
                    writer && writer.writeLn("Sending Stage");
                    var serializer = this;
                    this.output.writeInt(104 /* UpdateStage */);
                    this.output.writeInt(stage._id);
                    this.output.writeInt(stage.color);
                    this._writeRectangle(new Bounds(0, 0, stage.stageWidth * 20, stage.stageHeight * 20));
                    this.output.writeInt(flash.display.StageAlign.toNumber(stage.align));
                    this.output.writeInt(flash.display.StageScaleMode.toNumber(stage.scaleMode));
                    this.output.writeInt(flash.display.StageDisplayState.toNumber(stage.displayState));
                    var cursor = flash.ui.Mouse.cursor;
                    if (currentMouseTarget) {
                        this.output.writeInt(currentMouseTarget._id);
                        if (cursor === MouseCursor.AUTO) {
                            var node = currentMouseTarget;
                            do {
                                if (flash.display.SimpleButton.isType(node) || (flash.display.Sprite.isType(node) && node.buttonMode) && currentMouseTarget.useHandCursor) {
                                    cursor = MouseCursor.BUTTON;
                                    break;
                                }
                                node = node._parent;
                            } while (node && node !== stage);
                        }
                    }
                    else {
                        this.output.writeInt(-1);
                    }
                    this.output.writeInt(MouseCursor.toNumber(cursor));
                };
                PlayerChannelSerializer.prototype.writeGraphics = function (graphics) {
                    if (graphics._isDirty) {
                        writer && writer.writeLn("Sending Graphics: " + graphics._id);
                        var textures = graphics.getUsedTextures();
                        var numTextures = textures.length;
                        for (var i = 0; i < numTextures; i++) {
                            textures[i] && this.writeBitmapData(textures[i]);
                        }
                        this.output.writeInt(101 /* UpdateGraphics */);
                        this.output.writeInt(graphics._id);
                        this.output.writeInt(-1);
                        this._writeRectangle(graphics._getContentBounds());
                        this._writeAsset(graphics.getGraphicsData().toPlainObject());
                        this.output.writeInt(numTextures);
                        for (var i = 0; i < numTextures; i++) {
                            this.output.writeInt(textures[i] ? textures[i]._id : -1);
                        }
                        graphics._isDirty = false;
                    }
                };
                PlayerChannelSerializer.prototype.writeNetStream = function (netStream, bounds) {
                    if (netStream._isDirty) {
                        writer && writer.writeLn("Sending NetStream: " + netStream._id);
                        this.output.writeInt(105 /* UpdateNetStream */);
                        this.output.writeInt(netStream._id);
                        this._writeRectangle(bounds);
                        netStream._isDirty = false;
                    }
                };
                PlayerChannelSerializer.prototype.writeBitmapData = function (bitmapData) {
                    if (bitmapData._isDirty) {
                        writer && writer.writeLn("Sending BitmapData: " + bitmapData._id);
                        this.output.writeInt(102 /* UpdateBitmapData */);
                        this.output.writeInt(bitmapData._id);
                        this.output.writeInt(bitmapData._symbol ? bitmapData._symbol.id : -1);
                        this._writeRectangle(bitmapData._getContentBounds());
                        this.output.writeInt(bitmapData._type);
                        this._writeAsset(bitmapData.getDataBuffer().toPlainObject());
                        bitmapData._isDirty = false;
                    }
                };
                PlayerChannelSerializer.prototype.writeTextContent = function (textContent) {
                    if (textContent.flags & Shumway.TextContentFlags.Dirty) {
                        writer && writer.writeLn("Sending TextContent: " + textContent._id);
                        this.output.writeInt(103 /* UpdateTextContent */);
                        this.output.writeInt(textContent._id);
                        this.output.writeInt(-1);
                        this._writeRectangle(textContent.bounds);
                        this._writeMatrix(textContent.matrix || flash.geom.Matrix.FROZEN_IDENTITY_MATRIX);
                        this.output.writeInt(textContent.backgroundColor);
                        this.output.writeInt(textContent.borderColor);
                        this.output.writeInt(textContent.autoSize);
                        this.output.writeBoolean(textContent.wordWrap);
                        this.output.writeInt(textContent.scrollV);
                        this.output.writeInt(textContent.scrollH);
                        this._writeAsset(textContent.plainText);
                        this._writeAsset(textContent.textRunData.toPlainObject());
                        var coords = textContent.coords;
                        if (coords) {
                            var numCoords = coords.length;
                            this.output.writeInt(numCoords);
                            for (var i = 0; i < numCoords; i++) {
                                this.output.writeInt(coords[i]);
                            }
                        }
                        else {
                            this.output.writeInt(0);
                        }
                        textContent.flags &= ~Shumway.TextContentFlags.Dirty;
                    }
                };
                PlayerChannelSerializer.prototype.writeClippedObjectsCount = function (displayObject) {
                    if (displayObject._clipDepth >= 0 && displayObject._parent) {
                        var i = displayObject._parent.getChildIndex(displayObject);
                        var j = displayObject._parent.getClipDepthIndex(displayObject._clipDepth);
                        if (j - i < 0) {
                            this.output.writeInt(-1);
                            return;
                        }
                        for (var k = i + 1; k <= i; k++) {
                        }
                        this.output.writeInt(j - i);
                    }
                    else {
                        this.output.writeInt(-1);
                    }
                };
                PlayerChannelSerializer.prototype.writeUpdateFrame = function (displayObject) {
                    this.output.writeInt(100 /* UpdateFrame */);
                    this.output.writeInt(displayObject._id);
                    writer && writer.writeLn("Sending UpdateFrame: " + displayObject.debugName(true));
                    var hasMask = false;
                    var hasMatrix = displayObject._hasFlags(1048576 /* DirtyMatrix */);
                    var hasColorTransform = displayObject._hasFlags(67108864 /* DirtyColorTransform */);
                    var hasMiscellaneousProperties = displayObject._hasFlags(1073741824 /* DirtyMiscellaneousProperties */);
                    var video = null;
                    if (flash.media.Video.isType(displayObject)) {
                        video = displayObject;
                    }
                    var hasRemotableChildren = false;
                    if (this.phase === 1 /* References */) {
                        hasRemotableChildren = displayObject._hasAnyFlags(2097152 /* DirtyChildren */ | 4194304 /* DirtyGraphics */ | 16777216 /* DirtyBitmapData */ | 33554432 /* DirtyNetStream */ | 8388608 /* DirtyTextContent */);
                        hasMask = displayObject._hasFlags(134217728 /* DirtyMask */);
                    }
                    var bitmap = null;
                    if (display.Bitmap.isType(displayObject)) {
                        bitmap = displayObject;
                    }
                    var hasClip = displayObject._hasFlags(268435456 /* DirtyClipDepth */);
                    var hasBits = 0;
                    hasBits |= hasMatrix ? 1 /* HasMatrix */ : 0;
                    hasBits |= hasColorTransform ? 8 /* HasColorTransform */ : 0;
                    hasBits |= hasMask ? 64 /* HasMask */ : 0;
                    hasBits |= hasClip ? 128 /* HasClip */ : 0;
                    hasBits |= hasMiscellaneousProperties ? 32 /* HasMiscellaneousProperties */ : 0;
                    hasBits |= hasRemotableChildren ? 4 /* HasChildren */ : 0;
                    this.output.writeInt(hasBits);
                    if (hasMatrix) {
                        this._writeMatrix(displayObject._getMatrix());
                    }
                    if (hasColorTransform) {
                        this._writeColorTransform(displayObject._colorTransform);
                    }
                    if (hasMask) {
                        this.output.writeInt(displayObject.mask ? displayObject.mask._id : -1);
                    }
                    if (hasClip) {
                        this.writeClippedObjectsCount(displayObject);
                    }
                    if (hasMiscellaneousProperties) {
                        this.output.writeInt(displayObject._ratio);
                        this.output.writeInt(BlendMode.toNumber(displayObject._blendMode));
                        this._writeFilters(displayObject.filters);
                        this.output.writeBoolean(displayObject._hasFlags(1 /* Visible */));
                        this.output.writeBoolean(displayObject.cacheAsBitmap);
                        if (bitmap) {
                            this.output.writeInt(PixelSnapping.toNumber(bitmap.pixelSnapping));
                            this.output.writeInt(bitmap.smoothing ? 1 : 0);
                        }
                        else {
                            this.output.writeInt(PixelSnapping.toNumber(PixelSnapping.AUTO));
                            this.output.writeInt(1);
                        }
                    }
                    var graphics = displayObject._getGraphics();
                    var textContent = displayObject._getTextContent();
                    if (hasRemotableChildren) {
                        writer && writer.enter("Children: {");
                        if (bitmap) {
                            if (bitmap.bitmapData) {
                                this.output.writeInt(1);
                                this.output.writeInt(134217728 /* Asset */ | bitmap.bitmapData._id);
                            }
                            else {
                                this.output.writeInt(0);
                            }
                        }
                        else if (video) {
                            if (video._netStream) {
                                this.output.writeInt(1);
                                this.output.writeInt(134217728 /* Asset */ | video._netStream._id);
                            }
                            else {
                                this.output.writeInt(0);
                            }
                        }
                        else {
                            var count = (graphics || textContent) ? 1 : 0;
                            var children = displayObject._children;
                            if (children) {
                                count += children.length;
                            }
                            this.output.writeInt(count);
                            if (graphics) {
                                writer && writer.writeLn("Reference Graphics: " + graphics._id);
                                this.output.writeInt(134217728 /* Asset */ | graphics._id);
                            }
                            else if (textContent) {
                                writer && writer.writeLn("Reference TextContent: " + textContent._id);
                                this.output.writeInt(134217728 /* Asset */ | textContent._id);
                            }
                            if (children) {
                                for (var i = 0; i < children.length; i++) {
                                    writer && writer.writeLn("Reference DisplayObject: " + children[i].debugName());
                                    this.output.writeInt(children[i]._id);
                                    if (children[i]._clipDepth >= 0) {
                                        children[i]._setFlags(268435456 /* DirtyClipDepth */);
                                    }
                                }
                            }
                        }
                        writer && writer.leave("}");
                    }
                    if (this.phase === 1 /* References */) {
                        displayObject._removeFlags(DisplayObjectFlags.Dirty);
                    }
                };
                PlayerChannelSerializer.prototype.writeDirtyAssets = function (displayObject) {
                    var graphics = displayObject._getGraphics();
                    if (graphics) {
                        this.writeGraphics(graphics);
                        return;
                    }
                    var textContent = displayObject._getTextContent();
                    if (textContent) {
                        this.writeTextContent(textContent);
                        return;
                    }
                    var bitmap = null;
                    if (display.Bitmap.isType(displayObject)) {
                        bitmap = displayObject;
                        if (bitmap.bitmapData) {
                            this.writeBitmapData(bitmap.bitmapData);
                        }
                        return;
                    }
                    var video = null;
                    if (flash.media.Video.isType(displayObject)) {
                        video = displayObject;
                        if (video._netStream) {
                            this.writeNetStream(video._netStream, video._getContentBounds());
                        }
                        return;
                    }
                };
                PlayerChannelSerializer.prototype.writeDrawToBitmap = function (bitmapData, source, matrix, colorTransform, blendMode, clipRect, smoothing) {
                    if (matrix === void 0) { matrix = null; }
                    if (colorTransform === void 0) { colorTransform = null; }
                    if (blendMode === void 0) { blendMode = null; }
                    if (clipRect === void 0) { clipRect = null; }
                    if (smoothing === void 0) { smoothing = false; }
                    this.output.writeInt(200 /* DrawToBitmap */);
                    this.output.writeInt(bitmapData._id);
                    if (BitmapData.isType(source)) {
                        this.output.writeInt(134217728 /* Asset */ | source._id);
                    }
                    else {
                        this.output.writeInt(source._id);
                    }
                    var hasBits = 0;
                    hasBits |= matrix ? 1 /* HasMatrix */ : 0;
                    hasBits |= colorTransform ? 8 /* HasColorTransform */ : 0;
                    hasBits |= clipRect ? 16 /* HasClipRect */ : 0;
                    this.output.writeInt(hasBits);
                    if (matrix) {
                        this._writeMatrix(matrix);
                    }
                    if (colorTransform) {
                        this._writeColorTransform(colorTransform);
                    }
                    if (clipRect) {
                        this._writeRectangle(Bounds.FromRectangle(clipRect));
                    }
                    this.output.writeInt(BlendMode.toNumber(blendMode));
                    this.output.writeBoolean(smoothing);
                };
                PlayerChannelSerializer.prototype._writeMatrix = function (matrix) {
                    var output = this.output;
                    output.write6Floats(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);
                };
                PlayerChannelSerializer.prototype._writeRectangle = function (bounds) {
                    var output = this.output;
                    output.write4Ints(bounds.xMin, bounds.yMin, bounds.width, bounds.height);
                };
                PlayerChannelSerializer.prototype._writeAsset = function (asset) {
                    this.output.writeInt(this.outputAssets.length);
                    this.outputAssets.push(asset);
                };
                PlayerChannelSerializer.prototype._writeFilters = function (filters) {
                    var count = 0;
                    for (var i = 0; i < filters.length; i++) {
                        if (flash.filters.BlurFilter.isType(filters[i]) || flash.filters.DropShadowFilter.isType(filters[i]) || flash.filters.GlowFilter.isType(filters[i])) {
                            count++;
                        }
                        else {
                            Shumway.Debug.somewhatImplemented(filters[i].toString());
                        }
                    }
                    this.output.writeInt(count);
                    for (var i = 0; i < filters.length; i++) {
                        var filter = filters[i];
                        if (flash.filters.BlurFilter.isType(filter)) {
                            var blurFilter = filter;
                            this.output.writeInt(0 /* Blur */);
                            this.output.writeFloat(blurFilter.blurX);
                            this.output.writeFloat(blurFilter.blurY);
                            this.output.writeInt(blurFilter.quality);
                        }
                        else if (flash.filters.DropShadowFilter.isType(filter)) {
                            var dropShadowFilter = filter;
                            this.output.writeInt(1 /* DropShadow */);
                            this.output.writeFloat(dropShadowFilter.alpha);
                            this.output.writeFloat(dropShadowFilter.angle);
                            this.output.writeFloat(dropShadowFilter.blurX);
                            this.output.writeFloat(dropShadowFilter.blurY);
                            this.output.writeInt(dropShadowFilter.color);
                            this.output.writeFloat(dropShadowFilter.distance);
                            this.output.writeBoolean(dropShadowFilter.hideObject);
                            this.output.writeBoolean(dropShadowFilter.inner);
                            this.output.writeBoolean(dropShadowFilter.knockout);
                            this.output.writeInt(dropShadowFilter.quality);
                            this.output.writeFloat(dropShadowFilter.strength);
                        }
                        else if (flash.filters.GlowFilter.isType(filter)) {
                            var glowFilter = filter;
                            this.output.writeInt(1 /* DropShadow */);
                            this.output.writeFloat(glowFilter.alpha);
                            this.output.writeFloat(0);
                            this.output.writeFloat(glowFilter.blurX);
                            this.output.writeFloat(glowFilter.blurY);
                            this.output.writeInt(glowFilter.color);
                            this.output.writeFloat(0);
                            this.output.writeBoolean(false);
                            this.output.writeBoolean(glowFilter.inner);
                            this.output.writeBoolean(glowFilter.knockout);
                            this.output.writeInt(glowFilter.quality);
                            this.output.writeFloat(glowFilter.strength);
                        }
                    }
                };
                PlayerChannelSerializer.prototype._writeColorTransform = function (colorTransform) {
                    var output = this.output;
                    var rM = colorTransform.redMultiplier;
                    var gM = colorTransform.greenMultiplier;
                    var bM = colorTransform.blueMultiplier;
                    var aM = colorTransform.alphaMultiplier;
                    var rO = colorTransform.redOffset;
                    var gO = colorTransform.greenOffset;
                    var bO = colorTransform.blueOffset;
                    var aO = colorTransform.alphaOffset;
                    var identityOffset = rO === gO && gO === bO && bO === aO && aO === 0;
                    var identityColorMultiplier = rM === gM && gM === bM && bM === 1;
                    if (identityOffset && identityColorMultiplier) {
                        if (aM === 1) {
                            output.writeInt(0 /* Identity */);
                        }
                        else {
                            output.writeInt(1 /* AlphaMultiplierOnly */);
                            output.writeFloat(aM);
                        }
                    }
                    else {
                        output.writeInt(2 /* All */);
                        output.writeFloat(rM);
                        output.writeFloat(gM);
                        output.writeFloat(bM);
                        output.writeFloat(aM);
                        output.writeInt(rO);
                        output.writeInt(gO);
                        output.writeInt(bO);
                        output.writeInt(aO);
                    }
                };
                PlayerChannelSerializer.prototype.writeRequestBitmapData = function (bitmapData) {
                    writer && writer.writeLn("Sending BitmapData Request");
                    this.output.writeInt(106 /* RequestBitmapData */);
                    this.output.writeInt(bitmapData._id);
                };
                return PlayerChannelSerializer;
            })();
            Player.PlayerChannelSerializer = PlayerChannelSerializer;
            var PlayerChannelDeserializer = (function () {
                function PlayerChannelDeserializer() {
                }
                PlayerChannelDeserializer.prototype.read = function () {
                    var input = this.input;
                    var tag = input.readInt();
                    switch (tag) {
                        case 300 /* MouseEvent */:
                            return this._readMouseEvent();
                        case 301 /* KeyboardEvent */:
                            return this._readKeyboardEvent();
                        case 302 /* FocusEvent */:
                            return this._readFocusEvent();
                    }
                    release || assert(false, 'Unknown MessageReader tag: ' + tag);
                };
                PlayerChannelDeserializer.prototype._readFocusEvent = function () {
                    var input = this.input;
                    var typeId = input.readInt();
                    return {
                        tag: 302 /* FocusEvent */,
                        type: typeId
                    };
                };
                PlayerChannelDeserializer.prototype._readMouseEvent = function () {
                    var input = this.input;
                    var typeId = input.readInt();
                    var type = Shumway.Remoting.MouseEventNames[typeId];
                    var pX = input.readFloat();
                    var pY = input.readFloat();
                    var buttons = input.readInt();
                    var flags = input.readInt();
                    return {
                        tag: 300 /* MouseEvent */,
                        type: type,
                        point: new Point(pX, pY),
                        ctrlKey: !!(flags & 1 /* CtrlKey */),
                        altKey: !!(flags & 2 /* AltKey */),
                        shiftKey: !!(flags & 4 /* ShiftKey */),
                        buttons: buttons
                    };
                };
                PlayerChannelDeserializer.prototype._readKeyboardEvent = function () {
                    var input = this.input;
                    var typeId = input.readInt();
                    var type = Shumway.Remoting.KeyboardEventNames[typeId];
                    var keyCode = input.readInt();
                    var charCode = input.readInt();
                    var location = input.readInt();
                    var flags = input.readInt();
                    return {
                        tag: 301 /* KeyboardEvent */,
                        type: type,
                        keyCode: keyCode,
                        charCode: charCode,
                        location: location,
                        ctrlKey: !!(flags & 1 /* CtrlKey */),
                        altKey: !!(flags & 2 /* AltKey */),
                        shiftKey: !!(flags & 4 /* ShiftKey */)
                    };
                };
                return PlayerChannelDeserializer;
            })();
            Player.PlayerChannelDeserializer = PlayerChannelDeserializer;
        })(Player = Remoting.Player || (Remoting.Player = {}));
    })(Remoting = Shumway.Remoting || (Shumway.Remoting = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var Player;
    (function (_Player) {
        var assert = Shumway.Debug.assert;
        var somewhatImplemented = Shumway.Debug.somewhatImplemented;
        var flash = Shumway.AVM2.AS.flash;
        var DataBuffer = Shumway.ArrayUtilities.DataBuffer;
        var AVM2 = Shumway.AVM2.Runtime.AVM2;
        var Event = flash.events.Event;
        var DisplayObject = flash.display.DisplayObject;
        var EventDispatcher = flash.events.EventDispatcher;
        var Loader = flash.display.Loader;
        var MouseEventDispatcher = flash.ui.MouseEventDispatcher;
        var KeyboardEventDispatcher = flash.ui.KeyboardEventDispatcher;
        var MessageTag = Shumway.Remoting.MessageTag;
        var Player = (function () {
            function Player() {
                this._framesPlayed = 0;
                this._videoEventListeners = [];
                this._pendingPromises = [];
                this.externalCallback = null;
                this._lastPumpTime = 0;
                this._isPageVisible = true;
                this._hasFocus = true;
                this._keyboardEventDispatcher = new KeyboardEventDispatcher();
                this._mouseEventDispatcher = new MouseEventDispatcher();
                this._writer = new Shumway.IndentingWriter();
                AVM2.instance.globals['Shumway.Player.Utils'] = this;
            }
            Player.prototype._getNextAvailablePromiseId = function () {
                var length = this._pendingPromises.length;
                for (var i = 0; i < length; i++) {
                    if (!this._pendingPromises[i]) {
                        return i;
                    }
                }
                return length;
            };
            Object.defineProperty(Player.prototype, "stage", {
                get: function () {
                    return this._stage;
                },
                enumerable: true,
                configurable: true
            });
            Player.prototype.onSendUpdates = function (updates, assets, async) {
                if (async === void 0) { async = true; }
                throw new Error('This method is abstract');
                return null;
            };
            Player.prototype._shouldThrottleDownRendering = function () {
                return !this._isPageVisible;
            };
            Player.prototype._shouldThrottleDownFrameExecution = function () {
                return !this._isPageVisible;
            };
            Player.prototype.load = function (url, buffer) {
                release || assert(!this._loader, "Can't load twice.");
                this._stage = new flash.display.Stage();
                var loader = this._loader = flash.display.Loader.getRootLoader();
                var loaderInfo = this._loaderInfo = loader.contentLoaderInfo;
                if (Shumway.playAllSymbolsOption.value) {
                    this._playAllSymbols();
                    loaderInfo._allowCodeExecution = false;
                }
                else {
                    this._enterRootLoadingLoop();
                }
                var context = this.createLoaderContext();
                if (buffer) {
                    var symbol = Shumway.Timeline.BinarySymbol.FromData({ id: -1, data: buffer });
                    var byteArray = symbol.symbolClass.initializeFrom(symbol);
                    symbol.symbolClass.instanceConstructorNoInitialize.call(byteArray);
                    this._loader.loadBytes(byteArray, context);
                }
                else {
                    this._loader.load(new flash.net.URLRequest(url), context);
                }
            };
            Player.prototype.createLoaderContext = function () {
                var loaderContext = new flash.system.LoaderContext();
                if (this.movieParams) {
                    var parameters = {};
                    for (var i in this.movieParams) {
                        parameters.asSetPublicProperty(i, this.movieParams[i]);
                    }
                    loaderContext.parameters = parameters;
                }
                return loaderContext;
            };
            Player.prototype.processUpdates = function (updates, assets) {
                var deserializer = new Shumway.Remoting.Player.PlayerChannelDeserializer();
                var FocusEventType = Shumway.Remoting.FocusEventType;
                deserializer.input = updates;
                deserializer.inputAssets = assets;
                var message = deserializer.read();
                switch (message.tag) {
                    case 301 /* KeyboardEvent */:
                        var target = this._stage.focus ? this._stage.focus : this._stage;
                        this._keyboardEventDispatcher.target = target;
                        this._keyboardEventDispatcher.dispatchKeyboardEvent(message);
                        break;
                    case 300 /* MouseEvent */:
                        this._mouseEventDispatcher.stage = this._stage;
                        var target = this._mouseEventDispatcher.handleMouseEvent(message);
                        if (Shumway.traceMouseEventOption.value) {
                            this._writer.writeLn("Mouse Event: type: " + message.type + ", point: " + message.point + ", target: " + target + (target ? ", name: " + target._name : ""));
                            if (message.type === "click" && target) {
                                target.debugTrace();
                            }
                        }
                        break;
                    case 302 /* FocusEvent */:
                        var focusType = message.type;
                        switch (focusType) {
                            case 0 /* DocumentHidden */:
                                this._isPageVisible = false;
                                break;
                            case 1 /* DocumentVisible */:
                                this._isPageVisible = true;
                                break;
                            case 2 /* WindowBlur */:
                                this._hasFocus = false;
                                break;
                            case 3 /* WindowFocus */:
                                EventDispatcher.broadcastEventDispatchQueue.dispatchEvent(Event.getBroadcastInstance(Event.ACTIVATE));
                                this._hasFocus = true;
                                break;
                        }
                        break;
                }
            };
            Player.prototype._pumpDisplayListUpdates = function () {
                this.syncDisplayObject(this._stage);
            };
            Player.prototype.syncDisplayObject = function (displayObject, async) {
                if (async === void 0) { async = true; }
                var updates = new DataBuffer();
                var assets = [];
                var serializer = new Shumway.Remoting.Player.PlayerChannelSerializer();
                serializer.output = updates;
                serializer.outputAssets = assets;
                if (flash.display.Stage.isType(displayObject)) {
                    serializer.writeStage(displayObject, this._mouseEventDispatcher.currentTarget);
                }
                serializer.begin(displayObject);
                serializer.remoteObjects();
                serializer.remoteReferences();
                updates.writeInt(0 /* EOF */);
                _Player.enterTimeline("remoting assets");
                var output = this.onSendUpdates(updates, assets, async);
                _Player.leaveTimeline("remoting assets");
                return output;
            };
            Player.prototype.requestBitmapData = function (bitmapData) {
                var output = new DataBuffer();
                var assets = [];
                var serializer = new Shumway.Remoting.Player.PlayerChannelSerializer();
                serializer.output = output;
                serializer.outputAssets = assets;
                serializer.writeRequestBitmapData(bitmapData);
                output.writeInt(0 /* EOF */);
                return this.onSendUpdates(output, assets, false);
            };
            Player.prototype.drawToBitmap = function (bitmapData, source, matrix, colorTransform, blendMode, clipRect, smoothing) {
                if (matrix === void 0) { matrix = null; }
                if (colorTransform === void 0) { colorTransform = null; }
                if (blendMode === void 0) { blendMode = null; }
                if (clipRect === void 0) { clipRect = null; }
                if (smoothing === void 0) { smoothing = false; }
                var updates = new DataBuffer();
                var assets = [];
                var serializer = new Shumway.Remoting.Player.PlayerChannelSerializer();
                serializer.output = updates;
                serializer.outputAssets = assets;
                serializer.writeBitmapData(bitmapData);
                if (flash.display.BitmapData.isType(source)) {
                    serializer.writeBitmapData(source);
                }
                else {
                    var displayObject = source;
                    serializer.begin(displayObject);
                    serializer.remoteObjects();
                    serializer.remoteReferences();
                }
                serializer.writeDrawToBitmap(bitmapData, source, matrix, colorTransform, blendMode, clipRect, smoothing);
                updates.writeInt(0 /* EOF */);
                _Player.enterTimeline("sendUpdates");
                this.onSendUpdates(updates, assets, false);
                _Player.leaveTimeline("sendUpdates");
            };
            Player.prototype.registerEventListener = function (id, listener) {
                this._videoEventListeners[id] = listener;
            };
            Player.prototype.notifyVideoControl = function (id, eventType, data) {
                return this.onVideoControl(id, eventType, data);
            };
            Player.prototype.executeFSCommand = function (command, args) {
                switch (command) {
                    case 'quit':
                        this._leaveEventLoop();
                        break;
                    default:
                        somewhatImplemented('FSCommand ' + command);
                }
                this.onFSCommand(command, args);
            };
            Player.prototype.requestRendering = function () {
                this._pumpDisplayListUpdates();
            };
            Player.prototype._pumpUpdates = function () {
                if (!Shumway.dontSkipFramesOption.value) {
                    if (this._shouldThrottleDownRendering()) {
                        return;
                    }
                    var timeSinceLastPump = performance.now() - this._lastPumpTime;
                    if (timeSinceLastPump < (1000 / Shumway.pumpRateOption.value)) {
                        return;
                    }
                }
                _Player.enterTimeline("pump");
                if (Shumway.pumpEnabledOption.value) {
                    this._pumpDisplayListUpdates();
                    this._lastPumpTime = performance.now();
                }
                _Player.leaveTimeline("pump");
            };
            Player.prototype._leaveSyncLoop = function () {
                release || assert(this._frameTimeout > -1);
                clearInterval(this._frameTimeout);
            };
            Player.prototype._getFrameInterval = function () {
                var frameRate = Shumway.frameRateOption.value;
                if (frameRate < 0) {
                    frameRate = this._stage.frameRate;
                }
                return Math.floor(1000 / frameRate);
            };
            Player.prototype._enterEventLoop = function () {
                this._eventLoopIsRunning = true;
                this._eventLoopTick = this._eventLoopTick.bind(this);
                this._eventLoopTick();
            };
            Player.prototype._enterRootLoadingLoop = function () {
                var self = this;
                var rootLoader = Loader.getRootLoader();
                rootLoader._setStage(this._stage);
                function rootLoadingLoop() {
                    var loaderInfo = rootLoader.contentLoaderInfo;
                    if (!loaderInfo._file) {
                        setTimeout(rootLoadingLoop, self._getFrameInterval());
                        return;
                    }
                    var stage = self._stage;
                    var bgcolor = self.defaultStageColor !== undefined ? self.defaultStageColor : loaderInfo._file.backgroundColor;
                    stage._loaderInfo = loaderInfo;
                    stage.align = self.stageAlign || '';
                    stage.scaleMode = self.stageScale || 'showall';
                    stage.frameRate = loaderInfo.frameRate;
                    stage.setStageWidth(loaderInfo.width);
                    stage.setStageHeight(loaderInfo.height);
                    stage.setStageColor(Shumway.ColorUtilities.RGBAToARGB(bgcolor));
                    if (self.displayParameters) {
                        self.processDisplayParameters(self.displayParameters);
                    }
                    self._enterEventLoop();
                }
                rootLoadingLoop();
            };
            Player.prototype._eventLoopTick = function () {
                var runFrameScripts = !Shumway.playAllSymbolsOption.value;
                var dontSkipFrames = Shumway.dontSkipFramesOption.value;
                this._frameTimeout = setTimeout(this._eventLoopTick, this._getFrameInterval());
                if (!dontSkipFrames && (!Shumway.frameEnabledOption.value && runFrameScripts || this._shouldThrottleDownFrameExecution())) {
                    return;
                }
                DisplayObject._stage = this._stage;
                if (!Loader.getRootLoader().content) {
                    Loader.processEvents();
                    if (!Loader.getRootLoader().content) {
                        return;
                    }
                }
                for (var i = 0; i < Shumway.frameRateMultiplierOption.value; i++) {
                    _Player.enterTimeline("eventLoop");
                    var start = performance.now();
                    DisplayObject.performFrameNavigation(true, runFrameScripts);
                    _Player.counter.count("performFrameNavigation", 1, performance.now() - start);
                    Loader.processEvents();
                    _Player.leaveTimeline("eventLoop");
                }
                this._framesPlayed++;
                if (Shumway.tracePlayerOption.value > 0 && (this._framesPlayed % Shumway.tracePlayerOption.value === 0)) {
                    this._tracePlayer();
                }
                this._stage.render();
                this._pumpUpdates();
                this.onFrameProcessed();
            };
            Player.prototype._tracePlayer = function () {
                var writer = this._writer;
                writer.enter("Frame: " + this._framesPlayed);
                Shumway.AVM2.counter.traceSorted(writer, true);
                Shumway.AVM2.counter.clear();
                Shumway.Player.counter.traceSorted(writer, true);
                Shumway.Player.counter.clear();
                writer.writeLn("advancableInstances: " + flash.display.DisplayObject._advancableInstances.length);
                writer.outdent();
            };
            Player.prototype._leaveEventLoop = function () {
                release || assert(this._eventLoopIsRunning);
                clearTimeout(this._frameTimeout);
                this._eventLoopIsRunning = false;
            };
            Player.prototype._playAllSymbols = function () {
                var stage = this._stage;
                var loader = this._loader;
                var loaderInfo = this._loaderInfo;
                var self = this;
                loaderInfo.addEventListener(flash.events.ProgressEvent.PROGRESS, function onProgress() {
                    var root = loader.content;
                    if (!root) {
                        return;
                    }
                    loaderInfo.removeEventListener(flash.events.ProgressEvent.PROGRESS, onProgress);
                    self._enterEventLoop();
                });
                loaderInfo.addEventListener(flash.events.Event.COMPLETE, function onProgress() {
                    stage.setStageWidth(1024);
                    stage.setStageHeight(1024);
                    var symbols = [];
                    loaderInfo._dictionary.forEach(function (symbol, key) {
                        if (symbol instanceof Shumway.Timeline.DisplaySymbol) {
                            symbols.push(symbol);
                        }
                    });
                    function show(symbol) {
                        flash.display.DisplayObject.reset();
                        flash.display.MovieClip.reset();
                        var symbolInstance = symbol.symbolClass.initializeFrom(symbol);
                        symbol.symbolClass.instanceConstructorNoInitialize.call(symbolInstance);
                        if (symbol instanceof flash.display.BitmapSymbol) {
                            symbolInstance = new flash.display.Bitmap(symbolInstance);
                        }
                        while (stage.numChildren > 0) {
                            stage.removeChildAt(0);
                        }
                        stage.addChild(symbolInstance);
                    }
                    var nextSymbolIndex = 0;
                    function showNextSymbol() {
                        var symbol;
                        if (Shumway.playSymbolOption.value > 0) {
                            symbol = loaderInfo.getSymbolById(Shumway.playSymbolOption.value);
                            if (symbol instanceof Shumway.Timeline.DisplaySymbol) {
                            }
                            else {
                                symbol = null;
                            }
                        }
                        else {
                            symbol = symbols[nextSymbolIndex++];
                            if (nextSymbolIndex === symbols.length) {
                                nextSymbolIndex = 0;
                            }
                            if (Shumway.playSymbolCountOption.value >= 0 && nextSymbolIndex > Shumway.playSymbolCountOption.value) {
                                nextSymbolIndex = 0;
                            }
                        }
                        var frames = 1;
                        if (symbol && symbol.id > 0) {
                            show(symbol);
                            if (symbol instanceof flash.display.SpriteSymbol) {
                                frames = symbol.numFrames;
                            }
                        }
                        if (Shumway.playSymbolFrameDurationOption.value > 0) {
                            frames = Shumway.playSymbolFrameDurationOption.value;
                        }
                        setTimeout(showNextSymbol, self._getFrameInterval() * frames);
                    }
                    setTimeout(showNextSymbol, self._getFrameInterval());
                });
            };
            Player.prototype.processExternalCallback = function (request) {
                if (!this.externalCallback) {
                    return;
                }
                try {
                    request.result = this.externalCallback(request.functionName, request.args);
                }
                catch (e) {
                    request.error = e.message;
                }
            };
            Player.prototype.processVideoEvent = function (id, eventType, data) {
                var listener = this._videoEventListeners[id];
                Shumway.Debug.assert(listener, 'Video event listener is not found');
                listener(eventType, data);
            };
            Player.prototype.processDisplayParameters = function (displayParameters) {
                this._stage.setStageContainerSize(displayParameters.stageWidth, displayParameters.stageHeight, displayParameters.pixelRatio);
            };
            Player.prototype.onExternalCommand = function (command) {
                throw new Error('This method is abstract');
            };
            Player.prototype.onFSCommand = function (command, args) {
                throw new Error('This method is abstract');
            };
            Player.prototype.onVideoControl = function (id, eventType, data) {
                throw new Error('This method is abstract');
            };
            Player.prototype.onFrameProcessed = function () {
                throw new Error('This method is abstract');
            };
            Player.prototype.registerFontOrImage = function (symbol, data) {
                release || assert(symbol.syncId);
                symbol.resolveAssetPromise = new Shumway.PromiseWrapper();
                this.registerFontOrImageImpl(symbol, data);
                if (data.type === 'font' && inFirefox) {
                    symbol.ready = true;
                }
                else {
                    symbol.resolveAssetPromise.then(symbol.resolveAssetCallback, null);
                }
            };
            Player.prototype.registerFontOrImageImpl = function (symbol, data) {
                throw new Error('This method is abstract');
            };
            Player.prototype.createExternalInterfaceService = function () {
                var isEnabled;
                var player = this;
                return {
                    get enabled() {
                        if (isEnabled === undefined) {
                            var cmd = { action: 'isEnabled' };
                            player.onExternalCommand(cmd);
                            isEnabled = cmd.result;
                        }
                        return isEnabled;
                    },
                    initJS: function (callback) {
                        player.externalCallback = callback;
                        var cmd = { action: 'initJS' };
                        player.onExternalCommand(cmd);
                    },
                    registerCallback: function (functionName) {
                        var cmd = { action: 'register', functionName: functionName, remove: false };
                        player.onExternalCommand(cmd);
                    },
                    unregisterCallback: function (functionName) {
                        var cmd = { action: 'register', functionName: functionName, remove: true };
                        player.onExternalCommand(cmd);
                    },
                    eval: function (expression) {
                        var cmd = { action: 'eval', expression: expression };
                        player.onExternalCommand(cmd);
                        return cmd.result;
                    },
                    call: function (request) {
                        var cmd = { action: 'call', request: request };
                        player.onExternalCommand(cmd);
                        return cmd.result;
                    },
                    getId: function () {
                        var cmd = { action: 'getId' };
                        player.onExternalCommand(cmd);
                        return cmd.result;
                    }
                };
            };
            return Player;
        })();
        _Player.Player = Player;
    })(Player = Shumway.Player || (Shumway.Player = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var BinaryFileReader = Shumway.BinaryFileReader;
    var AbcFile = Shumway.AVM2.ABC.AbcFile;
    var AVM2 = Shumway.AVM2.Runtime.AVM2;
    var assert = Shumway.Debug.assert;
    function createAVM2(builtinPath, libraryPath, sysMode, appMode, next) {
        var avm2;
        release || assert(builtinPath);
        new BinaryFileReader(builtinPath).readAll(null, function (buffer) {
            AVM2.initialize(sysMode, appMode);
            avm2 = AVM2.instance;
            Shumway.AVM2.AS.linkNatives(avm2);
            console.time("Execute builtin.abc");
            avm2.builtinsLoaded = false;
            avm2.systemDomain.executeAbc(new AbcFile(new Uint8Array(buffer), "builtin.abc"));
            avm2.builtinsLoaded = true;
            console.timeEnd("Execute builtin.abc");
            if (typeof libraryPath === 'string') {
                new BinaryFileReader(libraryPath).readAll(null, function (buffer) {
                    avm2.systemDomain.executeAbc(new AbcFile(new Uint8Array(buffer), libraryPath));
                    next(avm2);
                });
                return;
            }
            var libraryPathInfo = libraryPath;
            if (!AVM2.isPlayerglobalLoaded()) {
                AVM2.loadPlayerglobal(libraryPathInfo.abcs, libraryPathInfo.catalog).then(function () {
                    next(avm2);
                });
            }
        });
    }
    Shumway.createAVM2 = createAVM2;
})(Shumway || (Shumway = {}));
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Shumway;
(function (Shumway) {
    var Player;
    (function (Player) {
        var Window;
        (function (Window) {
            var Player = Shumway.Player.Player;
            var DataBuffer = Shumway.ArrayUtilities.DataBuffer;
            var WindowPlayer = (function (_super) {
                __extends(WindowPlayer, _super);
                function WindowPlayer(window, parent) {
                    _super.call(this);
                    this._window = window;
                    this._parent = parent || window.parent;
                    this._window.addEventListener('message', function (e) {
                        this.onWindowMessage(e.data, true);
                    }.bind(this));
                    this._window.addEventListener('syncmessage', function (e) {
                        this.onWindowMessage(e.detail, false);
                    }.bind(this));
                }
                WindowPlayer.prototype.onSendUpdates = function (updates, assets, async) {
                    if (async === void 0) { async = true; }
                    var bytes = updates.getBytes();
                    var message = {
                        type: 'player',
                        updates: bytes,
                        assets: assets,
                        result: undefined
                    };
                    var transferList = [bytes.buffer];
                    if (!async) {
                        var event = this._parent.document.createEvent('CustomEvent');
                        event.initCustomEvent('syncmessage', false, false, message);
                        this._parent.dispatchEvent(event);
                        var result = message.result;
                        return DataBuffer.FromPlainObject(result);
                    }
                    this._parent.postMessage(message, '*', transferList);
                    return null;
                };
                WindowPlayer.prototype.onExternalCommand = function (command) {
                    var event = this._parent.document.createEvent('CustomEvent');
                    event.initCustomEvent('syncmessage', false, false, {
                        type: 'external',
                        request: command
                    });
                    this._parent.dispatchEvent(event);
                };
                WindowPlayer.prototype.onFSCommand = function (command, args) {
                    this._parent.postMessage({
                        type: 'fscommand',
                        command: command,
                        args: args
                    }, '*');
                };
                WindowPlayer.prototype.onVideoControl = function (id, eventType, data) {
                    var event = this._parent.document.createEvent('CustomEvent');
                    event.initCustomEvent('syncmessage', false, false, {
                        type: 'videoControl',
                        id: id,
                        eventType: eventType,
                        data: data,
                        result: undefined
                    });
                    this._parent.dispatchEvent(event);
                    return event.detail.result;
                };
                WindowPlayer.prototype.onFrameProcessed = function () {
                    this._parent.postMessage({
                        type: 'frame'
                    }, '*');
                };
                WindowPlayer.prototype.registerFontOrImageImpl = function (symbol, data) {
                    var event = this._parent.document.createEvent('CustomEvent');
                    event.initCustomEvent('syncmessage', false, false, {
                        type: 'registerFontOrImage',
                        syncId: symbol.syncId,
                        symbolId: symbol.id,
                        assetType: data.type,
                        data: data,
                        resolve: symbol.resolveAssetPromise.resolve
                    });
                    this._parent.dispatchEvent(event);
                };
                WindowPlayer.prototype.onWindowMessage = function (data, async) {
                    if (typeof data === 'object' && data !== null) {
                        switch (data.type) {
                            case 'gfx':
                                var DataBuffer = Shumway.ArrayUtilities.DataBuffer;
                                var updates = DataBuffer.FromArrayBuffer(data.updates.buffer);
                                this.processUpdates(updates, data.assets);
                                break;
                            case 'externalCallback':
                                this.processExternalCallback(data.request);
                                break;
                            case 'videoPlayback':
                                this.processVideoEvent(data.id, data.eventType, data.data);
                                break;
                            case 'displayParameters':
                                this.processDisplayParameters(data.params);
                                break;
                            case 'options':
                                Shumway.Settings.setSettings(data.settings);
                                break;
                            case 'timeline':
                                switch (data.request) {
                                    case 'AVM2':
                                        if (data.cmd === 'clear') {
                                            Shumway.AVM2.timelineBuffer.reset();
                                            break;
                                        }
                                        this._parent.postMessage({
                                            type: 'timelineResponse',
                                            request: data.request,
                                            timeline: Shumway.AVM2.timelineBuffer
                                        }, '*');
                                        break;
                                    case 'Player':
                                        if (data.cmd === 'clear') {
                                            Shumway.Player.timelineBuffer.reset();
                                            break;
                                        }
                                        this._parent.postMessage({
                                            type: 'timelineResponse',
                                            request: data.request,
                                            timeline: Shumway.Player.timelineBuffer
                                        }, '*');
                                        break;
                                    case 'SWF':
                                        if (data.cmd === 'clear') {
                                            Shumway.SWF.timelineBuffer.reset();
                                            break;
                                        }
                                        this._parent.postMessage({
                                            type: 'timelineResponse',
                                            request: data.request,
                                            timeline: Shumway.SWF.timelineBuffer
                                        }, '*');
                                        break;
                                }
                                break;
                        }
                    }
                };
                return WindowPlayer;
            })(Player);
            Window.WindowPlayer = WindowPlayer;
        })(Window = Player.Window || (Player.Window = {}));
    })(Player = Shumway.Player || (Shumway.Player = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var Player;
    (function (Player) {
        var Test;
        (function (Test) {
            var Player = Shumway.Player.Player;
            var DataBuffer = Shumway.ArrayUtilities.DataBuffer;
            var TestPlayer = (function (_super) {
                __extends(TestPlayer, _super);
                function TestPlayer() {
                    _super.call(this);
                    this._worker = Shumway.Player.Test.FakeSyncWorker.instance;
                    this._worker.addEventListener('message', this._onWorkerMessage.bind(this));
                    this._worker.addEventListener('syncmessage', this._onSyncWorkerMessage.bind(this));
                }
                TestPlayer.prototype.onSendUpdates = function (updates, assets, async) {
                    if (async === void 0) { async = true; }
                    var bytes = updates.getBytes();
                    var message = {
                        type: 'player',
                        updates: bytes,
                        assets: assets
                    };
                    var transferList = [bytes.buffer];
                    if (!async) {
                        var result = this._worker.postSyncMessage(message, transferList);
                        return DataBuffer.FromPlainObject(result);
                    }
                    this._worker.postMessage(message, transferList);
                    return null;
                };
                TestPlayer.prototype.onExternalCommand = function (command) {
                    this._worker.postSyncMessage({
                        type: 'external',
                        command: command
                    });
                };
                TestPlayer.prototype.onFSCommand = function (command, args) {
                    this._worker.postMessage({
                        type: 'fscommand',
                        command: command,
                        args: args
                    });
                };
                TestPlayer.prototype.onVideoControl = function (id, eventType, data) {
                    return this._worker.postSyncMessage({
                        type: 'videoControl',
                        id: id,
                        eventType: eventType,
                        data: data
                    });
                };
                TestPlayer.prototype.onFrameProcessed = function () {
                    this._worker.postMessage({
                        type: 'frame'
                    });
                };
                TestPlayer.prototype.registerFontOrImageImpl = function (symbol, data) {
                    var message = {
                        type: 'registerFontOrImage',
                        syncId: symbol.syncId,
                        symbolId: symbol.id,
                        assetType: data.type,
                        data: data,
                        resolve: symbol.resolveAssetPromise.resolve
                    };
                    return this._worker.postSyncMessage(message);
                };
                TestPlayer.prototype._onWorkerMessage = function (e) {
                    var data = e.data;
                    if (typeof data !== 'object' || data === null) {
                        return;
                    }
                    switch (data.type) {
                        case 'gfx':
                            var updates = DataBuffer.FromArrayBuffer(e.data.updates.buffer);
                            this.processUpdates(updates, e.data.assets);
                            break;
                        case 'externalCallback':
                            this.processExternalCallback(data.request);
                            e.handled = true;
                            return;
                        case 'videoPlayback':
                            this.processVideoEvent(data.id, data.eventType, data.data);
                            return;
                        case 'displayParameters':
                            this.processDisplayParameters(data.params);
                            break;
                    }
                };
                TestPlayer.prototype._onSyncWorkerMessage = function (e) {
                    return this._onWorkerMessage(e);
                };
                return TestPlayer;
            })(Player);
            Test.TestPlayer = TestPlayer;
        })(Test = Player.Test || (Player.Test = {}));
    })(Player = Shumway.Player || (Shumway.Player = {}));
})(Shumway || (Shumway = {}));
var Shumway;
(function (Shumway) {
    var Player;
    (function (Player) {
        var Test;
        (function (Test) {
            var FakeSyncWorker = (function () {
                function FakeSyncWorker() {
                    this._onmessageListeners = [];
                    this._onsyncmessageListeners = [];
                }
                Object.defineProperty(FakeSyncWorker, "instance", {
                    get: function () {
                        if (!FakeSyncWorker._singelton) {
                            FakeSyncWorker._singelton = new FakeSyncWorker();
                        }
                        return FakeSyncWorker._singelton;
                    },
                    enumerable: true,
                    configurable: true
                });
                FakeSyncWorker.prototype.addEventListener = function (type, listener, useCapture) {
                    release || Shumway.Debug.assert(type === 'syncmessage' || type === 'message');
                    if (type !== 'syncmessage') {
                        this._onmessageListeners.push(listener);
                    }
                    else {
                        this._onsyncmessageListeners.push(listener);
                    }
                };
                FakeSyncWorker.prototype.removeEventListener = function (type, listener, useCapture) {
                    if (type === 'syncmessage') {
                        var i = this._onsyncmessageListeners.indexOf(listener);
                        if (i >= 0) {
                            this._onsyncmessageListeners.splice(i, 1);
                        }
                        return;
                    }
                    var i = this._onmessageListeners.indexOf(listener);
                    if (i >= 0) {
                        this._onmessageListeners.splice(i, 1);
                    }
                };
                FakeSyncWorker.prototype.postMessage = function (message, ports) {
                    var result;
                    this._onmessageListeners.some(function (listener) {
                        var ev = { data: message, result: undefined, handled: false };
                        try {
                            if (typeof listener === 'function') {
                                listener(ev);
                            }
                            else {
                                listener.handleEvent(ev);
                            }
                            if (!ev.handled) {
                                return false;
                            }
                        }
                        catch (ex) {
                            Shumway.Debug.warning('Failure at postMessage: ' + ex.message);
                        }
                        result = ev.result;
                        return true;
                    });
                    return result;
                };
                FakeSyncWorker.prototype.postSyncMessage = function (message, ports) {
                    var result;
                    this._onsyncmessageListeners.some(function (listener) {
                        var ev = { data: message, result: undefined, handled: false };
                        try {
                            if (typeof listener === 'function') {
                                listener(ev);
                            }
                            else {
                                listener.handleEvent(ev);
                            }
                            if (!ev.handled) {
                                return false;
                            }
                        }
                        catch (ex) {
                            Shumway.Debug.warning('Failure at postSyncMessage: ' + ex.message);
                        }
                        result = ev.result;
                        return true;
                    });
                    return result;
                };
                FakeSyncWorker.WORKER_PATH = '../../src/player/fakechannel.js';
                return FakeSyncWorker;
            })();
            Test.FakeSyncWorker = FakeSyncWorker;
        })(Test = Player.Test || (Player.Test = {}));
    })(Player = Shumway.Player || (Shumway.Player = {}));
})(Shumway || (Shumway = {}));
//# sourceMappingURL=player.js.map
console.timeEnd("Load Player Dependencies");
